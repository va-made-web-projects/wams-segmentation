(self.webpackChunkapp=self.webpackChunkapp||[]).push([[3370],{3370:(ot,Ye,M)=>{"use strict";M.r(Ye),M.d(Ye,{ScanPagePageModule:()=>rY});var Oe={};M.r(Oe),M.d(Oe,{arraysEqual:()=>Xe,arraysEqualWithNull:()=>Sb,assert:()=>C,assertNonNegativeIntegerDimensions:()=>Gn,assertNonNull:()=>mo,assertShapesMatch:()=>cn,bytesFromStringArray:()=>Nb,bytesPerElement:()=>Ui,checkConversionForErrors:()=>Ib,clamp:()=>Fr,computeStrides:()=>Te,convertBackendValuesAndArrayBuffer:()=>_b,createScalarValue:()=>hr,createShuffledIndices:()=>UC,decodeString:()=>dr,distSquared:()=>BC,encodeString:()=>Vs,fetch:()=>cN,fingerPrint64:()=>Bb,flatten:()=>Ws,getArrayFromDType:()=>Ft,getTypedArrayFromDType:()=>sn,hasEncodingLoss:()=>zp,hexToLong:()=>Ql,indexToLoc:()=>xo,inferDtype:()=>bo,inferFromImplicitShape:()=>Mp,isBoolean:()=>kb,isFunction:()=>Or,isInt:()=>go,isNumber:()=>ac,isPromise:()=>Lr,isScalarShape:()=>VC,isString:()=>Bs,isTypedArray:()=>on,isValidDtype:()=>Cb,locToIndex:()=>Cs,makeOnesTypedArray:()=>lc,makeZerosNestedTypedArray:()=>Bp,makeZerosTypedArray:()=>hn,nearestDivisor:()=>ic,nearestLargerEven:()=>rc,now:()=>Nn,parseAxisParam:()=>Ue,randUniform:()=>zC,repeatedTry:()=>Pp,rightPad:()=>yo,shuffle:()=>Lp,shuffleCombo:()=>MC,sizeFromShape:()=>j,sizeToSquarishShape:()=>oc,squeezeShape:()=>cr,sum:()=>vb,swap:()=>ur,tanh:()=>WC,toNestedArray:()=>es,toTypedArray:()=>Mr});var Xt={};M.r(Xt),M.d(Xt,{assertTypesMatch:()=>Yb,getTensorsInContainer:()=>Kp,isTensorInList:()=>SN,makeTypesMatch:()=>Tt});var Fe={};M.r(Fe),M.d(Fe,{isBrowser:()=>Qp,isMobile:()=>Yp,mockIsMobile:()=>_N});var St={};M.r(St),M.d(St,{Serializable:()=>ko,SerializationMap:()=>rs,getRegisteredName:()=>Ek,registerClass:()=>ne});var We={};M.r(We),M.d(We,{assertAndGetBroadcastShape:()=>Le,getBroadcastDims:()=>_o,getReductionAxes:()=>jt});var Ee={};M.r(Ee),M.d(Ee,{CompositeArrayBuffer:()=>ks,browserFiles:()=>Wk,browserHTTPRequest:()=>qk,concatenateArrayBuffers:()=>ox,copyModel:()=>JN,decodeWeights:()=>sx,encodeWeights:()=>nf,fromMemory:()=>Xk,fromMemorySync:()=>Ex,getLoadHandlers:()=>BN,getModelArtifactsForJSON:()=>of,getModelArtifactsForJSONSync:()=>lx,getModelArtifactsInfoForJSON:()=>ru,getSaveHandlers:()=>cx,getWeightSpecs:()=>ux,http:()=>Af,isHTTPScheme:()=>$f,listModels:()=>YN,loadWeights:()=>Uk,moveModel:()=>ek,registerLoadRouter:()=>zN,registerSaveRouter:()=>MN,removeModel:()=>QN,weightsLoaderFactory:()=>Nx,withSaveHandler:()=>Zk,withSaveHandlerSync:()=>Yk});var Be={};M.r(Be),M.d(Be,{confusionMatrix:()=>oT});var xe={};M.r(xe),M.d(xe,{draw:()=>pT,fromPixels:()=>Dx,fromPixelsAsync:()=>cT,toPixels:()=>dT});var V={};M.r(V),M.d(V,{prepareAndValidate:()=>Eh});var le={};M.r(le),M.d(le,{calculateShapes:()=>Vr,validateInput:()=>$h,validateUpdateShape:()=>Lf});var pe={};M.r(pe),M.d(pe,{assertParamsValid:()=>Mf,computeFlatOffset:()=>Vf,computeOutShape:()=>zf,getNormalizedAxes:()=>gT,isSliceContinous:()=>Bf,maskToAxes:()=>mT,parseSliceParams:()=>Ah,sliceInfo:()=>Wf,startForAxis:()=>Bx,startIndicesWithElidedDims:()=>Px,stopForAxis:()=>Vx,stopIndicesWithElidedDims:()=>Mx,stridesForAxis:()=>zx,stridesWithElidedDims:()=>Fx});var J={};M.r(J),M.d(J,{TEST_EPSILON_FLOAT16:()=>Ux,createVideoElement:()=>NT,encodeStrings:()=>Gx,expectArrayBuffersEqual:()=>CT,expectArraysClose:()=>xT,expectArraysEqual:()=>vT,expectNumbersClose:()=>ST,expectPromiseToFail:()=>wT,expectValuesInRange:()=>IT,play:()=>kT,testEpsilon:()=>Uf});var ae={};M.r(ae),M.d(ae,{conv2d:()=>O0,depthwiseConv2d:()=>QE,matMul:()=>Jm});var ve={};M.r(ve),M.d(ve,{collectGatherOpShapeInfo:()=>kg,computeOutShape:()=>xw,segOpComputeOptimalWindowSize:()=>bw});var Ne={};M.r(Ne),M.d(Ne,{ERF_A1:()=>dg,ERF_A2:()=>pg,ERF_A3:()=>fg,ERF_A4:()=>mg,ERF_A5:()=>gg,ERF_P:()=>hg,PARALLELIZE_THRESHOLD:()=>ig,RowPartitionType:()=>Xs,SELU_SCALE:()=>fd,SELU_SCALEALPHA:()=>pd,applyActivation:()=>id,assertAndGetBroadcastShape:()=>Le,assertAxesAreInnerMostDims:()=>mn,assertParamsConsistent:()=>ag,assignToTypedArray:()=>nw,axesAreInnerMostDims:()=>vm,calculateShapes:()=>Vr,checkEinsumDimSizes:()=>vg,checkPadOnDimRoundingMode:()=>Tn,combineLocations:()=>e0,combineRaggedTensorToTensorShapes:()=>X0,complexWithEvenIndex:()=>ew,complexWithOddIndex:()=>tw,computeConv2DInfo:()=>an,computeConv3DInfo:()=>Ur,computeDefaultPad:()=>tm,computeDilation2DInfo:()=>iu,computeOptimalWindowSize:()=>dd,computeOutAndReduceShapes:()=>ln,computeOutShape:()=>Ks,computePool2DInfo:()=>gs,computePool3DInfo:()=>gr,convertConv2DDataFormat:()=>yr,decodeEinsumEquation:()=>xg,eitherStridesOrDilationsAreOne:()=>pn,expandShapeToKeepDim:()=>Mt,exponent:()=>rw,exponents:()=>sw,fromStringArrayToUint8:()=>ww,fromUint8ToStringArray:()=>Cr,getAxesPermutation:()=>Et,getBroadcastDims:()=>_o,getComplexWithIndex:()=>yg,getEinsumComputePath:()=>Sg,getEinsumPermutation:()=>wg,getFusedBiasGradient:()=>ad,getFusedDyActivation:()=>od,getImageCenter:()=>lg,getInnerMostAxes:()=>zt,getPermuted:()=>_u,getRaggedRank:()=>Y0,getReductionAxes:()=>jt,getReshaped:()=>Tu,getReshapedPermuted:()=>Eu,getRowPartitionTypesHelper:()=>Z0,getSliceBeginCoords:()=>ug,getSliceSize:()=>cg,getSparseFillEmptyRowsIndicesDenseShapeMismatch:()=>iw,getSparseFillEmptyRowsNegativeIndexErrorMessage:()=>lw,getSparseFillEmptyRowsOutOfRangeIndexErrorMessage:()=>uw,getSparseReshapeEmptyTensorZeroOutputDimErrorMessage:()=>dw,getSparseReshapeInputOutputMismatchErrorMessage:()=>fw,getSparseReshapeInputOutputMultipleErrorMessage:()=>pw,getSparseReshapeMultipleNegativeOneOutputDimErrorMessage:()=>cw,getSparseReshapeNegativeOutputDimErrorMessage:()=>hw,getSparseSegmentReductionIndicesOutOfRangeErrorMessage:()=>yw,getSparseSegmentReductionNegativeSegmentIdsErrorMessage:()=>Ng,getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage:()=>mw,getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage:()=>gw,getUndoAxesPermutation:()=>Hr,isIdentityPermutation:()=>Ig,log:()=>eN,mergeRealAndImagArrays:()=>Ir,prepareAndValidate:()=>Eh,prepareSplitSize:()=>Cg,segment_util:()=>ve,shouldFuse:()=>ld,slice_util:()=>pe,splitRealAndImagArrays:()=>J0,stridesOrDilationsArePositive:()=>Ao,tupleValuesAreOne:()=>Gr,upcastType:()=>Rn,validateDefaultValueShape:()=>Q0,validateInput:()=>$h,validateUpdateShape:()=>Lf,warn:()=>ts});var ut={};M.r(ut),M.d(ut,{nonMaxSuppressionV3Impl:()=>ud,nonMaxSuppressionV4Impl:()=>cd,nonMaxSuppressionV5Impl:()=>hd,whereImpl:()=>sd});var Wt={};M.r(Wt),M.d(Wt,{Abs:()=>Gi,Acos:()=>sa,Acosh:()=>ra,AdadeltaOptimizer:()=>vf,AdagradOptimizer:()=>Sf,AdamOptimizer:()=>If,AdamaxOptimizer:()=>Cf,Add:()=>wo,AddN:()=>Hi,All:()=>uc,Any:()=>cc,ArgMax:()=>ji,ArgMin:()=>qi,Asin:()=>oa,Asinh:()=>aa,Atan:()=>ia,Atan2:()=>ua,Atanh:()=>la,AvgPool:()=>Ki,AvgPool3D:()=>Xi,AvgPool3DGrad:()=>dc,AvgPoolGrad:()=>hc,BatchMatMul:()=>Zi,BatchToSpaceND:()=>Yi,Bincount:()=>pc,BitwiseAnd:()=>Qi,BroadcastArgs:()=>fc,BroadcastTo:()=>Rb,Cast:()=>ca,Ceil:()=>ha,ClipByValue:()=>da,Complex:()=>mc,ComplexAbs:()=>Ji,Concat:()=>el,Conv2D:()=>tl,Conv2DBackpropFilter:()=>gc,Conv2DBackpropInput:()=>nl,Conv3D:()=>sl,Conv3DBackpropFilterV2:()=>yc,Conv3DBackpropInputV2:()=>bc,Cos:()=>pa,Cosh:()=>fa,CropAndResize:()=>wc,Cumprod:()=>xc,Cumsum:()=>rl,DataStorage:()=>Op,DenseBincount:()=>vc,DepthToSpace:()=>Sc,DepthwiseConv2dNative:()=>ol,DepthwiseConv2dNativeBackpropFilter:()=>Ic,DepthwiseConv2dNativeBackpropInput:()=>Cc,Diag:()=>Nc,Dilation2D:()=>al,Dilation2DBackpropFilter:()=>Tc,Dilation2DBackpropInput:()=>kc,Draw:()=>_c,ENV:()=>Vp,Einsum:()=>Ec,Elu:()=>ga,EluGrad:()=>$c,Environment:()=>$b,Equal:()=>il,Erf:()=>ya,Exp:()=>ba,ExpandDims:()=>ll,Expm1:()=>xa,FFT:()=>Ac,Fill:()=>Rc,FlipLeftRight:()=>Dc,Floor:()=>wa,FloorDiv:()=>va,FromPixels:()=>mh,FusedBatchNorm:()=>ul,FusedConv2D:()=>Kl,FusedDepthwiseConv2D:()=>Xl,GatherNd:()=>Fc,GatherV2:()=>cl,Greater:()=>hl,GreaterEqual:()=>Sa,IFFT:()=>Oc,Identity:()=>Ia,Imag:()=>Lc,IsFinite:()=>Ca,IsInf:()=>Na,IsNan:()=>ka,KernelBackend:()=>sc,LRN:()=>bl,LRNGrad:()=>Mc,LeakyRelu:()=>dl,Less:()=>pl,LessEqual:()=>fl,LinSpace:()=>Pc,Log:()=>Ta,Log1p:()=>_a,LogSoftmax:()=>Db,LogicalAnd:()=>ml,LogicalNot:()=>gl,LogicalOr:()=>yl,LogicalXor:()=>XC,LowerBound:()=>ZC,MatrixBandPart:()=>YC,Max:()=>xl,MaxPool:()=>wl,MaxPool3D:()=>vl,MaxPool3DGrad:()=>Bc,MaxPoolGrad:()=>zc,MaxPoolWithArgmax:()=>Vc,Maximum:()=>Ea,Mean:()=>Sl,Min:()=>Il,Minimum:()=>$a,MirrorPad:()=>Cl,Mod:()=>Aa,MomentumOptimizer:()=>Nf,Multinomial:()=>Wc,Multiply:()=>Ra,Neg:()=>Nl,NonMaxSuppressionV3:()=>Uc,NonMaxSuppressionV4:()=>Gc,NonMaxSuppressionV5:()=>Hc,NotEqual:()=>kl,OP_SCOPE_SUFFIX:()=>Jp,OneHot:()=>_l,OnesLike:()=>Tl,Optimizer:()=>fr,OptimizerConstructors:()=>jx,Pack:()=>El,PadV2:()=>$l,Pool:()=>QC,Pow:()=>Da,Prelu:()=>Al,Prod:()=>Rl,RMSPropOptimizer:()=>kf,RaggedGather:()=>jc,RaggedRange:()=>qc,RaggedTensorToTensor:()=>Kc,Range:()=>Xc,Rank:()=>Gb,Real:()=>Zc,RealDiv:()=>ma,Reciprocal:()=>Fa,Reduction:()=>zn,Relu:()=>Oa,Relu6:()=>La,Reshape:()=>Dl,ResizeBilinear:()=>Ol,ResizeBilinearGrad:()=>Qc,ResizeNearestNeighbor:()=>Fl,ResizeNearestNeighborGrad:()=>Yc,Reverse:()=>Ll,RotateWithOffset:()=>gh,Round:()=>Pa,Rsqrt:()=>Ma,SGDOptimizer:()=>_h,ScatterNd:()=>Jc,SearchSorted:()=>th,Select:()=>Pl,Selu:()=>za,Sigmoid:()=>Ua,Sign:()=>Wa,Sin:()=>Ba,Sinh:()=>Va,Slice:()=>Ml,Softmax:()=>Wl,Softplus:()=>Ga,SpaceToBatchND:()=>Bl,SparseFillEmptyRows:()=>nh,SparseReshape:()=>sh,SparseSegmentMean:()=>rh,SparseSegmentSum:()=>oh,SparseToDense:()=>ah,SplitV:()=>Vl,Sqrt:()=>Ha,Square:()=>ih,SquaredDifference:()=>ja,StaticRegexReplace:()=>Ul,Step:()=>Ya,StridedSlice:()=>lh,StringNGrams:()=>uh,StringSplit:()=>ch,StringToHashBucketFast:()=>hh,Sub:()=>qa,Sum:()=>zl,Tan:()=>Ka,Tanh:()=>Xa,Tensor:()=>st,TensorBuffer:()=>Gt,TensorScatterUpdate:()=>eh,Tile:()=>Za,TopK:()=>dh,Transform:()=>ph,Transpose:()=>vo,Unique:()=>fh,Unpack:()=>Gl,UnsortedSegmentSum:()=>Hl,UpperBound:()=>JC,Variable:()=>nu,ZerosLike:()=>jl,_FusedMatMul:()=>ql,abs:()=>Ht,acos:()=>qf,acosh:()=>Kf,add:()=>ee,addN:()=>qx,all:()=>Rh,any:()=>au,argMax:()=>Wr,argMin:()=>Xf,asin:()=>Zf,asinh:()=>Yf,atan:()=>Qf,atan2:()=>Jf,atanh:()=>em,avgPool:()=>cu,avgPool3d:()=>sm,backend:()=>xf,backend_util:()=>Ne,basicLSTMCell:()=>Kx,batchNorm:()=>ai,batchNorm2d:()=>rm,batchNorm3d:()=>om,batchNorm4d:()=>am,batchToSpaceND:()=>hu,bincount:()=>im,bitwiseAnd:()=>Xx,booleanMaskAsync:()=>E0,broadcastArgs:()=>Zx,broadcastTo:()=>Do,broadcast_util:()=>We,browser:()=>xe,buffer:()=>Me,cast:()=>ue,ceil:()=>lm,clipByValue:()=>Fn,clone:()=>Hs,complex:()=>pr,concat:()=>Pt,concat1d:()=>um,concat2d:()=>cm,concat3d:()=>hm,concat4d:()=>dm,conv1d:()=>Dh,conv2d:()=>br,conv2dTranspose:()=>Fh,conv3d:()=>fm,conv3dTranspose:()=>mm,copyRegisteredKernels:()=>sN,cos:()=>du,cosh:()=>Oh,cosineWindow:()=>rd,cumprod:()=>pu,cumsum:()=>Lh,customGrad:()=>js,denseBincount:()=>Ph,deprecationWarn:()=>bx,depthToSpace:()=>gm,depthwiseConv2d:()=>ii,device_util:()=>Fe,diag:()=>Qx,dilation2d:()=>ym,disableDeprecationWarnings:()=>lk,dispose:()=>Ge,disposeVariables:()=>uk,div:()=>ke,divNoNan:()=>bm,dot:()=>xm,dropout:()=>Xm,einsum:()=>Fo,elu:()=>li,enableDebugMode:()=>ik,enableProdMode:()=>ak,enclosingPowerOfTwo:()=>Zm,engine:()=>ss,ensureShape:()=>Jx,env:()=>z,equal:()=>Hn,erf:()=>wm,euclideanNorm:()=>Sm,exp:()=>On,expandDims:()=>qt,expm1:()=>Im,eye:()=>Mh,fft:()=>Nu,fill:()=>To,findBackend:()=>fk,findBackendFactory:()=>mk,floor:()=>hi,floorDiv:()=>kh,fused:()=>ae,gather:()=>di,gatherND:()=>D0,gather_util:()=>V,getBackend:()=>wx,getGradient:()=>Gp,getKernel:()=>Yl,getKernelsForBackend:()=>yh,grad:()=>Ck,grads:()=>Nk,greater:()=>_n,greaterEqual:()=>xr,ifft:()=>mi,imag:()=>ou,image:()=>Xn,inTopKAsync:()=>F0,io:()=>Ee,irfft:()=>Jh,isFinite:()=>Cm,isInf:()=>Nm,isNaN:()=>km,keep:()=>Yt,kernel_impls:()=>ut,leakyRelu:()=>fu,less:()=>pi,lessEqual:()=>jr,linalg:()=>rg,linspace:()=>n0,localResponseNormalization:()=>Tm,log:()=>jn,log1p:()=>mu,logSigmoid:()=>_m,logSoftmax:()=>zh,logSumExp:()=>gu,logicalAnd:()=>Ts,logicalNot:()=>yu,logicalOr:()=>Bh,logicalXor:()=>Em,losses:()=>j0,lowerBound:()=>s0,matMul:()=>ze,math:()=>Be,max:()=>as,maxPool:()=>bu,maxPool3d:()=>$m,maxPoolWithArgmax:()=>r0,maximum:()=>qs,mean:()=>$t,memory:()=>Nh,meshgrid:()=>o0,min:()=>ui,minimum:()=>qr,mirrorPad:()=>Am,mod:()=>Rm,moments:()=>xu,movingAverage:()=>$0,mul:()=>D,multiRNNCell:()=>a0,multinomial:()=>i0,neg:()=>bt,nextFrame:()=>og,norm:()=>ci,notEqual:()=>Lo,oneHot:()=>Eo,ones:()=>Ln,onesLike:()=>qn,op:()=>R,outerProduct:()=>l0,pad:()=>wr,pad1d:()=>u0,pad2d:()=>c0,pad3d:()=>Dm,pad4d:()=>h0,pool:()=>Fm,pow:()=>mr,prelu:()=>vu,print:()=>yf,prod:()=>Om,profile:()=>ck,raggedGather:()=>d0,raggedRange:()=>p0,raggedTensorToTensor:()=>f0,rand:()=>m0,randomGamma:()=>g0,randomNormal:()=>Gh,randomStandardNormal:()=>y0,randomUniform:()=>Kr,randomUniformInt:()=>b0,range:()=>vr,ready:()=>dk,real:()=>ri,reciprocal:()=>Mm,registerBackend:()=>bf,registerGradient:()=>Fb,registerKernel:()=>bh,relu:()=>_s,relu6:()=>Hh,removeBackend:()=>pk,reshape:()=>F,reverse:()=>ls,reverse1d:()=>x0,reverse2d:()=>w0,reverse3d:()=>v0,reverse4d:()=>S0,rfft:()=>ku,round:()=>jh,rsqrt:()=>qh,scalar:()=>Ce,scatterND:()=>A0,scatter_util:()=>le,searchSorted:()=>Wh,selu:()=>Kh,separableConv2d:()=>Xh,serialization:()=>St,setBackend:()=>xx,setPlatform:()=>gk,setdiff1dAsync:()=>I0,sigmoid:()=>os,sign:()=>Bm,signal:()=>H0,sin:()=>Zh,sinh:()=>Yh,slice:()=>Je,slice1d:()=>Su,slice2d:()=>Qh,slice3d:()=>Iu,slice4d:()=>fi,slice_util:()=>pe,softmax:()=>Cu,softplus:()=>Oo,spaceToBatchND:()=>wu,sparse:()=>q0,sparseToDense:()=>R0,spectral:()=>G0,split:()=>Pn,sqrt:()=>dn,square:()=>dt,squaredDifference:()=>ed,squeeze:()=>Kn,stack:()=>Mn,step:()=>Po,stridedSlice:()=>Vm,string:()=>K0,sub:()=>ye,sum:()=>we,sumOutType:()=>vh,tan:()=>Wm,tanh:()=>Ro,tensor:()=>ns,tensor1d:()=>wn,tensor2d:()=>gi,tensor3d:()=>Df,tensor4d:()=>C0,tensor5d:()=>N0,tensor6d:()=>k0,tensorScatterUpdate:()=>T0,tensor_util:()=>Xt,test_util:()=>J,tidy:()=>P,tile:()=>is,time:()=>hk,topk:()=>Um,train:()=>Mo,transpose:()=>Ze,truncatedNormal:()=>td,unique:()=>Gm,unregisterGradient:()=>nN,unregisterKernel:()=>tN,unsortedSegmentSum:()=>nd,unstack:()=>us,upcastType:()=>Rn,upperBound:()=>_0,util:()=>Oe,valueAndGrad:()=>kk,valueAndGrads:()=>Tk,variable:()=>Hm,variableGrads:()=>vx,version_core:()=>Hx,where:()=>fn,whereAsync:()=>qm,zeros:()=>Kt,zerosLike:()=>Qe});var Ut={};M.r(Ut),M.d(Ut,{json:()=>AA});var ms={};M.r(ms),M.d(ms,{json:()=>RA});var Jn={};M.r(Jn),M.d(Jn,{json:()=>DA});var et={};M.r(et),M.d(et,{json:()=>FA});var at={};M.r(at),M.d(at,{json:()=>OA});var it={};M.r(it),M.d(it,{json:()=>LA});var re={};M.r(re),M.d(re,{json:()=>PA});var Q={};M.r(Q),M.d(Q,{json:()=>MA});var A={};M.r(A),M.d(A,{json:()=>zA});var me={};M.r(me),M.d(me,{json:()=>BA});var Re={};M.r(Re),M.d(Re,{json:()=>VA});var tt={};M.r(tt),M.d(tt,{json:()=>WA});var je={};M.r(je),M.d(je,{json:()=>UA});var lt={};M.r(lt),M.d(lt,{json:()=>GA});var Dt={};M.r(Dt),M.d(Dt,{json:()=>HA});var Lt={};M.r(Lt),M.d(Lt,{json:()=>jA});var Zt={};M.r(Zt),M.d(Zt,{json:()=>qA});var kt={};M.r(kt),M.d(kt,{json:()=>KA});var In={};M.r(In),M.d(In,{json:()=>XA});var Ke={};M.r(Ke),M.d(Ke,{OP_SCOPE_SUFFIX:()=>Jp,abs:()=>Ht,acos:()=>qf,acosh:()=>Kf,add:()=>ee,addN:()=>qx,all:()=>Rh,any:()=>au,argMax:()=>Wr,argMin:()=>Xf,asin:()=>Zf,asinh:()=>Yf,atan:()=>Qf,atan2:()=>Jf,atanh:()=>em,avgPool:()=>cu,avgPool3d:()=>sm,basicLSTMCell:()=>Kx,batchNorm:()=>ai,batchNorm2d:()=>rm,batchNorm3d:()=>om,batchNorm4d:()=>am,batchToSpaceND:()=>hu,bincount:()=>im,bitwiseAnd:()=>Xx,booleanMaskAsync:()=>E0,broadcastArgs:()=>Zx,broadcastTo:()=>Do,buffer:()=>Me,cast:()=>ue,ceil:()=>lm,clipByValue:()=>Fn,clone:()=>Hs,complex:()=>pr,concat:()=>Pt,concat1d:()=>um,concat2d:()=>cm,concat3d:()=>hm,concat4d:()=>dm,conv1d:()=>Dh,conv2d:()=>br,conv2dTranspose:()=>Fh,conv3d:()=>fm,conv3dTranspose:()=>mm,cos:()=>du,cosh:()=>Oh,cosineWindow:()=>rd,cumprod:()=>pu,cumsum:()=>Lh,denseBincount:()=>Ph,depthToSpace:()=>gm,depthwiseConv2d:()=>ii,diag:()=>Qx,dilation2d:()=>ym,div:()=>ke,divNoNan:()=>bm,dot:()=>xm,dropout:()=>Xm,einsum:()=>Fo,elu:()=>li,enclosingPowerOfTwo:()=>Zm,ensureShape:()=>Jx,equal:()=>Hn,erf:()=>wm,euclideanNorm:()=>Sm,exp:()=>On,expandDims:()=>qt,expm1:()=>Im,eye:()=>Mh,fft:()=>Nu,fill:()=>To,floor:()=>hi,floorDiv:()=>kh,fused:()=>ae,gather:()=>di,gatherND:()=>D0,greater:()=>_n,greaterEqual:()=>xr,ifft:()=>mi,imag:()=>ou,image:()=>Xn,inTopKAsync:()=>F0,irfft:()=>Jh,isFinite:()=>Cm,isInf:()=>Nm,isNaN:()=>km,leakyRelu:()=>fu,less:()=>pi,lessEqual:()=>jr,linalg:()=>rg,linspace:()=>n0,localResponseNormalization:()=>Tm,log:()=>jn,log1p:()=>mu,logSigmoid:()=>_m,logSoftmax:()=>zh,logSumExp:()=>gu,logicalAnd:()=>Ts,logicalNot:()=>yu,logicalOr:()=>Bh,logicalXor:()=>Em,losses:()=>j0,lowerBound:()=>s0,matMul:()=>ze,max:()=>as,maxPool:()=>bu,maxPool3d:()=>$m,maxPoolWithArgmax:()=>r0,maximum:()=>qs,mean:()=>$t,meshgrid:()=>o0,min:()=>ui,minimum:()=>qr,mirrorPad:()=>Am,mod:()=>Rm,moments:()=>xu,movingAverage:()=>$0,mul:()=>D,multiRNNCell:()=>a0,multinomial:()=>i0,neg:()=>bt,norm:()=>ci,notEqual:()=>Lo,oneHot:()=>Eo,ones:()=>Ln,onesLike:()=>qn,op:()=>R,outerProduct:()=>l0,pad:()=>wr,pad1d:()=>u0,pad2d:()=>c0,pad3d:()=>Dm,pad4d:()=>h0,pool:()=>Fm,pow:()=>mr,prelu:()=>vu,print:()=>yf,prod:()=>Om,raggedGather:()=>d0,raggedRange:()=>p0,raggedTensorToTensor:()=>f0,rand:()=>m0,randomGamma:()=>g0,randomNormal:()=>Gh,randomStandardNormal:()=>y0,randomUniform:()=>Kr,randomUniformInt:()=>b0,range:()=>vr,real:()=>ri,reciprocal:()=>Mm,relu:()=>_s,relu6:()=>Hh,reshape:()=>F,reverse:()=>ls,reverse1d:()=>x0,reverse2d:()=>w0,reverse3d:()=>v0,reverse4d:()=>S0,rfft:()=>ku,round:()=>jh,rsqrt:()=>qh,scalar:()=>Ce,scatterND:()=>A0,searchSorted:()=>Wh,selu:()=>Kh,separableConv2d:()=>Xh,setdiff1dAsync:()=>I0,sigmoid:()=>os,sign:()=>Bm,signal:()=>H0,sin:()=>Zh,sinh:()=>Yh,slice:()=>Je,slice1d:()=>Su,slice2d:()=>Qh,slice3d:()=>Iu,slice4d:()=>fi,softmax:()=>Cu,softplus:()=>Oo,spaceToBatchND:()=>wu,sparse:()=>q0,sparseToDense:()=>R0,spectral:()=>G0,split:()=>Pn,sqrt:()=>dn,square:()=>dt,squaredDifference:()=>ed,squeeze:()=>Kn,stack:()=>Mn,step:()=>Po,stridedSlice:()=>Vm,string:()=>K0,sub:()=>ye,sum:()=>we,tan:()=>Wm,tanh:()=>Ro,tensor:()=>ns,tensor1d:()=>wn,tensor2d:()=>gi,tensor3d:()=>Df,tensor4d:()=>C0,tensor5d:()=>N0,tensor6d:()=>k0,tensorScatterUpdate:()=>T0,tile:()=>is,topk:()=>Um,transpose:()=>Ze,truncatedNormal:()=>td,unique:()=>Gm,unsortedSegmentSum:()=>nd,unstack:()=>us,upperBound:()=>_0,variable:()=>Hm,where:()=>fn,whereAsync:()=>qm,zeros:()=>Kt,zerosLike:()=>Qe});var xn={};M.r(xn),M.d(xn,{addImpl:()=>lS,bincountImpl:()=>jy,bincountReduceImpl:()=>fS,bitwiseAndImpl:()=>mS,castImpl:()=>iS,ceilImpl:()=>gS,concatImpl:()=>yS,equalImpl:()=>wS,expImpl:()=>SS,expm1Impl:()=>CS,floorImpl:()=>TS,gatherNdImpl:()=>_S,gatherV2Impl:()=>ES,greaterEqualImpl:()=>AS,greaterImpl:()=>$S,lessEqualImpl:()=>DS,lessImpl:()=>RS,linSpaceImpl:()=>FS,logImpl:()=>OS,maxImpl:()=>LS,maximumImpl:()=>MS,minimumImpl:()=>zS,multiplyImpl:()=>qy,negImpl:()=>VS,notEqualImpl:()=>WS,prodImpl:()=>jS,raggedGatherImpl:()=>KS,raggedRangeImpl:()=>ZS,raggedTensorToTensorImpl:()=>JS,rangeImpl:()=>eI,rsqrtImpl:()=>tI,scatterImpl:()=>Xo,sigmoidImpl:()=>C3,simpleAbsImpl:()=>cS,sliceImpl:()=>pS,sparseFillEmptyRowsImpl:()=>sI,sparseReshapeImpl:()=>rI,sparseSegmentReductionImpl:()=>Jy,sqrtImpl:()=>YW,staticRegexReplaceImpl:()=>oI,stridedSliceImpl:()=>aI,stringNGramsImpl:()=>iI,stringSplitImpl:()=>lI,stringToHashBucketFastImpl:()=>uI,subImpl:()=>NS,tileImpl:()=>cI,topKImpl:()=>dI,transposeImpl:()=>Gy,uniqueImpl:()=>fI});var lr=M(6814),OC=M(95),Dr=M(6761),wb=M(6958),te=M(6689),Y=M(5861);class Op{constructor(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap,this.dataIdsCount=0}get(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)}set(t,e){this.dataIdsCount++,this.data.set(t,e)}has(t){return this.data.has(t)}delete(t){return this.dataIdsCount--,this.data.delete(t)}numDataIds(){return this.dataIdsCount}}class sc{refCount(t){return Un("refCount")}incRef(t){return Un("incRef")}timerAvailable(){return!0}time(t){return Un("time")}read(t){return Un("read")}readSync(t){return Un("readSync")}readToGPU(t,e){return Un("readToGPU")}numDataIds(){return Un("numDataIds")}disposeData(t,e){return Un("disposeData")}write(t,e,s){return Un("write")}move(t,e,s,r,o){return Un("move")}createTensorFromGPUData(t,e,s){return Un("createTensorFromGPUData")}memory(){return Un("memory")}floatPrecision(){return Un("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return Un("dispose")}}function Un(n){throw new Error(`'${n}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function Lp(n){let t=n.length,e=0;for(;t>0;)e=Math.random()*t|0,t--,ur(n,t,e)}function MC(n,t){if(n.length!==t.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${n.length}Second array length was ${t.length}`);let e=n.length,s=0;for(;e>0;)s=Math.random()*e|0,e--,ur(n,e,s),ur(t,e,s)}function Fr(n,t,e){return Math.max(n,Math.min(t,e))}function rc(n){return n%2==0?n:n+1}function ur(n,t,e){const s=n[t];n[t]=n[e],n[e]=s}function vb(n){let t=0;for(let e=0;e<n.length;e++)t+=n[e];return t}function zC(n,t){const e=Math.random();return t*e+(1-e)*n}function BC(n,t){let e=0;for(let s=0;s<n.length;s++){const r=Number(n[s])-Number(t[s]);e+=r*r}return e}function C(n,t){if(!n)throw new Error("string"==typeof t?t:t())}function cn(n,t,e=""){C(Xe(n,t),()=>e+` Shapes ${n} and ${t} must match`)}function mo(n){C(null!=n,()=>"The input to the tensor constructor must be a non-null value.")}function j(n){if(0===n.length)return 1;let t=n[0];for(let e=1;e<n.length;e++)t*=n[e];return t}function VC(n){return 0===n.length}function Sb(n,t){if(n===t)return!0;if(null==n||null==t||n.length!==t.length)return!1;for(let e=0;e<n.length;e++)if(null!==n[e]&&null!==t[e]&&n[e]!==t[e])return!1;return!0}function Xe(n,t){if(n===t)return!0;if(null==n||null==t||n.length!==t.length)return!1;for(let e=0;e<n.length;e++)if(n[e]!==t[e])return!1;return!0}function go(n){return n%1==0}function WC(n){if(null!=Math.tanh)return Math.tanh(n);if(n===1/0)return 1;if(n===-1/0)return-1;{const t=Math.exp(2*n);return(t-1)/(t+1)}}function oc(n){const t=Math.ceil(Math.sqrt(n));return[t,Math.ceil(n/t)]}function UC(n){const t=new Uint32Array(n);for(let e=0;e<n;++e)t[e]=e;return Lp(t),t}function yo(n,t){return t<=n.length?n:n+" ".repeat(t-n.length)}function Pp(n,t=(r=>0),e,s){return new Promise((r,o)=>{let a=0;const i=()=>{if(n())return void r();a++;const l=t(a);null!=e&&a>=e?o():null!=s?s(i,l):setTimeout(i,l)};i()})}function Mp(n,t){let e=1,s=-1;for(let o=0;o<n.length;++o)if(n[o]>=0)e*=n[o];else if(-1===n[o]){if(-1!==s)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${o}`);s=o}else if(n[o]<0)throw Error(`Shapes can not be < 0. Found ${n[o]} at dim ${o}`);if(-1===s){if(t>0&&t!==e)throw Error(`Size(${t}) must match the product of shape ${n}`);return n}if(0===e)throw Error(`Cannot infer the missing size in [${n}] when there are 0 elements`);if(t%e!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${e}`);const r=n.slice();return r[s]=t/e,r}function Ue(n,t){const e=t.length;return C((n=null==n?t.map((s,r)=>r):[].concat(n)).every(s=>s>=-e&&s<e),()=>`All values in axis param must be in range [-${e}, ${e}) but got axis ${n}`),C(n.every(s=>go(s)),()=>`All values in axis param must be integers but got axis ${n}`),n.map(s=>s<0?e+s:s)}function cr(n,t){const e=[],s=[],r=null!=t&&Array.isArray(t)&&0===t.length,o=null==t||r?null:Ue(t,n).sort();let a=0;for(let i=0;i<n.length;++i){if(null!=o){if(o[a]===i&&1!==n[i])throw new Error(`Can't squeeze axis ${i} since its dim '${n[i]}' is not 1`);(null==o[a]||o[a]>i)&&1===n[i]&&(e.push(n[i]),s.push(i)),o[a]<=i&&a++}1!==n[i]&&(e.push(n[i]),s.push(i))}return{newShape:e,keptDims:s}}function sn(n,t){return Ft(n,t)}function Ft(n,t){let e=null;if(null==n||"float32"===n)e=new Float32Array(t);else if("int32"===n)e=new Int32Array(t);else if("bool"===n)e=new Uint8Array(t);else{if("string"!==n)throw new Error(`Unknown data type ${n}`);e=new Array(t)}return e}function Ib(n,t){for(let e=0;e<n.length;e++){const s=n[e];if(isNaN(s)||!isFinite(s))throw Error(`A tensor of type ${t} being uploaded contains ${s}.`)}}function Cb(n){return"bool"===n||"complex64"===n||"float32"===n||"int32"===n||"string"===n}function zp(n,t){return!("complex64"===t||"float32"===t&&"complex64"!==n||"int32"===t&&"float32"!==n&&"complex64"!==n||"bool"===t&&"bool"===n)}function Ui(n){if("float32"===n||"int32"===n)return 4;if("complex64"===n)return 8;if("bool"===n)return 1;throw new Error(`Unknown dtype ${n}`)}function Nb(n){if(null==n)return 0;let t=0;return n.forEach(e=>t+=e.length),t}function Bs(n){return"string"==typeof n||n instanceof String}function kb(n){return"boolean"==typeof n}function ac(n){return"number"==typeof n}function bo(n){return Array.isArray(n)?bo(n[0]):n instanceof Float32Array?"float32":n instanceof Int32Array||n instanceof Uint8Array||n instanceof Uint8ClampedArray?"int32":ac(n)?"float32":Bs(n)?"string":kb(n)?"bool":"float32"}function Or(n){return!!(n&&n.constructor&&n.call&&n.apply)}function ic(n,t){for(let e=t;e<n;++e)if(n%e==0)return e;return n}function Te(n){const t=n.length;if(t<2)return[];const e=new Array(t-1);e[t-2]=n[t-1];for(let s=t-3;s>=0;--s)e[s]=e[s+1]*n[s+1];return e}function Tb(n,t,e,s=!1){const r=new Array;if(1===t.length){const o=t[0]*(s?2:1);for(let a=0;a<o;a++)r[a]=e[n+a]}else{const o=t[0],a=t.slice(1),i=a.reduce((l,u)=>l*u)*(s?2:1);for(let l=0;l<o;l++)r[l]=Tb(n+l*i,a,e,s)}return r}function es(n,t,e=!1){if(0===n.length)return t[0];const s=n.reduce((r,o)=>r*o)*(e?2:1);if(0===s)return[];if(s!==t.length)throw new Error(`[${n}] does not match the input size ${t.length}${e?" for a complex tensor":""}.`);return Tb(0,n,t,e)}function _b(n,t){if(Array.isArray(n))return n;if("float32"===t)return n instanceof Float32Array?n:new Float32Array(n);if("int32"===t)return n instanceof Int32Array?n:new Int32Array(n);if("bool"===t||"string"===t)return Uint8Array.from(new Int32Array(n));throw new Error(`Unknown dtype ${t}`)}function lc(n,t){const e=hn(n,t);for(let s=0;s<e.length;s++)e[s]=1;return e}function hn(n,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(n);if("int32"===t)return new Int32Array(n);if("bool"===t)return new Uint8Array(n);throw new Error(`Unknown data type ${t}`)}function Bp(n,t){const e=n.reduce((s,r)=>s*r,1);if(null==t||"float32"===t)return es(n,new Float32Array(e));if("int32"===t)return es(n,new Int32Array(e));if("bool"===t)return es(n,new Uint8Array(e));throw new Error(`Unknown data type ${t}`)}function Gn(n){n.forEach(t=>{C(Number.isInteger(t)&&t>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${n}].`)})}function Cs(n,t,e){if(0===t)return 0;if(1===t)return n[0];let s=n[n.length-1];for(let r=0;r<n.length-1;++r)s+=e[r]*n[r];return s}function xo(n,t,e){if(0===t)return[];if(1===t)return[n];const s=new Array(t);for(let r=0;r<s.length-1;++r)s[r]=Math.floor(n/e[r]),n-=s[r]*e[r];return s[s.length-1]=n,s}function Lr(n){return n&&n.then&&"function"==typeof n.then}const Eb="tfjsflags";class $b{constructor(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=GC,this.populateURLFlags()}setPlatform(t,e){null!=this.platform&&(z().getBool("IS_TEST")||z().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${t}.`)),this.platformName=t,this.platform=e}registerFlag(t,e,s){if(this.flagRegistry[t]={evaluationFn:e,setHook:s},null!=this.urlFlags[t]){const r=this.urlFlags[t];z().getBool("IS_TEST")||z().getBool("PROD")||console.warn(`Setting feature override from URL ${t}: ${r}.`),this.set(t,r)}}getAsync(t){var e=this;return(0,Y.Z)(function*(){return t in e.flags||(e.flags[t]=yield e.evaluateFlag(t)),e.flags[t]})()}get(t){if(t in this.flags)return this.flags[t];const e=this.evaluateFlag(t);if(Lr(e))throw new Error(`Flag ${t} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[t]=e,this.flags[t]}getNumber(t){return this.get(t)}getBool(t){return this.get(t)}getString(t){return this.get(t)}getFlags(){return this.flags}get features(){return this.flags}set(t,e){if(null==this.flagRegistry[t])throw new Error(`Cannot set flag ${t} as it has not been registered.`);this.flags[t]=e,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(e)}evaluateFlag(t){if(null==this.flagRegistry[t])throw new Error(`Cannot evaluate flag '${t}': no evaluation function found.`);return this.flagRegistry[t].evaluationFn()}setFlags(t){this.flags=Object.assign({},t)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(typeof this.global>"u"||typeof this.global.location>"u"||typeof this.global.location.search>"u")return;const t=this.getQueryParams(this.global.location.search);Eb in t&&t[Eb].split(",").forEach(s=>{const[r,o]=s.split(":");this.urlFlags[r]=function jC(n,t){const e=t.toLowerCase();return"true"===e||"false"===e?"true"===e:""+ +e===e?+e:t}(0,o)})}}function GC(n){const t={};return n.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(e,...s)=>(function HC(n,t,e){n[decodeURIComponent(t)]=decodeURIComponent(e||"")}(t,s[0],s[1]),s.join("="))),t}function z(){return Vp}let Wp,Vp=null;function Ab(){if(null==Wp){let n;if(typeof window<"u")n=window;else if(typeof global<"u")n=global;else if(typeof process<"u")n=process;else{if(!(typeof self<"u"))throw new Error("Could not find a global object");n=self}Wp=n}return Wp}function Up(n,t){const e=function KC(){const n=Ab();return null==n._tfGlobals&&(n._tfGlobals=new Map),n._tfGlobals}();if(e.has(n))return e.get(n);{const s=t();return e.set(n,s),e.get(n)}}const Gi="Abs",sa="Acos",ra="Acosh",wo="Add",Hi="AddN",uc="All",cc="Any",ji="ArgMax",qi="ArgMin",oa="Asin",aa="Asinh",ia="Atan",la="Atanh",ua="Atan2",Ki="AvgPool",hc="AvgPoolGrad",Xi="AvgPool3D",dc="AvgPool3DGrad",Zi="BatchMatMul",Yi="BatchToSpaceND",pc="Bincount",Qi="BitwiseAnd",Rb="BroadcastTo",fc="BroadcastArgs",ca="Cast",ha="Ceil",da="ClipByValue",mc="Complex",Ji="ComplexAbs",el="Concat",tl="Conv2D",gc="Conv2DBackpropFilter",nl="Conv2DBackpropInput",sl="Conv3D",yc="Conv3DBackpropFilterV2",bc="Conv3DBackpropInputV2",pa="Cos",fa="Cosh",xc="Cumprod",rl="Cumsum",wc="CropAndResize",vc="DenseBincount",Sc="DepthToSpace",ol="DepthwiseConv2dNative",Ic="DepthwiseConv2dNativeBackpropFilter",Cc="DepthwiseConv2dNativeBackpropInput",Nc="Diag",al="Dilation2D",kc="Dilation2DBackpropInput",Tc="Dilation2DBackpropFilter",_c="Draw",ma="RealDiv",Ec="Einsum",ga="Elu",$c="EluGrad",ya="Erf",il="Equal",ba="Exp",ll="ExpandDims",xa="Expm1",Ac="FFT",Rc="Fill",Dc="FlipLeftRight",wa="Floor",va="FloorDiv",ul="FusedBatchNorm",cl="GatherV2",Fc="GatherNd",hl="Greater",Sa="GreaterEqual",Ia="Identity",Oc="IFFT",Lc="Imag",Ca="IsFinite",Na="IsInf",ka="IsNan",dl="LeakyRelu",pl="Less",fl="LessEqual",Pc="LinSpace",Ta="Log",_a="Log1p",ml="LogicalAnd",gl="LogicalNot",yl="LogicalOr",XC="LogicalXor",Db="LogSoftmax",ZC="LowerBound",bl="LRN",Mc="LRNGrad",YC="MatrixBandPart",xl="Max",Ea="Maximum",wl="MaxPool",zc="MaxPoolGrad",vl="MaxPool3D",Bc="MaxPool3DGrad",Vc="MaxPoolWithArgmax",Sl="Mean",Il="Min",$a="Minimum",Cl="MirrorPad",Aa="Mod",Wc="Multinomial",Ra="Multiply",Nl="Neg",kl="NotEqual",Uc="NonMaxSuppressionV3",Gc="NonMaxSuppressionV4",Hc="NonMaxSuppressionV5",Tl="OnesLike",_l="OneHot",El="Pack",$l="PadV2",QC="Pool",Da="Pow",Al="Prelu",Rl="Prod",jc="RaggedGather",qc="RaggedRange",Kc="RaggedTensorToTensor",Xc="Range",Zc="Real",Fa="Reciprocal",Oa="Relu",Dl="Reshape",Fl="ResizeNearestNeighbor",Yc="ResizeNearestNeighborGrad",Ol="ResizeBilinear",Qc="ResizeBilinearGrad",La="Relu6",Ll="Reverse",Pa="Round",Ma="Rsqrt",Jc="ScatterNd",eh="TensorScatterUpdate",th="SearchSorted",Pl="Select",za="Selu",Ml="Slice",Ba="Sin",Va="Sinh",Wa="Sign",Ua="Sigmoid",Ga="Softplus",Ha="Sqrt",zl="Sum",Bl="SpaceToBatchND",Vl="SplitV",Wl="Softmax",nh="SparseFillEmptyRows",sh="SparseReshape",rh="SparseSegmentMean",oh="SparseSegmentSum",ah="SparseToDense",ja="SquaredDifference",ih="Square",Ul="StaticRegexReplace",lh="StridedSlice",uh="StringNGrams",ch="StringSplit",hh="StringToHashBucketFast",qa="Sub",Ka="Tan",Xa="Tanh",Za="Tile",dh="TopK",ph="Transform",vo="Transpose",fh="Unique",Gl="Unpack",Hl="UnsortedSegmentSum",JC="UpperBound",jl="ZerosLike",Ya="Step",mh="FromPixels",gh="RotateWithOffset",ql="_FusedMatMul",Kl="FusedConv2D",Xl="FusedDepthwiseConv2D";function ts(...n){z().getBool("IS_TEST")||z().getBool("PROD")||console.warn(...n)}function eN(...n){z().getBool("IS_TEST")||z().getBool("PROD")||console.log(...n)}const Qa=Up("kernelRegistry",()=>new Map),Zl=Up("gradRegistry",()=>new Map);function Yl(n,t){const e=Hp(n,t);return Qa.get(e)}function Gp(n){return Zl.get(n)}function yh(n){const t=Qa.entries(),e=[];for(;;){const{done:s,value:r}=t.next();if(s)break;const[o,a]=r,[i]=o.split("_");i===n&&e.push(a)}return e}function bh(n){const{kernelName:t,backendName:e}=n,s=Hp(t,e);Qa.has(s)&&ts(`The kernel '${t}' for backend '${e}' is already registered`),Qa.set(s,n)}function Fb(n){const{kernelName:t}=n;Zl.has(t)&&z().getBool("DEBUG")&&ts(`Overriding the gradient for '${t}'`),Zl.set(t,n)}function tN(n,t){const e=Hp(n,t);if(!Qa.has(e))throw new Error(`The kernel '${n}' for backend '${t}' is not registered`);Qa.delete(e)}function nN(n){if(!Zl.has(n))throw new Error(`The gradient '${n}' for backend is not registered`);Zl.delete(n)}function sN(n,t){yh(n).forEach(s=>{bh(Object.assign({},s,{backendName:t}))})}function Hp(n,t){return`${t}_${n}`}function Ob(n){return n instanceof Float32Array||n instanceof Int32Array||n instanceof Uint8Array||n instanceof Uint8ClampedArray}var Lb=M(186);const So=M.n(Lb)()||Lb;function Ql(n){return So.fromString(n,!0,16)}const Pb=Ql("c3a5c85c97cb3127"),Io=Ql("b492b66fbe98f273"),Cn=Ql("9ae16a3b2f90404f");function jp(n){return n.xor(n.shru(47))}function Mb(n,t,e){const s=n.slice(t,t+e);return So.fromBytes(Array.from(s),!0,!0)}function yt(n,t){return Mb(n,t,8)}function zb(n,t){return Mb(n,t,4)}function rn(n,t){return 0===t?n:n.shru(t).or(n.shl(64-t))}function Pr(n,t,e=Ql("9ddfea08eb382d69")){let s=n.xor(t).mul(e);s=s.xor(s.shru(47));let r=t.xor(s).mul(e);return r=r.xor(r.shru(47)),r=r.mul(e),r}function xh(n,t,e,s){return function oN(n,t,e,s,r,o){r=r.add(n),o=rn(o.add(r).add(s),21);const a=r;return r=(r=r.add(t)).add(e),o=o.add(rn(r,44)),[r.add(s),o.add(a)]}(yt(n,t),yt(n,t+8),yt(n,t+16),yt(n,t+24),e,s)}function Bb(n,t=n.length){const e=So.fromNumber(81,!0);if(t<=32)return t<=16?function aN(n,t=n.length){if(t>=8){const e=Cn.add(2*t),s=yt(n,0).add(Cn),r=yt(n,t-8);return Pr(rn(r,37).mul(e).add(s),rn(s,25).add(r).mul(e),e)}if(t>=4){const e=Cn.add(2*t);return Pr(zb(n,0).shl(3).add(t),zb(n,t-4),e)}if(t>0){const a=t+(n[t-1]<<2);return jp(Cn.mul(n[0]+(n[t>>1]<<8)).xor(Pb.mul(a))).mul(Cn)}return Cn}(n,t):function iN(n,t=n.length){const e=Cn.add(2*t),s=yt(n,0).mul(Io),r=yt(n,8),o=yt(n,t-8).mul(e),a=yt(n,t-16).mul(Cn);return Pr(rn(s.add(r),43).add(rn(o,30)).add(a),s.add(rn(r.add(Cn),18)).add(o),e)}(n,t);if(t<=64)return function lN(n,t=n.length){const e=Cn.add(2*t),s=yt(n,0).mul(Cn),r=yt(n,8),o=yt(n,t-8).mul(e),a=yt(n,t-16).mul(Cn),i=rn(s.add(r),43).add(rn(o,30)).add(a),l=Pr(i,s.add(rn(r.add(Cn),18)).add(o),e),u=yt(n,16).mul(e),c=yt(n,24),h=i.add(yt(n,t-32)).mul(e),d=l.add(yt(n,t-24)).mul(e);return Pr(rn(u.add(c),43).add(rn(h,30)).add(d),u.add(rn(c.add(s),18)).add(h),e)}(n,t);let s=e,r=e.mul(Io).add(113),o=jp(r.mul(Cn).add(113)).mul(Cn),a=[So.UZERO,So.UZERO],i=[So.UZERO,So.UZERO];s=s.mul(Cn).add(yt(n,0));let l=0;const u=64*(t-1>>6),c=u+(t-1&63)-63;do{s=rn(s.add(r).add(a[0]).add(yt(n,l+8)),37).mul(Io),r=rn(r.add(a[1]).add(yt(n,l+48)),42).mul(Io),s=s.xor(i[1]),r=r.add(a[0]).add(yt(n,l+40)),o=rn(o.add(i[0]),33).mul(Io),a=xh(n,l,a[1].mul(Io),s.add(i[0])),i=xh(n,l+32,o.add(i[1]),r.add(yt(n,l+16))),[o,s]=[s,o],l+=64}while(l!==u);const h=Io.add(o.and(255).shl(1));return l=c,i[0]=i[0].add(t-1&63),a[0]=a[0].add(i[0]),i[0]=i[0].add(a[0]),s=rn(s.add(r).add(a[0]).add(yt(n,l+8)),37).mul(h),r=rn(r.add(a[1]).add(yt(n,l+48)),42).mul(h),s=s.xor(i[1].mul(9)),r=r.add(a[0].mul(9).add(yt(n,l+40))),o=rn(o.add(i[0]),33).mul(h),a=xh(n,l,a[1].mul(h),s.add(i[0])),i=xh(n,l+32,o.add(i[1]),r.add(yt(n,l+16))),[o,s]=[s,o],Pr(Pr(a[0],i[0],h).add(jp(r).mul(Pb)).add(o),Pr(a[1],i[1],h).add(s),h)}function hr(n,t){return"string"===t?Vs(n):Mr([n],t)}function Mr(n,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(n)&&(n=Ws(n)),z().getBool("DEBUG")&&Ib(n,t),function uN(n,t){return n instanceof Float32Array&&"float32"===t||n instanceof Int32Array&&"int32"===t||n instanceof Uint8Array&&"bool"===t}(n,t))return n;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(n);if("int32"===t)return new Int32Array(n);if("bool"===t){const e=new Uint8Array(n.length);for(let s=0;s<e.length;++s)0!==Math.round(n[s])&&(e[s]=1);return e}throw new Error(`Unknown data type ${t}`)}function Nn(){return z().platform.now()}function cN(n,t){return z().platform.fetch(n,t)}function Vs(n,t="utf-8"){return t=t||"utf-8",z().platform.encode(n,t)}function dr(n,t="utf-8"){return t=t||"utf-8",z().platform.decode(n,t)}function on(n){return null!=z().platform.isTypedArray?z().platform.isTypedArray(n):Ob(n)}function Ws(n,t=[],e=!1){if(null==t&&(t=[]),"boolean"==typeof n||"number"==typeof n||"string"==typeof n||Lr(n)||null==n||on(n)&&e)t.push(n);else if(Array.isArray(n)||on(n))for(let s=0;s<n.length;++s)Ws(n[s],t,e);else{let s=-1;for(const r of Object.keys(n))/^([1-9]+[0-9]*|0)$/.test(r)&&(s=Math.max(s,Number(r)));for(let r=0;r<=s;r++)Ws(n[r],t,e)}return t}class hN{constructor(t,e){this.backendTimer=t,this.logger=e,null==e&&(this.logger=new pN)}profileKernel(t,e,s){let r;const o=()=>{r=s()};let a;const i=Nn();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(o);else{o();for(const u of r)u.dataSync();a=Promise.resolve({kernelMs:Nn()-i})}if(z().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let u=0;u<r.length;u++){const c=r[u];c.data().then(h=>{dN(h,c.dtype,t)})}return{kernelName:t,outputs:r,inputs:e,timeMs:a.then(u=>u.kernelMs),extraInfo:a.then(u=>null!=u.getExtraProfileInfo?u.getExtraProfileInfo():"")}}logKernelProfile(t){const{kernelName:e,outputs:s,timeMs:r,inputs:o,extraInfo:a}=t;s.forEach(i=>{Promise.all([i.data(),r,a]).then(l=>{this.logger.logKernelProfile(e,i,l[0],l[1],o,l[2])})})}}function dN(n,t,e){if("float32"!==t)return!1;for(let s=0;s<n.length;s++){const r=n[s];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${e}'`),!0}return!1}class pN{logKernelProfile(t,e,s,r,o,a){const i="number"==typeof r?yo(`${r}ms`,9):r.error,l=yo(t,25),u=e.rank,c=e.size,h=yo(e.shape.toString(),14);let d="";for(const p in o){const f=o[p];if(null!=f){const g=f.shape||e.shape,m=g.length;d+=`${p}: ${m}D ${m>0?g:""} `}}console.log(`%c${l}\t%c${i}\t%c${u}D ${h}\t%c${c}\t%c${d}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}const Vb=20,Jl=3,qp=7;function gN(n,t,e,s){const r=Te(t),o=function yN(n,t,e,s){const r=j(t),o=s[s.length-1],a=new Array(o).fill(0),i=t.length,l="complex64"===e?tu(n):n;if(i>1)for(let u=0;u<r/o;u++){const c=u*o;for(let h=0;h<o;h++)a[h]=Math.max(a[h],eu(l[c+h],0,e).length)}return a}(n,t,e,r),a=t.length,i=wh(n,t,e,r,o),l=["Tensor"];return s&&(l.push(`  dtype: ${e}`),l.push(`  rank: ${a}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(i.map(u=>"    "+u).join("\n")),l.join("\n")}function eu(n,t,e){let s;return s=Array.isArray(n)?`${parseFloat(n[0].toFixed(qp))} + ${parseFloat(n[1].toFixed(qp))}j`:Bs(n)?`'${n}'`:"bool"===e?Wb(n):parseFloat(n.toFixed(qp)).toString(),yo(s,t)}function Wb(n){return 0===n?"false":"true"}function wh(n,t,e,s,r,o=!0){const a="complex64"===e?2:1,i=t[0],l=t.length;if(0===l)return"complex64"===e?[eu(tu(n)[0],0,e)]:"bool"===e?[Wb(n[0])]:[n[0].toString()];if(1===l){if(i>Vb){let y=Array.from(n.slice(0,Jl*a)),b=Array.from(n.slice((i-Jl)*a,i*a));return"complex64"===e&&(y=tu(y),b=tu(b)),["["+y.map((w,x)=>eu(w,r[x],e)).join(", ")+", ..., "+b.map((w,x)=>eu(w,r[i-Jl+x],e)).join(", ")+"]"]}return["["+("complex64"===e?tu(n):Array.from(n)).map((m,y)=>eu(m,r[y],e)).join(", ")+"]"]}const u=t.slice(1),c=s.slice(1),h=s[0]*a,d=[];if(i>Vb){for(let g=0;g<Jl;g++){const m=g*h;d.push(...wh(n.slice(m,m+h),u,e,c,r,!1))}d.push("...");for(let g=i-Jl;g<i;g++){const m=g*h;d.push(...wh(n.slice(m,m+h),u,e,c,r,g===i-1))}}else for(let g=0;g<i;g++){const m=g*h;d.push(...wh(n.slice(m,m+h),u,e,c,r,g===i-1))}const p=2===l?",":"";d[0]="["+(i>0?d[0]+p:"");for(let g=1;g<d.length-1;g++)d[g]=" "+d[g]+p;let f=",\n";for(let g=2;g<l;g++)f+="\n";return d[d.length-1]=" "+d[d.length-1]+"]"+(o?"":f),d}function tu(n){const t=[];for(let e=0;e<n.length;e+=2)t.push([n[e],n[e+1]]);return t}class Gt{constructor(t,e,s){if(this.dtype=e,this.shape=t.slice(),this.size=j(t),null!=s){const r=s.length;C(r===this.size,()=>`Length of values '${r}' does not match the size inferred by the shape '${this.size}'.`)}if("complex64"===e)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=s||Ft(e,this.size),this.strides=Te(t)}set(t,...e){0===e.length&&(e=[0]),C(e.length===this.rank,()=>`The number of provided coordinates (${e.length}) must match the rank (${this.rank})`);const s=this.locToIndex(e);this.values[s]=t}get(...t){0===t.length&&(t=[0]);let e=0;for(const r of t){if(r<0||r>=this.shape[e])throw new Error(`Requested out of range element at ${t}.   Buffer shape=${this.shape}`);e++}let s=t[t.length-1];for(let r=0;r<t.length-1;++r)s+=this.strides[r]*t[r];return this.values[s]}locToIndex(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];let e=t[t.length-1];for(let s=0;s<t.length-1;++s)e+=this.strides[s]*t[s];return e}indexToLoc(t){if(0===this.rank)return[];if(1===this.rank)return[t];const e=new Array(this.shape.length);for(let s=0;s<e.length-1;++s)e[s]=Math.floor(t/this.strides[s]),t-=e[s]*this.strides[s];return e[e.length-1]=t,e}get rank(){return this.shape.length}toTensor(){return Ns().makeTensor(this.values,this.shape,this.dtype)}}let Ns=null,Ja=null,Ub=null;class st{constructor(t,e,s,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=j(t),this.strides=Te(t),this.dataId=s,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}buffer(){var t=this;return(0,Y.Z)(function*(){const e=yield t.data();return Ja.buffer(t.shape,t.dtype,e)})()}bufferSync(){return Ja.buffer(this.shape,this.dtype,this.dataSync())}array(){var t=this;return(0,Y.Z)(function*(){const e=yield t.data();return es(t.shape,e,"complex64"===t.dtype)})()}arraySync(){return es(this.shape,this.dataSync(),"complex64"===this.dtype)}data(){var t=this;return(0,Y.Z)(function*(){t.throwIfDisposed();const e=Ns().read(t.dataId);if("string"===t.dtype){const s=yield e;try{return s.map(r=>dr(r))}catch{throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e})()}dataToGPU(t){return this.throwIfDisposed(),Ns().readToGPU(this.dataId,t)}dataSync(){this.throwIfDisposed();const t=Ns().readSync(this.dataId);if("string"===this.dtype)try{return t.map(e=>dr(e))}catch{throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t}bytes(){var t=this;return(0,Y.Z)(function*(){t.throwIfDisposed();const e=yield Ns().read(t.dataId);return"string"===t.dtype?e:new Uint8Array(e.buffer)})()}dispose(){this.isDisposed||(this.kerasMask&&this.kerasMask.dispose(),Ns().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(t=!1){return Ja.print(this,t)}clone(){return this.throwIfDisposed(),Ja.clone(this)}toString(t=!1){return gN(this.dataSync(),this.shape,this.dtype,t)}cast(t){return this.throwIfDisposed(),Ja.cast(this,t)}variable(t=!0,e,s){return this.throwIfDisposed(),Ns().makeVariable(this,t,e,s)}}function q(){return Up("Tensor",()=>st)}Object.defineProperty(st,Symbol.hasInstance,{value:n=>!!n&&null!=n.data&&null!=n.dataSync&&null!=n.throwIfDisposed}),q();class nu extends st{constructor(t,e,s,r){super(t.shape,t.dtype,t.dataId,r),this.trainable=e,this.name=s}assign(t){if(t.dtype!==this.dtype)throw new Error(`dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`);if(!Xe(t.shape,this.shape))throw new Error(`shape of the new value (${t.shape}) and previous value (${this.shape}) must match`);Ns().disposeTensor(this),this.dataId=t.dataId,Ns().incRef(this,null)}dispose(){Ns().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(nu,Symbol.hasInstance,{value:n=>n instanceof st&&null!=n.assign&&n.assign instanceof Function});var Gb=function(n){return n.R0="R0",n.R1="R1",n.R2="R2",n.R3="R3",n.R4="R4",n.R5="R5",n.R6="R6",n}(Gb||{}),Hb=function(n){return n.float32="float32",n.int32="int32",n.bool="int32",n.complex64="complex64",n}(Hb||{}),jb=function(n){return n.float32="float32",n.int32="int32",n.bool="bool",n.complex64="complex64",n}(jb||{}),qb=function(n){return n.float32="float32",n.int32="float32",n.bool="float32",n.complex64="complex64",n}(qb||{}),Kb=function(n){return n.float32="complex64",n.int32="complex64",n.bool="complex64",n.complex64="complex64",n}(Kb||{});const vN={float32:qb,int32:Hb,bool:jb,complex64:Kb};function Rn(n,t){if("string"===n||"string"===t){if("string"===n&&"string"===t)return"string";throw new Error(`Can not upcast ${n} with ${t}`)}return vN[n][t]}function vh(n){return Rn(n,"int32")}function Xb(n){return null!=n&&"object"==typeof n&&"texture"in n&&n.texture instanceof WebGLTexture}function Zb(n){return typeof GPUBuffer<"u"&&null!=n&&"object"==typeof n&&"buffer"in n&&n.buffer instanceof GPUBuffer}function Tt(n,t){if(n.dtype===t.dtype)return[n,t];const e=Rn(n.dtype,t.dtype);return[n.cast(e),t.cast(e)]}function Yb(n,t){C(n.dtype===t.dtype,()=>`The dtypes of the first(${n.dtype}) and second(${t.dtype}) input must match`)}function SN(n,t){return t.some(e=>e.id===n.id)}function Kp(n){const t=[];return Qb(n,t,new Set),t}function Qb(n,t,e){if(null==n)return;if(n instanceof st)return void t.push(n);if(!function IN(n){return Array.isArray(n)||"object"==typeof n}(n))return;const s=n;for(const r in s){const o=s[r];e.has(o)||(e.add(o),Qb(o,t,e))}}function Xp(n){return null!=n.kernelName}class Jb{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map(t=>t.name)))}}}dispose(){for(const t in this.registeredVariables)this.registeredVariables[t].dispose()}}let CN=(()=>{class n{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Jb}ready(){var e=this;return(0,Y.Z)(function*(){if(null!=e.pendingBackendInit)return e.pendingBackendInit.then(()=>{});if(null!=e.backendInstance)return;const s=e.getSortedBackends();for(let r=0;r<s.length;r++){const o=s[r];if(yield e.initializeBackend(o).success)return void(yield e.setBackend(o))}throw new Error("Could not initialize any backends, all backend initializations failed.")})()}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:s}=this.initializeBackendsAndReturnBest();if(s)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:s}=this.initializeBackend(e);if(s)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,s,r=1){return e in this.registryFactory?(ts(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:s,priority:r},!0)}setBackend(e){var s=this;return(0,Y.Z)(function*(){if(null==s.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(s.backendName=e,null==s.registry[e]){s.backendInstance=null;const{success:r,asyncInit:o}=s.initializeBackend(e);if(!(o?yield r:r))return!1}return s.backendInstance=s.registry[e],s.setupRegisteredKernels(),s.profiler=new hN(s.backendInstance),!0})()}setupRegisteredKernels(){yh(this.backendName).forEach(s=>{null!=s.setupFunc&&s.setupFunc(this.backendInstance)})}disposeRegisteredKernels(e){yh(e).forEach(r=>{null!=r.disposeFunc&&r.disposeFunc(this.registry[e])})}initializeBackend(e){const s=this.registryFactory[e];if(null==s)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const r=s.factory();if(!r||r instanceof sc||"function"!=typeof r.then)return this.registry[e]=r,{success:!0,asyncInit:!1};{const o=++this.pendingBackendInitId,a=r.then(i=>!(o<this.pendingBackendInitId||(this.registry[e]=i,this.pendingBackendInit=null,0))).catch(i=>(o<this.pendingBackendInitId||(this.pendingBackendInit=null,ts(`Initialization of backend ${e} failed`),ts(i.stack||i.message)),!1));return this.pendingBackendInit=a,{success:a,asyncInit:!0}}}catch(r){return ts(`Initialization of backend ${e} failed`),ts(r.stack||r.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((e,s)=>this.registryFactory[s].priority-this.registryFactory[e].priority)}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let s=0;s<e.length;s++){const r=e[s],{success:o,asyncInit:a}=this.initializeBackend(r);if(a||o)return{name:r,asyncInit:a}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,s){const r=this.state.tensorInfo.get(s),o=r.backend,a=this.readSync(s),i=o.refCount(s);o.disposeData(s,!0),r.backend=e,e.move(s,a,r.shape,r.dtype,i),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,s){let o,r=null;if(null==s){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");s=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof s)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun(()=>this.startScope(r),()=>this.endScope(o),()=>(o=s(),o instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),o))}scopedRun(e,s,r){e();try{const o=r();return s(),o}catch(o){throw s(),o}}nextTensorId(){return n.nextTensorId++}nextVariableId(){return n.nextVariableId++}clone(e){const s=$.runKernel(Ia,{x:e});return this.addTapeNode(this.state.activeScope.name,{x:e},[s],i=>({x:()=>$.runKernel(ca,{x:i},{dtype:"float32"})}),[],{}),s}runKernel(e,s,r){if(null==Yl(e,this.backendName))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:s,attrs:r})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,s,r){const o=this.backend.numDataIds();let a=0;r.forEach(u=>{a+="complex64"===u.dtype?3:1});const l=o-s-a-this.state.numDataMovesStack[this.state.numDataMovesStack.length-1];if(l>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${l} data ids) after running '${e}'`)}runKernelFunc(e){let s,r=[];const o=this.isTapeOn(),a=this.state.numBytes,i=this.state.numTensors;let l,u;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);const c=Xp(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(Xp(e)){const{kernelName:g,inputs:m,attrs:y}=e,b=Yl(g,this.backendName);C(null!=b,()=>`Cannot find registered kernel '${g}' for backend '${this.backendName}'`),l=()=>{const w=this.backend.numDataIds();u=b.kernelFunc({inputs:m,attrs:y,backend:this.backend});const x=Array.isArray(u)?u:[u];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(g,w,x);const S=x.map(I=>null!=I.rank?I:this.makeTensorFromTensorInfo(I));if(o){const I=this.getTensorsForGradient(g,m,S);r=this.saveTensorsForBackwardMode(I)}return S}}else{const{forwardFunc:g}=e,m=y=>{o&&(r=y.map(b=>this.keep(this.clone(b))))};l=()=>{const y=this.backend.numDataIds();u=this.tidy(()=>g(this.backend,m));const b=Array.isArray(u)?u:[u];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(c,y,b),b}}const{inputs:h,attrs:d}=e,p=Xp(e)?null:e.backwardsFunc;let f;return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(f=this.profiler.profileKernel(c,h,()=>l()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(f),s=f.outputs):s=l()}),o&&this.addTapeNode(c,h,s,p,r,d),this.state.profiling&&this.state.activeProfile.kernels.push({name:c,bytesAdded:this.state.numBytes-a,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-i,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(h).map(g=>null!=h[g]?h[g].shape:null),outputShapes:s.map(g=>g.shape),kernelTimeMs:f.timeMs,extraInfo:f.extraInfo}),Array.isArray(u)?s:s[0]}saveTensorsForBackwardMode(e){return e.map(r=>this.keep(this.clone(r)))}getTensorsForGradient(e,s,r){const o=Gp(e);if(null!=o){const a=o.inputsToSave||[],i=o.outputsToSave||[];let l;o.saveAllInputs?(C(Array.isArray(s),()=>"saveAllInputs is true, expected inputs to be an array."),l=Object.keys(s).map(c=>s[c])):l=a.map(c=>s[c]);const u=r.filter((c,h)=>i[h]);return l.concat(u)}return[]}makeTensor(e,s,r,o){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");o=o||this.backend;let a=e;"string"===(r=r||"float32")&&Bs(e[0])&&(a=e.map(u=>Vs(u)));const i=o.write(a,s,r),l=new st(s,r,i,this.nextTensorId());if(this.trackTensor(l,o),"string"===r){const u=this.state.tensorInfo.get(i),c=Nb(a);this.state.numBytes+=c-u.bytes,u.bytes=c}return l}makeTensorFromDataId(e,s,r,o){return this.makeTensorFromTensorInfo({dataId:e,shape:s,dtype:r=r||"float32"},o)}makeTensorFromTensorInfo(e,s){const{dataId:r,shape:o,dtype:a}=e,i=new st(o,a,r,this.nextTensorId());return this.trackTensor(i,s),i}makeVariable(e,s=!0,r,o){r=r||this.nextVariableId().toString(),null!=o&&o!==e.dtype&&(e=e.cast(o));const a=new nu(e,s,r,this.nextTensorId());if(null!=this.state.registeredVariables[a.name])throw new Error(`Variable with name ${a.name} was already registered`);return this.state.registeredVariables[a.name]=a,this.incRef(a,this.backend),a}trackTensor(e,s){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let r=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(r=e.size*Ui(e.dtype)),this.state.numBytes+=r,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:s||this.backend,dtype:e.dtype,shape:e.shape,bytes:r})),e instanceof nu||this.track(e)}incRef(e,s){this.trackTensor(e,s),this.backend.incRef(e.dataId)}removeDataId(e,s){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===s&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const s=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=s.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const r=e.size*Ui(e.dtype);this.state.numBytes-=r}s.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,s.backend)}disposeVariables(){for(const e in this.state.registeredVariables)this.disposeVariable(this.state.registeredVariables[e])}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}profile(e){var s=this;return(0,Y.Z)(function*(){s.state.profiling=!0;const r=s.state.numBytes,o=s.state.numTensors;s.state.activeProfile.kernels=[],s.state.activeProfile.result=yield e(),s.state.profiling=!1,s.state.activeProfile.peakBytes=Math.max(...s.state.activeProfile.kernels.map(a=>a.totalBytesSnapshot)),s.state.activeProfile.newBytes=s.state.numBytes-r,s.state.activeProfile.newTensors=s.state.numTensors-o;for(const a of s.state.activeProfile.kernels)a.kernelTimeMs=yield a.kernelTimeMs,a.extraInfo=yield a.extraInfo;return s.state.activeProfile})()}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,s,r,o,a,i){const l={id:this.state.nextTapeNodeId++,kernelName:e,inputs:s,outputs:r,saved:a},u=Gp(e);null!=u&&(o=u.gradFunc),null!=o&&(l.gradient=c=>(c=c.map((h,d)=>{if(null==h){const p=r[d],f=hn(p.size,p.dtype);return this.makeTensor(f,p.shape,p.dtype)}return h}),o(c.length>1?c:c[0],a,i))),this.state.activeTape.push(l)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const s={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(s.name=e),this.state.scopeStack.push(s),this.state.activeScope=s}endScope(e){const s=Kp(e),r=new Set(s.map(a=>a.id));for(let a=0;a<this.state.activeScope.track.length;a++){const i=this.state.activeScope.track[a];!i.kept&&!r.has(i.id)&&i.dispose()}const o=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],s.forEach(a=>{!a.kept&&a.scopeId===o.id&&this.track(a)})}gradients(e,s,r,o=!1){if(C(s.length>0,()=>"gradients() received an empty list of xs."),null!=r&&"float32"!==r.dtype)throw new Error(`dy must have 'float32' dtype, but has '${r.dtype}'`);const a=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",e));C(a instanceof st,()=>"The result y returned by f() must be a tensor.");const i=function fN(n,t,e){const s={},r={};for(let l=0;l<t.length;l++)s[t[l].id]=!0;for(let l=0;l<n.length;l++){const u=n[l],c=u.inputs;for(const h in c){const d=c[h];let p=!1;for(let f=0;f<t.length;f++)if(s[d.id]){u.outputs.forEach(g=>s[g.id]=!0),p=!0,r[u.id]=!0;break}if(p)break}}const o={};o[e.id]=!0;const a={};for(let l=n.length-1;l>=0;l--){const u=n[l],c=u.inputs;for(let h=0;h<u.outputs.length;h++)if(o[u.outputs[h].id]){for(const d in c)o[c[d].id]=!0,a[u.id]=!0;break}}const i=[];for(let l=0;l<n.length;l++){const u=n[l];if(r[u.id]&&a[u.id]){const c={};for(const d in u.inputs){const p=u.inputs[d];s[p.id]&&(c[d]=p)}const h=Object.assign({},u);h.inputs=c,h.outputs=u.outputs,i.push(h)}}return i}(this.state.activeTape,s,a);if(!o&&0===i.length&&s.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const l={};l[a.id]=null==r?function NN(n){const t=lc(j(n),"float32");return $.makeTensor(t,n,"float32")}(a.shape):r,function mN(n,t,e,s){for(let r=t.length-1;r>=0;r--){const o=t[r],a=[];if(o.outputs.forEach(l=>{const u=n[l.id];a.push(null!=u?u:null)}),null==o.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${o.kernelName}.`);const i=o.gradient(a);for(const l in o.inputs){if(!(l in i))throw new Error(`Cannot backprop through input ${l}. Available gradients found: ${Object.keys(i)}.`);const u=e(()=>i[l]());if("float32"!==u.dtype)throw new Error(`Error in gradient for op ${o.kernelName}. The gradient of input ${l} must have 'float32' dtype, but has '${u.dtype}'`);const c=o.inputs[l];if(!Xe(u.shape,c.shape))throw new Error(`Error in gradient for op ${o.kernelName}. The gradient of input '${l}' has shape '${u.shape}', which does not match the shape of the input '${c.shape}'`);if(null==n[c.id])n[c.id]=u;else{const h=n[c.id];n[c.id]=s(h,u),h.dispose()}}}}(l,i,c=>this.tidy(c),kN);const u=s.map(c=>l[c.id]);return 0===this.state.gradientDepth&&(this.state.activeTape.forEach(c=>{for(const h of c.saved)h.dispose()}),this.state.activeTape=null),{value:a,grads:u}})}customGrad(e){return C(Or(e),()=>"The f passed in customGrad(f) must be a function."),(...s)=>{let r;C(s.every(l=>l instanceof st),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");const o={};return s.forEach((l,u)=>{o[u]=l}),this.runKernelFunc({forwardFunc:(l,u)=>(r=e(...s,u),C(r.value instanceof st,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),C(Or(r.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),r.value),backwardsFunc:(l,u)=>{const c=r.gradFunc(l,u),h=Array.isArray(c)?c:[c];C(h.length===s.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),C(h.every(p=>p instanceof st),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const d={};return h.forEach((p,f)=>{d[f]=()=>p}),d},inputs:o})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,s){return this.state.tensorInfo.get(e).backend.readToGPU(e,s)}time(e){var s=this;return(0,Y.Z)(function*(){const r=Nn(),o=yield s.backend.time(e);return o.wallMs=Nn()-r,o})()}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Jb;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}return n.nextTensorId=0,n.nextVariableId=0,n})();function ex(){const n=Ab();if(null==n._tfengine){const t=new $b(n);n._tfengine=new CN(t)}return function qC(n){Vp=n}(n._tfengine.ENV),function bN(n){Ns=n}(()=>n._tfengine),n._tfengine}const $=ex();function kN(n,t){return $.runKernel(wo,{a:n,b:t})}let Zp;function _N(n){Zp=n}function Yp(n){if(void 0!==Zp)return Zp;if(n||function TN(){return typeof navigator<"u"&&null!=navigator}()){if(n||(n=navigator),"ReactNative"===n.product)return!0;const t=n.userAgent||n.vendor||(typeof window<"u"?window.opera:"");return t?/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4)):n.userAgentData&&n.userAgentData.mobile}return!1}function Qp(){return typeof window<"u"&&null!=window.document||typeof WorkerGlobalScope<"u"}const Dn=z();function Us(n,t){let e=n;if(on(n))return"string"===t?[]:[n.length];if(Xb(n))return[n.height,n.width*(n.channels||"RGBA").length];if(Zb(n))return[n.buffer.size/(null==t?4:Ui(t))];if(!Array.isArray(n))return[];const s=[];for(;Array.isArray(e)||on(e)&&"string"!==t;)s.push(e.length),e=e[0];return Array.isArray(n)&&z().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&tx(n,s,[]),s}function tx(n,t,e){if(e=e||[],!Array.isArray(n)&&!on(n))return void C(0===t.length,()=>`Element arr[${e.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`);C(t.length>0,()=>`Element arr[${e.join("][")}] should be a primitive, but is an array of ${n.length} elements`),C(n.length===t[0],()=>`Element arr[${e.join("][")}] should have ${t[0]} elements, but has ${n.length} elements`);const s=t.slice(1);for(let r=0;r<n.length;++r)tx(n[r],s,e.concat(r))}function nx(n,t,e,s){if("string_or_numeric"!==n){if(null==n)throw new Error("Expected dtype cannot be null.");if("numeric"!==n&&n!==t||"numeric"===n&&"string"===t)throw new Error(`Argument '${e}' passed to '${s}' must be ${n} tensor, but got ${t} tensor`)}}function N(n,t,e,s="numeric"){if(n instanceof st)return nx(s,n.dtype,t,e),n;let r=bo(n);if("string"!==r&&["bool","int32","float32"].indexOf(s)>=0&&(r=s),nx(s,r,t,e),null==n||!on(n)&&!Array.isArray(n)&&"number"!=typeof n&&"boolean"!=typeof n&&"string"!=typeof n)throw new Error(`Argument '${t}' passed to '${e}' must be a Tensor or TensorLike, but got '${null==n?"null":n.constructor.name}'`);const o=Us(n,r);!on(n)&&!Array.isArray(n)&&(n=[n]);const i="string"!==r?Mr(n,r):Ws(n,[],!0);return $.makeTensor(i,o,r)}function su(n,t,e,s="numeric"){if(!Array.isArray(n))throw new Error(`Argument ${t} passed to ${e} must be a \`Tensor[]\` or \`TensorLike[]\``);return n.map((o,a)=>N(o,`${t}[${a}]`,e,s))}Dn.registerFlag("DEBUG",()=>!1,n=>{n&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),Dn.registerFlag("IS_BROWSER",()=>Qp()),Dn.registerFlag("IS_NODE",()=>typeof process<"u"&&typeof process.versions<"u"&&typeof process.versions.node<"u"),Dn.registerFlag("IS_CHROME",()=>typeof navigator<"u"&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),Dn.registerFlag("IS_SAFARI",()=>typeof navigator<"u"&&null!=navigator&&null!=navigator.userAgent&&/Safari/.test(navigator.userAgent)&&/Apple/.test(navigator.vendor)),Dn.registerFlag("PROD",()=>!1),Dn.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>Dn.getBool("DEBUG")),Dn.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),Dn.registerFlag("IS_TEST",()=>!1),Dn.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",()=>Dn.getBool("DEBUG")),Dn.registerFlag("WRAP_TO_IMAGEBITMAP",()=>!1),Dn.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",()=>!1),Dn.registerFlag("USE_SETTIMEOUTCUSTOM",()=>!1);const Jp="__op";function R(n){const t=Object.keys(n);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let e=t[0];const s=n[e];e.endsWith("_")&&(e=e.substring(0,e.length-1)),e+=Jp;const r=(...o)=>{$.startScope(e);try{const a=s(...o);return Lr(a)&&console.error("Cannot return a Promise inside of tidy."),$.endScope(a),a}catch(a){throw $.endScope(null),a}};return Object.defineProperty(r,"name",{value:e,configurable:!0}),r}const pr=R({complex_:function EN(n,t){const e=N(n,"real","complex"),s=N(t,"imag","complex");return cn(e.shape,s.shape,`real and imag shapes, ${e.shape} and ${s.shape}, must match in call to tf.complex().`),$.runKernel(mc,{real:e,imag:s})}});function zr(n,t,e,s){if(null==s)s=bo(n);else if("complex64"===s)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(Zb(n)||Xb(n)){if("float32"!==s&&"int32"!==s)throw new Error(`Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${s}.`);return $.backend.createTensorFromGPUData(n,t||e,s)}if(!on(n)&&!Array.isArray(n)&&"number"!=typeof n&&"boolean"!=typeof n&&"string"!=typeof n)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){Gn(t);const r=j(t),o=j(e);C(r===o,()=>`Based on the provided shape, [${t}], the tensor should have ${r} values but has ${o}`);for(let a=0;a<e.length;++a){const l=a!==e.length-1||e[a]!==j(t.slice(a));C(e[a]===t[a]||!l,()=>`Error creating a new Tensor. Inferred shape (${e}) does not match the provided shape (${t}). `)}}return!on(n)&&!Array.isArray(n)&&(n=[n]),t=t||e,n="string"!==s?Mr(n,s):Ws(n,[],!0),$.makeTensor(n,t,s)}function ns(n,t,e){return zr(n,t,Us(n,e),e)}const ef={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};class ks{static join(t){return new ks(t).slice()}constructor(t){if(this.shards=[],this.previousShardIndex=0,null==t||(t instanceof Array||(t=[t]),0===(t=t.map(s=>on(s)?s.buffer:s)).length))return;this.bufferUniformSize=t[0].byteLength;let e=0;for(let s=0;s<t.length;s++){const r=t[s];s!==t.length-1&&r.byteLength!==this.bufferUniformSize&&(this.bufferUniformSize=void 0);const o=e+r.byteLength;this.shards.push({buffer:r,start:e,end:o}),e=o}0===this.shards.length&&(this.byteLength=0),this.byteLength=this.shards[this.shards.length-1].end}slice(t=0,e=this.byteLength){if(0===this.shards.length)return new ArrayBuffer(0);if(t=isNaN(Number(t))?0:t,e=isNaN(Number(e))?0:e,t=Math.max(0,t),(e=Math.min(this.byteLength,e))<=t)return new ArrayBuffer(0);const s=this.findShardForByte(t);if(-1===s)throw new Error(`Could not find start shard for byte ${t}`);const o=new ArrayBuffer(e-t),a=new Uint8Array(o);let i=0;for(let l=s;l<this.shards.length;l++){const u=this.shards[l],h=t+i-u.start,d=i,f=Math.min(e,u.end)-u.start,g=new Uint8Array(u.buffer,h,f-h);if(a.set(g,d),i+=g.length,e<u.end)break}return o}findShardForByte(t){if(0===this.shards.length||t<0||t>=this.byteLength)return-1;if(null!=this.bufferUniformSize)return this.previousShardIndex=Math.floor(t/this.bufferUniformSize),this.previousShardIndex;function e(r){return t<r.start?-1:t>=r.end?1:0}if(0===e(this.shards[this.previousShardIndex]))return this.previousShardIndex;const s=function $N(n,t){let e=0,s=n.length;for(;e<=s;){const r=Math.floor((s-e)/2)+e,o=t(n[r]);if(0===o)return r;o<0?s=r:e=r+1}return-1}(this.shards,e);return-1===s?-1:(this.previousShardIndex=s,this.previousShardIndex)}}const Sh=4;function nf(n,t){return sf.apply(this,arguments)}function sf(){return sf=(0,Y.Z)(function*(n,t){const e=[],s=[],r=Array.isArray(n)?n.map(a=>a.name):Object.keys(n);for(let a=0;a<r.length;++a){const i=r[a],l=Array.isArray(n)?n[a].tensor:n[i];if("float32"!==l.dtype&&"int32"!==l.dtype&&"bool"!==l.dtype&&"string"!==l.dtype&&"complex64"!==l.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${l.dtype}`);const u={name:i,shape:l.shape,dtype:l.dtype};if("string"===l.dtype){const c=new Promise(function(){var h=(0,Y.Z)(function*(d){const p=yield l.bytes(),f=p.reduce((y,b)=>y+b.length,0)+Sh*p.length,g=new Uint8Array(f);let m=0;for(let y=0;y<p.length;y++){const b=p[y],w=new Uint8Array(new Uint32Array([b.length]).buffer);g.set(w,m),m+=Sh,g.set(b,m),m+=b.length}d(g)});return function(d){return h.apply(this,arguments)}}());s.push(c)}else s.push(l.data());null!=t&&(u.group=t),e.push(u)}return{data:AN(yield Promise.all(s)),specs:e}}),sf.apply(this,arguments)}function sx(n,t){const e=new ks(n),s={};let r,o=0;for(const a of t){const i=a.name,l=a.dtype,u=a.shape,c=j(u);let h;if("quantization"in a){const d=a.quantization;if("uint8"===d.dtype||"uint16"===d.dtype){if(!("min"in d)||!("scale"in d))throw new Error(`Weight ${a.name} with quantization ${d.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==d.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${d.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==l)throw new Error(`Weight ${a.name} is quantized with ${d.dtype} which only supports weights of type float32 not ${l}.`)}const p=ef[d.dtype],f=e.slice(o,o+c*p),g="uint8"===d.dtype?new Uint8Array(f):new Uint16Array(f);if("float32"===l)if("uint8"===d.dtype||"uint16"===d.dtype){h=new Float32Array(g.length);for(let m=0;m<g.length;m++)h[m]=g[m]*d.scale+d.min}else{if("float16"!==d.dtype)throw new Error(`Unsupported quantization type ${d.dtype} for weight type float32.`);void 0===r&&(r=PN()),h=r(g)}else{if("int32"!==l)throw new Error(`Unsupported dtype in weight '${i}': ${l}`);if("uint8"!==d.dtype&&"uint16"!==d.dtype)throw new Error(`Unsupported quantization type ${d.dtype} for weight type int32.`);h=new Int32Array(g.length);for(let m=0;m<g.length;m++)h[m]=Math.round(g[m]*d.scale+d.min)}o+=c*p}else if("string"===l){const d=j(a.shape);h=[];for(let p=0;p<d;p++){const f=new Uint32Array(e.slice(o,o+Sh))[0];o+=Sh;const g=new Uint8Array(e.slice(o,o+f));h.push(g),o+=f}}else{const d=ef[l],p=e.slice(o,o+c*d);if("float32"===l)h=new Float32Array(p);else if("int32"===l)h=new Int32Array(p);else if("bool"===l)h=new Uint8Array(p);else{if("complex64"!==l)throw new Error(`Unsupported dtype in weight '${i}': ${l}`);{h=new Float32Array(p);const f=new Float32Array(h.length/2),g=new Float32Array(h.length/2);for(let b=0;b<f.length;b++)f[b]=h[2*b],g[b]=h[2*b+1];const m=ns(f,u,"float32"),y=ns(g,u,"float32");s[i]=pr(m,y),m.dispose(),y.dispose()}}o+=c*d}"complex64"!==l&&(s[i]=ns(h,u,l))}return s}function AN(n){if(null===n)throw new Error(`Invalid input value: ${JSON.stringify(n)}`);let t=0;const e=[];n.forEach(o=>{if(t+=o.byteLength,e.push(o.byteLength===o.buffer.byteLength?o:new o.constructor(o)),!(o instanceof Float32Array||o instanceof Int32Array||o instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${o.constructor.name}`)});const s=new Uint8Array(t);let r=0;return e.forEach(o=>{s.set(new Uint8Array(o.buffer),r),r+=o.byteLength}),s.buffer}const rf=typeof Buffer<"u"&&(typeof Blob>"u"||typeof atob>"u"||typeof btoa>"u");function rx(n){return rf?Buffer.byteLength(n,"utf8"):new Blob([n]).size}function ox(n){return ks.join(n)}function ax(n){for(n=n.trim();n.endsWith("/");)n=n.slice(0,n.length-1);const e=n.split("/");return e[e.length-1]}function ix(n,t){const e={modelTopology:n.modelTopology,format:n.format,generatedBy:n.generatedBy,convertedBy:n.convertedBy,weightsManifest:t};return null!=n.signature&&(e.signature=n.signature),null!=n.userDefinedMetadata&&(e.userDefinedMetadata=n.userDefinedMetadata),null!=n.modelInitializer&&(e.modelInitializer=n.modelInitializer),null!=n.initializerSignature&&(e.initializerSignature=n.initializerSignature),null!=n.trainingConfig&&(e.trainingConfig=n.trainingConfig),e}function lx(n,t,e){const s={modelTopology:n.modelTopology,format:n.format,generatedBy:n.generatedBy,convertedBy:n.convertedBy};if(null!=n.trainingConfig&&(s.trainingConfig=n.trainingConfig),null!=n.weightsManifest){if(!t)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!e)throw new Error("modelJSON has weightsManifest but weightData is null");s.weightSpecs=t,s.weightData=e}return null!=n.signature&&(s.signature=n.signature),null!=n.userDefinedMetadata&&(s.userDefinedMetadata=n.userDefinedMetadata),null!=n.modelInitializer&&(s.modelInitializer=n.modelInitializer),null!=n.initializerSignature&&(s.initializerSignature=n.initializerSignature),s}function of(n,t){return af.apply(this,arguments)}function af(){return(af=(0,Y.Z)(function*(n,t){let e,s;return null!=n.weightsManifest&&([e,s]=yield t(n.weightsManifest)),lx(n,e,s)})).apply(this,arguments)}function ru(n){if(n.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==n.modelTopology?0:rx(JSON.stringify(n.modelTopology)),weightSpecsBytes:null==n.weightSpecs?0:rx(JSON.stringify(n.weightSpecs)),weightDataBytes:null==n.weightData?0:new ks(n.weightData).byteLength}}function ux(n){const t=[];for(const e of n)t.push(...e.weights);return t}function PN(){const n=function FN(){const n=e=>{let s=e<<13,r=0;for(;!(8388608&s);)r-=8388608,s<<=1;return s&=-8388609,r+=947912704,s|r},t=new Uint32Array(2048);t[0]=0;for(let e=1;e<1024;e++)t[e]=n(e);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function ON(){const n=new Uint32Array(64);n[0]=0,n[31]=1199570944,n[32]=2147483648,n[63]=3347054592;for(let t=1;t<31;t++)n[t]=t<<23;for(let t=33;t<63;t++)n[t]=2147483648+(t-32<<23);return n}(),e=function LN(){const n=new Uint32Array(64);for(let t=0;t<64;t++)n[t]=1024;return n[0]=n[32]=0,n}();return s=>{const r=new ArrayBuffer(4*s.length),o=new Uint32Array(r);for(let a=0;a<s.length;a++){const i=s[a];o[a]=n[e[i>>10]+(1023&i)]+t[i>>10]}return new Float32Array(r)}}class _t{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==_t.instance&&(_t.instance=new _t),_t.instance}static registerSaveRouter(t){_t.getInstance().saveRouters.push(t)}static registerLoadRouter(t){_t.getInstance().loadRouters.push(t)}static getSaveHandlers(t){return _t.getHandlers(t,"save")}static getLoadHandlers(t,e){return _t.getHandlers(t,"load",e)}static getHandlers(t,e,s){const r=[];return("load"===e?_t.getInstance().loadRouters:_t.getInstance().saveRouters).forEach(a=>{const i=a(t,s);null!==i&&r.push(i)}),r}}const MN=n=>_t.registerSaveRouter(n),zN=n=>_t.registerLoadRouter(n),cx=n=>_t.getSaveHandlers(n),BN=(n,t)=>_t.getLoadHandlers(n,t),Ih="tensorflowjs",Co="models_store",Br="model_info_store";function cf(){if(!z().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const n=typeof window>"u"?self:window,t=n.indexedDB||n.mozIndexedDB||n.webkitIndexedDB||n.msIndexedDB||n.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function hf(n){const t=n.result;t.createObjectStore(Co,{keyPath:"modelPath"}),t.createObjectStore(Br,{keyPath:"modelPath"})}let ei=(()=>{class n{constructor(e){if(this.indexedDB=cf(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}save(e){var s=this;return(0,Y.Z)(function*(){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return s.databaseAction(s.modelPath,e)})()}load(){var e=this;return(0,Y.Z)(function*(){return e.databaseAction(e.modelPath)})()}databaseAction(e,s){return new Promise((r,o)=>{const a=this.indexedDB.open(Ih,1);a.onupgradeneeded=()=>hf(a),a.onsuccess=()=>{const i=a.result;if(null==s){const l=i.transaction(Co,"readonly"),c=l.objectStore(Co).get(this.modelPath);c.onsuccess=()=>{if(null==c.result)return i.close(),o(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));r(c.result.modelArtifacts)},c.onerror=h=>(i.close(),o(c.error)),l.oncomplete=()=>i.close()}else{s.weightData=ks.join(s.weightData);const l=ru(s),u=i.transaction(Br,"readwrite");let h,d,c=u.objectStore(Br);try{h=c.put({modelPath:this.modelPath,modelArtifactsInfo:l})}catch(p){return o(p)}h.onsuccess=()=>{d=i.transaction(Co,"readwrite");const p=d.objectStore(Co);let f;try{f=p.put({modelPath:this.modelPath,modelArtifacts:s,modelArtifactsInfo:l})}catch(g){return o(g)}f.onsuccess=()=>r({modelArtifactsInfo:l}),f.onerror=g=>{c=u.objectStore(Br);const m=c.delete(this.modelPath);m.onsuccess=()=>(i.close(),o(f.error)),m.onerror=y=>(i.close(),o(f.error))}},h.onerror=p=>(i.close(),o(h.error)),u.oncomplete=()=>{null==d?i.close():d.oncomplete=()=>i.close()}}},a.onerror=i=>o(a.error)})}}return n.URL_SCHEME="indexeddb://",n})();const hx=n=>z().getBool("IS_BROWSER")&&!Array.isArray(n)&&n.startsWith(ei.URL_SCHEME)?function VN(n){return new ei(n)}(n.slice(ei.URL_SCHEME.length)):null;_t.registerSaveRouter(hx),_t.registerLoadRouter(hx);class UN{constructor(){this.indexedDB=cf()}listModels(){var t=this;return(0,Y.Z)(function*(){return new Promise((e,s)=>{const r=t.indexedDB.open(Ih,1);r.onupgradeneeded=()=>hf(r),r.onsuccess=()=>{const o=r.result,a=o.transaction(Br,"readonly"),l=a.objectStore(Br).getAll();l.onsuccess=()=>{const u={};for(const c of l.result)u[c.modelPath]=c.modelArtifactsInfo;e(u)},l.onerror=u=>(o.close(),s(l.error)),a.oncomplete=()=>o.close()},r.onerror=o=>s(r.error)})})()}removeModel(t){var e=this;return(0,Y.Z)(function*(){return t=function WN(n){return n.startsWith(ei.URL_SCHEME)?n.slice(ei.URL_SCHEME.length):n}(t),new Promise((s,r)=>{const o=e.indexedDB.open(Ih,1);o.onupgradeneeded=()=>hf(o),o.onsuccess=()=>{const a=o.result,i=a.transaction(Br,"readwrite"),l=i.objectStore(Br),u=l.get(t);let c;u.onsuccess=()=>{if(null==u.result)return a.close(),r(new Error(`Cannot find model with path '${t}' in IndexedDB.`));{const h=l.delete(t),d=()=>{c=a.transaction(Co,"readwrite");const f=c.objectStore(Co).delete(t);f.onsuccess=()=>s(u.result.modelArtifactsInfo),f.onerror=g=>r(u.error)};h.onsuccess=d,h.onerror=p=>(d(),a.close(),r(u.error))}},u.onerror=h=>(a.close(),r(u.error)),i.oncomplete=()=>{null==c?a.close():c.oncomplete=()=>a.close()}},o.onerror=a=>r(o.error)})})()}}const Gs="/",No="tensorflowjs_models",dx="info",GN="model_topology",HN="weight_specs",jN="weight_data",qN="model_metadata";function px(n){return{info:[No,n,dx].join(Gs),topology:[No,n,GN].join(Gs),weightSpecs:[No,n,HN].join(Gs),weightData:[No,n,jN].join(Gs),modelMetadata:[No,n,qN].join(Gs)}}function fx(n){for(const t of Object.values(n))window.localStorage.removeItem(t)}function mx(n){const t=n.split(Gs);if(t.length<3)throw new Error(`Invalid key format: ${n}`);return t.slice(1,t.length-1).join(Gs)}let ti=(()=>{class n{constructor(e){if(!z().getBool("IS_BROWSER")||typeof window>"u"||typeof window.localStorage>"u")throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=px(this.modelPath)}save(e){var s=this;return(0,Y.Z)(function*(){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const r=JSON.stringify(e.modelTopology),o=JSON.stringify(e.weightSpecs),a=ru(e),i=ks.join(e.weightData);try{return s.LS.setItem(s.keys.info,JSON.stringify(a)),s.LS.setItem(s.keys.topology,r),s.LS.setItem(s.keys.weightSpecs,o),s.LS.setItem(s.keys.weightData,function RN(n){if(rf)return Buffer.from(n).toString("base64");const t=new Uint8Array(n);let e="";for(let s=0,r=t.length;s<r;s++)e+=String.fromCharCode(t[s]);return btoa(e)}(i)),s.LS.setItem(s.keys.modelMetadata,JSON.stringify({format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,initializerSignature:null!=e.initializerSignature?e.initializerSignature:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0})),{modelArtifactsInfo:a}}catch{throw fx(s.keys),new Error(`Failed to save model '${s.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${a.modelTopologyBytes}, weightSpecsBytes=${a.weightSpecsBytes}, weightDataBytes=${a.weightDataBytes}.`)}}})()}load(){var e=this;return(0,Y.Z)(function*(){const s=JSON.parse(e.LS.getItem(e.keys.info));if(null==s)throw new Error(`In local storage, there is no model with name '${e.modelPath}'`);if("JSON"!==s.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const r={},o=JSON.parse(e.LS.getItem(e.keys.topology));if(null==o)throw new Error(`In local storage, the topology of model '${e.modelPath}' is missing.`);r.modelTopology=o;const a=JSON.parse(e.LS.getItem(e.keys.weightSpecs));if(null==a)throw new Error(`In local storage, the weight specs of model '${e.modelPath}' are missing.`);r.weightSpecs=a;const i=e.LS.getItem(e.keys.modelMetadata);if(null!=i){const u=JSON.parse(i);r.format=u.format,r.generatedBy=u.generatedBy,r.convertedBy=u.convertedBy,null!=u.signature&&(r.signature=u.signature),null!=u.userDefinedMetadata&&(r.userDefinedMetadata=u.userDefinedMetadata),null!=u.modelInitializer&&(r.modelInitializer=u.modelInitializer),null!=u.initializerSignature&&(r.initializerSignature=u.initializerSignature),null!=u.trainingConfig&&(r.trainingConfig=u.trainingConfig)}const l=e.LS.getItem(e.keys.weightData);if(null==l)throw new Error(`In local storage, the binary weight values of model '${e.modelPath}' are missing.`);return r.weightData=function DN(n){if(rf){const s=Buffer.from(n,"base64");return s.buffer.slice(s.byteOffset,s.byteOffset+s.byteLength)}const t=atob(n),e=new Uint8Array(t.length);for(let s=0;s<t.length;++s)e.set([t.charCodeAt(s)],s);return e.buffer}(l),r})()}}return n.URL_SCHEME="localstorage://",n})();const gx=n=>z().getBool("IS_BROWSER")&&!Array.isArray(n)&&n.startsWith(ti.URL_SCHEME)?function XN(n){return new ti(n)}(n.slice(ti.URL_SCHEME.length)):null;_t.registerSaveRouter(gx),_t.registerLoadRouter(gx);class ZN{constructor(){C(z().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),C(typeof window>"u"||typeof window.localStorage<"u",()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}listModels(){var t=this;return(0,Y.Z)(function*(){const e={},s=No+Gs,r=Gs+dx;for(let o=0;o<t.LS.length;++o){const a=t.LS.key(o);a.startsWith(s)&&a.endsWith(r)&&(e[mx(a)]=JSON.parse(t.LS.getItem(a)))}return e})()}removeModel(t){var e=this;return(0,Y.Z)(function*(){const s=px(t=function KN(n){return n.startsWith(ti.URL_SCHEME)?n.slice(ti.URL_SCHEME.length):n}(t));if(null==e.LS.getItem(s.info))throw new Error(`Cannot find model at path '${t}'`);const r=JSON.parse(e.LS.getItem(s.info));return fx(s),r})()}}const ni="://";class kn{constructor(){this.managers={}}static getInstance(){return null==kn.instance&&(kn.instance=new kn),kn.instance}static registerManager(t,e){C(null!=t,()=>"scheme must not be undefined or null."),t.endsWith(ni)&&(t=t.slice(0,t.indexOf(ni))),C(t.length>0,()=>"scheme must not be an empty string.");const s=kn.getInstance();C(null==s.managers[t],()=>`A model store manager is already registered for scheme '${t}'.`),s.managers[t]=e}static getManager(t){const e=kn.getInstance().managers[t];if(null==e)throw new Error(`Cannot find model manager for scheme '${t}'`);return e}static getSchemes(){return Object.keys(kn.getInstance().managers)}}function Ch(n){if(-1===n.indexOf(ni))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${kn.getSchemes().join(",")}`);return{scheme:n.split(ni)[0],path:n.split(ni)[1]}}function yx(n,t){return df.apply(this,arguments)}function df(){return(df=(0,Y.Z)(function*(n,t,e=!1){C(n!==t,()=>`Old path and new path are the same: '${n}'`);const s=_t.getLoadHandlers(n);C(s.length>0,()=>`Copying failed because no load handler is found for source URL ${n}.`),C(s.length<2,()=>`Copying failed because more than one (${s.length}) load handlers for source URL ${n}.`);const r=s[0],o=_t.getSaveHandlers(t);C(o.length>0,()=>`Copying failed because no save handler is found for destination URL ${t}.`),C(o.length<2,()=>`Copying failed because more than one (${s.length}) save handlers for destination URL ${t}.`);const a=o[0],i=Ch(n).scheme,l=Ch(n).path,u=i===Ch(n).scheme,c=yield r.load();e&&u&&(yield kn.getManager(i).removeModel(l));const h=yield a.save(c);return e&&!u&&(yield kn.getManager(i).removeModel(l)),h.modelArtifactsInfo})).apply(this,arguments)}function YN(){return pf.apply(this,arguments)}function pf(){return(pf=(0,Y.Z)(function*(){const n=kn.getSchemes(),t={};for(const e of n){const s=yield kn.getManager(e).listModels();for(const r in s)t[e+ni+r]=s[r]}return t})).apply(this,arguments)}function QN(n){return ff.apply(this,arguments)}function ff(){return(ff=(0,Y.Z)(function*(n){const t=Ch(n);return kn.getManager(t.scheme).removeModel(t.path)})).apply(this,arguments)}function JN(n,t){return mf.apply(this,arguments)}function mf(){return(mf=(0,Y.Z)(function*(n,t){return yx(n,t,!1)})).apply(this,arguments)}function ek(n,t){return gf.apply(this,arguments)}function gf(){return(gf=(0,Y.Z)(function*(n,t){return yx(n,t,!0)})).apply(this,arguments)}class tk{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(t,e){return fetch(t,e)}now(){return performance.now()}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error(`Browser's encoder only supports utf-8, but got ${e}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)}decode(t,e){return new TextDecoder(e).decode(t)}setTimeoutCustom(t,e){typeof window>"u"||!z().getBool("USE_SETTIMEOUTCUSTOM")?setTimeout(t,e):(this.functionRefs.push(t),setTimeout(()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")},e),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",s=>{s.source===window&&s.data.name===this.messageName&&(s.stopPropagation(),(0,this.functionRefs[s.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0))},!0)))}isTypedArray(t){return Ob(t)}}if(z().get("IS_BROWSER")){z().setPlatform("browser",new tk);try{kn.registerManager(ti.URL_SCHEME,new ZN)}catch{}try{kn.registerManager(ei.URL_SCHEME,new UN)}catch{}}let si;function Me(n,t="float32",e){return t=t||"float32",Gn(n),new Gt(n,t,e)}z().get("IS_NODE")&&!z().get("IS_BROWSER")&&z().setPlatform("node",new class sk{constructor(){this.util=M(8628),this.textEncoder=new this.util.TextEncoder}fetch(t,e){return null!=z().global.fetch?z().global.fetch(t,e):(null==si&&(si=M(5410)),si(t,e))}now(){const t=process.hrtime();return 1e3*t[0]+t[1]/1e6}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error(`Node built-in encoder only supports utf-8, but got ${e}`);return this.textEncoder.encode(t)}decode(t,e){return 0===t.length?"":new this.util.TextDecoder(e).decode(t)}isTypedArray(t){return this.util.types.isFloat32Array(t)||this.util.types.isInt32Array(t)||this.util.types.isUint8Array(t)||this.util.types.isUint8ClampedArray(t)}});const ue=R({cast_:function rk(n,t){const e=N(n,"x","cast");if(!Cb(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==e.dtype||"string"!==t&&"string"===e.dtype)throw new Error("Only strings can be casted to strings");return $.runKernel(ca,{x:e},{dtype:t})}}),Hs=R({clone_:function ok(n){const e={x:N(n,"x","clone","string_or_numeric")};return $.runKernel(Ia,e)}});function yf(n,t=!1){console.log(n.toString(t))}function ak(){z().set("PROD",!0)}function ik(){z().set("DEBUG",!0)}function lk(){z().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function bx(n){z().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(n+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function uk(){$.disposeVariables()}function ss(){return $}function Nh(){return $.memory()}function ck(n){return $.profile(n)}function P(n,t){return $.tidy(n,t)}function Ge(n){Kp(n).forEach(e=>e.dispose())}function Yt(n){return $.keep(n)}function hk(n){return $.time(n)}function xx(n){return $.setBackend(n)}function dk(){return $.ready()}function wx(){return $.backendName}function pk(n){$.removeBackend(n)}function fk(n){return $.findBackend(n)}function mk(n){return $.findBackendFactory(n)}function bf(n,t,e=1){return $.registerBackend(n,t,e)}function xf(){return $.backend}function gk(n,t){z().setPlatform(n,t)}ex(),function xN(n){Ja=n}({buffer:Me,cast:ue,clone:Hs,print:yf}),function wN(n){Ub=n}(bx);const ee=R({add_:function yk(n,t){let e=N(n,"a","add"),s=N(t,"b","add");return[e,s]=Tt(e,s),$.runKernel(wo,{a:e,b:s})}}),kh=R({floorDiv_:function bk(n,t){let e=N(n,"a","floorDiv"),s=N(t,"b","floorDiv");return[e,s]=Tt(e,s),$.runKernel(va,{a:e,b:s})}}),ke=R({div_:function xk(n,t){let e=N(n,"a","div"),s=N(t,"b","div");return[e,s]=Tt(e,s),"int32"===e.dtype&&"int32"===s.dtype?kh(e,s):$.runKernel(ma,{a:e,b:s},{})}}),D=R({mul_:function wk(n,t){let e=N(n,"a","mul"),s=N(t,"b","mul");return[e,s]=Tt(e,s),$.runKernel(Ra,{a:e,b:s})}}),dn=R({sqrt_:function vk(n){const e={x:N(n,"x","sqrt","float32")};return $.runKernel(Ha,e)}}),dt=R({square_:function Sk(n){const t=N(n,"x","square");return $.runKernel("Square",{x:t},{})}}),Qe=R({zerosLike_:function Ik(n){const e={x:N(n,"x","zerosLike")};return $.runKernel(jl,e)}});function Ck(n){return C(Or(n),()=>"The f passed in grad(f) must be a function"),(t,e)=>{const s=N(t,"x","tf.grad","string_or_numeric"),r=null!=e?N(e,"dy","tf.grad"):null;return $.tidy(()=>{const{value:o,grads:a}=$.gradients(()=>n(s),[s],r);return null!=r&&cn(o.shape,r.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),Th(a),a[0]})}}function Nk(n){return C(Or(n),()=>"The f passed in grads(f) must be a function"),(t,e)=>{C(Array.isArray(t),()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s");const s=su(t,"args","tf.grads","string_or_numeric"),r=null!=e?N(e,"dy","tf.grads"):null;return $.tidy(()=>{const{value:o,grads:a}=$.gradients(()=>n(...s),s,r);return null!=r&&cn(o.shape,r.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),Th(a),a})}}function kk(n){return C(Or(n),()=>"The f passed in valueAndGrad(f) must be a function"),(t,e)=>{C(t instanceof st,()=>"The x passed in valueAndGrad(f)(x) must be a tensor"),C(null==e||e instanceof st,()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor");const{grads:s,value:r}=$.gradients(()=>n(t),[t],e);return Th(s),{grad:s[0],value:r}}}function Tk(n){return C(Or(n),()=>"The f passed in valueAndGrads(f) must be a function"),(t,e)=>{C(Array.isArray(t)&&t.every(r=>r instanceof st),()=>"The args passed in valueAndGrads(f)(args) must be array of tensors"),C(null==e||e instanceof st,()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor");const s=$.gradients(()=>n(...t),t,e);return null!=e&&cn(s.value.shape,e.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),Th(s.grads),s}}function vx(n,t){C(Or(n),()=>"The f passed in variableGrads(f) must be a function"),C(null==t||Array.isArray(t)&&t.every(u=>u instanceof nu),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");const e=null!=t;if(!e){t=[];for(const u in $.registeredVariables)t.push($.registeredVariables[u])}const s=e?t.filter(u=>!u.trainable):null,r=t.length;C((t=t.filter(u=>u.trainable)).length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${r} variables is trainable.`);const{value:a,grads:i}=$.gradients(n,t,null,!0);C(i.some(u=>null!=u),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),C(0===a.rank,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`);const l={};return t.forEach((u,c)=>{null!=i[c]&&(l[u.name]=i[c])}),null!=s&&s.forEach(u=>l[u.name]=null),{value:a,grads:l}}function js(n){return $.customGrad(n)}function Th(n){if(n.filter(e=>null==e).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}function Ce(n,t){if((on(n)&&"string"!==t||Array.isArray(n))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&on(n)&&!(n instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return zr(n,[],[],t)}const _k=new Map,wf=new Map;class ko{getClassName(){return this.constructor.className}static fromConfig(t,e){return new t(e)}}class rs{constructor(){this.classNameMap={}}static getMap(){return null==rs.instance&&(rs.instance=new rs),rs.instance}static register(t){rs.getMap().classNameMap[t.className]=[t,t.fromConfig]}}function ne(n,t,e){C(null!=n.className,()=>"Class being registered does not have the static className property defined."),C("string"==typeof n.className,()=>"className is required to be a string, but got type "+typeof n.className),C(n.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),typeof t>"u"&&(t="Custom"),typeof e>"u"&&(e=n.className);const r=t+">"+e;return rs.register(n),_k.set(r,n),wf.set(n,r),n}function Ek(n){return wf.has(n)?wf.get(n):n.className}class fr extends ko{minimize(t,e=!1,s){const{value:r,grads:o}=this.computeGradients(t,s);if(null!=s){const a=s.map(i=>({name:i.name,tensor:o[i.name]}));this.applyGradients(a)}else this.applyGradients(o);return Ge(o),e?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(t,e){return vx(t,e)}dispose(){null!=this.iterations_&&Ge(this.iterations_)}saveIterations(){var t=this;return(0,Y.Z)(function*(){return null==t.iterations_&&(t.iterations_=0),{name:"iter",tensor:Ce(t.iterations_,"int32")}})()}getWeights(){return(0,Y.Z)(function*(){throw new Error("getWeights() is not implemented for this optimizer yet.")})()}setWeights(t){var e=this;return(0,Y.Z)(function*(){throw new Error(`setWeights() is not implemented for this optimizer class ${e.getClassName()}`)})()}extractIterations(t){var e=this;return(0,Y.Z)(function*(){return e.iterations_=(yield t[0].tensor.data())[0],t.slice(1)})()}}Object.defineProperty(fr,Symbol.hasInstance,{value:n=>null!=n.minimize&&null!=n.computeGradients&&null!=n.applyGradients});class vf extends fr{static get className(){return"Adadelta"}constructor(t,e,s=null){super(),this.learningRate=t,this.rho=e,this.epsilon=s,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==s&&(this.epsilon=$.backend.epsilon())}applyGradients(t){(Array.isArray(t)?t.map(s=>s.name):Object.keys(t)).forEach((s,r)=>{const o=$.registeredVariables[s];null==this.accumulatedGrads[r]&&(this.accumulatedGrads[r]={originalName:`${s}/accum_grad`,variable:P(()=>Qe(o).variable(!1))}),null==this.accumulatedUpdates[r]&&(this.accumulatedUpdates[r]={originalName:`${s}/accum_var`,variable:P(()=>Qe(o).variable(!1))});const i=Array.isArray(t)?t[r].tensor:t[s];if(null==i)return;const l=this.accumulatedGrads[r].variable,u=this.accumulatedUpdates[r].variable;P(()=>{const c=ee(D(l,this.rho),D(dt(i),1-this.rho)),h=D(ke(dn(ee(u,this.epsilon)),dn(ee(l,this.epsilon))),i),d=ee(D(u,this.rho),D(dt(h),1-this.rho));l.assign(c),u.assign(d);const p=ee(D(h,-this.learningRate),o);o.assign(p)})}),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(Ge(this.accumulatedGrads.map(t=>t.variable)),Ge(this.accumulatedUpdates.map(t=>t.variable)))}getWeights(){var t=this;return(0,Y.Z)(function*(){const e=[...t.accumulatedGrads,...t.accumulatedUpdates];return[yield t.saveIterations()].concat(e.map(s=>({name:s.originalName,tensor:s.variable})))})()}setWeights(t){var e=this;return(0,Y.Z)(function*(){const s=(t=yield e.extractIterations(t)).length/2;e.accumulatedGrads=t.slice(0,s).map(o=>({originalName:o.name,variable:o.tensor.variable(!1)})),e.accumulatedUpdates=t.slice(s,2*s).map(o=>({originalName:o.name,variable:o.tensor.variable(!1)}))})()}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.rho,e.epsilon)}}function To(n,t,e){return Gn(n),e=e||bo(t),$.runKernel(Rc,{},{shape:n,value:t,dtype:e})}class Sf extends fr{static get className(){return"Adagrad"}constructor(t,e=.1){super(),this.learningRate=t,this.initialAccumulatorValue=e,this.accumulatedGrads=[]}applyGradients(t){(Array.isArray(t)?t.map(s=>s.name):Object.keys(t)).forEach((s,r)=>{const o=$.registeredVariables[s];null==this.accumulatedGrads[r]&&(this.accumulatedGrads[r]={originalName:`${s}/accumulator`,variable:P(()=>To(o.shape,this.initialAccumulatorValue).variable(!1))});const a=Array.isArray(t)?t[r].tensor:t[s];if(null==a)return;const i=this.accumulatedGrads[r].variable;P(()=>{const l=ee(i,dt(a));i.assign(l);const u=ee(D(ke(a,dn(ee(l,$.backend.epsilon()))),-this.learningRate),o);o.assign(u)})}),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&Ge(this.accumulatedGrads.map(t=>t.variable))}getWeights(){var t=this;return(0,Y.Z)(function*(){return[yield t.saveIterations()].concat(t.accumulatedGrads.map(e=>({name:e.originalName,tensor:e.variable})))})()}setWeights(t){var e=this;return(0,Y.Z)(function*(){t=yield e.extractIterations(t),e.accumulatedGrads=t.map(r=>({originalName:r.name,variable:r.tensor.variable(!1)}))})()}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(t,e){return new t(e.learningRate,e.initialAccumulatorValue)}}const mr=R({pow_:function $k(n,t){let e=N(n,"base","pow"),s=N(t,"exp","pow");return[e,s]=Tt(e,s),$.runKernel(Da,{a:e,b:s})}}),ye=R({sub_:function Ak(n,t){let e=N(n,"a","sub"),s=N(t,"b","sub");return[e,s]=Tt(e,s),$.runKernel(qa,{a:e,b:s})}});class If extends fr{static get className(){return"Adam"}constructor(t,e,s,r=null){super(),this.learningRate=t,this.beta1=e,this.beta2=s,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],P(()=>{this.accBeta1=Ce(e).variable(),this.accBeta2=Ce(s).variable()}),null==r&&(this.epsilon=$.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map(s=>s.name):Object.keys(t);P(()=>{const s=ye(1,this.accBeta1),r=ye(1,this.accBeta2);e.forEach((o,a)=>{const i=$.registeredVariables[o];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:`${o}/m`,variable:P(()=>Qe(i).variable(!1))}),null==this.accumulatedSecondMoment[a]&&(this.accumulatedSecondMoment[a]={originalName:`${o}/v`,variable:P(()=>Qe(i).variable(!1))});const u=Array.isArray(t)?t[a].tensor:t[o];if(null==u)return;const c=this.accumulatedFirstMoment[a].variable,h=this.accumulatedSecondMoment[a].variable,d=ee(D(c,this.beta1),D(u,1-this.beta1)),p=ee(D(h,this.beta2),D(dt(u),1-this.beta2)),f=ke(d,s),g=ke(p,r);c.assign(d),h.assign(p);const m=ee(D(ke(f,ee(dn(g),this.epsilon)),-this.learningRate),i);i.assign(m)}),this.accBeta1.assign(D(this.accBeta1,this.beta1)),this.accBeta2.assign(D(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&Ge(this.accumulatedFirstMoment.map(t=>t.variable)),null!=this.accumulatedSecondMoment&&Ge(this.accumulatedSecondMoment.map(t=>t.variable))}getWeights(){var t=this;return(0,Y.Z)(function*(){const e=[...t.accumulatedFirstMoment,...t.accumulatedSecondMoment];return[yield t.saveIterations()].concat(e.map(s=>({name:s.originalName,tensor:s.variable})))})()}setWeights(t){var e=this;return(0,Y.Z)(function*(){t=yield e.extractIterations(t),P(()=>{e.accBeta1.assign(mr(e.beta1,e.iterations_+1)),e.accBeta2.assign(mr(e.beta2,e.iterations_+1))});const s=t.length/2;e.accumulatedFirstMoment=t.slice(0,s).map(o=>({originalName:o.name,variable:o.tensor.variable(!1)})),e.accumulatedSecondMoment=t.slice(s,2*s).map(o=>({originalName:o.name,variable:o.tensor.variable(!1)}))})()}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon)}}const Ht=R({abs_:function Rk(n){const t=N(n,"x","abs");return $.runKernel("complex64"===t.dtype?Ji:Gi,{x:t})}});function _o(n,t){const e=n.length,s=[];for(let r=0;r<e;r++){const o=e-1-r;(t[t.length-1-r]||1)>1&&1===(n[o]||1)&&s.unshift(o)}return s}function jt(n,t){const e=[];for(let s=0;s<t.length;s++){const r=n[n.length-s-1],o=t.length-s-1;(null==r||1===r&&t[o]>1)&&e.unshift(o)}return e}function Le(n,t){const e=Math.max(n.length,t.length),s=new Array(e);for(let r=0;r<e;r++){let o=n[n.length-r-1];null==o&&(o=1);let a=t[t.length-r-1];if(null==a&&(a=1),1===o)s[e-r-1]=a;else if(1===a)s[e-r-1]=o;else{if(o!==a)throw Error(`Operands could not be broadcast together with shapes ${n} and ${t}.`);s[e-r-1]=o}}return s}const qs=R({maximum_:function Dk(n,t){let e=N(n,"a","maximum"),s=N(t,"b","maximum");return[e,s]=Tt(e,s),"bool"===e.dtype&&(e=ue(e,"int32"),s=ue(s,"int32")),Le(e.shape,s.shape),$.runKernel(Ea,{a:e,b:s})}});class Cf extends fr{static get className(){return"Adamax"}constructor(t,e,s,r=null,o=0){super(),this.learningRate=t,this.beta1=e,this.beta2=s,this.epsilon=r,this.decay=o,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],P(()=>{this.iteration=Ce(0).variable(),this.accBeta1=Ce(e).variable()}),null==r&&(this.epsilon=$.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map(s=>s.name):Object.keys(t);P(()=>{const s=ye(1,this.accBeta1),r=ke(-this.learningRate,ee(D(this.iteration,this.decay),1));e.forEach((o,a)=>{const i=$.registeredVariables[o];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:`${o}/m`,variable:Qe(i).variable(!1)}),null==this.accumulatedWeightedInfNorm[a]&&(this.accumulatedWeightedInfNorm[a]={originalName:`${o}/v`,variable:Qe(i).variable(!1)});const u=Array.isArray(t)?t[a].tensor:t[o];if(null==u)return;const c=this.accumulatedFirstMoment[a].variable,h=this.accumulatedWeightedInfNorm[a].variable,d=ee(D(c,this.beta1),D(u,1-this.beta1)),p=D(h,this.beta2),f=Ht(u),g=qs(p,f);c.assign(d),h.assign(g);const m=ee(D(ke(r,s),ke(d,ee(g,this.epsilon))),i);i.assign(m)}),this.iteration.assign(ee(this.iteration,1)),this.accBeta1.assign(D(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&Ge(this.accumulatedFirstMoment.map(t=>t.variable)),null!=this.accumulatedWeightedInfNorm&&Ge(this.accumulatedWeightedInfNorm.map(t=>t.variable))}getWeights(){return(0,Y.Z)(function*(){throw new Error("getWeights() is not implemented for Adamax yet.")})()}setWeights(t){return(0,Y.Z)(function*(){throw new Error("setWeights() is not implemented for Adamax yet.")})()}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon,e.decay)}}class _h extends fr{static get className(){return"SGD"}constructor(t){super(),this.learningRate=t,this.setLearningRate(t)}applyGradients(t){(Array.isArray(t)?t.map(s=>s.name):Object.keys(t)).forEach((s,r)=>{const o=Array.isArray(t)?t[r].tensor:t[s];if(null==o)return;const a=$.registeredVariables[s];P(()=>{const i=ee(D(this.c,o),a);a.assign(i)})}),this.incrementIterations()}setLearningRate(t){this.learningRate=t,null!=this.c&&this.c.dispose(),this.c=Yt(Ce(-t))}dispose(){this.c.dispose()}getWeights(){var t=this;return(0,Y.Z)(function*(){return[yield t.saveIterations()]})()}setWeights(t){var e=this;return(0,Y.Z)(function*(){if(0!==(t=yield e.extractIterations(t)).length)throw new Error("SGD optimizer does not have settable weights.")})()}getConfig(){return{learningRate:this.learningRate}}static fromConfig(t,e){return new t(e.learningRate)}}class Nf extends _h{static get className(){return"Momentum"}constructor(t,e,s=!1){super(t),this.learningRate=t,this.momentum=e,this.useNesterov=s,this.accumulations=[],this.m=Ce(this.momentum)}applyGradients(t){(Array.isArray(t)?t.map(s=>s.name):Object.keys(t)).forEach((s,r)=>{const o=$.registeredVariables[s];null==this.accumulations[r]&&(this.accumulations[r]={originalName:`${s}/momentum`,variable:P(()=>Qe(o).variable(!1))});const a=this.accumulations[r].variable,i=Array.isArray(t)?t[r].tensor:t[s];null!=i&&P(()=>{let l;const u=ee(D(this.m,a),i);l=ee(D(this.c,this.useNesterov?ee(i,D(u,this.m)):u),o),a.assign(u),o.assign(l)})}),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&Ge(this.accumulations.map(t=>t.variable))}setMomentum(t){this.momentum=t}getWeights(){var t=this;return(0,Y.Z)(function*(){return[yield t.saveIterations()].concat(t.accumulations.map(e=>({name:e.originalName,tensor:e.variable})))})()}setWeights(t){var e=this;return(0,Y.Z)(function*(){t=yield e.extractIterations(t),e.accumulations=t.map(r=>({originalName:r.name,variable:r.tensor.variable(!1)}))})()}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(t,e){return new t(e.learningRate,e.momentum,e.useNesterov)}}class kf extends fr{static get className(){return"RMSProp"}constructor(t,e=.9,s=0,r=null,o=!1){if(super(),this.learningRate=t,this.decay=e,this.momentum=s,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=o,null==r&&(this.epsilon=$.backend.epsilon()),null==t)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(t){(Array.isArray(t)?t.map(s=>s.name):Object.keys(t)).forEach((s,r)=>{const o=$.registeredVariables[s],a=!1;null==this.accumulatedMeanSquares[r]&&(this.accumulatedMeanSquares[r]={originalName:`${s}/rms`,variable:P(()=>Qe(o).variable(a))}),null==this.accumulatedMoments[r]&&(this.accumulatedMoments[r]={originalName:`${s}/momentum`,variable:P(()=>Qe(o).variable(a))}),null==this.accumulatedMeanGrads[r]&&this.centered&&(this.accumulatedMeanGrads[r]={originalName:`${s}/mg`,variable:P(()=>Qe(o).variable(a))});const i=Array.isArray(t)?t[r].tensor:t[s];if(null==i)return;const l=this.accumulatedMeanSquares[r].variable,u=this.accumulatedMoments[r].variable;P(()=>{const c=ee(D(l,this.decay),D(dt(i),1-this.decay));if(this.centered){const h=this.accumulatedMeanGrads[r].variable,d=ee(D(h,this.decay),D(i,1-this.decay)),p=ke(D(i,this.learningRate),dn(ye(c,ee(dt(d),this.epsilon)))),f=ee(D(u,this.momentum),p);l.assign(c),h.assign(d),u.assign(f);const g=ye(o,f);o.assign(g)}else{const h=ee(D(l,this.decay),D(dt(i),1-this.decay)),d=ee(D(u,this.momentum),ke(D(i,this.learningRate),dn(ee(h,this.epsilon))));l.assign(h),u.assign(d);const p=ye(o,d);o.assign(p)}})}),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&Ge(this.accumulatedMeanSquares.map(t=>t.variable)),null!=this.accumulatedMeanGrads&&this.centered&&Ge(this.accumulatedMeanGrads.map(t=>t.variable)),null!=this.accumulatedMoments&&Ge(this.accumulatedMoments.map(t=>t.variable))}getWeights(){var t=this;return(0,Y.Z)(function*(){const e=[...t.accumulatedMeanSquares,...t.accumulatedMoments];return t.centered&&e.push(...t.accumulatedMeanGrads),[yield t.saveIterations()].concat(e.map(s=>({name:s.originalName,tensor:s.variable})))})()}setWeights(t){var e=this;return(0,Y.Z)(function*(){t=yield e.extractIterations(t);const s=e.centered?t.length/3:t.length/2,r=!1;e.accumulatedMeanSquares=t.slice(0,s).map(o=>({originalName:o.name,variable:o.tensor.variable(r)})),e.accumulatedMoments=t.slice(s,2*s).map(o=>({originalName:o.name,variable:o.tensor.variable(r)})),e.centered&&(e.accumulatedMeanGrads=t.slice(2*s,3*s).map(o=>({originalName:o.name,variable:o.tensor.variable(r)})))})()}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(t,e){return new t(e.learningRate,e.decay,e.momentum,e.epsilon,e.centered)}}const Fk=[vf,Sf,If,Cf,Nf,kf,_h];function Sx(n){return new Promise(t=>setTimeout(t)).then(n)}let Tf=(()=>{class n{constructor(e){if(!z().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(n.URL_SCHEME)&&(e=e.slice(n.URL_SCHEME.length)),(null==e||0===e.length)&&(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}save(e){var s=this;return(0,Y.Z)(function*(){if(typeof document>"u")throw new Error("Browser downloads are not supported in this environment since `document` is not present");const r=ks.join(e.weightData),o=window.URL.createObjectURL(new Blob([r],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const i=ix(e,[{paths:["./"+s.weightDataFileName],weights:e.weightSpecs}]),l=window.URL.createObjectURL(new Blob([JSON.stringify(i)],{type:"application/json"})),u=null==s.modelJsonAnchor?document.createElement("a"):s.modelJsonAnchor;if(u.download=s.modelJsonFileName,u.href=l,yield Sx(()=>u.dispatchEvent(new MouseEvent("click"))),null!=e.weightData){const c=null==s.weightDataAnchor?document.createElement("a"):s.weightDataAnchor;c.download=s.weightDataFileName,c.href=o,yield Sx(()=>c.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:ru(e)}}})()}}return n.URL_SCHEME="downloads://",n})();class zk{constructor(t){if(null==t||t.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${t}`);this.jsonFile=t[0],this.weightsFiles=t.slice(1)}load(){var t=this;return(0,Y.Z)(function*(){return new Promise((e,s)=>{const r=new FileReader;r.onload=o=>{const a=JSON.parse(o.target.result),i=a.modelTopology;if(null==i)return void s(new Error(`modelTopology field is missing from file ${t.jsonFile.name}`));if(null==a.weightsManifest)return void s(new Error(`weightManifest field is missing from file ${t.jsonFile.name}`));if(0===t.weightsFiles.length)return void e({modelTopology:i});const u=of(a,c=>t.loadWeights(c));e(u)},r.onerror=o=>s(`Failed to read model topology and weights manifest JSON from file '${t.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),r.readAsText(t.jsonFile)})})()}loadWeights(t){const e=[],s=[];for(const a of t)e.push(...a.weights),s.push(...a.paths);const r=this.checkManifestAndWeightFiles(t),o=s.map(a=>this.loadWeightsFile(a,r[a]));return Promise.all(o).then(a=>[e,a])}loadWeightsFile(t,e){return new Promise((s,r)=>{const o=new FileReader;o.onload=a=>{s(a.target.result)},o.onerror=a=>r(`Failed to weights data from file of path '${t}'.`),o.readAsArrayBuffer(e)})}checkManifestAndWeightFiles(t){const e=[],s=this.weightsFiles.map(o=>ax(o.name)),r={};for(const o of t)o.paths.forEach(a=>{const i=ax(a);if(-1!==e.indexOf(i))throw new Error(`Duplicate file basename found in weights manifest: '${i}'`);if(e.push(i),-1===s.indexOf(i))throw new Error(`Weight file with basename '${i}' is not provided.`);r[a]=this.weightsFiles[s.indexOf(i)]});if(e.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${e.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return r}}function Wk(n){return new zk(n)}function Ix(n,t,e,s){(function a(l){C(null!=l&&Array.isArray(l)&&l.length>0,()=>"promises must be a none empty array")})(n),function i(l,u){C(l>=0&&l<=1,()=>`Progress fraction must be in range [0, 1], but got startFraction ${l}`),C(u>=0&&u<=1,()=>`Progress fraction must be in range [0, 1], but got endFraction ${u}`),C(u>=l,()=>`startFraction must be no more than endFraction, but got startFraction ${l} and endFraction ${u}`)}(e=null==e?0:e,s=null==s?1:s);let r=0;return Promise.all(n.map(l=>(l.then(u=>{const c=e+ ++r/n.length*(s-e);return t(c),u}),l)))}function Cx(n,t){return _f.apply(this,arguments)}function _f(){return(_f=(0,Y.Z)(function*(n,t){null==t&&(t={});const e=null==t.fetchFunc?z().platform.fetch:t.fetchFunc,s=n.map(h=>e(h,t.requestInit,{isBinary:!0})),i=(null==t.onProgress?yield Promise.all(s):yield Ix(s,t.onProgress,0,.5)).map(h=>h.arrayBuffer());return null==t.onProgress?yield Promise.all(i):yield Ix(i,t.onProgress,.5,1)})).apply(this,arguments)}function Uk(n){return Ef.apply(this,arguments)}function Ef(){return(Ef=(0,Y.Z)(function*(n,t="",e,s){return Nx(a=>Cx(a,{requestInit:s}))(n,t,e)})).apply(this,arguments)}function Nx(n){return function(){var t=(0,Y.Z)(function*(e,s="",r){const o=e.map(()=>!1),a={},i=null!=r?r.map(()=>!1):[],l=[];if(e.forEach((f,g)=>{let m=0;f.weights.forEach(y=>{const w=ef["quantization"in y?y.quantization.dtype:y.dtype]*j(y.shape),x=()=>{o[g]=!0,null==a[g]&&(a[g]=[]),a[g].push({manifestEntry:y,groupOffset:m,sizeBytes:w})};null!=r?r.forEach((S,I)=>{S===y.name&&(x(),i[I]=!0)}):x(),l.push(y.name),m+=w})}),!i.every(f=>f)){const f=r.filter((g,m)=>!i[m]);throw new Error(`Could not find weights in manifest with names: ${f.join(", ")}. \nManifest JSON has weights with names: ${l.join(", ")}.`)}const u=o.reduce((f,g,m)=>(g&&f.push(m),f),[]),c=[];u.forEach(f=>{e[f].paths.forEach(g=>{const m=s+(s.endsWith("/")?"":"/")+g;c.push(m)})});const h=yield n(c),d={};let p=0;return u.forEach(f=>{const g=e[f].paths.length,m=new ks(h.slice(p,p+g));a[f].forEach(b=>{const x=sx(m.slice(b.groupOffset,b.groupOffset+b.sizeBytes),[b.manifestEntry]);for(const S in x)d[S]=x[S]}),p+=g}),d});return function(e){return t.apply(this,arguments)}}()}_t.registerSaveRouter(n=>z().getBool("IS_BROWSER")&&!Array.isArray(n)&&n.startsWith(Tf.URL_SCHEME)?function Vk(n="model"){return new Tf(n)}(n.slice(Tf.URL_SCHEME.length)):null);let kx=(()=>{class n{constructor(e,s){if(this.DEFAULT_METHOD="POST",null==s&&(s={}),this.weightPathPrefix=s.weightPathPrefix,this.onProgress=s.onProgress,this.weightUrlConverter=s.weightUrlConverter,null!=s.fetchFunc?(C("function"==typeof s.fetchFunc,()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=s.fetchFunc):this.fetch=z().platform.fetch,C(null!=e&&e.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(e)&&C(2===e.length,()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`),this.path=e,null!=s.requestInit&&null!=s.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=s.requestInit||{}}save(e){var s=this;return(0,Y.Z)(function*(){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const r=Object.assign({method:s.DEFAULT_METHOD},s.requestInit);r.body=new FormData;const a=ix(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);if(r.body.append("model.json",new Blob([JSON.stringify(a)],{type:"application/json"}),"model.json"),null!=e.weightData){const l=ks.join(e.weightData);r.body.append("model.weights.bin",new Blob([l],{type:"application/octet-stream"}),"model.weights.bin")}const i=yield s.fetch(s.path,r);if(i.ok)return{modelArtifactsInfo:ru(e),responses:[i]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${i.status}.`)})()}load(){var e=this;return(0,Y.Z)(function*(){const s=yield e.fetch(e.path,e.requestInit);if(!s.ok)throw new Error(`Request to ${e.path} failed with status code ${s.status}. Please verify this URL points to the model JSON of the model to load.`);let r;try{r=yield s.json()}catch{let l=`Failed to parse model JSON of response from ${e.path}.`;throw e.path.endsWith(".pb")?l+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":l+=" Please make sure the server is serving valid JSON for this request.",new Error(l)}if(null==r.modelTopology&&null==r.weightsManifest)throw new Error(`The JSON from HTTP path ${e.path} contains neither model topology or manifest for weights.`);return of(r,i=>e.loadWeights(i))})()}loadWeights(e){var s=this;return(0,Y.Z)(function*(){const r=Array.isArray(s.path)?s.path[1]:s.path,[o,a]=function jk(n){const t=n.lastIndexOf("/"),e=n.lastIndexOf("?");return[n.substring(0,t)+"/",e>t?n.substring(e):""]}(r),i=s.weightPathPrefix||o,l=ux(e),u=[],c=[];for(const d of e)for(const p of d.paths)null!=s.weightUrlConverter?c.push(s.weightUrlConverter(p)):u.push(i+p+a);return s.weightUrlConverter&&u.push(...yield Promise.all(c)),[l,yield Cx(u,{requestInit:s.requestInit,fetchFunc:s.fetch,onProgress:s.onProgress})]})()}}return n.URL_SCHEME_REGEX=/^https?:\/\//,n})();function $f(n){return null!=n.match(kx.URL_SCHEME_REGEX)}const Tx=(n,t)=>{if(typeof fetch>"u"&&(null==t||null==t.fetchFunc))return null;{let e=!0;if(e=Array.isArray(n)?n.every(s=>$f(s)):$f(n),e)return Af(n,t)}return null};function Af(n,t){return new kx(n,t)}function qk(n,t){return Af(n,t)}_t.registerSaveRouter(Tx),_t.registerLoadRouter(Tx);class Rf{constructor(t){this.modelArtifacts=t}load(){return this.modelArtifacts}}class _x{constructor(t){this.saveHandler=t}save(t){return this.saveHandler(t)}}class Kk{constructor(t){t.load&&(this.load=()=>Promise.resolve(t.load())),t.save&&(this.save=e=>Promise.resolve(t.save(e)))}}function Xk(n,t,e,s){return new Kk(Ex(...arguments))}function Ex(n,t,e,s){return 1===arguments.length?null!=n.modelTopology||null!=n.weightSpecs?new Rf(n):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Rf({modelTopology:n})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Rf({modelTopology:n,weightSpecs:t,weightData:e,trainingConfig:s}))}function Zk(n){return new _x(n)}function Yk(n){return new _x(n)}const ze=R({matMul_:function Qk(n,t,e=!1,s=!1){let r=N(n,"a","matMul"),o=N(t,"b","matMul");return[r,o]=Tt(r,o),$.runKernel(Zi,{a:r,b:o},{transposeA:e,transposeB:s})}}),Eo=R({oneHot_:function Jk(n,t,e=1,s=0,r="int32"){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const a={indices:N(n,"indices","oneHot","int32")};return $.runKernel(_l,a,{dtype:r,depth:t,onValue:e,offValue:s})}}),ou=R({imag_:function eT(n){const e={input:N(n,"input","imag")};return $.runKernel(Lc,e)}}),bt=R({neg_:function tT(n){const e={x:N(n,"x","neg")};return $.runKernel(Nl,e)}}),ri=R({real_:function nT(n){const e={input:N(n,"input","real")};return $.runKernel(Zc,e)}}),Ze=R({transpose_:function sT(n,t,e){const s=N(n,"x","transpose");if(null==t&&(t=s.shape.map((a,i)=>i).reverse()),C(s.rank===t.length,()=>`Error in transpose: rank of input ${s.rank} must match length of perm ${t}.`),t.forEach(a=>{C(a>=0&&a<s.rank,()=>`All entries in 'perm' must be between 0 and ${s.rank-1} but got ${t}`)}),s.rank<=1)return s.clone();const r={x:s},o={perm:t};return"complex64"===s.dtype?P(()=>{let a=ri(s),i=ou(s);return a=$.runKernel(vo,{x:a},o),i=$.runKernel(vo,{x:i},o),e&&(i=bt(i)),pr(a,i)}):$.runKernel(vo,r,o)}}),oT=R({confusionMatrix_:function rT(n,t,e){const s=N(n,"labels","confusionMatrix"),r=N(t,"predictions","confusionMatrix");C(null==e||e>0&&Number.isInteger(e),()=>`If provided, numClasses must be a positive integer, but got ${e}`),C(1===s.rank,()=>`Expected the rank of labels to be 1, but got ${s.rank}`),C(1===r.rank,()=>`Expected the rank of predictions to be 1, but got ${r.rank}`),C(s.shape[0]===r.shape[0],()=>`Mismatch in the number of examples: ${s.shape[0]} vs. ${r.shape[0]}. Labels and predictions should have the same number of elements.`),C(e>0&&Number.isInteger(e),()=>`numClasses is required to be a positive integer, but got ${e}`);const o=Eo(ue(s,"int32"),e),a=Eo(ue(r,"int32"),e),i=Ze(o),l=ze(i,a);return ue(l,"int32")}});function Df(n,t,e){if(mo(n),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const s=Us(n,e);if(3!==s.length&&1!==s.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return zr(n,t,s,e)}let $o,$x=!1;function Ax(n,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==n)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let e=!1,s=!1,r=!1,o=!1,a=!1,i=!1;if(n.data instanceof Uint8Array)e=!0;else if(typeof ImageData<"u"&&n instanceof ImageData)s=!0;else if(typeof HTMLVideoElement<"u"&&n instanceof HTMLVideoElement)r=!0;else if(typeof HTMLImageElement<"u"&&n instanceof HTMLImageElement)o=!0;else if(null!=n.getContext)a=!0;else{if(!(typeof ImageBitmap<"u"&&n instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${n.constructor.name}`);i=!0}if(null!=Yl(mh,$.backendName))return $.runKernel(mh,{pixels:n},{numChannels:t});const[u,c]=r?[n.videoWidth,n.videoHeight]:[n.width,n.height];let h,d;if(a)h=n.getContext("2d").getImageData(0,0,u,c).data;else if(s||e)h=n.data;else if(o||r||i){if(null==$o)if(typeof document>"u"){if(!(typeof OffscreenCanvas<"u"&&typeof OffscreenCanvasRenderingContext2D<"u"))throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");$o=new OffscreenCanvas(1,1).getContext("2d")}else $o=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});$o.canvas.width=u,$o.canvas.height=c,$o.drawImage(n,0,0,u,c),h=$o.getImageData(0,0,u,c).data}if(4===t)d=new Int32Array(h);else{const f=u*c;d=new Int32Array(f*t);for(let g=0;g<f;g++)for(let m=0;m<t;++m)d[g*t+m]=h[4*g+m]}return Df(d,[c,u,t],"int32")}function cT(n){return Ff.apply(this,arguments)}function Ff(){return(Ff=(0,Y.Z)(function*(n,t=3){let e=null;if(z().getBool("WRAP_TO_IMAGEBITMAP")&&function uT(n){return function iT(){return typeof window<"u"&&typeof ImageBitmap<"u"&&window.hasOwnProperty("createImageBitmap")}()&&!(n instanceof ImageBitmap)&&function lT(n){return null!=n&&0!==n.width&&0!==n.height}(n)&&!function aT(n){return null!=n&&n.data instanceof Uint8Array}(n)}(n)){let s;try{s=yield createImageBitmap(n,{premultiplyAlpha:"none"})}catch{s=null}e=null!=s&&s.width===n.width&&s.height===n.height?s:n}else e=n;return Ax(e,t)})).apply(this,arguments)}function Rx(n){if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const t=2===n.rank?1:n.shape[2];if(t>4||2===t)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${t}`);if("float32"!==n.dtype&&"int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`)}function dT(n,t){return Of.apply(this,arguments)}function Of(){return(Of=(0,Y.Z)(function*(n,t){let e=N(n,"img","toPixels");if(!(n instanceof st)){const u=e;e=ue(u,"int32"),u.dispose()}Rx(e);const[s,r]=e.shape.slice(0,2),o=2===e.rank?1:e.shape[2],a=yield e.data(),i="float32"===e.dtype?255:1,l=new Uint8ClampedArray(r*s*4);for(let u=0;u<s*r;++u){const c=[0,0,0,255];for(let d=0;d<o;d++){const p=a[u*o+d];if("float32"===e.dtype){if(p<0||p>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${p}.`)}else if("int32"===e.dtype&&(p<0||p>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${p}.`);1===o?(c[0]=p*i,c[1]=p*i,c[2]=p*i):c[d]=p*i}const h=4*u;l[h+0]=Math.round(c[0]),l[h+1]=Math.round(c[1]),l[h+2]=Math.round(c[2]),l[h+3]=Math.round(c[3])}if(null!=t){$x||null!=Yl(_c,$.backendName)&&(console.warn("tf.browser.toPixels is not efficient to draw tensor on canvas. Please try tf.browser.draw instead."),$x=!0),t.width=r,t.height=s;const u=t.getContext("2d"),c=new ImageData(l,r,s);u.putImageData(c,0,0)}return e!==n&&e.dispose(),l})).apply(this,arguments)}function pT(n,t,e){let s=N(n,"img","draw");if(!(n instanceof st)){const a=s;s=ue(a,"int32"),a.dispose()}Rx(s),function hT(n){const t=(null==n?void 0:n.alpha)||1;if(t>1||t<0)throw new Error(`Alpha value ${t} is suppoed to be in range [0 - 1].`)}(null==e?void 0:e.imageOptions),$.runKernel(_c,{image:s},{canvas:t,options:e})}const Dx=R({fromPixels_:Ax});function Eh(n,t){const e=n.shape.length,s=t.shape.length;if(e<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${e}.`);if(s<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[s-1]>e)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[s-1]} vs. ${e}`);if(0===j(n.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${n.shape}.`);const r=t.shape,o=r[r.length-1];let a=1;for(let h=0;h<r.length-1;++h)a*=r[h];const i=n.shape,l=r.slice();l.pop();let u=1;for(let h=o;h<e;++h)u*=i[h],l.push(i[h]);const c=[...Te(n.shape).map(h=>h/u),1].slice(0,o);return[l,a,u,c]}function Lf(n,t,e){const s=t.rank>1?t.shape[t.rank-1]:1,r=t.rank>1?t.rank-1:1,o=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${e.shape}, indices.shape: ${t.shape}, shape: ${n}, sliceDim: ${s}, and batchDim: ${r}.`;if(e.rank<r)throw new Error(o+` update.rank < ${r}. `);if(n.length<s+(e.rank-r))throw new Error(o+` Output shape length < ${s+(e.rank-r)}`);if(e.rank!==r+n.length-s)throw new Error(o+" update.rank != "+(r+n.length-s));for(let a=0;a<r;++a)if(e.shape[a]!==t.shape[a])throw new Error(o+` updates.shape[${a}] (${e.shape[a]}) != indices.shape[${a}] (${t.shape[a]}).`);for(let a=0;a<e.rank-r;++a)if(e.shape[a+r]!==n[a+s])throw new Error(o+` updates.shape[${a+r}] (${e.shape[a+r]}) != shape[${a+r}] (${n[a+r]})`)}function $h(n,t,e){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(n.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${n.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(e.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${e}`);if(0===e.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===n.size)throw new Error(`Updates specified for empty output. updates shape: ${n.shape}`)}Lf(e,t,n)}function Vr(n,t,e){const s=t.shape.length,r=s>1?t.shape[s-1]:1,o=e.length;let a=1;for(let h=r;h<o;++h)a*=e[h];const i=r<1?1:r;return{sliceRank:r,numUpdates:j(t.shape)/i,sliceSize:a,strides:[...Te(e.slice(0,r)),1],outputSize:j(e)}}const Pf=-2,fT=-1;function Mf(n,t,e){const s=n.shape.length;C(s===t.length,()=>`Error in slice${s}D: Length of begin ${t} must match the rank of the array (${s}).`),C(s===e.length,()=>`Error in slice${s}D: Length of size ${e} must match the rank of the array (${s}).`);for(let r=0;r<s;++r)C(t[r]+e[r]<=n.shape[r],()=>`Error in slice${s}D: begin[${r}] + size[${r}] (${t[r]+e[r]}) would overflow input.shape[${r}] (${n.shape[r]})`)}function mT(n){const t=[];let e=0;for(;n>0;)1&n&&t.push(e),n/=2,e++;return t}function zf(n,t,e){const s=[];for(let r=0;r<n.length;r++)s[r]=Math.ceil((t[r]-n[r])/e[r]);return s}function Fx(n,t,e,s){const r=[...n];for(let o=r.length;o<s.length;o++)r.push(1);for(let o=0;o<e;o++)0===o?r[t]=1:(r.splice(t,0,1),r.pop());return r}function Ox(n,t,e){return e<=n?e:e-(t-1)}function Lx(n,t){const e=[];for(let s=0;s<n;s++)e.push(t+s);return e}function gT(n,t,e,s,r,o,a,i,l){const u=n.length;let c=new Array(u),h=new Array(u),d=new Array(u);if(t.length&&e>0){const p=t[0],f=e+1;c=Px(a,p,f,s,n),h=Mx(i,p,f,r,n),d=Fx(o,p,f,n)}else for(let p=0;p<u;p++)c[p]=Bx(a,s,o,n,p,l),h[p]=Vx(i,r,o,n,p,l),d[p]=zx(o,p,l);return{begin:c,end:h,strides:d}}function Px(n,t,e,s,r){const o=[...r],a=Lx(e,t);for(let i=0;i<o.length;i++)if(a.indexOf(i)>-1)o[i]=0;else{const l=Ox(t,e,i);let u=s[l];n&1<<l&&(u=0),o[i]=u}return o}function Mx(n,t,e,s,r){const o=[...r],a=Lx(e,t);for(let i=0;i<o.length;i++)if(a.indexOf(i)>-1)o[i]=Number.MAX_SAFE_INTEGER;else{const l=Ox(t,e,i);let u=s[l];n&1<<l&&(u=Number.MAX_SAFE_INTEGER),o[i]=u}for(let i=0;i<o.length;i++)o[i]<0&&(o[i]+=r[i]),o[i]=Fr(0,o[i],r[i]);return o}function zx(n,t,e){let s=n[t];return(e&1<<t||null==s)&&(s=1),s}function Bx(n,t,e,s,r,o){let a=t[r];(n&1<<r||o&1<<r||null==a)&&(a=(e[r]||1)>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=s[r];return a<0&&(a+=l),a=Fr(0,a,l-1),a}function Vx(n,t,e,s,r,o){let a=t[r];const i=e[r]||1;(n&1<<r||o&1<<r||null==a)&&(a=i>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=s[r];return a<0&&(a+=l),a=i>0?Fr(0,a,l):Fr(-1,a,l-1),a}function Bf(n,t,e){let s=e.length;for(let r=0;r<e.length;r++)if(e[r]>1){s=r;break}for(let r=s+1;r<e.length;r++)if(t[r]>0||e[r]!==n[r])return!1;return!0}function Vf(n,t){let e=n.length>0?n[n.length-1]:1;for(let s=0;s<n.length-1;s++)e+=n[s]*t[s];return e}function Ah(n,t,e){let s;const r=n.shape.length;let o;return s="number"==typeof t?[t,...new Array(r-1).fill(0)]:t.length<r?t.concat(new Array(r-t.length).fill(0)):t.slice(),s.forEach(a=>{C(-1!==a,()=>"slice() does not support negative begin indexing.")}),o=null==e?new Array(r).fill(-1):"number"==typeof e?[e,...new Array(r-1).fill(-1)]:e.length<r?e.concat(new Array(r-e.length).fill(-1)):e,o=o.map((a,i)=>a>=0?a:(C(-1===a,()=>`Negative size values should be exactly -1 but got ${a} for the slice() size at index ${i}.`),n.shape[i]-s[i])),[s,o]}function Wf(n,t,e,s,r,o,a,i,l){let u;if(null==s?(u=new Array(t.length),u.fill(1)):u=s,null!=a&&a&a-1)throw new Error("Multiple ellipses in slice is not allowed.");let c=!1;const h={dims:u.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:e.slice(),strides:u.slice(),beginMask:r,endMask:o,ellipsisMask:a,newAxisMask:i,shrinkAxisMask:l};for(let w=0;w<h.dims;w++)c&&1<<w&i&&h.numAddAxisAfterEllipsis++,1<<w&a&&(c=!0);c||(h.ellipsisMask|=1<<h.dims,h.dims++);const d={dims:n.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function yT(n,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let e=0;t.beginValid=null!=n.begin,t.endValid=null!=n.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let s=0;s<n.dims;s++)if(1<<s&n.ellipsisMask){const r=Math.min(t.dims-(n.dims-s)+1+n.numAddAxisAfterEllipsis,t.dims);for(;e<r;e++)t.begin[e]=0,t.end[e]=0,t.strides[e]=1,t.beginMask|=1<<e,t.endMask|=1<<e,t.finalShapeGatherIndices.push(e),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[e]=s}else if(1<<s&n.newAxisMask)t.finalShapeGatherIndices.push(Pf),t.finalShapeGatherIndicesSparse.push(-1);else{if(e===t.begin.length)throw Error(`Index out of range using input dim ${e}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=n.begin&&(t.begin[e]=n.begin[s]),null!=n.end&&(t.end[e]=n.end[s]),t.strides[e]=n.strides[s],n.beginMask&1<<s&&(t.beginMask|=1<<e),n.endMask&1<<s&&(t.endMask|=1<<e),n.shrinkAxisMask&1<<s?(t.finalShapeGatherIndices.push(fT),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<e):(t.finalShapeGatherIndices.push(e),t.finalShapeGatherIndicesSparse.push(s)),t.inputShapeGatherIndicesSparse[e]=s,e++}}(h,d);let p=!0,f=!0,g=!0;const m=[],y=[];for(let w=0;w<n.length;++w){if(0===d.strides[w])throw Error(`strides[${w}] must be non-zero`);const x=!!(d.shrinkAxisMask&1<<w),S=n[w];if(-1===S){m.push(x?1:-1);continue}const I=[d.beginMask&1<<w,d.endMask&1<<w],k=[d.strides[w]>0?0:-1,d.strides[w]>0?S:S-1];if(x&&d.strides[w]<=0)throw Error("only stride 1 allowed on non-range indexing.");g=g&&1===d.strides[w];const T=!!(d.beginMask&1<<w&&d.endMask&1<<w);if(d.beginValid&&d.endValid){if(x){const B=d.begin[w]<0?S+d.begin[w]:d.begin[w];if(d.begin[w]=B,d.end[w]=d.begin[w]+1,B<0||B>=S)throw Error(`slice index ${d.begin[w]} of dimension ${w} out of bounds.`)}else d.begin[w]=Wx(d.begin[w],0,d.strides[w],S,I,k),d.end[w]=Wx(d.end[w],1,d.strides[w],S,I,k);const L=1===d.strides[w]&&0===d.begin[w]&&d.end[w]===S;p=p&&L,f=f&&(0===w&&1===d.strides[w]||L)}else p=p&&1===d.strides[w]&&T,f=f&&(0===w&&1===d.strides[w]||T);let _,E=!1;if(d.beginValid&&d.endValid?(_=d.end[w]-d.begin[w],E=!0):x?(_=1,E=!0):T&&S>=0&&(_=d.strides[w]<0?-S:S,E=!0),E){let L;L=0===_||_<0!=d.strides[w]<0?0:Math.trunc(_/d.strides[w])+(_%d.strides[w]!=0?1:0),m.push(L)}else m.push(-1)}for(let w=0;w<d.finalShapeGatherIndices.length;++w){const x=d.finalShapeGatherIndices[w];x>=0?y.push(m[x]):x===Pf&&y.push(1)}return{finalShapeSparse:y.filter((w,x)=>d.finalShapeGatherIndices[x]!==Pf),finalShape:y,isIdentity:p,sliceDim0:f,isSimpleSlice:g,begin:d.begin,end:d.end,strides:d.strides}}function Wx(n,t,e,s,r,o){if(r[t])return e>0?o[t]:o[t+1&1];{const a=n<0?s+n:n;return a<o[0]?o[0]:a>o[1]?o[1]:a}}const bT=.001,Ux=.1;function xT(n,t,e){return null==e&&(e=Uf()),Gf(n,t,(s,r)=>Hf(s,r,e))}function Uf(){return 32===$.backend.floatPrecision()?bT:Ux}function Gf(n,t,e){let s=!0;if((on(n)||on(t))&&(s=!1),on(n)&&on(t)&&(s=!0),s){const a=n.constructor.name,i=t.constructor.name;if(a!==i)throw new Error(`Arrays are of different type. Actual: ${a}. Expected: ${i}`)}if(Array.isArray(n)&&Array.isArray(t)){const a=Us(n),i=Us(t);if(!Xe(a,i))throw new Error(`Arrays have different shapes. Actual: [${a}]. Expected: [${i}]`)}const r=on(n)?n:Ws(n),o=on(t)?t:Ws(t);if(r.length!==o.length)throw new Error(`Arrays have different lengths actual: ${r.length} vs expected: ${o.length}.\nActual:   ${r}.\nExpected: ${o}.`);for(let a=0;a<o.length;++a){const i=r[a],l=o[a];if(!e(i,l))throw new Error(`Arrays differ: actual[${a}] = ${i}, expected[${a}] = ${l}.\nActual:   ${r}.\nExpected: ${o}.`)}typeof expect<"u"&&expect().nothing()}function wT(n,t){n().then(()=>t.fail(),()=>t()),typeof expect<"u"&&expect().nothing()}function vT(n,t){const e="string"==typeof t||"number"==typeof t||"boolean"==typeof t?[t]:t;return Bs(n)||Bs(n[0])||Bs(t)||Bs(t[0])?Gf(n,e,(s,r)=>s==r):Gf(n,t,(s,r)=>Hf(s,r,0))}function ST(n,t,e){if(null==e&&(e=Uf()),!Hf(n,t,e))throw new Error(`Numbers differ: actual === ${n}, expected === ${t}`);typeof expect<"u"&&expect().nothing()}function Hf(n,t,e){return!isFinite(n)&&!isFinite(t)||!(isNaN(n)||isNaN(t)||Math.abs(n-t)>e)}function IT(n,t,e){for(let s=0;s<n.length;s++)if(n[s]<t||n[s]>e)throw new Error(`Value out of range:${n[s]} low: ${t}, high: ${e}`)}function CT(n,t){const e=new Float32Array(n),s=new Float32Array(t);if(e.length!==s.length)throw new Error(`Expected ArrayBuffer to be of length ${s.length}, but it was ${e.length}`);for(let r=0;r<s.length;r++)if(e[r]!==s[r])throw new Error(`Expected ArrayBuffer value at ${r} to be ${s[r]} but got ${e[r]} instead`)}function Gx(n){for(let t=0;t<n.length;t++){const e=n[t];Array.isArray(e)?Gx(e):n[t]=Vs(e)}return n}function NT(n){const t=document.createElement("video");return"playsInline"in t&&(t.playsInline=!0),t.muted=!0,t.loop=!0,t.style.position="fixed",t.style.left="0px",t.style.top="0px",t.preload="auto",t.appendChild(n),new Promise(e=>{t.addEventListener("loadeddata",s=>e(t)),t.load()})}function kT(n){return jf.apply(this,arguments)}function jf(){return(jf=(0,Y.Z)(function*(n){yield n.play(),"requestVideoFrameCallback"in n&&(yield new Promise(t=>{n.requestVideoFrameCallback(t)}))})).apply(this,arguments)}const Hx="4.11.0";class jx{static sgd(t){return new _h(t)}static momentum(t,e,s=!1){return new Nf(t,e,s)}static rmsprop(t,e=.9,s=0,r=null,o=!1){return new kf(t,e,s,r,o)}static adam(t=.001,e=.9,s=.999,r=null){return new If(t,e,s,r)}static adadelta(t=.001,e=.95,s=null){return new vf(t,e,s)}static adamax(t=.002,e=.9,s=.999,r=null,o=0){return new Cf(t,e,s,r,o)}static adagrad(t,e=.1){return new Sf(t,e)}}const qf=R({acos_:function TT(n){const e={x:N(n,"x","acos")};return $.runKernel(sa,e)}}),Kf=R({acosh_:function _T(n){const e={x:N(n,"x","acosh")};return $.runKernel(ra,e)}}),qx=R({addN_:function ET(n){C(Array.isArray(n),()=>"The argument passed to tf.addN() must be a list of tensors"),C(n.length>=1,()=>`Must pass at least one tensor to tf.addN(), but got ${n.length}`);const t=n.map((r,o)=>N(r,`tensors${o}`,"addN")),e=t[0];return t.forEach(r=>{if(r.dtype!==e.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")}),t.forEach(r=>{if(!Xe(r.shape,e.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}),$.runKernel(Hi,t)}}),Rh=R({all_:function $T(n,t=null,e=!1){const r={x:N(n,"x","all","bool")};return $.runKernel(uc,r,{axis:t,keepDims:e})}}),au=R({any_:function AT(n,t=null,e=!1){const r={x:N(n,"x","any","bool")};return $.runKernel(cc,r,{axis:t,keepDims:e})}}),Wr=R({argMax_:function RT(n,t=0){const s={x:N(n,"x","argMax")};return $.runKernel(ji,s,{axis:t})}}),Xf=R({argMin_:function DT(n,t=0){const s={x:N(n,"x","argMin")};return $.runKernel(qi,s,{axis:t})}}),Zf=R({asin_:function FT(n){const e={x:N(n,"x","asin")};return $.runKernel(oa,e)}}),Yf=R({asinh_:function OT(n){const e={x:N(n,"x","asinh")};return $.runKernel(aa,e)}}),Qf=R({atan_:function LT(n){const e={x:N(n,"x","atan")};return $.runKernel(ia,e)}}),Jf=R({atan2_:function PT(n,t){let e=N(n,"a","atan2"),s=N(t,"b","atan2");return[e,s]=Tt(e,s),$.runKernel(ua,{a:e,b:s})}}),em=R({atanh_:function MT(n){const e={x:N(n,"x","atanh")};return $.runKernel(la,e)}});function iu(n,t,e,s,r="NHWC",o){return an(n,[...t,n[3]],e,o,s,null,null,yr(r))}function gs(n,t,e,s,r,o,a="channelsLast"){const[i,l]=lu(t);let u;if("channelsLast"===a)u=[i,l,n[3],n[3]];else{if("channelsFirst"!==a)throw new Error(`Unknown dataFormat ${a}`);u=[i,l,n[1],n[1]]}return an(n,u,e,s,r,o,!1,a)}function gr(n,t,e,s,r,o,a="NDHWC"){const[i,l,u]=nm(t);let c,h;if("NDHWC"===a)h="channelsLast",c=[i,l,u,n[4],n[4]];else{if("NCDHW"!==a)throw new Error(`Unknown dataFormat ${a}`);h="channelsFirst",c=[i,l,u,n[1],n[1]]}return Ur(n,c,e,s,r,!1,h,o)}function an(n,t,e,s,r,o,a=!1,i="channelsLast"){let[l,u,c,h]=[-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,h]=n;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[l,h,u,c]=n}const[d,p,,f]=t,[g,m]=lu(e),[y,b]=lu(s),w=oi(d,y),x=oi(p,b),{padInfo:S,outHeight:I,outWidth:k}=function VT(n,t,e,s,r,o,a,i,l){let u,c,h;if("number"==typeof n){u={top:n,bottom:n,left:n,right:n,type:0===n?"VALID":"NUMBER"};const p=function zT(n,t,e,s,r){null==s&&(s=tm(n,t,e));const a=n[1];return[uu((n[0]-t+2*s)/e+1,r),uu((a-t+2*s)/e+1,r)]}([t,e],o,s,n,i);c=p[0],h=p[1]}else if("same"===n){c=Math.ceil(t/s),h=Math.ceil(e/r);const d=Math.max(0,(c-1)*s+o-t),p=Math.max(0,(h-1)*r+a-e),f=Math.floor(d/2),g=d-f,m=Math.floor(p/2);u={top:f,bottom:g,left:m,right:p-m,type:"SAME"}}else if("valid"===n)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-o+1)/s),h=Math.ceil((e-a+1)/r);else{if("object"!=typeof n)throw Error(`Unknown padding parameter: ${n}`);{const d="channelsLast"===l?n[1][0]:n[2][0],p="channelsLast"===l?n[1][1]:n[2][1],f="channelsLast"===l?n[2][0]:n[3][0],g="channelsLast"===l?n[2][1]:n[3][1];u={top:d,bottom:p,left:f,right:g,type:0===d&&0===p&&0===f&&0===g?"VALID":"EXPLICIT"},c=uu((t-o+d+p)/s+1,i),h=uu((e-a+f+g)/r+1,i)}}return{padInfo:u,outHeight:c,outWidth:h}}(r,u,c,g,m,w,x,o,i),T=a?f*h:f;let _;return"channelsFirst"===i?_=[l,T,I,k]:"channelsLast"===i&&(_=[l,I,k,T]),{batchSize:l,dataFormat:i,inHeight:u,inWidth:c,inChannels:h,outHeight:I,outWidth:k,outChannels:T,padInfo:S,strideHeight:g,strideWidth:m,filterHeight:d,filterWidth:p,effectiveFilterHeight:w,effectiveFilterWidth:x,dilationHeight:y,dilationWidth:b,inShape:n,outShape:_,filterShape:t}}function Ur(n,t,e,s,r,o=!1,a="channelsLast",i){let[l,u,c,h,d]=[-1,-1,-1,-1,-1];if("channelsLast"===a)[l,u,c,h,d]=n;else{if("channelsFirst"!==a)throw new Error(`Unknown dataFormat ${a}`);[l,d,u,c,h]=n}const[p,f,g,,m]=t,[y,b,w]=nm(e),[x,S,I]=nm(s),k=oi(p,x),T=oi(f,S),_=oi(g,I),{padInfo:E,outDepth:L,outHeight:B,outWidth:W}=function WT(n,t,e,s,r,o,a,i,l,u,c){let h,d,p,f;if("valid"===n&&(n=0),"number"==typeof n){h={top:n,bottom:n,left:n,right:n,front:n,back:n,type:0===n?"VALID":"NUMBER"};const m=function BT(n,t,e,s,r,o){null==r&&(r=tm(n,t[0],s[0]));const a=[0,0,0,e];for(let i=0;i<3;i++)n[i]+2*r>=t[i]&&(a[i]=uu((n[i]-t[i]+2*r)/s[i]+1,o));return a}([t,e,s,1],[i,l,u],1,[r,o,a],n,c);d=m[0],p=m[1],f=m[2]}else{if("same"!==n)throw Error(`Unknown padding parameter: ${n}`);{d=Math.ceil(t/r),p=Math.ceil(e/o),f=Math.ceil(s/a);const g=(d-1)*r+i-t,m=(p-1)*o+l-e,y=(f-1)*a+u-s,b=Math.floor(g/2),w=g-b,x=Math.floor(m/2),S=m-x,I=Math.floor(y/2);h={top:x,bottom:S,left:I,right:y-I,front:b,back:w,type:"SAME"}}}return{padInfo:h,outDepth:d,outHeight:p,outWidth:f}}(r,u,c,h,y,b,w,k,T,_,i),U=o?m*d:m;let G;return"channelsFirst"===a?G=[l,U,L,B,W]:"channelsLast"===a&&(G=[l,L,B,W,U]),{batchSize:l,dataFormat:a,inDepth:u,inHeight:c,inWidth:h,inChannels:d,outDepth:L,outHeight:B,outWidth:W,outChannels:U,padInfo:E,strideDepth:y,strideHeight:b,strideWidth:w,filterDepth:p,filterHeight:f,filterWidth:g,effectiveFilterDepth:k,effectiveFilterHeight:T,effectiveFilterWidth:_,dilationDepth:x,dilationHeight:S,dilationWidth:I,inShape:n,outShape:G,filterShape:t}}function tm(n,t,e,s=1){const r=oi(t,s);return Math.floor((n[0]*(e-1)-e+r)/2)}function lu(n){return"number"==typeof n?[n,n,n]:2===n.length?[n[0],n[1],1]:n}function nm(n){return"number"==typeof n?[n,n,n]:n}function oi(n,t){return t<=1?n:n+(n-1)*(t-1)}function uu(n,t){if(!t)return Math.trunc(n);switch(t){case"round":return Math.round(n);case"ceil":return Math.ceil(n);case"floor":return Math.floor(n);default:throw new Error(`Unknown roundingMode ${t}`)}}function Gr(n){const[t,e,s]=lu(n);return 1===t&&1===e&&1===s}function pn(n,t){return Gr(n)||Gr(t)}function Ao(n){return lu(n).every(t=>t>0)}function yr(n){if("NHWC"===n)return"channelsLast";if("NCHW"===n)return"channelsFirst";throw new Error(`Unknown dataFormat ${n}`)}function Tn(n,t,e){if(null!=e){if("string"==typeof t)throw Error(`Error in ${n}: pad must be an integer when using dimRoundingMode ${e} but got pad ${t}.`);if("number"==typeof t)C(go(t),()=>`Error in ${n}: pad must be an integer when using dimRoundingMode ${e} but got pad ${t}.`);else{if("object"!=typeof t)throw Error(`Error in ${n}: Unknown padding parameter: ${t}`);t.forEach(s=>{s.forEach(r=>{C(go(r),()=>`Error in ${n}: pad must be an integer when using dimRoundingMode ${e} but got pad ${r}.`)})})}}}const F=R({reshape_:function UT(n,t){const s={x:N(n,"x","reshape","string_or_numeric")};return $.runKernel(Dl,s,{shape:t})}}),cu=R({avgPool_:function GT(n,t,e,s,r){const o=N(n,"x","avgPool","float32");C(pn(e,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${e} and dilations '1'`);let i=o,l=!1;3===o.rank&&(l=!0,i=F(o,[1,o.shape[0],o.shape[1],o.shape[2]])),C(4===i.rank,()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`),Tn("avgPool",s,r);let h=$.runKernel(Ki,{x:i},{filterSize:t,strides:e,pad:s,dimRoundingMode:r});return h=ue(h,o.dtype),l?F(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),sm=R({avgPool3d_:function HT(n,t,e,s,r,o="NDHWC"){const a=N(n,"x","avgPool3d","float32");let i=a,l=!1;4===a.rank&&(l=!0,i=F(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]])),C(5===i.rank,()=>`Error in avgPool3d: x must be rank 5 but got rank ${i.rank}.`),C("NDHWC"===o,()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${o}`),C("number"==typeof e&&e>0||Array.isArray(e)&&e[0]>0&&e[1]>0&&e[2]>0,()=>`Error in avgPool3d: Stride must be > 0, but got '${e}'`),Tn("avgPool3d",s,r);let h=$.runKernel(Xi,{x:i},{filterSize:t,strides:e,pad:s,dimRoundingMode:r,dataFormat:o});return h=ue(h,i.dtype),l?F(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),Pt=R({concat_:function jT(n,t=0){C(n.length>=1,()=>"Pass at least one tensor to concat");const e=su(n,"tensors","concat","string_or_numeric");return"complex64"===e[0].dtype&&e.forEach(o=>{if("complex64"!==o.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${o.dtype}. `)}),1===e.length?Hs(e[0]):$.runKernel(el,e,{axis:t})}}),os=R({sigmoid_:function qT(n){const e={x:N(n,"x","sigmoid","float32")};return $.runKernel(Ua,e)}}),Je=R({slice_:function KT(n,t,e){const s=N(n,"x","slice","string_or_numeric");if(0===s.rank)throw new Error("Slicing scalar is not possible");return $.runKernel(Ml,{x:s},{begin:t,size:e})}}),Ro=R({tanh_:function XT(n){const e={x:N(n,"x","tanh","float32")};return $.runKernel(Xa,e)}}),Kx=R({basicLSTMCell_:function ZT(n,t,e,s,r,o){const a=N(n,"forgetBias","basicLSTMCell"),i=N(t,"lstmKernel","basicLSTMCell"),l=N(e,"lstmBias","basicLSTMCell"),u=N(s,"data","basicLSTMCell"),c=N(r,"c","basicLSTMCell"),h=N(o,"h","basicLSTMCell"),d=Pt([u,h],1),p=ze(d,i),f=ee(p,l),m=f.shape[1]/4,y=[f.shape[0],m],b=Je(f,[0,0],y),w=Je(f,[0,m],y),x=Je(f,[0,2*m],y),S=Je(f,[0,3*m],y),I=ee(D(os(b),Ro(w)),D(c,os(ee(a,x))));return[I,D(Ro(I),os(S))]}}),hu=R({batchToSpaceND_:function YT(n,t,e){const s=N(n,"x","batchToSpaceND"),r=t.reduce((i,l)=>i*l);return C(s.rank>=1+t.length,()=>`input rank is ${s.rank} but should be > than blockShape.length ${t.length}`),C(e.length===t.length,()=>`crops.length is ${e.length} but should be equal to blockShape.length  ${t.length}`),C(s.shape[0]%r==0,()=>`input tensor batch is ${s.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${r}`),$.runKernel(Yi,{x:s},{blockShape:t,crops:e})}});function QT(n){let t;return t=0===n.rank||1===n.rank?F(n,[1,1,1,n.size]):2===n.rank?F(n,[1,1,n.shape[0],n.shape[1]]):3===n.rank?F(n,[1,n.shape[0],n.shape[1],n.shape[2]]):n,t}const ai=R({batchNorm_:function JT(n,t,e,s,r,o){null==o&&(o=.001);const a=N(n,"x","batchNorm"),i=N(t,"mean","batchNorm"),l=N(e,"variance","batchNorm");let u,c;null!=r&&(u=N(r,"scale","batchNorm")),null!=s&&(c=N(s,"offset","batchNorm")),C(i.rank===l.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),C(null==c||i.rank===c.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),C(null==u||i.rank===u.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");const d={x:QT(a),scale:u,offset:c,mean:i,variance:l},f=$.runKernel(ul,d,{varianceEpsilon:o});return F(f,a.shape)}}),rm=R({batchNorm2d_:function e2(n,t,e,s,r,o){const a=N(n,"x","batchNorm"),i=N(t,"mean","batchNorm"),l=N(e,"variance","batchNorm");let u,c;return null!=r&&(u=N(r,"scale","batchNorm")),null!=s&&(c=N(s,"offset","batchNorm")),C(2===a.rank,()=>`Error in batchNorm2D: x must be rank 2 but got rank ${a.rank}.`),C(2===i.rank||1===i.rank,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`),C(2===l.rank||1===l.rank,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`),null!=u&&C(2===u.rank||1===u.rank,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`),null!=c&&C(2===c.rank||1===c.rank,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`),ai(a,i,l,c,u,o)}}),om=R({batchNorm3d_:function t2(n,t,e,s,r,o){const a=N(n,"x","batchNorm"),i=N(t,"mean","batchNorm"),l=N(e,"variance","batchNorm");let u,c;return null!=r&&(u=N(r,"scale","batchNorm")),null!=s&&(c=N(s,"offset","batchNorm")),C(3===a.rank,()=>`Error in batchNorm3D: x must be rank 3 but got rank ${a.rank}.`),C(3===i.rank||1===i.rank,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`),C(3===l.rank||1===l.rank,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`),null!=u&&C(3===u.rank||1===u.rank,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`),null!=c&&C(3===c.rank||1===c.rank,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`),ai(a,i,l,c,u,o)}}),am=R({batchNorm4d_:function n2(n,t,e,s,r,o){const a=N(n,"x","batchNorm"),i=N(t,"mean","batchNorm"),l=N(e,"variance","batchNorm");let u,c;return null!=r&&(u=N(r,"scale","batchNorm")),null!=s&&(c=N(s,"offset","batchNorm")),C(4===a.rank,()=>`Error in batchNorm4D: x must be rank 4 but got rank ${a.rank}.`),C(4===i.rank||1===i.rank,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`),C(4===l.rank||1===l.rank,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`),null!=u&&C(4===u.rank||1===u.rank,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`),null!=c&&C(4===c.rank||1===c.rank,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`),ai(a,i,l,c,u,o)}}),im=R({bincount_:function s2(n,t,e){const s=N(n,"x","bincount"),r=N(t,"weights","bincount");return C("int32"===s.dtype,()=>`Error in bincount: input dtype must be int32, but got ${s.dtype}`),C(e>=0,()=>`size must be non-negative, but got ${e}.`),C(r.size===s.size||0===r.size,()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: ${r.shape}.`),$.runKernel(pc,{x:s,weights:r},{size:e})}}),Xx=R({bitwiseAnd_:function r2(n,t){const e=N(n,"x","bitwiseAnd"),s=N(t,"y","bitwiseAnd");if(!Xe(e.shape,s.shape))throw new Error(`BitwiseAnd: Tensors must have the same shape. x: ${e.shape}, y: ${s.shape}`);if("int32"!==e.dtype||"int32"!==s.dtype)throw new Error(`BitwiseAnd: Only supports 'int32' values in tensor, found type of x: ${e.dtype} and type of y: ${s.dtype}`);return $.runKernel(Qi,{a:e,b:s})}}),Zx=R({broadcastArgs_:function o2(n,t){const e=N(n,"s0","broadcastArgs","int32"),s=N(t,"s1","broadcastArgs","int32");if(1!==e.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${e.rank}`);if(1!==s.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${s.rank}`);return $.runKernel(fc,{s0:e,s1:s})}}),Do=R({broadcastTo_:function a2(n,t){let e=N(n,"broadcastTo","x");const s=e.shape;if(Gn(t),t.length<e.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${e.rank}.`);if(t.length>e.rank){const u=e.shape.slice();for(;u.length<t.length;)u.unshift(1);e=F(e,u)}const r=e.shape,o=Array.from(t);for(let u=t.length-1;u>=0;u--)if(r[u]===t[u])o[u]=1;else if(1!==e.shape[u])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${t}].`);return 0===o.map((u,c)=>u>1?c:-1).filter(u=>u>=0).length?Hs(e):$.runKernel(Za,{x:e},{reps:o})}}),lm=R({ceil_:function i2(n){const e={x:N(n,"x","ceil","float32")};return $.runKernel(ha,e)}}),Fn=R({clipByValue_:function l2(n,t,e){const s=N(n,"x","clipByValue");return C(t<=e,()=>`Error in clip: min (${t}) must be less than or equal to max (${e}).`),t===e?To(s.shape,t,s.dtype):$.runKernel(da,{x:s},{clipValueMin:t,clipValueMax:e})}}),um=R({concat1d_:function u2(n){return Pt(n,0)}}),cm=R({concat2d_:function c2(n,t){return Pt(n,t)}}),hm=R({concat3d_:function h2(n,t){return Pt(n,t)}}),dm=R({concat4d_:function d2(n,t){return Pt(n,t)}}),br=R({conv2d_:function p2(n,t,e,s,r="NHWC",o=[1,1],a){const i=N(n,"x","conv2d","float32"),l=N(t,"filter","conv2d","float32");let u=i,c=!1;3===i.rank&&(c=!0,u=F(i,[1,i.shape[0],i.shape[1],i.shape[2]])),C(4===u.rank,()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`),C(4===l.rank,()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`),Tn("conv2d",s,a);const h="NHWC"===r?u.shape[3]:u.shape[1];C(h===l.shape[2],()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${l.shape[2]}.`),C(pn(e,o),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`),C(Ao(o),()=>"Error in conv2D: Dilated rates should be larger than 0."),C(Ao(e),()=>"Error in conv2D: Strides should be larger than 0.");const f=$.runKernel(tl,{x:u,filter:l},{strides:e,pad:s,dataFormat:r,dilations:o,dimRoundingMode:a});return c?F(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),Dh=R({conv1d_:function f2(n,t,e,s,r="NWC",o=1,a){const i=N(n,"x","conv1d"),l=N(t,"filter","conv1d");let u=i,c=!1;2===i.rank&&(c=!0,u=F(i,[1,i.shape[0],i.shape[1]])),C(3===u.rank,()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`),C(3===l.rank,()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`),Tn("conv1d",s,a),C(u.shape[2]===l.shape[1],()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`),C(pn(e,o),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${e} and dilation '${o}'`),C(Ao(o),()=>"Error in conv1D: Dilated rates should be larger than 0."),C(Ao(e),()=>"Error in conv1D: Stride should be larger than 0."),C("NWC"===r,()=>`Error in conv1d: got dataFormat of ${r} but only NWC is currently supported.`);const h=F(l,[1,l.shape[0],l.shape[1],l.shape[2]]),d=F(u,[u.shape[0],1,u.shape[1],u.shape[2]]),m=br(d,h,[1,e],s,"NHWC",[1,o],a);return F(m,c?[m.shape[2],m.shape[3]]:[m.shape[0],m.shape[2],m.shape[3]])}}),pm=R({conv2DBackpropInput_:function m2(n,t,e,s,r,o="NHWC",a){C(n.length===t.rank,()=>`Length of inShape (${n.length}) and rank of dy (${t.rank}) must match`);let i=n,l=t,u=!1;3===t.rank&&(u=!0,l=F(t,[1,t.shape[0],t.shape[1],t.shape[2]]),i=[1,n[0],n[1],n[2]]),C(4===i.length,()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${i.length}.`),C(4===l.rank,()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`),C(4===e.rank,()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${e.rank}`);const c="NHWC"===o?i[3]:i[1],h="NHWC"===o?l.shape[3]:l.shape[1];C(c===e.shape[2],()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${e.shape[2]}.`),C(h===e.shape[3],()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${e.shape[3]}.`),Tn("conv2dDerInput",r,a);const f=$.runKernel(nl,{dy:l,filter:e},{strides:s,pad:r,dataFormat:o,dimRoundingMode:a,inputShape:i});return u?F(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),Fh=R({conv2dTranspose_:function g2(n,t,e,s,r,o){const a=N(n,"x","conv2dTranspose"),i=N(t,"filter","conv2dTranspose");return pm(e,a,i,s,r,"NHWC",o)}}),fm=R({conv3d_:function y2(n,t,e,s,r="NDHWC",o=[1,1,1]){const a=N(n,"x","conv3d"),i=N(t,"filter","conv3d");let l=a,u=!1;4===a.rank&&(u=!0,l=F(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]])),C(5===l.rank,()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`),C(5===i.rank,()=>`Error in conv3d: filter must be rank 5, but got rank ${i.rank}.`),C(l.shape[4]===i.shape[3],()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${i.shape[3]}.`),C(pn(e,o),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`),C("NDHWC"===r,()=>`Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`),C(Ao(o),()=>"Error in conv3D: Dilated rates should be larger than 0."),C(Ao(e),()=>"Error in conv3D: Strides should be larger than 0.");const d=$.runKernel(sl,{x:l,filter:i},{strides:e,pad:s,dataFormat:r,dilations:o});return u?F(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),Yx=R({conv3DBackpropInput_:function b2(n,t,e,s,r){C(n.length===t.rank,()=>`Length of inShape (${n.length}) and rank of dy (${t.rank}) must match`);let o=n,a=t,i=!1;4===t.rank&&(i=!0,a=F(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),o=[1,n[0],n[1],n[2],n[3]]);const l=o[4],u=a.shape[4];C(5===o.length,()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${o.length}.`),C(5===a.rank,()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${a.rank}`),C(5===e.rank,()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${e.rank}`),C(l===e.shape[3],()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${e.shape[3]}.`),C(u===e.shape[4],()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${e.shape[4]}.`);const d=$.runKernel(bc,{dy:a,filter:e},{pad:r,strides:s,inputShape:o});return i?F(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),mm=R({conv3dTranspose_:function x2(n,t,e,s,r){const o=N(n,"x","conv3dTranspose"),a=N(t,"filter","conv3dTranspose");return Yx(e,o,a,s,r)}}),du=R({cos_:function w2(n){const e={x:N(n,"x","cos","float32")};return $.runKernel(pa,e)}}),Oh=R({cosh_:function v2(n){const e={x:N(n,"x","cosh","float32")};return $.runKernel(fa,e)}}),pu=R({cumprod_:function S2(n,t=0,e=!1,s=!1){const o={x:N(n,"x","cumprod")};return $.runKernel(xc,o,{axis:t,exclusive:e,reverse:s})}}),Lh=R({cumsum_:function I2(n,t=0,e=!1,s=!1){const o={x:N(n,"x","cumsum")};return $.runKernel(rl,o,{axis:t,exclusive:e,reverse:s})}}),Ph=R({denseBincount_:function C2(n,t,e,s=!1){const r=N(n,"x","denseBincount"),o=N(t,"weights","denseBincount");return C("int32"===r.dtype,()=>`Error in denseBincount: input dtype must be int32, but got ${r.dtype}`),C(r.rank<=2,()=>`Error in denseBincount: input must be at most rank 2, but got rank ${r.rank}.`),C(e>=0,()=>`size must be non-negative, but got ${e}.`),C(o.size===r.size||0===o.size,()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${r.shape}, weights shape: ${o.shape}.`),$.runKernel(vc,{x:r,weights:o},{size:e,binaryOutput:s})}}),gm=R({depthToSpace_:function N2(n,t,e="NHWC"){const s=N(n,"x","depthToSpace","float32"),r="NHWC"===e?s.shape[1]:s.shape[2],o="NHWC"===e?s.shape[2]:s.shape[3],a="NHWC"===e?s.shape[3]:s.shape[1];return C(t>1,()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`),C(r*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${r} and ${t}  for depthToSpace with input shape\n    ${s.shape}`),C(o*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${o} and ${t} for depthToSpace with input shape\n        ${s.shape}`),C(a%(t*t)==0,()=>`Dimension size must be evenly divisible by ${t*t} but is ${a} for depthToSpace with input shape ${s.shape}`),$.runKernel(Sc,{x:s},{blockSize:t,dataFormat:e})}}),ii=R({depthwiseConv2d_:function k2(n,t,e,s,r="NHWC",o=[1,1],a){const i=N(n,"x","depthwiseConv2d","float32"),l=N(t,"filter","depthwiseConv2d","float32");let u=i,c=!1;3===i.rank&&(c=!0,u=F(i,[1,i.shape[0],i.shape[1],i.shape[2]])),C(4===u.rank,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`),C(4===l.rank,()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`);const h="NHWC"===r?u.shape[3]:u.shape[1];C(h===l.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${h}) must match the inChannels dimension in filter ${l.shape[2]}.`),Tn("depthwiseConv2d",s,a);const f=$.runKernel(ol,{x:u,filter:l},{strides:e,pad:s,dataFormat:r,dilations:o,dimRoundingMode:a});return c?F(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),Qx=R({diag_:function T2(n){const e={x:N(n,"x","diag")};return $.runKernel(Nc,e)}}),ym=R({dilation2d_:function _2(n,t,e,s,r=[1,1],o="NHWC"){const a=N(n,"x","dilation2d"),i=N(t,"filter","dilation2d");C(3===a.rank||4===a.rank,()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${a.rank}.`),C(3===i.rank,()=>`Error in dilation2d: filter must be rank 3, but got rank ${i.rank}.`),C("NHWC"===o,()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${o}`);let l=a,u=!1;3===a.rank&&(l=F(a,[1,a.shape[0],a.shape[1],a.shape[2]]),u=!0),C(l.shape[3]===i.shape[2],()=>`Error in dilation2d:  input and filter must have the same depth: ${l.shape[3]} vs ${i.shape[2]}`);const d=$.runKernel(al,{x:l,filter:i},{strides:e,pad:s,dilations:r});return u?F(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),Hn=R({equal_:function E2(n,t){let e=N(n,"a","equal","string_or_numeric"),s=N(t,"b","equal","string_or_numeric");return[e,s]=Tt(e,s),Le(e.shape,s.shape),$.runKernel(il,{a:e,b:s})}}),fn=R({where_:function $2(n,t,e){const s=N(t,"a","where"),r=N(e,"b","where"),o=N(n,"condition","where","bool"),a=Le(Le(o.shape,s.shape),r.shape),i=Do(o,a),l=Do(s,a),u=Do(r,a);return $.runKernel(Pl,{condition:i,t:l,e:u})}}),bm=R({divNoNan_:function A2(n,t){let e=N(n,"a","div"),s=N(t,"b","div");[e,s]=Tt(e,s);const r=ke(e,s),o=Qe(r),a=Hn(s,o);return fn(a,o,r)}}),xm=R({dot_:function R2(n,t){const e=N(n,"t1","dot"),s=N(t,"t2","dot");C(!(1!==e.rank&&2!==e.rank||1!==s.rank&&2!==s.rank),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${e.rank} and ${s.rank}.`);const r=1===e.rank?e.size:e.shape[1],o=1===s.rank?s.size:s.shape[0];if(C(r===o,()=>`Error in dot: inner dimensions of inputs must match, but got ${r} and ${o}.`),1===e.rank&&1===s.rank){const a=F(e,[1,-1]),i=F(s,[-1,1]),l=ze(a,i);return F(l,[])}if(1===e.rank&&2===s.rank){const a=F(e,[1,-1]),i=F(s,[s.shape[0],s.shape[1]]),l=ze(a,i);return F(l,[l.size])}if(2===e.rank&&1===s.rank){const a=F(s,[-1,1]),i=ze(e,a);return F(i,[i.size])}{const a=F(s,[s.shape[0],s.shape[1]]);return ze(e,a)}}}),Fo=R({einsum_:function D2(n,...t){const e=t.map((r,o)=>N(r,`tensors${o}`,"einsum"));return $.runKernel(Ec,e,{equation:n})}}),li=R({elu_:function F2(n){const e={x:N(n,"x","elu","float32")};return $.runKernel(ga,e)}}),Jx=R({ensureShape_:function O2(n,t){const e=N(n,"x","ensureShape","string_or_numeric");if(!Sb(e.shape,t))throw new Error(`EnsureShape: Shape of tensor ${e.shape} is not compatible with expected shape ${t}`);return n}}),wm=R({erf_:function L2(n){let t=N(n,"x","erf");return C("int32"===t.dtype||"float32"===t.dtype,()=>"Input dtype must be `int32` or `float32`."),"int32"===t.dtype&&(t=ue(t,"float32")),$.runKernel(ya,{x:t})}});function vm(n,t){for(let e=0;e<n.length;++e)if(n[n.length-e-1]!==t-1-e)return!1;return!0}function e0(n,t,e){const s=n.length+t.length,r=[];let o=0,a=0;for(let i=0;i<s;i++)-1===e.indexOf(i)?r.push(n[o++]):r.push(t[a++]);return r}function ln(n,t){const e=[],s=n.length;for(let o=0;o<s;o++)-1===t.indexOf(o)&&e.push(n[o]);return[e,t.map(o=>n[o])]}function Mt(n,t){return e0(n,t.map(s=>1),t)}function mn(n,t,e){C(vm(t,e),()=>`${n} supports only inner-most axes for now. Got axes ${t} and rank-${e} input.`)}function Et(n,t){if(vm(n,t))return null;const e=[];for(let s=0;s<t;++s)-1===n.indexOf(s)&&e.push(s);return n.forEach(s=>e.push(s)),e}function Hr(n){return n.map((t,e)=>[e,t]).sort((t,e)=>t[1]-e[1]).map(t=>t[0])}function zt(n,t){const e=[];for(let s=t-n;s<t;++s)e.push(s);return e}const as=R({max_:function P2(n,t=null,e=!1){const r={x:N(n,"x","max")};return $.runKernel(xl,r,{reductionIndices:t,keepDims:e})}}),ui=R({min_:function M2(n,t=null,e=!1){const r={x:N(n,"x","min")};return $.runKernel(Il,r,{axis:t,keepDims:e})}}),we=R({sum_:function z2(n,t=null,e=!1){let s=N(n,"x","sum");return"bool"===s.dtype&&(s=ue(s,"int32")),$.runKernel(zl,{x:s},{axis:t,keepDims:e})}});function t0(n,t,e=null){if(0===n.rank)return Ht(n);if(1!==n.rank&&null===e)return t0(F(n,[-1]),t,e);if(1===n.rank||"number"==typeof e||Array.isArray(e)&&1===e.length){if(1===t)return we(Ht(n),e);if(t===1/0)return as(Ht(n),e);if(t===-1/0)return ui(Ht(n),e);if("euclidean"===t||2===t)return dn(we(mr(Ht(n),Ce(2,"int32")),e));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(e)&&2===e.length){if(1===t)return as(we(Ht(n),e[0]),e[1]-1);if(t===1/0)return as(we(Ht(n),e[1]),e[0]);if(t===-1/0)return ui(we(Ht(n),e[1]),e[0]);if("fro"===t||"euclidean"===t)return dn(we(dt(n),e));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${e}`)}const ci=R({norm_:function B2(n,t="euclidean",e=null,s=!1){const r=t0(n=N(n,"x","norm"),t,e);let o=r.shape;if(s){const a=Ue(e,n.shape);o=Mt(r.shape,a)}return F(r,o)}}),Sm=R({euclideanNorm_:function V2(n,t=null,e=!1){return ci(n,"euclidean",t,e)}}),On=R({exp_:function W2(n){const e={x:N(n,"x","exp")};return $.runKernel(ba,e)}}),qt=R({expandDims_:function U2(n,t=0){const e=N(n,"x","expandDims","string_or_numeric");return C(t<=e.rank,()=>"Axis must be <= rank of the tensor"),$.runKernel(ll,{input:e},{dim:t})}}),Im=R({expm1_:function G2(n){const e={x:N(n,"x","expm1")};return $.runKernel(xa,e)}}),is=R({tile_:function H2(n,t){const e=N(n,"x","tile","string_or_numeric");return C(e.rank===t.length,()=>`Error in transpose: rank of input ${e.rank} must match length of reps ${t}.`),$.runKernel(Za,{x:e},{reps:t})}}),Mh=R({eye_:function j2(n,t,e,s="float32"){null==t&&(t=n);const r=Me([n,t],s),o=n<=t?n:t;for(let i=0;i<o;++i)r.set(1,i,i);const a=F(r.toTensor(),[n,t]);if(null==e)return a;if(1===e.length)return is(qt(a,0),[e[0],1,1]);if(2===e.length)return is(qt(qt(a,0),0),[e[0],e[1],1,1]);if(3===e.length)return is(qt(qt(qt(a,0),0),0),[e[0],e[1],e[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${e.length}D.`)}}),hi=R({floor_:function q2(n){const e={x:N(n,"x","floor","float32")};return $.runKernel(wa,e)}}),di=R({gather_:function K2(n,t,e=0,s=0){const r=N(n,"x","gather"),o=N(t,"indices","gather","int32");return $.runKernel(cl,{x:r,indices:o},{axis:e,batchDims:s})}}),_n=R({greater_:function X2(n,t){let e=N(n,"a","greater","string_or_numeric"),s=N(t,"b","greater","string_or_numeric");return[e,s]=Tt(e,s),Le(e.shape,s.shape),$.runKernel(hl,{a:e,b:s})}}),xr=R({greaterEqual_:function Z2(n,t){let e=N(n,"a","greaterEqual","string_or_numeric"),s=N(t,"b","greaterEqual","string_or_numeric");return[e,s]=Tt(e,s),Le(e.shape,s.shape),$.runKernel(Sa,{a:e,b:s})}}),Cm=R({isFinite_:function Y2(n){const e={x:N(n,"x","isFinite")};return $.runKernel(Ca,e)}}),Nm=R({isInf_:function Q2(n){const e={x:N(n,"x","isInf")};return $.runKernel(Na,e)}}),km=R({isNaN_:function J2(n){const e={x:N(n,"x","isNaN")};return $.runKernel(ka,e)}}),fu=R({leakyRelu_:function e_(n,t=.2){const s={x:N(n,"x","leakyRelu")};return $.runKernel(dl,s,{alpha:t})}}),pi=R({less_:function t_(n,t){let e=N(n,"a","less","string_or_numeric"),s=N(t,"b","less","string_or_numeric");return[e,s]=Tt(e,s),Le(e.shape,s.shape),$.runKernel(pl,{a:e,b:s})}}),jr=R({lessEqual_:function n_(n,t){let e=N(n,"a","lessEqual","string_or_numeric"),s=N(t,"b","lessEqual","string_or_numeric");return[e,s]=Tt(e,s),Le(e.shape,s.shape),$.runKernel(fl,{a:e,b:s})}});function n0(n,t,e){if(e<=0)throw new Error("The number of values should be positive.");return $.runKernel(Pc,{},{start:n,stop:t,num:e})}const Tm=R({localResponseNormalization_:function s_(n,t=5,e=1,s=1,r=.5){const o=N(n,"x","localResponseNormalization");C(4===o.rank||3===o.rank,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${o.rank}.`),C(go(t),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`);let a=o,i=!1;3===o.rank&&(i=!0,a=F(o,[1,o.shape[0],o.shape[1],o.shape[2]]));const c=$.runKernel(bl,{x:a},{depthRadius:t,bias:e,alpha:s,beta:r});return i?F(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),jn=R({log_:function r_(n){const e={x:N(n,"x","log","float32")};return $.runKernel(Ta,e)}}),mu=R({log1p_:function o_(n){const e={x:N(n,"x","log1p")};return $.runKernel(_a,e)}}),Oo=R({softplus_:function a_(n){const e={x:N(n,"x","softplus")};return $.runKernel(Ga,e)}}),_m=R({logSigmoid_:function i_(n){const t=N(n,"x","logSigmoid");return js(s=>({value:bt(Oo(bt(s))),gradFunc:a=>D(a,os(bt(s)))}))(t)}}),zh=R({logSoftmax_:function l_(n,t=-1){const e=N(n,"logits","logSoftmax");if(-1===t&&(t=e.rank-1),t!==e.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and axis was ${t}`);return js((r,o)=>{const i=as(r,t,!0),l=ye(r,i),u=ye(ue(l,"float32"),jn(we(On(l),t,!0)));return o([u]),{value:u,gradFunc:(h,d)=>{const[p]=d,g=On(p);return ye(h,D(we(h,t,!0),g))}}})(e)}}),gu=R({logSumExp_:function u_(n,t=null,e=!1){const s=N(n,"x","logSumExp"),r=Ue(t,s.shape),o=as(s,r,!0),a=ye(s,o),i=On(a),l=we(i,r),u=jn(l),c=ee(F(o,u.shape),u);if(e){const h=Mt(c.shape,r);return F(c,h)}return c}}),Ts=R({logicalAnd_:function c_(n,t){const e=N(n,"a","logicalAnd","bool"),s=N(t,"b","logicalAnd","bool");return Le(e.shape,s.shape),$.runKernel(ml,{a:e,b:s})}}),yu=R({logicalNot_:function h_(n){const e={x:N(n,"x","logicalNot","bool")};return $.runKernel(gl,e)}}),Bh=R({logicalOr_:function d_(n,t){const e=N(n,"a","logicalOr","bool"),s=N(t,"b","logicalOr","bool");return Le(e.shape,s.shape),$.runKernel(yl,{a:e,b:s})}}),Em=R({logicalXor_:function p_(n,t){const e=N(n,"a","logicalXor","bool"),s=N(t,"b","logicalXor","bool");return Le(e.shape,s.shape),Ts(Bh(n,t),yu(Ts(n,t)))}}),Vh=2147483648,Wh=R({searchSorted_:function f_(n,t,e="left"){const s=N(n,"sortedSequence","searchSorted"),r=N(t,"values","searchSorted"),a=r.shape[r.shape.length-1],i=F(s,[-1,s.shape[s.shape.length-1]]),l=F(r,[-1,a]);if(i.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(i.shape[0]!==l.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(j(l.shape)>=Vh)throw new Error(`values tensor size must less than ${Vh}`);if(i.shape[1]>=Vh)throw new Error(`trailing dim_size must less than ${Vh} for int32 output type, was ${i.shape[1]}`);return $.runKernel(th,{sortedSequence:i,values:l},{side:e})}});function s0(n,t){return Wh(n,t,"left")}const bu=R({maxPool_:function m_(n,t,e,s,r){const o=N(n,"x","maxPool");let i=o,l=!1;3===o.rank&&(l=!0,i=F(o,[1,o.shape[0],o.shape[1],o.shape[2]])),C(4===i.rank,()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`),C(pn(e,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${e} and dilations '1'`),Tn("maxPool",s,r);const h=$.runKernel(wl,{x:i},{filterSize:t,strides:e,pad:s,dimRoundingMode:r});return l?F(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),$m=R({maxPool3d_:function g_(n,t=[1,1,1],e,s,r,o="NDHWC"){const a=N(n,"x","maxPool3d");let i=a,l=!1;4===a.rank&&(l=!0,i=F(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]])),C(5===i.rank,()=>`Error in maxPool3d: x must be rank 5 but got rank ${i.rank}.`),C("NDHWC"===o,()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${o}`),Tn("maxPool3d",s,r);const h=$.runKernel(vl,{x:i},{filterSize:t,strides:e,pad:s,dimRoundingMode:r,dataFormat:o});return l?F(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),r0=R({maxPoolWithArgmax_:function y_(n,t,e,s,r=!1){const a={x:N(n,"x","maxPoolWithArgmax")},l=$.runKernel(Vc,a,{filterSize:t,strides:e,pad:s,includeBatchInIndex:r});return{result:l[0],indexes:l[1]}}}),$t=R({mean_:function b_(n,t=null,e=!1){const r={x:N(n,"x","mean")};return $.runKernel(Sl,r,{axis:t,keepDims:e})}});function Kt(n,t="float32"){if(Gn(n),"complex64"===t){const s=Kt(n,"float32"),r=Kt(n,"float32");return pr(s,r)}const e=hn(j(n),t);return $.makeTensor(e,n,t)}function Ln(n,t="float32"){if(Gn(n),"complex64"===t){const s=Ln(n,"float32"),r=Kt(n,"float32");return pr(s,r)}const e=lc(j(n),t);return $.makeTensor(e,n,t)}function o0(n,t,{indexing:e="xy"}={}){if("xy"!==e&&"ij"!==e)throw new TypeError(`${e} is not a valid third argument to meshgrid`);if(void 0===n)return[];let s=N(n,"x","meshgrid",n instanceof st?n.dtype:"float32");if(void 0===t)return[s];let r=N(t,"y","meshgrid",t instanceof st?t.dtype:"float32");const o=j(s.shape),a=j(r.shape);return"xy"===e?(s=F(s,[1,-1]),r=F(r,[-1,1]),[ze(Ln([a,1],s.dtype),s),ze(r,Ln([1,o],r.dtype))]):(s=F(s,[-1,1]),r=F(r,[1,-1]),[ze(s,Ln([1,a],s.dtype)),ze(Ln([o,1],r.dtype),r)])}const qr=R({minimum_:function x_(n,t){let e=N(n,"a","minimum"),s=N(t,"b","minimum");return[e,s]=Tt(e,s),"bool"===e.dtype&&(e=ue(e,"int32"),s=ue(s,"int32")),Le(e.shape,s.shape),$.runKernel($a,{a:e,b:s})}}),Am=R({mirrorPad_:function w_(n,t,e){C("reflect"===e||"symmetric"===e,()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${e}.`);const s=N(n,"x","mirrorPad");if(0===s.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");C(t.length===s.rank,()=>`Padding doesn't match input. Must be ${s.rank}. Got ${t.length}.`);const r="reflect"===e?1:0;for(let i=0;i<s.rank;i++)C(2===t[i].length,()=>"Invalid number of paddings. Must be length of 2 each."),C(t[i][0]>=0&&t[i][0]<=s.shape[i]-r&&t[i][1]>=0&&t[i][1]<=s.shape[i]-r,()=>`Padding in dimension ${i} cannot be greater than or equal to ${s.shape[i]-r} or less than 0 for input of shape ${s.shape}`);return $.runKernel(Cl,{x:s},{paddings:t,mode:e})}}),Rm=R({mod_:function v_(n,t){let e=N(n,"a","mod"),s=N(t,"b","mod");return[e,s]=Tt(e,s),$.runKernel(Aa,{a:e,b:s})}}),xu=R({moments_:function S_(n,t=null,e=!1){const s=Ue(t,(n=N(n,"x","moments")).shape),r=$t(n,s,e);let o=r.shape;e||(o=Mt(r.shape,s));const a=dt(ye(ue(n,"float32"),F(r,o)));return{mean:r,variance:$t(a,s,e)}}}),a0=R({multiRNNCell_:function I_(n,t,e,s){const r=N(t,"data","multiRNNCell"),o=su(e,"c","multiRNNCell"),a=su(s,"h","multiRNNCell");let i=r;const l=[];for(let h=0;h<n.length;h++){const d=n[h](i,o[h],a[h]);l.push(d[0]),l.push(d[1]),i=d[1]}const u=[],c=[];for(let h=0;h<l.length;h+=2)u.push(l[h]),c.push(l[h+1]);return[u,c]}}),i0=R({multinomial_:function C_(n,t,e,s=!1){const r=N(n,"logits","multinomial"),o=r.size,a=r.rank;if(o<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${o}.`);if(a>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${a}`);e=e||Math.random();const l={logits:1===a?F(r,[1,-1]):r},c=$.runKernel(Wc,l,{numSamples:t,seed:e,normalized:s});return 1===a?F(c,[c.size]):c}}),Lo=R({notEqual_:function N_(n,t){let e=N(n,"a","notEqual","string_or_numeric"),s=N(t,"b","notEqual","string_or_numeric");return[e,s]=Tt(e,s),Le(e.shape,s.shape),$.runKernel(kl,{a:e,b:s})}}),qn=R({onesLike_:function k_(n){const e={x:N(n,"x","onesLike")};return $.runKernel(Tl,e)}}),l0=R({outerProduct_:function T_(n,t){const e=N(n,"v1","outerProduct"),s=N(t,"v2","outerProduct");C(1===e.rank&&1===s.rank,()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${e.rank} and ${s.rank}.`);const r=F(e,[-1,1]),o=F(s,[1,-1]);return ze(r,o)}}),wr=R({pad_:function __(n,t,e=0){const s=N(n,"x","pad");if(0===s.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");return $.runKernel($l,{x:s},{paddings:t,constantValue:e})}}),u0=R({pad1d_:function E_(n,t,e=0){return C(2===t.length,()=>"Invalid number of paddings. Must be length of 2."),wr(n,[t],e)}}),c0=R({pad2d_:function $_(n,t,e=0){return C(2===t.length&&2===t[0].length&&2===t[1].length,()=>"Invalid number of paddings. Must be length of 2 each."),wr(n,t,e)}}),Dm=R({pad3d_:function A_(n,t,e=0){return C(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,()=>"Invalid number of paddings. Must be length of 2 each."),wr(n,t,e)}}),h0=R({pad4d_:function R_(n,t,e=0){return C(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,()=>"Invalid number of paddings. Must be length of 2 each."),wr(n,t,e)}}),wu=R({spaceToBatchND_:function D_(n,t,e){const s=N(n,"x","spaceToBatchND");return C(s.rank>=1+t.length,()=>`input rank ${s.rank} should be > than [blockShape] ${t.length}`),C(e.length===t.length,()=>`paddings.shape[0] ${e.length} must be equal to [blockShape] ${t.length}`),C(s.shape.reduce((a,i,l)=>l>0&&l<=t.length?a&&(i+e[l-1][0]+e[l-1][1])%t[l-1]==0:a,!0),()=>`input spatial dimensions ${s.shape.slice(1)} with paddings ${e.toString()} must be divisible by blockShapes ${t.toString()}`),$.runKernel(Bl,{x:s},{blockShape:t,paddings:e})}}),Fm=R({pool_:function F_(n,t,e,s,r,o,a){null==r&&(r=[1,1]),null==o&&(o=1),0===s&&(s="valid");const i=N(n,"x","maxPool");let l=i,u=!1;3===i.rank&&(u=!0,l=F(i,[1,i.shape[0],i.shape[1],i.shape[2]])),C(pn(o,r),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${o} and dilations '${r}'`);const c=gs(l.shape,t,o,r,s),h=[c.dilationHeight,c.dilationWidth];let d;d="same"===s?function L_(n,t){const s=n.map((a,i)=>a+(a-1)*(t[i]-1)).map(a=>a-1),r=s.map(a=>Math.floor(a/2)),o=s.map((a,i)=>a-r[i]);return s.map((a,i)=>[r[i],o[i]])}([c.filterHeight,c.filterWidth],h):[[0,0],[0,0]];const p=1===h[0]&&1===h[1],[f,g]=function O_(n,t,e){const s=e.map(c=>c[0]),r=e.map(c=>c[1]),o=n.concat(s,r),a=t.map((c,h)=>(c-o[h]%c)%c),i=r.map((c,h)=>c+a[h]),l=t.map((c,h)=>[s[h],i[h]]),u=t.map((c,h)=>[0,a[h]]);return[l,u]}([c.inHeight,c.inWidth],h,d),m=p?s:"valid",y=p?l:wu(l,h,f),w=("avg"===e?()=>cu(y,t,o,m,a):()=>bu(y,t,o,m,a))(),x=p?w:hu(w,h,g);return u?F(x,[x.shape[1],x.shape[2],x.shape[3]]):x}}),vu=R({prelu_:function P_(n,t){const e=N(n,"x","prelu"),s=N(t,"alpha","prelu");return $.runKernel(Al,{x:e,alpha:s})}}),Om=R({prod_:function M_(n,t=null,e=!1){let s=N(n,"x","prod");return"bool"===s.dtype&&(s=ue(s,"int32")),$.runKernel(Rl,{x:s},{axis:t,keepDims:e})}}),d0=R({raggedGather_:function z_(n,t,e,s){const r=n.map((c,h)=>N(c,`tensors${h}`,"raggedGather","int32")),o=N(t,"paramsDenseValues","raggedGather"),a=N(e,"indices","raggedGather","int32"),u=$.runKernel(jc,{paramsNestedSplits:r,paramsDenseValues:o,indices:a},{outputRaggedRank:s});return{outputNestedSplits:u.slice(0,u.length-1),outputDenseValues:u[u.length-1]}}}),p0=R({raggedRange_:function B_(n,t,e){const s=N(n,"starts","raggedRange"),r=N(t,"limits","raggedRange",s.dtype),o=N(e,"deltas","raggedRange",s.dtype),i=$.runKernel(qc,{starts:s,limits:r,deltas:o});return{rtNestedSplits:i[0],rtDenseValues:i[1]}}}),f0=R({raggedTensorToTensor_:function V_(n,t,e,s,r){const o=N(n,"shape","raggedTensorToTensor","int32"),a=N(t,"values","raggedTensorToTensor"),i=N(e,"defaultValue","raggedTensorToTensor",a.dtype),l=s.map((h,d)=>N(h,`tensors${d}`,"raggedTensorToTensor","int32"));return $.runKernel(Kc,{shape:o,values:a,defaultValue:i,rowPartitionTensors:l},{rowPartitionTypes:r})}}),m0=R({rand_:function W_(n,t,e){Gn(n);const s=j(n);let r=null;if(null==e||"float32"===e)r=new Float32Array(s);else if("int32"===e)r=new Int32Array(s);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);r=new Uint8Array(s)}for(let o=0;o<s;o++)r[o]=t();return $.makeTensor(r,n,e)}});var Uh=M(9128);class Lm{constructor(t,e,s,r,o){this.mean=t,this.stdDev=e,this.dtype=s,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=o||Math.random();this.random=Uh.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const r=this.nextVal;return this.nextVal=NaN,r}let t,e,s=!1;for(;!s;){let r,o,a;do{r=2*this.random()-1,o=2*this.random()-1,a=r*r+o*o}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);t=this.mean+this.stdDev*r*i,e=this.mean+this.stdDev*o*i,(!this.truncated||this.isValidTruncated(t))&&(s=!0)}return(!this.truncated||this.isValidTruncated(e))&&(this.nextVal=this.convertValue(e)),this.convertValue(t)}convertValue(t){return null==this.dtype||"float32"===this.dtype?t:Math.round(t)}isValidTruncated(t){return t<=this.upper&&t>=this.lower}}class U_{constructor(t,e,s,r){this.alpha=t,this.beta=1/e,this.dtype=s;const o=r||Math.random();this.randu=Uh.alea(o.toString()),this.randn=new Lm(0,1,s,!1,this.randu()),this.d=t<1?t+2/3:t-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let t,e,s,r,o,a;for(;;){do{r=this.randn.nextValue(),a=1+this.c*r}while(a<=0);if(a*=a*a,t=r*r,e=1-.331*t*t,s=.5*t+this.d*(1-a+Math.log(a)),o=this.randu(),o<e||Math.log(o)<s)break}return a*=1/this.beta*this.d,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(t){return"float32"===this.dtype?t:Math.round(t)}}class G_{constructor(t=0,e=1,s,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=t,this.range=e-t,this.dtype=s,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${t} - ${e} <= 1 and dtype is not float`);this.random=Uh.alea(r)}convertValue(t){return this.canReturnFloat()?t:Math.round(t)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const g0=R({randomGamma_:function K_(n,t,e=1,s="float32",r){if(Gn(n),null==e&&(e=1),null==s&&(s="float32"),"float32"!==s&&"int32"!==s)throw new Error(`Unsupported data type ${s}`);const o=new U_(t,e,s,r),a=Me(n,s);for(let i=0;i<a.values.length;i++)a.values[i]=o.nextValue();return a.toTensor()}}),Gh=R({randomNormal_:function X_(n,t=0,e=1,s,r){if(Gn(n),null!=s&&"bool"===s)throw new Error(`Unsupported data type ${s}`);const o=new Lm(t,e,s,!1,r),a=Me(n,s);for(let i=0;i<a.values.length;i++)a.values[i]=o.nextValue();return a.toTensor()}}),y0=R({randomStandardNormal_:function Z_(n,t,e){if(null!=t&&"bool"===t)throw new Error(`Unsupported data type ${t}`);return Gh(n,0,1,t,e)}}),Kr=R({randomUniform_:function Y_(n,t=0,e=1,s="float32",r){Gn(n);const o=Me(n,s),a=new G_(t,e,null,r);for(let i=0;i<o.values.length;i++)o.values[i]=a.nextValue();return o.toTensor()}}),b0=R({randomUniformInt_:function Q_(n,t,e,s){return Kr(n,t,e,"int32",s)}});function vr(n,t,e=1,s="float32"){if(0===e)throw new Error("Cannot have a step of zero");return $.runKernel(Xc,{},{start:n,stop:t,step:e,dtype:s})}const Mm=R({reciprocal_:function J_(n){const e={x:N(n,"x","reciprocal")};return $.runKernel(Fa,e)}}),_s=R({relu_:function eE(n){const e={x:N(n,"x","relu")};return $.runKernel(Oa,e)}}),Hh=R({relu6_:function tE(n){const e={x:N(n,"x","relu6")};return $.runKernel(La,e)}}),ls=R({reverse_:function nE(n,t){const s={x:N(n,"x","reverse")};return $.runKernel(Ll,s,{dims:t})}}),x0=R({reverse1d_:function sE(n){const t=N(n,"x","reverse");return C(1===t.rank,()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`),ls(t,0)}}),w0=R({reverse2d_:function rE(n,t){const e=N(n,"x","reverse");return C(2===e.rank,()=>`Error in reverse2D: x must be rank 2 but got rank ${e.rank}.`),ls(e,t)}}),v0=R({reverse3d_:function oE(n,t){const e=N(n,"x","reverse");return C(3===e.rank,()=>`Error in reverse3D: x must be rank 3 but got rank ${e.rank}.`),ls(e,t)}}),S0=R({reverse4d_:function aE(n,t){const e=N(n,"x","reverse");return C(4===e.rank,()=>`Error in reverse4D: x must be rank 4 but got rank ${e.rank}.`),ls(e,t)}}),jh=R({round_:function iE(n){const e={x:N(n,"x","round")};return $.runKernel(Pa,e)}}),qh=R({rsqrt_:function lE(n){const e={x:N(n,"x","rsqrt","float32")};return $.runKernel(Ma,e)}}),Kh=R({selu_:function uE(n){const e={x:N(n,"x","selu")};return $.runKernel(za,e)}}),Xh=R({separableConv2d_:function cE(n,t,e,s,r,o=[1,1],a="NHWC"){const i=N(n,"x","separableConv2d"),l=N(t,"depthwiseFilter","separableConv2d"),u=N(e,"pointwiseFilter","separableConv2d");let c=i,h=!1;if(3===i.rank&&(h=!0,c=F(i,[1,i.shape[0],i.shape[1],i.shape[2]])),"NCHW"===a)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");C(4===c.rank,()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`),C(4===l.rank,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`),C(4===u.rank,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`),C(1===u.shape[0],()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`),C(1===u.shape[1],()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`);const d=l.shape[2],p=l.shape[3];C(u.shape[2]===d*p,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${d*p}, but got ${u.shape[2]}.`);const f=ii(c,l,s,r,a,o),m=br(f,u,1,"valid",a);return h?F(m,[m.shape[1],m.shape[2],m.shape[3]]):m}});function zm(){return(zm=(0,Y.Z)(function*(n,t){const e=N(n,"x","setdiff1d"),s=N(t,"y","setdiff1d");C(e.dtype===s.dtype,()=>`x and y should have the same dtype, but got x (${e.dtype}) and y (${s.dtype}).`),C(1===e.rank,()=>`x should be 1D tensor, but got x (${e.shape}).`),C(1===s.rank,()=>`y should be 1D tensor, but got y (${s.shape}).`);const r=yield e.data(),o=yield s.data(),a=new Set(o);let i=0;for(let c=0;c<r.length;c++)a.has(r[c])||i++;const l=new Gt([i],e.dtype),u=new Gt([i],"int32");for(let c=0,h=0;c<r.length;c++)a.has(r[c])||(l.values[h]=r[c],u.values[h]=c,h++);return[l.toTensor(),u.toTensor()]})).apply(this,arguments)}const I0=function hE(n,t){return zm.apply(this,arguments)},Bm=R({sign_:function dE(n){const e={x:N(n,"x","sign")};return $.runKernel(Wa,e)}}),Zh=R({sin_:function pE(n){const e={x:N(n,"x","sin","float32")};return $.runKernel(Ba,e)}}),Yh=R({sinh_:function fE(n){const e={x:N(n,"x","sinh")};return $.runKernel(Va,e)}}),Su=R({slice1d_:function mE(n,t,e){const s=N(n,"x","slice1d");return C(1===s.rank,()=>`slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`),Je(s,[t],[e])}}),Qh=R({slice2d_:function gE(n,t,e){const s=N(n,"x","slice2d");return C(2===s.rank,()=>`slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`),Je(s,t,e)}}),Iu=R({slice3d_:function yE(n,t,e){const s=N(n,"x","slice3d");return C(3===s.rank,()=>`slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`),Je(s,t,e)}}),fi=R({slice4d_:function bE(n,t,e){const s=N(n,"x","slice4d");return C(4===s.rank,()=>`slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`),Je(s,t,e)}}),Cu=R({softmax_:function xE(n,t=-1){const e=N(n,"logits","softmax","float32");if(-1===t&&(t=e.rank-1),t!==e.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and dim was ${t}`);return $.runKernel(Wl,{logits:e},{dim:t})}}),Nu=R({fft_:function wE(n){return C("complex64"===n.dtype,()=>`The dtype for tf.spectral.fft() must be complex64 but got ${n.dtype}.`),$.runKernel(Ac,{input:n})}}),mi=R({ifft_:function vE(n){return C("complex64"===n.dtype,()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${n.dtype}.`),$.runKernel(Oc,{input:n})}}),Jh=R({irfft_:function SE(n){const t=n.shape[n.shape.length-1],e=n.size/t;let s;if(t<=2){const r=F(n,[e,t]);s=mi(r)}else{const r=[e,2*(t-1)],o=F(ri(n),[e,t]),a=F(ou(n),[e,t]),i=ls(Je(o,[0,1],[e,t-2]),1),l=D(ls(Je(a,[0,1],[e,t-2]),1),Ce(-1)),u=Pt([o,i],1),c=Pt([a,l],1),h=F(pr(u,c),[r[0],r[1]]);s=mi(h)}if(s=ri(s),3===n.rank&&0!==n.shape[0]){const r=s,o=n.shape[0];s=F(s,[o,s.shape[0]/o,s.shape[1]]),r.dispose()}return s}}),Pn=R({split_:function IE(n,t,e=0){const r={x:N(n,"x","split")};return $.runKernel(Vl,r,{numOrSizeSplits:t,axis:e})}}),ku=R({rfft_:function CE(n,t){C("float32"===n.dtype,()=>`The dtype for rfft() must be real value but got ${n.dtype}`);let e=n.shape[n.shape.length-1];const s=n.size/e;let r;if(null!=t&&t<e){const f=n.shape.map(m=>0),g=n.shape.map(m=>m);g[n.shape.length-1]=t,r=Je(n,f,g),e=t}else if(null!=t&&t>e){const f=n.shape.map(g=>g);f[n.shape.length-1]=t-e,r=Pt([n,Kt(f)],n.shape.length-1),e=t}else r=n;const o=Qe(r),a=F(pr(r,o),[s,e]),i=Nu(a),l=Math.floor(e/2)+1,u=ri(i),c=ou(i),h=Pn(u,[l,e-l],u.shape.length-1),d=Pn(c,[l,e-l],c.shape.length-1),p=r.shape.slice();return p[r.shape.length-1]=l,F(pr(h[0],d[0]),p)}}),ed=R({squaredDifference_:function NE(n,t){let e=N(n,"a","squaredDifference"),s=N(t,"b","squaredDifference");return[e,s]=Tt(e,s),Le(e.shape,s.shape),$.runKernel(ja,{a:e,b:s},{})}}),Kn=R({squeeze_:function kE(n,t){const e=N(n,"x","squeeze","string_or_numeric");return F(e,cr(e.shape,t).newShape)}}),Mn=R({stack_:function TE(n,t=0){const e=su(n,"tensors","stack","string_or_numeric");return C(e.length>=1,()=>"Pass at least one tensor to tf.stack"),e.length>0&&C(t<=e[0].rank,()=>"Axis must be <= rank of the tensor"),$.runKernel(El,e,{axis:t})}}),Po=R({step_:function _E(n,t=0){const s={x:N(n,"x","step")};return $.runKernel(Ya,s,{alpha:t})}}),Vm=R({stridedSlice_:function EE(n,t,e,s,r=0,o=0,a=0,i=0,l=0){const c={x:N(n,"x","stridedSlice","string_or_numeric")};return $.runKernel(lh,c,{begin:t,end:e,strides:s,beginMask:r,endMask:o,ellipsisMask:a,newAxisMask:i,shrinkAxisMask:l})}}),Wm=R({tan_:function $E(n){const e={x:N(n,"x","tan","float32")};return $.runKernel(Ka,e)}});function wn(n,t){mo(n);const e=Us(n,t);if(1!==e.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return zr(n,null,e,t)}function gi(n,t,e){if(mo(n),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const s=Us(n,e);if(2!==s.length&&1!==s.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return zr(n,t,s,e)}function C0(n,t,e){if(mo(n),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const s=Us(n,e);if(4!==s.length&&1!==s.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return zr(n,t,s,e)}function N0(n,t,e){if(mo(n),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const s=Us(n,e);if(5!==s.length&&1!==s.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return zr(n,t,s,e)}function k0(n,t,e){if(mo(n),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const s=Us(n,e);if(6!==s.length&&1!==s.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return zr(n,t=t||s,s,e)}const T0=R({tensorScatterUpdate_:function AE(n,t,e){const s=N(n,"tensor","tensorScatterupdate"),r=N(t,"indices","tensorScatterupdate","int32"),o=N(e,"updates","tensorScatterupdate");if($h(o,r,s.shape),s.dtype!==o.dtype)throw new Error(`tensor and updates must have the same dtype, instead they are ${s.dtype} and ${o.dtype}.`);return $.runKernel(eh,{tensor:s,indices:r,updates:o},{})}}),Um=R({topk_:function RE(n,t=1,e=!0){const s=N(n,"x","topk");if(0===s.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const r=s.shape[s.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>r)throw new Error(`'k' passed to topk() must be <= the last dimension (${r}) but got ${t}`);const o={x:s},a={k:t,sorted:e},[i,l]=$.runKernel(dh,o,a);return{values:i,indices:l}}}),td=R({truncatedNormal_:function DE(n,t=0,e=1,s,r){if(Gn(n),null!=s&&"bool"===s)throw new Error("Unsupported data type $ { dtype }");const o=new Lm(t,e,s,!0,r),a=Me(n,s);for(let i=0;i<a.values.length;i++)a.values[i]=o.nextValue();return a.toTensor()}}),Gm=R({unique_:function FE(n,t=0){const e=N(n,"x","unique","string_or_numeric");C(e.rank>0,()=>"The input tensor must be at least 1D");const s={x:e},r={axis:t},[o,a]=$.runKernel(fh,s,r);return{values:o,indices:a}}}),nd=R({unsortedSegmentSum_:function OE(n,t,e){const s=N(n,"x","unsortedSegmentSum"),r=N(t,"segmentIds","unsortedSegmentSum","int32");return C(go(e),()=>"numSegments must be of dtype int"),$.runKernel(Hl,{x:s,segmentIds:r},{numSegments:e})}}),us=R({unstack_:function LE(n,t=0){const e=N(n,"x","unstack","string_or_numeric");return C(t>=-e.shape.length&&t<e.shape.length,()=>`Axis = ${t} is not in [-${e.shape.length}, ${e.shape.length})`),$.runKernel(Gl,{value:e},{axis:t})}});function _0(n,t){return Wh(n,t,"right")}function Hm(n,t=!0,e,s){return $.makeVariable(n,t,e,s)}function sd(n,t){const e=[];for(let o=0;o<t.length;o++)t[o]&&e.push(o);const s=Me(n,"int32"),r=Me([e.length,n.length],"int32");for(let o=0;o<e.length;o++){const a=s.indexToLoc(e[o]);r.values.set(a,o*n.length)}return r.toTensor()}function jm(){return(jm=(0,Y.Z)(function*(n){const t=N(n,"condition","whereAsync","bool"),e=yield t.data(),s=sd(t.shape,e);return n!==t&&t.dispose(),s})).apply(this,arguments)}const qm=function PE(n){return jm.apply(this,arguments)};function Km(){return(Km=(0,Y.Z)(function*(n,t,e){const s=N(n,"tensor","boolMask"),r=N(t,"mask","boolMask","bool"),o=null==e?0:e,a=r.rank,i=s.shape;C(a>0,()=>"mask cannot be scalar"),cn(i.slice(o,o+a),r.shape,"mask's shape must match the first K dimensions of tensor's shape,");let l=1;for(let g=o;g<o+a;g++)l*=i[g];const u=i.slice(0,o).concat([l],i.slice(o+a)),c=F(s,u),h=F(r,[-1]),d=yield qm(h),p=Kn(d,[1]),f=di(c,p,o);return n!==s&&s.dispose(),t!==r&&r.dispose(),p.dispose(),c.dispose(),h.dispose(),d.dispose(),f})).apply(this,arguments)}const E0=function ME(n,t,e){return Km.apply(this,arguments)},$0=R({movingAverage_:function zE(n,t,e,s,r=!0){const o=N(n,"v","movingAverage"),a=N(t,"x","movingAverage"),i=N(e,"decay","movingAverage");Yb(o,a),C(Xe(o.shape,a.shape),()=>"Shape mismatch in v and x");const l=Ce(1),u=ye(l,i);let c=D(ye(a,o),u);if(r){C(null!=s,()=>"When using zeroDebias: true, step is required.");const h=N(s,"step","movingAverage");c=ke(c,ye(l,mr(i,h)))}return ee(o,c)}}),A0=R({scatterND_:function BE(n,t,e){Gn(e);const s=N(n,"indices","scatterND","int32"),r=N(t,"updates","scatterND");return $h(r,s,e),$.runKernel(Jc,{indices:s,updates:r},{shape:e})}}),R0=R({sparseToDense_:function WE(n,t,e,s=0){Gn(e);const r=N(n,"sparseIndices","sparseToDense","int32"),o=N(t,"sparseValues","sparseToDense","string_or_numeric"),a=N(s,"defaultValue","sparseToDense",o.dtype);return function VE(n,t,e,s){if("int32"!==n.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${n.dtype}.`);if(n.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${n.shape}.`);const r=n.rank>0?n.shape[0]:1,o=n.rank>1?n.shape[1]:1;if(e.length!==o)throw new Error(`outputShape has incorrect number of elements:, ${e.length}, should be: ${o}.`);if(0!==t.rank&&(1!==t.rank||t.size!==r))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${r}]`);if(t.dtype!==s.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(r,o,e,a),$.runKernel(ah,{sparseIndices:r,sparseValues:o,defaultValue:a},{outputShape:e})}}),D0=R({gatherND_:function UE(n,t){const e=N(t,"indices","gatherND","int32"),r={params:N(n,"x","gatherND","string_or_numeric"),indices:e};return $.runKernel(Fc,r)}}),Xm=R({dropout_:function HE(n,t,e,s){const r=N(n,"x","dropout");if(C("float32"===r.dtype,()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`),C(t>=0&&t<1,()=>`rate must be a float in the range [0, 1), but got ${t}.`),0===t)return n instanceof st?r.clone():r;const o=function GE(n,t){if(null==t)return n.shape.slice();if(Xe(n.shape,t))return t;if(n.shape.length===t.length){const e=[];for(let s=0;s<n.shape.length;s++)e.push(null==t[s]&&null!=n.shape[s]?n.shape[s]:t[s]);return e}return t}(r,e),a=1-t,i=ke(hi(ee(Kr(o,0,1,"float32",s),a)),a);return D(r,i)}});function Zm(n){return Math.floor(Math.pow(2,Math.ceil(Math.log(n)/Math.log(2))))}function rd(n,t,e){const s=1-n%2,r=new Float32Array(n);for(let o=0;o<n;++o){const a=2*Math.PI*o/(n+s-1);r[o]=t-e*Math.cos(a)}return wn(r,"float32")}function Ym(){return(Ym=(0,Y.Z)(function*(n,t,e=1){const s=N(n,"predictions","inTopK"),r=N(t,"targets","inTopK");C(s.rank>1,()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${s.rank}`),C(s.rank-1===r.rank,()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${s.rank} and targets rank ${r.rank}`),cn(s.shape.slice(0,s.shape.length-1),r.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const o=s.shape[s.shape.length-1];C(e>0&&e<=o,()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${o}), but got ${e}`);const a=yield s.data(),i=yield r.data(),[l,u]=[a.length/o,o],c=sn("bool",l);for(let h=0;h<l;h++){const d=h*u,p=a.subarray(d,d+u),f=[];for(let g=0;g<p.length;g++)f.push({value:p[g],index:g});f.sort((g,m)=>m.value-g.value),c[h]=0;for(let g=0;g<e;g++)if(f[g].index===i[h]){c[h]=1;break}}return n!==s&&s.dispose(),t!==r&&r.dispose(),ns(c,r.shape,"bool")})).apply(this,arguments)}const F0=function jE(n,t){return Ym.apply(this,arguments)},Qm=R({conv2DBackpropFilter_:function qE(n,t,e,s,r,o="NHWC",a){let i=n;3===n.rank&&(i=F(n,[1,n.shape[0],n.shape[1],n.shape[2]]));let l=t;3===l.rank&&(l=F(t,[1,t.shape[0],t.shape[1],t.shape[2]])),C(4===i.rank,()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${i.shape}.`),C(4===l.rank,()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`),C(4===e.length,()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${e}.`);const u="NHWC"===o?i.shape[3]:i.shape[1],c="NHWC"===o?l.shape[3]:l.shape[1];return C(u===e[2],()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${e[2]}.`),C(c===e[3],()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${e[3]}).`),Tn("conv2dDerFilter",r,a),$.runKernel(gc,{x:i,dy:l},{strides:s,pad:r,dataFormat:o,dimRoundingMode:a,filterShape:e})}});function od(n,t,e){if(null==e||"linear"===e)return n;if("relu"===e)return D(n,Po(t));throw new Error(`Cannot compute gradient for fused activation ${e}.`)}function ad(n,t){let e=t;const s=jt(n.shape,t.shape);return s.length>0&&(e=we(e,s)),F(e,n.shape)}function id(n,t,e,s){if("linear"===t)return n;if("relu"===t)return _s(n);if("elu"===t)return li(n);if("relu6"===t)return Hh(n);if("prelu"===t)return vu(n,e);if("leakyrelu"===t)return fu(n,s);if("sigmoid"===t)return os(n);throw new Error(`Unknown fused activation ${t}.`)}const ld=(n,t)=>!(n>0)||"linear"===t,O0=R({fusedConv2d_:function KE({x:n,filter:t,strides:e,pad:s,dataFormat:r="NHWC",dilations:o=[1,1],dimRoundingMode:a,bias:i,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(!1===ld($.state.gradientDepth,l=l||"linear")){C("NHWC"===r,()=>`Error in fused conv2d: got dataFormat of ${r} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`);let I=br(n,t,e,s,r,o,a);return null!=i&&(I=ee(I,i)),id(I,l,u,c)}const h=N(n,"x","conv2d","float32"),d=N(t,"filter","conv2d","float32");let p=h,f=!1;3===h.rank&&(f=!0,p=F(h,[1,h.shape[0],h.shape[1],h.shape[2]])),C(4===p.rank,()=>`Error in fused conv2d: input must be rank 4, but got rank ${p.rank}.`),C(4===d.rank,()=>`Error in fused conv2d: filter must be rank 4, but got rank ${d.rank}.`),Tn("fused conv2d",s,a);const g="NHWC"===r?p.shape[3]:p.shape[1];C(d.shape[2]===g,()=>`Error in conv2d: depth of input (${g}) must match input depth for filter ${d.shape[2]}.`),C(pn(e,o),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`);const m=an(p.shape,d.shape,e,o,s,a);let y,b;if(null!=i&&(y=N(i,"bias","fused conv2d"),[y]=Tt(y,h),"NHWC"===r?Le(m.outShape,y.shape):(C(y.shape.length<=1,()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${y.shape.length}.`),C(0===y.shape.length||y.shape[0]===m.outChannels||1===y.shape[0],()=>`Error in fused conv2d: bias shape (${y.shape}) is not compatible with the number of output channels (${m.outChannels})`))),null!=u){const I=u.shape;if(C(I.length<=1||3===I.length,()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${I.length}.`),1===I.length)C(1===I[0]||I[0]===m.outChannels,()=>`Error in fused conv2d: PReLU activation weights (${I}) is not compatible with the number of output channels (${m.outChannels}).`);else if(3===I.length)try{Le(I,m.outShape)}catch{throw Error(`Error in fused conv2d: PReLU activation weights (${I}) is not compatible with the output shape of the conv2d (${m.outShape}).`)}b=N(u,"prelu weights","fused conv2d")}const w=(I,k)=>{C("NHWC"===r,()=>`Error in gradient of fused conv2D: got dataFormat of ${r} but only NHWC is currently supported.`);const[T,_,E,L]=k,B=od(I,E,l);C(Gr(o),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${o}'`);const G=[pm(_.shape,B,T,e,s),Qm(_,B,T.shape,e,s)];if(null!=L){const K=ad(L,B);G.push(K)}return G},x={x:p,filter:d,bias:y,preluActivationWeights:b},S={strides:e,pad:s,dataFormat:r,dilations:o,dimRoundingMode:a,activation:l,leakyreluAlpha:c};return null==i?js((k,T,_)=>{let E=$.runKernel(Kl,x,S);return _([T,k,E]),f&&(E=F(E,[E.shape[1],E.shape[2],E.shape[3]])),{value:E,gradFunc:w}})(p,d):js((k,T,_,E)=>{let L=$.runKernel(Kl,x,S);return E([T,k,L,_]),f&&(L=F(L,[L.shape[1],L.shape[2],L.shape[3]])),{value:L,gradFunc:w}})(p,d,y)}}),L0=R({depthwiseConv2dNativeBackpropFilter_:function XE(n,t,e,s,r,o=[1,1],a){let i=n;3===n.rank&&(i=F(n,[1,n.shape[0],n.shape[1],n.shape[2]]));let l=t;return 3===l.rank&&(l=F(t,[1,t.shape[0],t.shape[1],t.shape[2]])),$.runKernel(Ic,{x:i,dy:l},{strides:s,pad:r,dimRoundingMode:a,dilations:o,filterShape:e})}}),P0=R({depthwiseConv2dNativeBackpropInput_:function ZE(n,t,e,s,r,o=[1,1],a){let i=t,l=!1;3===t.rank&&(l=!0,i=F(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const h=$.runKernel(Cc,{dy:i,filter:e},{strides:s,pad:r,dimRoundingMode:a,dilations:o,inputShape:n});return l?F(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),QE=R({fusedDepthwiseConv2d_:function YE({x:n,filter:t,strides:e,pad:s,dataFormat:r="NHWC",dilations:o=[1,1],dimRoundingMode:a,bias:i,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(!1===ld($.state.gradientDepth,l)){let S=ii(n,t,e,s,r,o,a);return null!=i&&(S=ee(S,i)),id(S,l,u,c)}const h=N(n,"x","depthwiseConv2d","float32"),d=N(t,"filter","depthwiseConv2d","float32");let p=h,f=!1;3===h.rank&&(f=!0,p=F(h,[1,h.shape[0],h.shape[1],h.shape[2]])),C(4===p.rank,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${p.rank}.`),C(4===d.rank,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${d.rank}.`),C(p.shape[3]===d.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${p.shape[3]}) must match the inChannels dimension in filter ${d.shape[2]}.`),null==o&&(o=[1,1]),C(pn(e,o),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`),Tn("fused depthwiseConv2d",s,a);const g=an(p.shape,d.shape,e,o,s,a,!0);let m,y;null!=i&&(m=N(i,"bias","fused conv2d"),[m]=Tt(m,h),Le(g.outShape,m.shape)),null!=u&&(y=N(u,"prelu weights","fused depthwiseConv2d"));const b=(S,I)=>{C(Gr(o),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`);const[k,T,_,E]=I,L=od(S,_,l),B=P0(T.shape,L,k,e,s,o,a),W=L0(T,L,k.shape,e,s,o,a);return null!=E?[B,W,ad(m,L)]:[B,W]},w={x:p,filter:d,bias:m,preluActivationWeights:y},x={strides:e,pad:s,dataFormat:r,dilations:o,dimRoundingMode:a,activation:l,leakyreluAlpha:c};return null==i?js((I,k,T)=>{let _=$.runKernel(Xl,w,x);return T([k,I,_]),f&&(_=F(_,[_.shape[1],_.shape[2],_.shape[3]])),{value:_,gradFunc:b}})(p,d):js((I,k,T,_)=>{let E=$.runKernel(Xl,w,x);return _([k,I,E,T]),f&&(E=F(E,[E.shape[1],E.shape[2],E.shape[3]])),{value:E,gradFunc:b}})(p,d,m)}}),Jm=R({fusedMatMul_:function JE({a:n,b:t,transposeA:e=!1,transposeB:s=!1,bias:r,activation:o="linear",preluActivationWeights:a,leakyreluAlpha:i=.2}){if(!1===ld($.state.gradientDepth,o)){let L=ze(n,t,e,s);return null!=r&&(L=ee(L,r)),id(L,o,a,i)}let l=N(n,"a","fused matMul"),u=N(t,"b","fused matMul");[l,u]=Tt(l,u);const c=e?l.shape[l.rank-2]:l.shape[l.rank-1],h=s?u.shape[u.rank-1]:u.shape[u.rank-2],d=e?l.shape[l.rank-1]:l.shape[l.rank-2],p=s?u.shape[u.rank-2]:u.shape[u.rank-1],f=l.shape.slice(0,-2),g=u.shape.slice(0,-2),m=j(f),y=j(g);C(c===h,()=>`Error in fused matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${e} and transposeB=${s} must match.`);const w=Le(l.shape.slice(0,-2),u.shape.slice(0,-2)).concat([d,p]),x=F(l,e?[m,c,d]:[m,d,c]),S=F(u,s?[y,p,h]:[y,h,p]);let I,k;null!=r&&(I=N(r,"bias","fused matMul"),[I]=Tt(I,l),Le(w,I.shape)),null!=a&&(k=N(a,"prelu weights","fused matMul"));const T=(L,B)=>{const[W,U,G,K]=B,X=od(F(L,G.shape),G,o);let H,Z;return e||s?!e&&s?(H=ze(X,U,!1,!1),Z=ze(X,W,!0,!1)):e&&!s?(H=ze(U,X,!1,!0),Z=ze(W,X,!1,!1)):(H=ze(U,X,!0,!0),Z=ze(X,W,!0,!0)):(H=ze(X,U,!1,!0),Z=ze(W,X,!0,!1)),null!=r?[H,Z,ad(K,X)]:[H,Z]},_={a:x,b:S,bias:I,preluActivationWeights:k},E={transposeA:e,transposeB:s,activation:o,leakyreluAlpha:i};return null==r?js((B,W,U)=>{const G=$.runKernel(ql,_,E);return U([B,W,G]),{value:F(G,w),gradFunc:T}})(x,S):js((B,W,U,G)=>{const K=$.runKernel(ql,_,E);return G([B,W,K,U]),{value:F(K,w),gradFunc:T}})(x,S,I)}}),t$=R({hammingWindow_:function e$(n){return rd(n,.54,.46)}}),M0=R({hannWindow_:function n$(n){return rd(n,.5,.5)}}),z0=R({frame_:function s$(n,t,e,s=!1,r=0){let o=0;const a=[];for(;o+t<=n.size;)a.push(Je(n,o,t)),o+=e;if(s)for(;o<n.size;){const i=o+t-n.size,l=Pt([Je(n,o,t-i),To([i],r)]);a.push(l),o+=e}return 0===a.length?gi([],[0,t]):F(Pt(a),[a.length,t])}}),o$=R({stft_:function r$(n,t,e,s,r=M0){null==s&&(s=Zm(t));const o=z0(n,t,e),a=D(o,r(t));return ku(a,s)}}),i$=R({cropAndResize_:function a$(n,t,e,s,r="bilinear",o=0){const a=N(n,"image","cropAndResize"),i=N(t,"boxes","cropAndResize","float32"),l=N(e,"boxInd","cropAndResize","int32"),u=i.shape[0];return C(4===a.rank,()=>`Error in cropAndResize: image must be rank 4,but got rank ${a.rank}.`),C(2===i.rank&&4===i.shape[1],()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${i.shape}.`),C(1===l.rank&&l.shape[0]===u,()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${i.shape}.`),C(2===s.length,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`),C(s[0]>=1&&s[1]>=1,()=>`cropSize must be atleast [1,1], but was ${s}`),C("bilinear"===r||"nearest"===r,()=>`method must be bilinear or nearest, but was ${r}`),$.runKernel(wc,{image:a,boxes:i,boxInd:l},{method:r,extrapolationValue:o,cropSize:s})}}),u$=R({flipLeftRight_:function l$(n){const t=N(n,"image","flipLeftRight","float32");return C(4===t.rank,()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`),$.runKernel(Dc,{image:t},{})}}),h$=R({grayscaleToRGB_:function c$(n){const t=N(n,"image","grayscaleToRGB"),e=t.rank-1,s=t.shape[e];C(t.rank>=2,()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`),C(1===s,()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${s}.`);const r=new Array(t.rank);return r.fill(1,0,e),r[e]=3,is(t,r)}}),p$=R({rgbToGrayscale_:function d$(n){const t=N(n,"image","RGBToGrayscale"),s=t.shape[t.rank-1];C(t.rank>=2,()=>`Error in RGBToGrayscale: images must be at least rank 2, but got rank ${t.rank}.`),C(3===s,()=>`Error in RGBToGrayscale: last dimension of an RGB image should be size 3, but got size ${s}.`);const r=t.dtype,o=ue(t,"float32"),a=wn([.2989,.587,.114]);let i;switch(t.rank){case 2:i=Fo("ij,j->i",o,a);break;case 3:i=Fo("ijk,k->ij",o,a);break;case 4:i=Fo("ijkl,l->ijk",o,a);break;case 5:i=Fo("ijklm,m->ijkl",o,a);break;case 6:i=Fo("ijklmn,n->ijklm",o,a);break;default:throw new Error("Not a valid tensor rank.")}return i=qt(i,-1),ue(i,r)}}),m$=R({rotateWithOffset_:function f$(n,t,e=0,s=.5){const r=N(n,"image","rotateWithOffset","float32");return C(4===r.rank,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`),$.runKernel(gh,{image:r},{radians:t,fillValue:e,center:s})}});function yi(n,t,e,s,r,o){null==s&&(s=.5),null==r&&(r=Number.NEGATIVE_INFINITY),null==o&&(o=0);const a=n.shape[0];return e=Math.min(e,a),C(0<=s&&s<=1,()=>`iouThreshold must be in [0, 1], but was '${s}'`),C(2===n.rank,()=>`boxes must be a 2D tensor, but was of rank '${n.rank}'`),C(4===n.shape[1],()=>`boxes must have 4 columns, but 2nd dimension was ${n.shape[1]}`),C(1===t.rank,()=>"scores must be a 1D tensor"),C(t.shape[0]===a,()=>`scores has incompatible shape with boxes. Expected ${a}, but was ${t.shape[0]}`),C(0<=o&&o<=1,()=>`softNmsSigma must be in [0, 1], but was '${o}'`),{maxOutputSize:e,iouThreshold:s,scoreThreshold:r,softNmsSigma:o}}const y$=R({nonMaxSuppression_:function g$(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY){const o=N(n,"boxes","nonMaxSuppression","float32"),a=N(t,"scores","nonMaxSuppression","float32"),i=yi(o,a,e,s,r);return $.runKernel(Uc,{boxes:o,scores:a},{maxOutputSize:e=i.maxOutputSize,iouThreshold:s=i.iouThreshold,scoreThreshold:r=i.scoreThreshold})}});function b$(n,t,e){const s=function x$(n,t,e){return function v$(n,t,e){let s=0,r=n.length,o=0,a=!1;for(;s<r;){o=s+(r-s>>>1);const i=e(t,n[o]);i>0?s=o+1:(r=o,a=!i)}return a?s:-s-1}(n,t,e||w$)}(n,t,e);n.splice(s<0?-(s+1):s,0,t)}function w$(n,t){return n>t?1:n<t?-1:0}function ud(n,t,e,s,r){return eg(n,t,e,s,r,0)}function cd(n,t,e,s,r,o){return eg(n,t,e,s,r,0,!1,o,!0)}function hd(n,t,e,s,r,o){return eg(n,t,e,s,r,o,!0)}function eg(n,t,e,s,r,o,a=!1,i=!1,l=!1){const u=[];for(let m=0;m<t.length;m++)t[m]>r&&u.push({score:t[m],boxIndex:m,suppressBeginIndex:0});u.sort(B0);const c=o>0?-.5/o:0,h=[],d=[];for(;h.length<e&&u.length>0;){const m=u.pop(),{score:y,boxIndex:b,suppressBeginIndex:w}=m;if(y<r)break;let x=!1;for(let S=h.length-1;S>=w;--S){const I=S$(n,b,h[S]);if(I>=s){x=!0;break}if(m.score=m.score*I$(s,c,I),m.score<=r)break}m.suppressBeginIndex=h.length,x||(m.score===y?(h.push(b),d.push(m.score)):m.score>r&&b$(u,m,B0))}const p=h.length,f=e-p;i&&f>0&&(h.push(...new Array(f).fill(0)),d.push(...new Array(f).fill(0)));const g={selectedIndices:h};return a&&(g.selectedScores=d),l&&(g.validOutputs=p),g}function S$(n,t,e){const s=n.subarray(4*t,4*t+4),r=n.subarray(4*e,4*e+4),o=Math.min(s[0],s[2]),a=Math.min(s[1],s[3]),i=Math.max(s[0],s[2]),l=Math.max(s[1],s[3]),u=Math.min(r[0],r[2]),c=Math.min(r[1],r[3]),h=Math.max(r[0],r[2]),d=Math.max(r[1],r[3]),p=(i-o)*(l-a),f=(h-u)*(d-c);if(p<=0||f<=0)return 0;const g=Math.max(o,u),m=Math.max(a,c),y=Math.min(i,h),b=Math.min(l,d),w=Math.max(y-g,0)*Math.max(b-m,0);return w/(p+f-w)}function I$(n,t,e){const s=Math.exp(t*e*e);return e<=n?s:0}function B0(n,t){return n.score-t.score||n.score===t.score&&t.boxIndex-n.boxIndex}function tg(){return(tg=(0,Y.Z)(function*(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY){const o=N(n,"boxes","nonMaxSuppressionAsync"),a=N(t,"scores","nonMaxSuppressionAsync"),i=yi(o,a,e,s,r);e=i.maxOutputSize,s=i.iouThreshold,r=i.scoreThreshold;const l=yield Promise.all([o.data(),a.data()]),u=l[0],c=l[1],{selectedIndices:h}=ud(u,c,e,s,r);return o!==n&&o.dispose(),a!==t&&a.dispose(),wn(h,"int32")})).apply(this,arguments)}const T$=R({nonMaxSuppressionWithScore_:function k$(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY,o=0){const a=N(n,"boxes","nonMaxSuppression"),i=N(t,"scores","nonMaxSuppression"),l=yi(a,i,e,s,r,o),h=$.runKernel(Hc,{boxes:a,scores:i},{maxOutputSize:e=l.maxOutputSize,iouThreshold:s=l.iouThreshold,scoreThreshold:r=l.scoreThreshold,softNmsSigma:o=l.softNmsSigma});return{selectedIndices:h[0],selectedScores:h[1]}}});function ng(){return(ng=(0,Y.Z)(function*(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY,o=0){const a=N(n,"boxes","nonMaxSuppressionAsync"),i=N(t,"scores","nonMaxSuppressionAsync"),l=yi(a,i,e,s,r,o);e=l.maxOutputSize,s=l.iouThreshold,r=l.scoreThreshold,o=l.softNmsSigma;const u=yield Promise.all([a.data(),i.data()]),c=u[0],h=u[1],{selectedIndices:d,selectedScores:p}=hd(c,h,e,s,r,o);return a!==n&&a.dispose(),i!==t&&i.dispose(),{selectedIndices:wn(d,"int32"),selectedScores:wn(p)}})).apply(this,arguments)}const A$=R({nonMaxSuppressionPadded_:function $$(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY,o=!1){const a=N(n,"boxes","nonMaxSuppression"),i=N(t,"scores","nonMaxSuppression"),l=yi(a,i,e,s,r,null),f=$.runKernel(Gc,{boxes:a,scores:i},{maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:o});return{selectedIndices:f[0],validOutputs:f[1]}}});function sg(){return(sg=(0,Y.Z)(function*(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY,o=!1){const a=N(n,"boxes","nonMaxSuppressionAsync"),i=N(t,"scores","nonMaxSuppressionAsync"),l=yi(a,i,e,s,r,null),u=l.maxOutputSize,c=l.iouThreshold,h=l.scoreThreshold,[d,p]=yield Promise.all([a.data(),i.data()]),{selectedIndices:f,validOutputs:g}=cd(d,p,u,c,h,o);return a!==n&&a.dispose(),i!==t&&i.dispose(),{selectedIndices:wn(f,"int32"),validOutputs:Ce(g,"int32")}})).apply(this,arguments)}const V0=R({resizeBilinear_:function F$(n,t,e=!1,s=!1){const r=N(n,"images","resizeBilinear");C(3===r.rank||4===r.rank,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`),C(2===t.length,()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`),C(!1===s||!1===e,()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");let o=r,a=!1;3===r.rank&&(a=!0,o=F(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,u=$.runKernel(Ol,{images:o},{alignCorners:e,halfPixelCenters:s,size:t});return a?F(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),W0=R({resizeNearestNeighbor_:function O$(n,t,e=!1,s=!1){const r=N(n,"images","resizeNearestNeighbor");C(3===r.rank||4===r.rank,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`),C(2===t.length,()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`),C("float32"===r.dtype||"int32"===r.dtype,()=>"`images` must have `int32` or `float32` as dtype"),C(!1===s||!1===e,()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");let o=r,a=!1;3===r.rank&&(a=!0,o=F(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,u=$.runKernel(Fl,{images:o},{alignCorners:e,halfPixelCenters:s,size:t});return a?F(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),M$=R({threshold_:function L$(n,t="binary",e=!1,s=.5){const r=N(n,"image","threshold"),l=r.shape[0]*r.shape[1];let c,h,d,p,u=D(wn([s]),255);if(C(3===r.rank,()=>`Error in threshold: image must be rank 3,but got rank ${r.rank}.`),C(3===r.shape[2]||1===r.shape[2],()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${r.shape[2]}.`),C("int32"===r.dtype||"float32"===r.dtype,()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${r.dtype}.`),C("otsu"===t||"binary"===t,()=>`Method must be binary or otsu, but was ${t}`),3===r.shape[2]){[c,h,d]=Pn(r,[1,1,1],-1);const m=D(c,.2989),y=D(h,.587),b=D(d,.114);p=ee(ee(m,y),b)}else p=n;"otsu"===t&&(u=function P$(n,t){let o,a,i,l,u,c,e=wn([-1]),s=wn([0]),r=wn([0]);for(let h=0;h<n.size-1;h++){o=Je(n,0,h+1),a=Je(n,h+1),u=ke(we(o),t),c=ke(we(a),t);const d=we(D(o,vr(0,o.size)));i=ke(d,we(o));const p=To(a.shape,o.size),f=ee(vr(0,a.size),p),g=D(a,f);l=ke(we(g),we(a));const m=ye(i,l),y=ye(i,l),b=D(u,c);r=D(D(b,m),y);const w=_n(r,s);s=fn(w,r,s),e=fn(w,wn([h]),e)}return e}(im(ue(jh(p),"int32"),ns([]),256),l));const f=e?jr(p,u):_n(p,u);return ue(D(f,255),"int32")}}),B$=R({transform_:function z$(n,t,e="nearest",s="constant",r=0,o){const a=N(n,"image","transform","float32"),i=N(t,"transforms","transform","float32");return C(4===a.rank,()=>`Error in transform: image must be rank 4,but got rank ${a.rank}.`),C(2===i.rank&&(i.shape[0]===a.shape[0]||1===i.shape[0])&&8===i.shape[1],()=>"Error in transform: Input transform should be batch x 8 or 1 x 8"),C(null==o||2===o.length,()=>`Error in transform: outputShape must be [height, width] or null, but got ${o}.`),$.runKernel(ph,{image:a,transforms:i},{interpolation:e,fillMode:s,fillValue:r,outputShape:o})}}),W$=R({bandPart_:function V$(n,t,e){const s=N(n,"a","bandPart");C(s.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${s.rank}.`);const r=s.shape,[o,a]=s.shape.slice(-2);let i,l;"number"==typeof t?(C(t%1==0,()=>`bandPart(): numLower must be an integer, got ${t}.`),C(t<=o,()=>`bandPart(): numLower (${t}) must not be greater than the number of rows (${o}).`),i=N(t<0?o:t,"numLower","bandPart")):(C("int32"===t.dtype,()=>"bandPart(): numLower's dtype must be an int32."),i=fn(pi(t,0),o,qr(t,o))),"number"==typeof e?(C(e%1==0,()=>`bandPart(): numUpper must be an integer, got ${e}.`),C(e<=a,()=>`bandPart(): numUpper (${e}) must not be greater than the number of columns (${a}).`),l=N(e<0?a:e,"numUpper","bandPart")):(C("int32"===e.dtype,()=>"bandPart(): numUpper's dtype must be an int32."),l=fn(pi(e,0),a,qr(e,a)));const u=F(vr(0,o,1,"int32"),[-1,1]),c=vr(0,a,1,"int32"),h=ye(u,c),d=Ts(jr(h,i),xr(h,bt(l))),p=Kt([o,a],s.dtype);return F(Mn(us(F(s,[-1,o,a])).map(f=>fn(d,f,p))),r)}}),G$=R({gramSchmidt_:function U$(n){let t;if(Array.isArray(n)){t=!1,C(null!=n&&n.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");const r=n[0].shape[0];for(let o=1;o<n.length;++o)C(n[o].shape[0]===r,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${n[o].shape[0]} vs. ${r})`)}else t=!0,n=Pn(n,n.shape[0],0).map(r=>Kn(r,[0]));C(n.length<=n[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${n.length}) exceeds number of dimensions (${n[0].shape[0]}).`);const e=[],s=n;for(let r=0;r<n.length;++r)e.push($.tidy(()=>{let o=s[r];if(r>0)for(let a=0;a<r;++a){const i=D(we(D(e[a],o)),e[a]);o=ye(o,i)}return ke(o,ci(o,"euclidean"))}));return t?Mn(e,0):e}});function U0(n,t=!1){return $.tidy(()=>{C(2===n.shape.length,()=>`qr2d() requires a 2D Tensor, but got a ${n.shape.length}D Tensor.`);const e=n.shape[0],s=n.shape[1];let r=Mh(e),o=Hs(n);const a=gi([[1]],[1,1]);let i=Hs(a);const l=e>=s?s:e;for(let u=0;u<l;++u){const c=o,h=i,d=r;[i,o,r]=$.tidy(()=>{const p=Je(o,[u,u],[e-u,1]),f=ci(p),g=Je(o,[u,u],[1,1]),m=fn(_n(g,0),gi([[-1]]),gi([[1]])),y=ye(g,D(m,f)),b=ke(p,y);i=1===b.shape[0]?Hs(a):Pt([a,Je(b,[1,0],[b.shape[0]-1,b.shape[1]])],0);const w=bt(ke(ze(m,y),f)),x=Je(o,[u,0],[e-u,s]),S=D(w,i),I=Ze(i);if(0===u)o=ye(x,ze(S,ze(I,x)));else{const _=ye(x,ze(S,ze(I,x)));o=Pt([Je(o,[0,0],[u,s]),_],0)}const k=Ze(S),T=Je(r,[0,u],[e,r.shape[1]-u]);if(0===u)r=ye(T,ze(ze(T,i),k));else{const _=ye(T,ze(ze(T,i),k));r=Pt([Je(r,[0,0],[e,u]),_],1)}return[i,o,r]}),Ge([c,h,d])}return!t&&e>s&&(r=Je(r,[0,0],[e,s]),o=Je(o,[0,0],[s,s])),[r,o]})}const j$=R({qr_:function H$(n,t=!1){if(C(n.rank>=2,()=>`qr() requires input tensor to have a rank >= 2, but got rank ${n.rank}`),2===n.rank)return U0(n,t);{const e=n.shape.slice(0,n.shape.length-2).reduce((l,u)=>l*u),s=us(F(n,[e,n.shape[n.shape.length-2],n.shape[n.shape.length-1]]),0),r=[],o=[];return s.forEach(l=>{const[u,c]=U0(l,t);r.push(u),o.push(c)}),[F(Mn(r,0),n.shape),F(Mn(o,0),n.shape)]}}});var zn=function(n){return n[n.NONE=0]="NONE",n[n.MEAN=1]="MEAN",n[n.SUM=2]="SUM",n[n.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS",n}(zn||{});const Sr=R({computeWeightedLoss_:function q$(n,t,e=zn.SUM_BY_NONZERO_WEIGHTS){const s=N(n,"losses","computeWeightedLoss");let r=null;null!=t&&(r=N(t,"weights","computeWeightedLoss"));const o=null==r?s:D(s,r);if(e===zn.NONE)return o;if(e===zn.SUM)return we(o);if(e===zn.MEAN){if(null==r)return $t(o);{const a=s.size/r.size,i=ke(we(o),we(r));return a>1?ke(i,Ce(a)):i}}if(e===zn.SUM_BY_NONZERO_WEIGHTS){if(null==r)return ke(we(o),Ce(s.size));{const a=D(r,Ln(s.shape)),i=ue(we(Lo(a,Ce(0))),"float32");return ke(we(o),i)}}throw Error(`Unknown reduction: ${e}`)}}),X$=R({absoluteDifference_:function K$(n,t,e,s=zn.SUM_BY_NONZERO_WEIGHTS){const r=N(n,"labels","absoluteDifference"),o=N(t,"predictions","absoluteDifference");let a=null;null!=e&&(a=N(e,"weights","absoluteDifference")),cn(r.shape,o.shape,"Error in absoluteDifference: ");const i=Ht(ye(r,o));return Sr(i,a,s)}}),Y$=R({cosineDistance_:function Z$(n,t,e,s,r=zn.SUM_BY_NONZERO_WEIGHTS){const o=N(n,"labels","cosineDistance"),a=N(t,"predictions","cosineDistance");let i=null;null!=s&&(i=N(s,"weights","cosineDistance")),cn(o.shape,a.shape,"Error in cosineDistance: ");const l=Ce(1),u=ye(l,we(D(o,a),e,!0));return Sr(u,i,r)}}),J$=R({hingeLoss_:function Q$(n,t,e,s=zn.SUM_BY_NONZERO_WEIGHTS){let r=N(n,"labels","hingeLoss");const o=N(t,"predictions","hingeLoss");let a=null;null!=e&&(a=N(e,"weights","hingeLoss")),cn(r.shape,o.shape,"Error in hingeLoss: ");const i=Ce(1);r=ye(D(Ce(2),r),i);const l=_s(ye(i,D(r,o)));return Sr(l,a,s)}}),tA=R({huberLoss_:function eA(n,t,e,s=1,r=zn.SUM_BY_NONZERO_WEIGHTS){const o=N(n,"labels","huberLoss"),a=N(t,"predictions","huberLoss");let i=null;null!=e&&(i=N(e,"weights","huberLoss")),cn(o.shape,a.shape,"Error in huberLoss: ");const l=Ce(s),u=Ht(ye(a,o)),c=qr(u,l),h=ye(u,c),d=ee(D(Ce(.5),dt(c)),D(l,h));return Sr(d,i,r)}}),sA=R({logLoss_:function nA(n,t,e,s=1e-7,r=zn.SUM_BY_NONZERO_WEIGHTS){const o=N(n,"labels","logLoss"),a=N(t,"predictions","logLoss");let i=null;null!=e&&(i=N(e,"weights","logLoss")),cn(o.shape,a.shape,"Error in logLoss: ");const l=Ce(1),u=Ce(s),c=bt(D(o,jn(ee(a,u)))),h=D(ye(l,o),jn(ee(ye(l,a),u))),d=ye(c,h);return Sr(d,i,r)}}),oA=R({meanSquaredError_:function rA(n,t,e,s=zn.SUM_BY_NONZERO_WEIGHTS){const r=N(n,"labels","meanSquaredError"),o=N(t,"predictions","meanSquaredError");let a=null;null!=e&&(a=N(e,"weights","meanSquaredError")),cn(r.shape,o.shape,"Error in meanSquaredError: ");const i=ed(r,o);return Sr(i,a,s)}}),lA=R({sigmoidCrossEntropy_:function iA(n,t,e,s=0,r=zn.SUM_BY_NONZERO_WEIGHTS){let o=N(n,"multiClassLabels","sigmoidCrossEntropy");const a=N(t,"logits","sigmoidCrossEntropy");let i=null;if(null!=e&&(i=N(e,"weights","sigmoidCrossEntropy")),cn(o.shape,a.shape,"Error in sigmoidCrossEntropy: "),s>0){const u=Ce(s),c=Ce(1),h=Ce(.5);o=ee(D(o,ye(c,u)),D(h,u))}const l=function aA(n,t){const e=N(n,"labels","sigmoidCrossEntropyWithLogits"),s=N(t,"logits","sigmoidCrossEntropyWithLogits");cn(e.shape,s.shape,"Error in sigmoidCrossEntropyWithLogits: ");const r=_s(s),o=D(s,e),a=mu(On(bt(Ht(s))));return ee(ye(r,o),a)}(o,a);return Sr(l,i,r)}}),hA=R({softmaxCrossEntropy_:function cA(n,t,e,s=0,r=zn.SUM_BY_NONZERO_WEIGHTS){let o=N(n,"onehotLabels","softmaxCrossEntropy");const a=N(t,"logits","softmaxCrossEntropy");let i=null;if(null!=e&&(i=N(e,"weights","softmaxCrossEntropy")),cn(o.shape,a.shape,"Error in softmaxCrossEntropy: "),s>0){const u=Ce(s),c=Ce(1),h=Ce(o.shape[1]);o=ee(D(o,ye(c,u)),ke(u,h))}const l=function uA(n,t,e=-1){if(-1===e&&(e=t.rank-1),e!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${e}`);return js((r,o,a)=>{const l=gu(o,[e],!0),u=ye(ue(o,"float32"),l);a([r,u]);const c=bt(D(u,r));return{value:we(c,[e]),gradFunc:(p,f)=>{const[g,m]=f,y=Mt(p.shape,[e]);return[D(F(p,y),ye(ue(g,"float32"),On(m))),D(F(p,y),ye(On(m),ue(g,"float32")))]}}})(n,t)}(o,a);return Sr(l,i,r)}}),G0={fft:Nu,ifft:mi,rfft:ku,irfft:Jh},H0={hammingWindow:t$,hannWindow:M0,frame:z0,stft:o$},Xn={flipLeftRight:u$,grayscaleToRGB:h$,resizeNearestNeighbor:W0,resizeBilinear:V0,rgbToGrayscale:p$,rotateWithOffset:m$,cropAndResize:i$,nonMaxSuppression:y$,nonMaxSuppressionAsync:function C$(n,t,e){return tg.apply(this,arguments)},nonMaxSuppressionWithScore:T$,nonMaxSuppressionWithScoreAsync:function _$(n,t,e){return ng.apply(this,arguments)},nonMaxSuppressionPadded:A$,nonMaxSuppressionPaddedAsync:function R$(n,t,e){return sg.apply(this,arguments)},threshold:M$,transform:B$},rg={bandPart:W$,gramSchmidt:G$,qr:j$},j0={absoluteDifference:X$,computeWeightedLoss:Sr,cosineDistance:Y$,hingeLoss:J$,huberLoss:tA,logLoss:sA,meanSquaredError:oA,sigmoidCrossEntropy:lA,softmaxCrossEntropy:hA},q0={sparseFillEmptyRows:R({sparseFillEmptyRows_:function dA(n,t,e,s){const r=N(n,"indices","sparseFillEmptyRows","int32"),o=N(t,"values","sparseFillEmptyRows"),a=N(e,"denseShape","sparseFillEmptyRows","int32"),i=N(s,"defaultValue","sparseFillEmptyRows",o.dtype);if(2!==r.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==o.rank)throw new Error(`Values should be Tensor1D but received shape ${o.shape}`);if(1!==a.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${a.shape}`);if(0!==i.rank)throw new Error(`Default value should be a scalar but received shape ${i.shape}`);const u=$.runKernel(nh,{indices:r,values:o,denseShape:a,defaultValue:i});return{outputIndices:u[0],outputValues:u[1],emptyRowIndicator:u[2],reverseIndexMap:u[3]}}}),sparseReshape:R({sparseReshape_:function fA(n,t,e){const s=N(n,"inputIndices","sparseReshape","int32"),r=N(t,"inputShape","sparseReshape","int32"),o=N(e,"newShape","sparseReshape","int32");if(2!==s.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${s.shape}`);if(1!==r.rank)throw new Error(`Input shape should be Tensor1D but received shape ${r.shape}`);if(1!==o.rank)throw new Error(`New shape should be Tensor1D but received shape ${o.shape}`);const i=$.runKernel(sh,{inputIndices:s,inputShape:r,newShape:o});return{outputIndices:i[0],outputShape:i[1]}}}),sparseSegmentMean:R({sparseSegmentMean_:function gA(n,t,e){const s=N(n,"data","sparseSegmentMean"),r=N(t,"indices","sparseSegmentMean","int32"),o=N(e,"segmentIds","sparseSegmentMean","int32");if(s.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${r.shape}`);if(1!==o.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${o.shape}`);return $.runKernel(rh,{data:s,indices:r,segmentIds:o})}}),sparseSegmentSum:R({sparseSegmentSum_:function bA(n,t,e){const s=N(n,"data","sparseSegmentSum"),r=N(t,"indices","sparseSegmentSum","int32"),o=N(e,"segmentIds","sparseSegmentSum","int32");if(s.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${r.shape}`);if(1!==o.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${o.shape}`);return $.runKernel(oh,{data:s,indices:r,segmentIds:o})}})},K0={stringNGrams:R({stringNGrams_:function wA(n,t,e,s,r,o,a,i){const l=N(n,"data","stringNGrams","string");if("string"!==l.dtype)throw new Error("Data must be of datatype string");if(1!==l.shape.length)throw new Error(`Data must be a vector, saw: ${l.shape}`);const u=N(t,"dataSplits","stringNGrams");if("int32"!==u.dtype)throw new Error("Data splits must be of datatype int32");const d=$.runKernel(uh,{data:l,dataSplits:u},{separator:e,nGramWidths:s,leftPad:r,rightPad:o,padWidth:a,preserveShortSequences:i});return{nGrams:d[0],nGramsSplits:d[1]}}}),stringSplit:R({stringSplit_:function SA(n,t,e=!0){const s=N(n,"input","stringSplit","string"),r=N(t,"delimiter","stringSplit","string");if(1!==s.rank)throw new Error(`Input should be Tensor1D but received shape ${s.shape}`);if(0!==r.rank)throw new Error(`Delimiter should be a scalar but received shape ${r.shape}`);const i=$.runKernel(ch,{input:s,delimiter:r},{skipEmpty:e});return{indices:i[0],values:i[1],shape:i[2]}}}),stringToHashBucketFast:R({stringToHashBucketFast_:function CA(n,t){const e=N(n,"input","stringToHashBucketFast","string"),s={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");return $.runKernel(hh,{input:e},s)}}),staticRegexReplace:R({staticRegexReplace_:function kA(n,t,e,s=!0){const r=N(n,"input","staticRegexReplace","string");return $.runKernel(Ul,{x:r},{pattern:t,rewrite:e,replaceGlobal:s})}})},Mo=jx,_A=typeof requestAnimationFrame<"u"?requestAnimationFrame:typeof setImmediate<"u"?setImmediate:n=>n();function og(){return new Promise(n=>_A(()=>n()))}function ag(n,t){const e=n[0].length;n.forEach((r,o)=>{C(r.length===e,()=>`Error in concat${e}D: rank of tensors[${o}] must be the same as the rank of the rest (${e})`)}),C(t>=0&&t<e,()=>`Error in concat${e}D: axis must be between 0 and ${e-1}.`);const s=n[0];n.forEach((r,o)=>{for(let a=0;a<e;a++)C(a===t||r[a]===s[a],()=>`Error in concat${e}D: Shape of tensors[${o}] (${r}) does not match the shape of the rest (${s}) along the non-concatenated axis ${o}.`)})}function Ks(n,t){const e=n[0].slice();for(let s=1;s<n.length;s++)e[t]+=n[s][t];return e}var Xs=function(n){return n[n.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",n[n.VALUE_ROWIDS=1]="VALUE_ROWIDS",n[n.ROW_LENGTHS=2]="ROW_LENGTHS",n[n.ROW_SPLITS=3]="ROW_SPLITS",n[n.ROW_LIMITS=4]="ROW_LIMITS",n[n.ROW_STARTS=5]="ROW_STARTS",n}(Xs||{});function X0(n,t,e){let s=new Array;if(null==e&&null==t)return s;if(null==t)for(;s.length<n+e.length;)s.push(-1);else s=t.slice();if(null==e)return s;if(n+e.length!==s.length)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${n+e.length}, but shape.rank = ${s.length}`);for(let r=1;r<e.length;++r){const o=e[r],a=s[s.length-e.length+r],i=s[a];if(o>=0)if(i>=0){if(i!==o)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${r+n}] = ${o} but shape[${r+n}] = ${i}`)}else s[a]=o}return s}function Z0(n){const t={FIRST_DIM_SIZE:Xs.FIRST_DIM_SIZE,VALUE_ROWIDS:Xs.VALUE_ROWIDS,ROW_LENGTHS:Xs.ROW_LENGTHS,ROW_SPLITS:Xs.ROW_SPLITS,ROW_LIMITS:Xs.ROW_LIMITS,ROW_STARTS:Xs.ROW_STARTS},e=[];for(const s of n){if(!(s in t))break;e.push(t[s])}return e}function Y0(n){return 0===n.length?0:n[0]===Xs.FIRST_DIM_SIZE?n.length-1:n.length}function Q0(n,t){if(null==n||null==t)return;const e=n.length,s=t.length;if(e>=s)throw new Error(`defaultValue.shape=${n} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${e} must be less than ragged tensor input flatValues.rank = ${s})`);for(let r=0;r<Math.min(e,s-1);++r){const o=n[r],a=t[r+1];if(o>=0&&a>=0&&1!==o&&o!==a)throw new Error(`defaultValue.shape=${n}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${r-n.length}] = ${o} but ragged tensor input.flatValues.shape[${r-n.length}] = ${a}`)}}const ig=30;function dd(n){return n<=ig?n:ic(n,Math.floor(Math.sqrt(n)))}function lg(n,t,e){return[e*("number"==typeof n?n:n[0]),t*("number"==typeof n?n:n[1])]}function Tu(n,t,e,s=!0){let r=[];if(s)r=r.concat(t.slice(0)),r.push(n[0]/e),r=r.concat(n.slice(1));else{r=r.concat(n[0]);const o=t.length;for(let a=0;a<o;++a)r=r.concat([n[a+1]/t[a],t[a]]);r=r.concat(n.slice(o+1))}return r}function _u(n,t,e=!0){const s=[];if(e){s.push(t);for(let r=t+1;r<n;++r)r<=2*t?(s.push(r),s.push(r-(t+1))):s.push(r)}else{const r=[],o=[];for(let a=1;a<n;++a)a>=2*t+1||a%2==1?o.push(a):r.push(a);s.push(...r),s.push(0),s.push(...o)}return s}function Eu(n,t,e,s=!0){const r=[];r.push(s?n[0]/e:n[0]*e);for(let o=1;o<n.length;++o)r.push(o<=t.length?s?t[o-1]*n[o]:n[o]/t[o-1]:n[o]);return r}function ug(n,t){const e=[0];for(let s=0;s<t;++s)e.push(n[s][0]);return e}function cg(n,t,e){const s=n.slice(0,1);for(let r=0;r<e;++r)s.push(n[r+1]-t[r][0]-t[r][1]);return s}const pd=1.7580993408473768,fd=1.0507009873554805,hg=.3275911,dg=.254829592,pg=-.284496736,fg=1.421413741,mg=-1.453152027,gg=1.061405429;function Ir(n,t){if(n.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${n.length}, imag: ${t.length}.`);const e=new Float32Array(2*n.length);for(let s=0;s<e.length;s+=2)e[s]=n[s/2],e[s+1]=t[s/2];return e}function J0(n){const t=new Float32Array(n.length/2),e=new Float32Array(n.length/2);for(let s=0;s<n.length;s+=2)t[s/2]=n[s],e[s/2]=n[s+1];return{real:t,imag:e}}function ew(n){const t=Math.ceil(n.length/4),e=new Float32Array(t),s=new Float32Array(t);for(let r=0;r<n.length;r+=4)e[Math.floor(r/4)]=n[r],s[Math.floor(r/4)]=n[r+1];return{real:e,imag:s}}function tw(n){const t=Math.floor(n.length/4),e=new Float32Array(t),s=new Float32Array(t);for(let r=2;r<n.length;r+=4)e[Math.floor(r/4)]=n[r],s[Math.floor(r/4)]=n[r+1];return{real:e,imag:s}}function yg(n,t){return{real:n[2*t],imag:n[2*t+1]}}function nw(n,t,e,s){n[2*s]=t,n[2*s+1]=e}function sw(n,t){const e=new Float32Array(n/2),s=new Float32Array(n/2);for(let r=0;r<Math.ceil(n/2);r++){const o=(t?2:-2)*Math.PI*(r/n);e[r]=Math.cos(o),s[r]=Math.sin(o)}return{real:e,imag:s}}function rw(n,t,e){const s=(e?2:-2)*Math.PI*(n/t);return{real:Math.cos(s),imag:Math.sin(s)}}const bg="->",EA=/->/g,ow=",",aw="...";function xg(n,t){const e=((n=n.replace(/\s/g,"")).length-n.replace(EA,"").length)/bg.length;if(e<1)throw new Error("Equations without an arrow are not supported.");if(e>1)throw new Error(`Equation must contain exactly one arrow ("${bg}").`);const[s,r]=n.split(bg);C(-1===s.indexOf(aw),()=>`The ellipsis notation ("${aw}") is not supported yet.`);const o=s.split(ow),a=o.length;if(t!==a)throw new Error(`Expected ${a} input tensors, received ${t}`);if(a>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const i=[];for(let d=0;d<r.length;++d){const p=r[d];if(!o.some(f=>-1!==f.indexOf(p)))throw new Error(`Output subscripts contain the label ${p} not present in the input subscripts.`);-1===i.indexOf(p)&&i.push(p)}for(let d=0;d<s.length;++d){const p=s[d];-1===i.indexOf(p)&&p!==ow&&i.push(p)}const l=new Array(o.length);for(let d=0;d<a;++d){if(new Set(o[d].split("")).size!==o[d].length)throw new Error(`Found duplicate axes in input component ${o[d]}. Support for duplicate axes in input is not implemented yet.`);l[d]=[];for(let p=0;p<o[d].length;++p)l[d].push(i.indexOf(o[d][p]))}const u=i.length,h=[];for(let d=r.length;d<u;++d)h.push(d);return{allDims:i,summedDims:h,idDims:l}}function wg(n,t){let e=new Array(n);e.fill(-1);for(let r=0;r<t.length;++r)e[t[r]]=r;const s=[];for(let r=0;r<n;++r)-1===e[r]&&s.push(r);return e=e.filter(r=>-1!==r),{permutationIndices:e,expandDims:s}}function vg(n,t,e){const s=new Array(n);for(let r=0;r<e.length;++r){const o=e[r].shape;for(let a=0;a<t[r].length;++a)void 0===s[t[r][a]]?s[t[r][a]]=o[a]:C(s[t[r][a]]===o[a],()=>`Expected dimension ${s[t[r][a]]} at axis ${a} of input shaped ${JSON.stringify(o)}, but got dimension ${o[a]}`)}}function Sg(n,t){const e=n,s=[];let r=0;0===n.length&&e.push(-1),r=n.length+1;for(let a=0;a<r;++a)s.push([]);const o=[];for(let a=0;a<e.length;++a){const l=$A(t,e[a]);for(const u of l)-1===o.indexOf(u)&&(s[a].push(u),o.push(u))}return{path:e,steps:s}}function Ig(n){return n.every((t,e)=>t===e)}function $A(n,t){const e=[];for(let s=0;s<n.length;++s)(0===n[s].length||-1!==n[s].indexOf(t)||-1===t)&&e.push(s);return e}function Cg(n,t,e=0){let s=[];if("number"==typeof t)C(n.shape[e]%t==0,()=>"Number of splits must evenly divide the axis."),s=new Array(t).fill(n.shape[e]/t);else{C(t.reduce((a,i)=>(-1===i&&(a+=1),a),0)<=1,()=>"There should be only one negative value in split array.");const o=t.indexOf(-1);if(-1!==o){const a=t.reduce((i,l)=>l>0?i+l:i);t[o]=n.shape[e]-a}C(n.shape[e]===t.reduce((a,i)=>a+i),()=>"The sum of sizes must match the size of the axis dimension."),s=t}return s}function iw(n){return`Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${n}`}function lw(n,t){return`indices(${n}, 0) is invalid: ${t} < 0`}function uw(n,t,e){return`indices(${n}, 0) is invalid: ${t} >= ${e}`}function cw(n,t){return`only one output dimension may be -1, not both ${n} and ${t}`}function hw(n,t){return`size ${n} must be non-negative, not ${t}`}function dw(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function pw(n,t){return`Input to reshape is a SparseTensor with ${j(n)}\n  dense values, but the requested shape requires a multiple of ${j(t)}. inputShape=${n} outputShape= ${t}`}function fw(n,t){return`Input to reshape is a tensor with ${j(n)} dense values, but the requested shape has ${j(t)}. inputShape=${n} outputShape=${t}`}function Ng(){return"segment ids must be >= 0"}function mw(){return"segment ids are not increasing"}function gw(n,t){return`Segment id ${n} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function yw(n,t,e){return`Bad: indices[${n}] == ${t} out of range [0, ${e})`}function bw(n,t){let s,e=!1;for(n<=ig?(s=n,e=!0):s=ic(n,Math.floor(Math.sqrt(n)));!e;)s>t||s===n?e=!0:s=ic(n,s+1);return s}function xw(n,t,e){const s=[],r=n.length;for(let o=0;o<r;o++)s.push(o!==t?n[o]:e);return s}function kg(n,t,e,s){const r=t.shape.length,o=n.shape.length;if(0!==s&&(s<-r||s>r))throw new Error(`Expect batchDims in the range of [-${r}, ${r}], but got ${s}`);if(s<0&&(s+=r),s>o)throw new Error(`batchDims (${s}) must be less than rank(x) (\n    ${o}).`);if(e<s)throw new Error(`batchDims (${s}) must be less than or equal to axis (${e}).`);for(let h=0;h<s;++h)if(n.shape[h]!==t.shape[h])throw new Error(`x.shape[${h}]: ${n.shape[h]} should be equal to indices.shape[${h}]: ${t.shape[h]}.`);const a=n.shape[e],i=[];let l=1,u=1,c=1;for(let h=0;h<s;++h)i.push(n.shape[h]),l*=n.shape[h];for(let h=s;h<e;h++)i.push(n.shape[h]),u*=n.shape[h];for(let h=s;h<r;h++)i.push(t.shape[h]);for(let h=e+1;h<o;h++)i.push(n.shape[h]),c*=n.shape[h];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:a,outputShape:i}}function Cr(n){try{return n.map(t=>dr(t))}catch(t){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${t}`)}}function ww(n){return n.map(t=>Vs(t))}!function Ok(){for(const n of Fk)ne(n)}(),z().registerFlag("KEEP_INTERMEDIATE_TENSORS",()=>!1,n=>{n&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")});var vw,Es=function(n){return n[n.DT_INVALID=0]="DT_INVALID",n[n.DT_FLOAT=1]="DT_FLOAT",n[n.DT_DOUBLE=2]="DT_DOUBLE",n[n.DT_INT32=3]="DT_INT32",n[n.DT_UINT8=4]="DT_UINT8",n[n.DT_INT16=5]="DT_INT16",n[n.DT_INT8=6]="DT_INT8",n[n.DT_STRING=7]="DT_STRING",n[n.DT_COMPLEX64=8]="DT_COMPLEX64",n[n.DT_INT64=9]="DT_INT64",n[n.DT_BOOL=10]="DT_BOOL",n[n.DT_QINT8=11]="DT_QINT8",n[n.DT_QUINT8=12]="DT_QUINT8",n[n.DT_QINT32=13]="DT_QINT32",n[n.DT_BFLOAT16=14]="DT_BFLOAT16",n[n.DT_QINT16=15]="DT_QINT16",n[n.DT_QUINT16=16]="DT_QUINT16",n[n.DT_UINT16=17]="DT_UINT16",n[n.DT_COMPLEX128=18]="DT_COMPLEX128",n[n.DT_HALF=19]="DT_HALF",n[n.DT_RESOURCE=20]="DT_RESOURCE",n[n.DT_VARIANT=21]="DT_VARIANT",n[n.DT_UINT32=22]="DT_UINT32",n[n.DT_UINT64=23]="DT_UINT64",n[n.DT_FLOAT_REF=101]="DT_FLOAT_REF",n[n.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",n[n.DT_INT32_REF=103]="DT_INT32_REF",n[n.DT_UINT8_REF=104]="DT_UINT8_REF",n[n.DT_INT16_REF=105]="DT_INT16_REF",n[n.DT_INT8_REF=106]="DT_INT8_REF",n[n.DT_STRING_REF=107]="DT_STRING_REF",n[n.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",n[n.DT_INT64_REF=109]="DT_INT64_REF",n[n.DT_BOOL_REF=110]="DT_BOOL_REF",n[n.DT_QINT8_REF=111]="DT_QINT8_REF",n[n.DT_QUINT8_REF=112]="DT_QUINT8_REF",n[n.DT_QINT32_REF=113]="DT_QINT32_REF",n[n.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",n[n.DT_QINT16_REF=115]="DT_QINT16_REF",n[n.DT_QUINT16_REF=116]="DT_QUINT16_REF",n[n.DT_UINT16_REF=117]="DT_UINT16_REF",n[n.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",n[n.DT_HALF_REF=119]="DT_HALF_REF",n[n.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",n[n.DT_VARIANT_REF=121]="DT_VARIANT_REF",n[n.DT_UINT32_REF=122]="DT_UINT32_REF",n[n.DT_UINT64_REF=123]="DT_UINT64_REF",n}(Es||{});!function(n){let t;var e;(e=t=n.CheckpointFormatVersion||(n.CheckpointFormatVersion={}))[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(vw||(vw={}));const Tg={};function Sw(n){return Tg[n]}function v(n,t,e,s,r){const o=t.inputParams[n];if(o&&void 0!==o.inputIndexStart){const i=o.inputIndexStart,l=0===o.inputIndexEnd?void 0:void 0===o.inputIndexEnd?i+1:o.inputIndexEnd,u=i<0?t.inputNames.length+i:i;if("tensor"===o.type)return gn(t.inputNames[u],e,s,r);if("tensors"===o.type){const d=t.inputs.slice(i,l);return t.inputNames.slice(i,l).filter((f,g)=>{var m;return"NoOp"!==(null===(m=d[g])||void 0===m?void 0:m.op)}).map(f=>gn(f,e,s,r))}const c=gn(t.inputNames[u],e,s,r),h=c.dataSync();return"number"===o.type?h[0]:es(c.shape,h)}const a=t.attrParams[n];return a&&a.value}function gn(n,t,e,s){const[r,o]=Zn(n,e);if(null!=s){const i=s.getHashTableHandleByName(r);if(null!=i)return i}const a=e.currentContextIds.find(i=>!!t[md(r,i)]);return void 0!==a?t[md(r,a)][o]:void 0}function Iw(n,t,e){return t[md(n,e.currentContextId)]}function Nr(n,t){const[e,s,r]=Zn(n,t);return[md(e,t&&t.currentContextId),s,r]}function md(n,t){return t?`${n}-${t}`:n}function Zn(n,t){if(""===n)return["",0,void 0];const e=null!=t&&null!=t.parseNodeNameCache;if(e){const o=t.parseNodeNameCache.get(n);if(null!=o)return o}const s=n.split(":");let r;if(1===s.length)r=[n,0,void 0];else{const a=3===s.length?s[1]:void 0;r=[s[0],Number(s[s.length-1]),a]}return e&&t.parseNodeNameCache.set(n,r),r}function gd(n,t,e){let s=v("pad",n,t,e);if("explicit"===s){s=v("explicitPaddings",n,t,e);const r=[[0,0],[0,0],[0,0],[0,0]];for(let o=0;o<4;o++)r[o][0]=s[2*o],r[o][1]=s[2*o+1];return r}return s}function kr(n){return n.kept?n:Hs(n)}const AA=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],RA=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsFinite",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsInf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],DA=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}],FA=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],OA=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniformInt",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number"},{tfName:"maxval",name:"maxval",type:"number"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],LA=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],PA=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],MA=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],zA=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"InitializeTable",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]},{tfOpName:"InitializeTableV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}]}],BA=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}],VA=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BitwiseAnd",category:"logical",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}]}],WA=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"MatrixBandPart",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"numLower",type:"tensor"},{start:1,name:"numUpper",type:"tensor"}]}],UA=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]}],GA=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],HA=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]},{tfOpName:"TensorScatterUpdate",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"values",type:"tensor"}]}],jA=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}],qA=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],KA=[{tfOpName:"StaticRegexReplace",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"pattern",name:"pattern",type:"string"},{tfName:"rewrite",name:"rewrite",type:"string"},{tfName:"replace_global",name:"replaceGlobal",type:"bool"}]},{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}],XA=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"EnsureShape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];class Cw{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[Ut,ms,Jn,et,at,it,re,Q,A,me,Re,tt,je,lt,Dt,Lt,Zt,kt,In].map(s=>s.json));this.opMappers=e.reduce((s,r)=>(s[r.tfOpName]=r,s),{})}transformGraph(t,e={}){const r=[],o=[],a=[],i=t.node.reduce((g,m)=>(g[m.name]=this.mapNode(m),m.op.startsWith("Placeholder")?r.push(g[m.name]):"Const"===m.op?o.push(g[m.name]):(null==m.input||0===m.input.length)&&a.push(g[m.name]),g),{});let l=[];const u=[];let c={},h={};null!=e&&(c=this.mapSignatureEntries(e.inputs),h=this.mapSignatureEntries(e.outputs));const d=Object.keys(i);d.forEach(g=>{const m=i[g];m.inputNames.forEach((y,b)=>{const[w,,x]=Nr(y),S=i[w];if(null!=S.outputs){const I=S.outputs.indexOf(x);-1!==I&&(m.inputNames[b]=`${w}:${I}`)}m.inputs.push(S),S.children.push(m)})}),0===Object.keys(h).length?d.forEach(g=>{const m=i[g];0===m.children.length&&u.push(m)}):Object.keys(h).forEach(g=>{const[m]=Nr(g),y=i[m];null!=y&&(y.signatureKey=h[g],u.push(y))}),Object.keys(c).length>0?Object.keys(c).forEach(g=>{const[m]=Nr(g),y=i[m];y&&(y.signatureKey=c[g],l.push(y))}):l=r;let p={};null!=t.library&&null!=t.library.function&&(p=t.library.function.reduce((g,m)=>(g[m.signature.name]=this.mapFunction(m),g),{}));const f={nodes:i,inputs:l,outputs:u,weights:o,placeholders:r,signature:e,functions:p};return a.length>0&&(f.initNodes=a),f}mapSignatureEntries(t){return Object.keys(t||{}).reduce((e,s)=>(e[t[s].name]=s,e),{})}mapNode(t){const e=Sw(t.op)||this.opMappers[t.op]||{};null==t.attr&&(t.attr={});const s={name:t.name,op:t.op,category:e.category,inputNames:(t.input||[]).map(r=>r.startsWith("^")?r.slice(1):r),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:t.attr,outputs:e.outputs};return null!=e.inputs&&(s.inputParams=e.inputs.reduce((r,o)=>(r[o.name]={type:o.type,inputIndexStart:o.start,inputIndexEnd:o.end},r),{})),null!=e.attrs&&(s.attrParams=e.attrs.reduce((r,o)=>{const a=o.type;let i;switch(o.type){case"string":i=_g(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=_g(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"string[]":i=Lg(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=Lg(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"number":i=$g(t.attr,o.tfName,o.defaultValue||0),void 0===i&&o.tfDeprecatedName&&(i=$g(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"number[]":i=Og(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=Og(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"bool":i=Eg(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=Eg(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"bool[]":i=Mg(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=Mg(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"shape":i=Fg(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=Fg(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"shape[]":i=Pg(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=Pg(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"dtype":i=Rg(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=Rg(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"dtype[]":i=Dg(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=Dg(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"func":i=kw(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=kw(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${o.type} for op: ${t.op}`)}return r[o.name]={value:i,type:a},r},{})),s}mapFunction(t){const e=t.nodeDef,r=[];let o={};null!=e&&(o=e.reduce((h,d)=>(h[d.name]=this.mapNode(d),"Const"===d.op&&r.push(h[d.name]),h),{}));const a=[],i=[];t.signature.inputArg.forEach(h=>{const[d]=Nr(h.name),p={name:d,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:Ag(h.type),type:"dtype"}},children:[]};p.signatureKey=h.name,a.push(p),o[d]=p}),Object.keys(o).forEach(h=>{const d=o[h];d.inputNames.forEach((p,f)=>{const[g,,m]=Nr(p),y=o[g];if(null!=y.outputs){const b=y.outputs.indexOf(m);-1!==b&&(d.inputNames[f]=`${g}:${b}`)}d.inputs.push(y),y.children.push(d)})});const u=t.ret;t.signature.outputArg.forEach(h=>{const[d,p]=Nr(u[h.name]),f=o[d];null!=f&&(f.defaultOutput=p,i.push(f))});const c=this.mapArgsToSignature(t);return{nodes:o,inputs:a,outputs:i,weights:r,placeholders:[],signature:c}}mapArgsToSignature(t){return{methodName:t.signature.name,inputs:t.signature.inputArg.reduce((e,s)=>(e[s.name]=this.mapArgToTensorInfo(s),e),{}),outputs:t.signature.outputArg.reduce((e,s)=>(e[s.name]=this.mapArgToTensorInfo(s,t.ret),e),{})}}mapArgToTensorInfo(t,e){let s=t.name;return null!=e&&(s=e[s]),{name:s,dtype:t.type}}}function Nw(n,t){const e=Array.isArray(n)?String.fromCharCode.apply(null,n):function ZA(n){const t=z().global;if(typeof t.atob<"u")return t.atob(n);if(typeof Buffer<"u")return new Buffer(n,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(n);return t?e:e.toLowerCase()}function _g(n,t,e,s=!1){const r=n[t];return null!=r?Nw(r.s,s):e}function Eg(n,t,e){const s=n[t];return s?s.b:e}function $g(n,t,e){const s=n[t]||{},r=null!=s.i?s.i:null!=s.f?s.f:e;return"number"==typeof r?r:parseInt(r,10)}function Ag(n){switch("string"==typeof n&&(n=Es[n]),n){case Es.DT_FLOAT:case Es.DT_HALF:return"float32";case Es.DT_INT32:case Es.DT_INT64:case Es.DT_INT8:case Es.DT_UINT8:return"int32";case Es.DT_BOOL:return"bool";case Es.DT_DOUBLE:return"float32";case Es.DT_STRING:return"string";default:return null}}function kw(n,t,e){const s=n[t];return s&&s.func?s.func.name:e}function Rg(n,t,e){const s=n[t];return s&&s.type?Ag(s.type):e}function Dg(n,t,e){const s=n[t];return s&&s.list&&s.list.type?s.list.type.map(r=>Ag(r)):e}function Tw(n){if(!n.unknownRank)return null!=n.dim?n.dim.map(t=>"number"==typeof t.size?t.size:parseInt(t.size,10)):[]}function Fg(n,t,e){const s=n[t];return s&&s.shape?Tw(s.shape):e}function Og(n,t,e){const s=n[t];return s?((s.list.f&&s.list.f.length?s.list.f:s.list.i)||[]).map(r=>"number"==typeof r?r:parseInt(r,10)):e}function Lg(n,t,e,s=!1){const r=n[t];return r&&r.list&&r.list.s?r.list.s.map(o=>Nw(o,s)):e}function Pg(n,t,e){const s=n[t];return s&&s.list&&s.list.shape?s.list.shape.map(r=>Tw(r)):e}function Mg(n,t,e){const s=n[t];return s&&s.list&&s.list.b?s.list.b:e}class YA{constructor(t,e,s){this.node=t,this.tensorMap=e,this.context=s,this.inputs=[],this.attrs={},this.inputs=t.inputNames.map(r=>this.getInput(r)),null!=t.rawAttrs&&(this.attrs=Object.keys(t.rawAttrs).reduce((r,o)=>(r[o]=this.getAttr(o),r),{}))}getInput(t){return gn(t,this.tensorMap,this.context)}getAttr(t,e){const s=this.node.rawAttrs[t];if(null!=s.tensor)return gn(t,this.tensorMap,this.context);if(null!=s.i||null!=s.f)return $g(this.node.rawAttrs,t,e);if(null!=s.s)return _g(this.node.rawAttrs,t,e);if(null!=s.b)return Eg(this.node.rawAttrs,t,e);if(null!=s.shape)return Fg(this.node.rawAttrs,t,e);if(null!=s.type)return Rg(this.node.rawAttrs,t,e);if(null!=s.list){if(null!=s.list.i||null!=s.list.f)return Og(this.node.rawAttrs,t,e);if(null!=s.list.s)return Lg(this.node.rawAttrs,t,e);if(null!=s.list.shape)return Pg(this.node.rawAttrs,t,e);if(null!=s.list.b)return Mg(this.node.rawAttrs,t,e);if(null!=s.list.type)return Dg(this.node.rawAttrs,t,e)}return e}}function ys(n,t,e=""){if("number"!=typeof n&&"number"!=typeof t){C(n.length===t.length,()=>e+` Shapes ${n} and ${t} must match`);for(let s=0;s<n.length;s++){const r=n[s],o=t[s];C(r<0||o<0||r===o,()=>e+` Shapes ${n} and ${t} must match`)}}}function _w(n){return!("number"==typeof n||n.some(t=>t<0))}function $u(n,t,e){let s=zg(n,e);const r=!_w(s);if(r&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${s}`);if(r&&t.forEach(o=>{s=zg(o.shape,s)}),!_w(s))throw new Error(`Non-fully-defined elementShape: ${s}`);return s}function zg(n,t){if("number"==typeof n)return t;if("number"==typeof t)return n;if(n.length!==t.length)throw new Error(`Incompatible ranks during merge: ${n} vs. ${t}`);const e=[];for(let s=0;s<n.length;++s){const r=n[s],o=t[s];if(r>=0&&o>=0&&r!==o)throw new Error(`Incompatible shape during merge: ${n} vs. ${t}`);e[s]=r>=0?r:o}return e}class eR{constructor(t,e,s,r,o,a,i){this.name=t,this.dtype=e,this.maxSize=s,this.elementShape=r,this.identicalElementShapes=o,this.dynamicSize=a,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=Ce(0),Yt(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(t){this.tensors.forEach(e=>{(null==t||!t.has(e.tensor.id))&&e.tensor.dispose()}),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||t>=this.size())throw new Error(`Tried to read from index ${t}, but array size is: ${this.size()}`);const e=this.tensors[t];if(e.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${t} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(e.cleared=!0),e.read=!0,e.tensor}readMany(t){return t.map(e=>this.read(e))}write(t,e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||!this.dynamicSize&&t>=this.maxSize)throw new Error(`Tried to write to index ${t}, but array is not resizeable and size is: ${this.maxSize}`);const s=this.tensors[t]||{};if(e.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t},\n          because the value dtype is ${e.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0===this.size()&&(null==this.elementShape||0===this.elementShape.length)&&(this.elementShape=e.shape),ys(this.elementShape,e.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${t}.`),s.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been read.`);if(s.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been written.`);s.tensor=e,Yt(e),s.written=!0,this.tensors[t]=s}writeMany(t,e){if(t.length!==e.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${t.length} is not the same as tensors size: ${e.length}.`);t.forEach((s,r)=>this.write(s,e[r]))}gather(t,e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${e}`);if(t)t=t.slice(0,this.size());else{t=[];for(let r=0;r<this.size();r++)t.push(r)}if(0===t.length)return ns([],[0].concat(this.elementShape));const s=this.readMany(t);return ys(this.elementShape,s[0].shape,"TensorArray shape mismatch: "),Mn(s,0)}concat(t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${t}`);if(0===this.size())return ns([],[0].concat(this.elementShape));const e=[];for(let r=0;r<this.size();r++)e.push(r);const s=this.readMany(e);return ys(this.elementShape,s[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${s[0].shape})`),Pt(s,0)}scatter(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const s=Math.max(...t);if(!this.dynamicSize&&s>=this.maxSize)throw new Error(`Max index must be < array size (${s}  vs. ${this.maxSize})`);this.writeMany(t,us(e,0))}split(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);let s=0;const r=t.map(l=>(s+=l,s));if(s!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${s}, and tensor's shape is: ${e.shape}`);if(!this.dynamicSize&&t.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${t.length}), and the TensorArray is not marked as dynamically resizeable`);const o=0===s?0:e.size/s,a=[];P(()=>{e=F(e,[1,s,o]);for(let l=0;l<t.length;++l)a[l]=F(Je(e,[0,0===l?0:r[l-1],0],[1,t[l],o]),this.elementShape);return a});const i=[];for(let l=0;l<t.length;l++)i[l]=l;this.writeMany(i,a)}}class zo{get id(){return this.idTensor.id}constructor(t,e,s,r=-1){this.tensors=t,this.elementShape=e,this.elementDtype=s,null!=t&&t.forEach(o=>{if(s!==o.dtype)throw new Error(`Invalid data types; op elements ${s}, but list elements ${o.dtype}`);ys(e,o.shape,"TensorList shape mismatch: "),Yt(o)}),this.idTensor=Ce(0),this.maxNumElements=r,Yt(this.idTensor)}copy(){return new zo([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(t){this.tensors.forEach(e=>{(null==t||!t.has(e.id))&&e.dispose()}),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(t,e,s=-1){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(-1!==s&&this.tensors.length!==s)throw new Error(`Operation expected a list with ${s} elements but got a list with ${this.tensors.length} elements.`);ys(t,this.elementShape,"TensorList shape mismatch: ");const r=$u(this.elementShape,this.tensors,t);return P(()=>{const o=this.tensors.map(a=>F(a,r));return Mn(o,0)})}popBack(t,e){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const s=$u(this.elementShape,this.tensors,t),r=this.tensors.pop();return r.kept=!1,ys(r.shape,t,"TensorList shape mismatch: "),F(r,s)}pushBack(t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(ys(t.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");Yt(t),this.tensors.push(t)}resize(t){if(t<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${t}`);if(-1!==this.maxNumElements&&t>this.maxNumElements)throw new Error(`TensorListResize input size ${t} is greater maxNumElement ${this.maxNumElements}.`);const e=new zo([],this.elementShape,this.elementDtype,this.maxNumElements);e.tensors.length=t;for(let s=0;s<Math.min(this.tensors.length,t);++s)e.tensors[s]=this.tensors[s];return e}getItem(t,e,s){if(s!==this.elementDtype)throw new Error(`Invalid data types; op elements ${s}, but list elements ${this.elementDtype}`);if(t<0||t>this.tensors.length)throw new Error(`Trying to access element ${t} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[t])throw new Error(`element at index ${t} is null.`);ys(this.tensors[t].shape,e,"TensorList shape mismatch: ");const r=$u(this.elementShape,this.tensors,e);return F(this.tensors[t],r)}setItem(t,e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(t<0||-1!==this.maxNumElements&&t>=this.maxNumElements)throw new Error(`Trying to set element ${t} in a list with max ${this.maxNumElements} elements.`);ys(this.elementShape,e.shape,"TensorList shape mismatch: "),Yt(e),null!=this.tensors[t]&&(this.tensors[t].kept=!1),this.tensors[t]=e}gather(t,e,s){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);ys(this.elementShape,s,"TensorList shape mismatch: "),t=t.slice(0,this.size());const r=$u(this.elementShape,this.tensors,s);return 0===t.length?ns([],[0].concat(r)):P(()=>{const o=t.map(a=>F(this.tensors[a],r));return Mn(o,0)})}concat(t,e){if(t&&t!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${t}`);ys(this.elementShape,e,"TensorList shape mismatch: ");const s=$u(this.elementShape,this.tensors,e);return 0===this.size()?ns([],[0].concat(s)):P(()=>{const r=this.tensors.map(o=>F(o,s));return Pt(r,0)})}}const oR=function(){var n=(0,Y.Z)(function*(t,e,s){switch(t.op){case"If":case"StatelessIf":{const r=v("thenBranch",t,e,s),o=v("elseBranch",t,e,s),a=v("cond",t,e,s),i=v("args",t,e,s);return(yield a.data())[0]?s.functionMap[r].executeFunctionAsync(i,s.tensorArrayMap,s.tensorListMap):s.functionMap[o].executeFunctionAsync(i,s.tensorArrayMap,s.tensorListMap)}case"While":case"StatelessWhile":{const r=v("body",t,e,s),o=v("cond",t,e,s),a=v("args",t,e,s),i=yield s.functionMap[o].executeFunctionAsync(a,s.tensorArrayMap,s.tensorListMap),l=a.map(h=>h.id);let u=yield i[0].data();i.forEach(h=>{!h.kept&&-1===l.indexOf(h.id)&&h.dispose()});let c=a;for(;u[0];){const h=c;c=yield s.functionMap[r].executeFunctionAsync(c,s.tensorArrayMap,s.tensorListMap);const d=c.map(f=>f.id);h.forEach(f=>{!f.kept&&-1===l.indexOf(f.id)&&-1===d.indexOf(f.id)&&f.dispose()});const p=yield s.functionMap[o].executeFunctionAsync(c,s.tensorArrayMap,s.tensorListMap);u=yield p[0].data(),p.forEach(f=>{!f.kept&&-1===l.indexOf(f.id)&&-1===d.indexOf(f.id)&&f.dispose()})}return c}case"LoopCond":return[kr(v("pred",t,e,s))];case"Switch":{const r=v("pred",t,e,s);let o=v("data",t,e,s);return o.kept||(o=kr(o)),(yield r.data())[0]?[void 0,o]:[o,void 0]}case"Merge":{const r=t.inputNames.find(o=>void 0!==gn(o,e,s));return r?[kr(gn(r,e,s))]:void 0}case"Enter":{const r=v("frameName",t,e,s),o=v("tensor",t,e,s);return s.enterFrame(r),[kr(o)]}case"Exit":{const r=v("tensor",t,e,s);return s.exitFrame(),[kr(r)]}case"NextIteration":{const r=v("tensor",t,e,s);return s.nextIteration(),[kr(r)]}case"TensorArrayV3":{const r=v("size",t,e,s),o=v("dtype",t,e,s),a=v("elementShape",t,e,s),i=v("dynamicSize",t,e,s),l=v("clearAfterRead",t,e,s),u=v("identicalElementShapes",t,e,s),c=v("name",t,e,s),h=new eR(c,o,r,a,u,i,l);return s.addTensorArray(h),[h.idTensor,Ce(1)]}case"TensorArrayWriteV3":{const r=v("tensorArrayId",t,e,s),o=v("index",t,e,s),a=v("tensor",t,e,s),i=s.getTensorArray(r.id);return i.write(o,a),[i.idTensor]}case"TensorArrayReadV3":{const r=v("tensorArrayId",t,e,s),o=v("index",t,e,s);return[s.getTensorArray(r.id).read(o)]}case"TensorArrayGatherV3":{const r=v("tensorArrayId",t,e,s),o=v("indices",t,e,s),a=v("dtype",t,e,s);return[s.getTensorArray(r.id).gather(o,a)]}case"TensorArrayScatterV3":{const r=v("tensorArrayId",t,e,s),o=v("indices",t,e,s),a=v("tensor",t,e,s),i=s.getTensorArray(r.id);return i.scatter(o,a),[i.idTensor]}case"TensorArrayConcatV3":{const r=v("tensorArrayId",t,e,s),o=s.getTensorArray(r.id),a=v("dtype",t,e,s);return[o.concat(a)]}case"TensorArraySplitV3":{const r=v("tensorArrayId",t,e,s),o=v("tensor",t,e,s),a=v("lengths",t,e,s),i=s.getTensorArray(r.id);return i.split(a,o),[i.idTensor]}case"TensorArraySizeV3":{const r=v("tensorArrayId",t,e,s);return[Ce(s.getTensorArray(r.id).size(),"int32")]}case"TensorArrayCloseV3":{const r=v("tensorArrayId",t,e,s),o=s.getTensorArray(r.id);return o.clearAndClose(),[o.idTensor]}case"TensorListSetItem":{const r=v("tensorListId",t,e,s),o=v("index",t,e,s),a=v("tensor",t,e,s),i=s.getTensorList(r.id);return i.setItem(o,a),[i.idTensor]}case"TensorListGetItem":{const r=v("tensorListId",t,e,s),o=v("index",t,e,s),a=v("elementShape",t,e,s),i=v("elementDType",t,e,s);return[s.getTensorList(r.id).getItem(o,a,i)]}case"TensorListScatterV2":case"TensorListScatter":{const r=v("indices",t,e,s),l=function sR(n,t,e,s){if(t.length!==n.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${n.shape[0]}`);const r=Math.max(...t);if(null!=s&&-1!==s&&r>=s)throw new Error(`Max index must be < array size (${r}  vs. ${s})`);const o=new zo([],e,n.dtype,s),a=us(n,0);return t.forEach((i,l)=>{o.setItem(i,a[l])}),o}(v("tensor",t,e,s),r,v("elementShape",t,e,s),v("numElements",t,e,s));return s.addTensorList(l),[l.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const r=v("elementShape",t,e,s),o=v("elementDType",t,e,s);let a;a="TensorListReserve"===t.op?"numElements":"maxNumElements";const i=v(a,t,e,s),u=function nR(n,t,e,s){return new zo([],n,t,s)}(r,o,0,"TensorListReserve"===t.op?-1:i);return s.addTensorList(u),[u.idTensor]}case"TensorListGather":{const r=v("tensorListId",t,e,s),o=v("indices",t,e,s),a=v("elementShape",t,e,s),i=v("elementDType",t,e,s);return[s.getTensorList(r.id).gather(o,i,a)]}case"TensorListStack":{const r=v("tensorListId",t,e,s),o=v("elementShape",t,e,s),a=v("elementDType",t,e,s),i=v("numElements",t,e,s);return[s.getTensorList(r.id).stack(o,a,i)]}case"TensorListFromTensor":{const i=function tR(n,t,e){const s=n.dtype;if(n.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${n.shape}`);if(n.dtype!==e)throw new Error(`Invalid data types; op elements ${n.dtype}, but list elements ${e}`);ys(n.shape.slice(1),t,"TensorList shape mismatch: ");const o=us(n);return new zo(o,t,s)}(v("tensor",t,e,s),v("elementShape",t,e,s),v("elementDType",t,e,s));return s.addTensorList(i),[i.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{const r=v("tensorListId",t,e,s),o=s.getTensorList(r.id),a=v("dtype",t,e,s),i=v("elementShape",t,e,s);return[o.concat(a,i)]}case"TensorListPushBack":{const r=v("tensorListId",t,e,s),o=v("tensor",t,e,s),a=s.getTensorList(r.id);return a.pushBack(o),[a.idTensor]}case"TensorListPopBack":{const r=v("tensorListId",t,e,s),o=v("elementShape",t,e,s),a=v("elementDType",t,e,s);return[s.getTensorList(r.id).popBack(o,a)]}case"TensorListSplit":{const r=v("tensor",t,e,s),o=v("elementShape",t,e,s),i=function rR(n,t,e){let s=0;const r=t.map(c=>(s+=c,s));if(s!==n.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${s}, and tensor's shape is: ${n.shape}`);const a=zg(n.shape.slice(1),e),i=0===s?0:n.size/s,l=P(()=>{const c=[];n=F(n,[1,s,i]);for(let h=0;h<t.length;++h)c[h]=F(Je(n,[0,0===h?0:r[h-1],0],[1,t[h],i]),a);return n.dispose(),c}),u=new zo([],e,n.dtype,t.length);for(let c=0;c<l.length;c++)u.setItem(c,l[c]);return u}(r,v("lengths",t,e,s),o);return s.addTensorList(i),[i.idTensor]}case"TensorListLength":{const r=v("tensorListId",t,e,s);return[Ce(s.getTensorList(r.id).size(),"int32")]}case"TensorListResize":{const r=v("tensorListId",t,e,s),o=v("size",t,e,s),i=s.getTensorList(r.id).resize(o);return s.addTensorList(i),[i.idTensor]}default:throw TypeError(`Node type ${t.op} is not implemented`)}});return function(e,s,r){return n.apply(this,arguments)}}();function Ew(n,t,e){const[s,r]=v("fusedOps",n,t,e),o="biasadd"===s,a=!o,i="prelu"===r,l="fusedbatchnorm"===s,u=v("numArgs",n,t,e);if(o){if(i&&2!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&o&&1!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(l)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const c=v("strides",n,t,e),h=gd(n,t,e),d=v("dataFormat",n,t,e).toUpperCase(),p=v("dilations",n,t,e);let[f,g]=v("args",n,t,e);return a&&(g=f,f=void 0),{stride:c,pad:h,dataFormat:d,dilations:p,biasArg:f,preluArg:g,activationFunc:r,leakyreluAlpha:v("leakyreluAlpha",n,t,e)}}function Bg(n,t,e){return{boxes:v("boxes",n,t,e),scores:v("scores",n,t,e),maxOutputSize:v("maxOutputSize",n,t,e),iouThreshold:v("iouThreshold",n,t,e),scoreThreshold:v("scoreThreshold",n,t,e),softNmsSigma:v("softNmsSigma",n,t,e)}}const lR=function(){var n=(0,Y.Z)(function*(t,e,s,r,o=Ke){switch(t.op){case"NonMaxSuppressionV5":{const{boxes:a,scores:i,maxOutputSize:l,iouThreshold:u,scoreThreshold:c,softNmsSigma:h}=Bg(t,e,s),d=yield o.image.nonMaxSuppressionWithScoreAsync(a,i,l,u,c,h);return[d.selectedIndices,d.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:a,scores:i,maxOutputSize:l,iouThreshold:u,scoreThreshold:c}=Bg(t,e,s),h=v("padToMaxOutputSize",t,e,s),d=yield o.image.nonMaxSuppressionPaddedAsync(a,i,l,u,c,h);return[d.selectedIndices,d.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:a,scores:i,maxOutputSize:l,iouThreshold:u,scoreThreshold:c}=Bg(t,e,s);return[yield o.image.nonMaxSuppressionAsync(a,i,l,u,c)]}case"Where":{const a=o.cast(v("condition",t,e,s),"bool"),i=[yield o.whereAsync(a)];return a.dispose(),i}case"ListDiff":return o.setdiff1dAsync(v("x",t,e,s),v("y",t,e,s));default:throw TypeError(`Node type ${t.op} is not implemented`)}});return function(e,s,r,o){return n.apply(this,arguments)}}();class hR{get id(){return this.handle.id}constructor(t,e){this.keyDType=t,this.valueDType=e,this.handle=Ce(0),this.tensorMap=new Map,Yt(this.handle)}clearAndClose(){this.tensorMap.forEach(t=>t.dispose()),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return Ce(this.size(),"int32")}import(t,e){var s=this;return(0,Y.Z)(function*(){s.checkKeyAndValueTensor(t,e);const r=yield t.data();return s.tensorMap.forEach(o=>o.dispose()),s.tensorMap.clear(),P(()=>{const o=us(e),a=r.length,i=o.length;C(a===i,()=>`The number of elements doesn't match, keys has ${a} elements, the values has ${i} elements.`);for(let l=0;l<a;l++){const u=r[l],c=o[l];Yt(c),s.tensorMap.set(u,c)}return s.handle})})()}find(t,e){var s=this;return(0,Y.Z)(function*(){s.checkKeyAndValueTensor(t,e);const r=yield t.data();return P(()=>{const o=[];for(let a=0;a<r.length;a++){const l=s.findWithDefault(r[a],e);o.push(l)}return Mn(o)})})()}findWithDefault(t,e){const s=this.tensorMap.get(t);return null!=s?s:e}checkKeyAndValueTensor(t,e){if(t.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${t.dtype}`);if(e.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${e.dtype}`)}}const dR=function(){var n=(0,Y.Z)(function*(t,e,s,r){switch(t.op){case"HashTable":case"HashTableV2":{const o=r.getHashTableHandleByName(t.name);if(null!=o)return[o];{const a=v("keyDType",t,e,s),i=v("valueDType",t,e,s),l=new hR(a,i);return r.addHashTable(t.name,l),[l.handle]}}case"InitializeTable":case"InitializeTableV2":case"LookupTableImport":case"LookupTableImportV2":{const o=v("tableHandle",t,e,s,r),a=v("keys",t,e,s),i=v("values",t,e,s);return[yield r.getHashTableById(o.id).import(a,i)]}case"LookupTableFind":case"LookupTableFindV2":{const o=v("tableHandle",t,e,s,r),a=v("keys",t,e,s),i=v("defaultValue",t,e,s);return[yield r.getHashTableById(o.id).find(a,i)]}case"LookupTableSize":case"LookupTableSizeV2":{const o=v("tableHandle",t,e,s,r);return[r.getHashTableById(o.id).tensorSize()]}default:throw TypeError(`Node type ${t.op} is not implemented`)}});return function(e,s,r,o){return n.apply(this,arguments)}}();function $w(n,t,e,s,r=P){const o=((a,i,l)=>{switch(a.category){case"arithmetic":return r(()=>((n,t,e,s=Ke)=>{switch(n.op){case"BiasAdd":case"AddV2":case"Add":return[s.add(v("a",n,t,e),v("b",n,t,e))];case"AddN":return[s.addN(v("tensors",n,t,e))];case"FloorMod":case"Mod":return[s.mod(v("a",n,t,e),v("b",n,t,e))];case"Mul":return[s.mul(v("a",n,t,e),v("b",n,t,e))];case"RealDiv":case"Div":return[s.div(v("a",n,t,e),v("b",n,t,e))];case"DivNoNan":return[s.divNoNan(v("a",n,t,e),v("b",n,t,e))];case"FloorDiv":return[s.floorDiv(v("a",n,t,e),v("b",n,t,e))];case"Sub":return[s.sub(v("a",n,t,e),v("b",n,t,e))];case"Minimum":return[s.minimum(v("a",n,t,e),v("b",n,t,e))];case"Maximum":return[s.maximum(v("a",n,t,e),v("b",n,t,e))];case"Pow":return[s.pow(v("a",n,t,e),v("b",n,t,e))];case"SquaredDifference":return[s.squaredDifference(v("a",n,t,e),v("b",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"basic_math":return r(()=>((n,t,e,s=Ke)=>{switch(n.op){case"Abs":case"ComplexAbs":return[s.abs(v("x",n,t,e))];case"Acos":return[s.acos(v("x",n,t,e))];case"Acosh":return[s.acosh(v("x",n,t,e))];case"Asin":return[s.asin(v("x",n,t,e))];case"Asinh":return[s.asinh(v("x",n,t,e))];case"Atan":return[s.atan(v("x",n,t,e))];case"Atan2":return[s.atan2(v("x",n,t,e),v("y",n,t,e))];case"Atanh":return[s.atanh(v("x",n,t,e))];case"Ceil":return[s.ceil(v("x",n,t,e))];case"Complex":return[s.complex(v("real",n,t,e),v("imag",n,t,e))];case"Cos":return[s.cos(v("x",n,t,e))];case"Cosh":return[s.cosh(v("x",n,t,e))];case"Elu":return[s.elu(v("x",n,t,e))];case"Erf":return[s.erf(v("x",n,t,e))];case"Exp":return[s.exp(v("x",n,t,e))];case"Expm1":return[s.expm1(v("x",n,t,e))];case"Floor":return[s.floor(v("x",n,t,e))];case"Log":return[s.log(v("x",n,t,e))];case"Log1p":return[s.log1p(v("x",n,t,e))];case"Imag":return[s.imag(v("x",n,t,e))];case"Neg":return[s.neg(v("x",n,t,e))];case"Reciprocal":return[s.reciprocal(v("x",n,t,e))];case"Real":return[s.real(v("x",n,t,e))];case"Relu":return[s.relu(v("x",n,t,e))];case"Round":return[s.round(v("x",n,t,e))];case"Selu":return[s.selu(v("x",n,t,e))];case"Sigmoid":return[s.sigmoid(v("x",n,t,e))];case"Sin":return[s.sin(v("x",n,t,e))];case"Sign":return[s.sign(v("x",n,t,e))];case"Sinh":return[s.sinh(v("x",n,t,e))];case"Softplus":return[s.softplus(v("x",n,t,e))];case"Sqrt":return[s.sqrt(v("x",n,t,e))];case"Square":return[s.square(v("x",n,t,e))];case"Tanh":return[s.tanh(v("x",n,t,e))];case"Tan":return[s.tan(v("x",n,t,e))];case"ClipByValue":return[s.clipByValue(v("x",n,t,e),v("clipValueMin",n,t,e),v("clipValueMax",n,t,e))];case"Relu6":return[s.relu6(v("x",n,t,e))];case"Rsqrt":return[s.rsqrt(gn(n.inputNames[0],t,e))];case"LeakyRelu":return[s.leakyRelu(v("x",n,t,e),v("alpha",n,t,e))];case"Prelu":return[s.prelu(v("x",n,t,e),v("alpha",n,t,e))];case"IsNan":return[s.isNaN(gn(n.inputNames[0],t,e))];case"IsInf":return[s.isInf(gn(n.inputNames[0],t,e))];case"IsFinite":return[s.isFinite(gn(n.inputNames[0],t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"control":return oR(a,i,l);case"convolution":return r(()=>((n,t,e,s=Ke)=>{switch(n.op){case"Conv1D":{const r=v("stride",n,t,e),o=v("pad",n,t,e),a=v("dataFormat",n,t,e).toUpperCase(),i=v("dilation",n,t,e);return[s.conv1d(v("x",n,t,e),v("filter",n,t,e),r,o,a,i)]}case"Conv2D":{const r=v("strides",n,t,e),o=gd(n,t,e),a=v("dataFormat",n,t,e).toUpperCase(),i=v("dilations",n,t,e);return[s.conv2d(v("x",n,t,e),v("filter",n,t,e),[r[1],r[2]],o,a,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:r,pad:o,dataFormat:a,dilations:i,biasArg:l,preluArg:u,activationFunc:c,leakyreluAlpha:h}=Ew(n,t,e);return[s.fused.conv2d({x:v("x",n,t,e),filter:v("filter",n,t,e),strides:[r[1],r[2]],pad:o,dataFormat:a,dilations:[i[1],i[2]],bias:l,activation:c,preluActivationWeights:u,leakyreluAlpha:h})]}case"FusedDepthwiseConv2dNative":{const{stride:r,pad:o,dataFormat:a,dilations:i,biasArg:l,preluArg:u,activationFunc:c,leakyreluAlpha:h}=Ew(n,t,e);return[s.fused.depthwiseConv2d({x:v("x",n,t,e),filter:v("filter",n,t,e),strides:[r[1],r[2]],pad:o,dataFormat:a,dilations:[i[1],i[2]],bias:l,activation:c,preluActivationWeights:u,leakyreluAlpha:h})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const r=v("outputShape",n,t,e),o=v("strides",n,t,e),a=gd(n,t,e);return[s.conv2dTranspose(v("x",n,t,e),v("filter",n,t,e),r,[o[1],o[2]],a)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const r=v("strides",n,t,e),o=gd(n,t,e),a=v("dilations",n,t,e),i=v("dataFormat",n,t,e).toUpperCase();return[s.depthwiseConv2d(v("input",n,t,e),v("filter",n,t,e),[r[1],r[2]],o,i,[a[1],a[2]])]}case"Conv3D":{const r=v("strides",n,t,e),o=v("pad",n,t,e),a=v("dataFormat",n,t,e).toUpperCase(),i=v("dilations",n,t,e);return[s.conv3d(v("x",n,t,e),v("filter",n,t,e),[r[1],r[2],r[3]],o,a,[i[1],i[2],i[3]])]}case"AvgPool":{const r=v("strides",n,t,e),o=v("pad",n,t,e),a=v("kernelSize",n,t,e);return[s.avgPool(v("x",n,t,e),[a[1],a[2]],[r[1],r[2]],o)]}case"MaxPool":{const r=v("strides",n,t,e),o=v("pad",n,t,e),a=v("kernelSize",n,t,e);return[s.maxPool(v("x",n,t,e),[a[1],a[2]],[r[1],r[2]],o)]}case"MaxPoolWithArgmax":{const r=v("strides",n,t,e),o=v("pad",n,t,e),a=v("kernelSize",n,t,e),i=v("includeBatchInIndex",n,t,e),{result:l,indexes:u}=s.maxPoolWithArgmax(v("x",n,t,e),[a[1],a[2]],[r[1],r[2]],o,i);return[l,u]}case"AvgPool3D":{const r=v("strides",n,t,e),o=v("pad",n,t,e),a=v("kernelSize",n,t,e);return[s.avgPool3d(v("x",n,t,e),[a[1],a[2],a[3]],[r[1],r[2],r[3]],o)]}case"MaxPool3D":{const r=v("strides",n,t,e),o=v("pad",n,t,e),a=v("kernelSize",n,t,e);return[s.maxPool3d(v("x",n,t,e),[a[1],a[2],a[3]],[r[1],r[2],r[3]],o)]}case"Dilation2D":{const r=v("strides",n,t,e),o=v("pad",n,t,e),a=v("dilations",n,t,e),i=r[1],l=r[2],u=a[1],c=a[2];return[s.dilation2d(v("x",n,t,e),v("filter",n,t,e),[i,l],o,[u,c],"NHWC")]}default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"creation":return r(()=>((n,t,e,s=Ke)=>{switch(n.op){case"Fill":{const r=v("shape",n,t,e),o=v("dtype",n,t,e),a=v("value",n,t,e);return[s.fill(r,a,o)]}case"LinSpace":{const r=v("start",n,t,e),o=v("stop",n,t,e),a=v("num",n,t,e);return[s.linspace(r,o,a)]}case"Multinomial":{const r=v("logits",n,t,e),o=v("numSamples",n,t,e),a=v("seed",n,t,e);return[s.multinomial(r,o,a)]}case"OneHot":{const r=v("indices",n,t,e),o=v("depth",n,t,e),a=v("onValue",n,t,e),i=v("offValue",n,t,e),l=v("dtype",n,t,e);return[s.oneHot(r,o,a,i,l)]}case"Ones":return[s.ones(v("shape",n,t,e),v("dtype",n,t,e))];case"OnesLike":return[s.onesLike(v("x",n,t,e))];case"RandomStandardNormal":return[s.randomStandardNormal(v("shape",n,t,e),v("dtype",n,t,e),v("seed",n,t,e))];case"RandomUniform":return[s.randomUniform(v("shape",n,t,e),v("minval",n,t,e),v("maxval",n,t,e),v("dtype",n,t,e))];case"RandomUniformInt":return[s.randomUniformInt(v("shape",n,t,e),v("minval",n,t,e),v("maxval",n,t,e),v("seed",n,t,e))];case"Range":{const r=v("start",n,t,e),o=v("stop",n,t,e),a=v("step",n,t,e);return[s.range(r,o,a,v("dtype",n,t,e))]}case"TruncatedNormal":{const r=v("shape",n,t,e),o=v("mean",n,t,e),a=v("stdDev",n,t,e),i=v("seed",n,t,e);return[s.truncatedNormal(r,o,a,v("dtype",n,t,e),i)]}case"Zeros":return[s.zeros(v("shape",n,t,e),v("dtype",n,t,e))];case"ZerosLike":return[s.zerosLike(v("x",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"dynamic":return lR(a,i,l);case"evaluation":return r(()=>((n,t,e,s=Ke)=>{switch(n.op){case"LowerBound":{const r=v("sortedSequence",n,t,e),o=v("values",n,t,e);return[s.lowerBound(r,o)]}case"TopKV2":{const r=v("x",n,t,e),o=v("k",n,t,e),a=v("sorted",n,t,e),i=s.topk(r,o,a);return[i.values,i.indices]}case"UpperBound":{const r=v("sortedSequence",n,t,e),o=v("values",n,t,e);return[s.upperBound(r,o)]}case"Unique":{const r=v("x",n,t,e),o=s.unique(r);return[o.values,o.indices]}case"UniqueV2":{const r=v("x",n,t,e),o=v("axis",n,t,e),a=s.unique(r,o);return[a.values,a.indices]}default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"image":return r(()=>((n,t,e,s=Ke)=>{switch(n.op){case"ResizeBilinear":{const r=v("images",n,t,e),o=v("size",n,t,e),a=v("alignCorners",n,t,e),i=v("halfPixelCenters",n,t,e);return[s.image.resizeBilinear(r,[o[0],o[1]],a,i)]}case"ResizeNearestNeighbor":{const r=v("images",n,t,e),o=v("size",n,t,e),a=v("alignCorners",n,t,e),i=v("halfPixelCenters",n,t,e);return[s.image.resizeNearestNeighbor(r,[o[0],o[1]],a,i)]}case"CropAndResize":{const r=v("image",n,t,e),o=v("boxes",n,t,e),a=v("boxInd",n,t,e),i=v("cropSize",n,t,e),l=v("method",n,t,e),u=v("extrapolationValue",n,t,e);return[s.image.cropAndResize(r,o,a,i,l,u)]}case"ImageProjectiveTransformV3":{const r=v("images",n,t,e),o=v("transforms",n,t,e),a=v("outputShape",n,t,e),i=v("fillValue",n,t,e),l=v("interpolation",n,t,e),u=v("fillMode",n,t,e);return[s.image.transform(r,o,l.toLowerCase(),u.toLowerCase(),i,a)]}default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"graph":return r(()=>((n,t,e,s=Ke)=>{switch(n.op){case"Const":return t[n.name];case"PlaceholderWithDefault":const r=v("default",n,t,e);return[gn(n.name,t,e)||r];case"Placeholder":return[gn(n.name,t,e)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[kr(v("x",n,t,e))];case"IdentityN":return v("x",n,t,e).map(c=>kr(c));case"Shape":return[s.tensor1d(v("x",n,t,e).shape,"int32")];case"ShapeN":return v("x",n,t,e).map(c=>s.tensor1d(c.shape));case"Size":return[s.scalar(v("x",n,t,e).size,"int32")];case"Rank":return[s.scalar(v("x",n,t,e).rank,"int32")];case"NoOp":return[s.scalar(1)];case"Print":const a=v("x",n,t,e),i=v("data",n,t,e),l=v("message",n,t,e),u=v("summarize",n,t,e);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(l);for(let c=0;c<i.length;c++)console.log(Array.prototype.slice.call(i[c].dataSync()).slice(0,u));return[a];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"logical":return r(()=>((n,t,e,s=Ke)=>{switch(n.op){case"Equal":return[s.equal(v("a",n,t,e),v("b",n,t,e))];case"NotEqual":return[s.notEqual(v("a",n,t,e),v("b",n,t,e))];case"Greater":return[s.greater(v("a",n,t,e),v("b",n,t,e))];case"GreaterEqual":return[s.greaterEqual(v("a",n,t,e),v("b",n,t,e))];case"Less":return[s.less(v("a",n,t,e),v("b",n,t,e))];case"LessEqual":return[s.lessEqual(v("a",n,t,e),v("b",n,t,e))];case"LogicalAnd":return[s.logicalAnd(v("a",n,t,e),v("b",n,t,e))];case"LogicalNot":return[s.logicalNot(v("a",n,t,e))];case"LogicalOr":return[s.logicalOr(v("a",n,t,e),v("b",n,t,e))];case"Select":case"SelectV2":return[s.where(v("condition",n,t,e),v("a",n,t,e),v("b",n,t,e))];case"BitwiseAnd":return[s.bitwiseAnd(v("a",n,t,e),v("b",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"matrices":return r(()=>((n,t,e,s=Ke)=>{switch(n.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[s.matMul(v("a",n,t,e),v("b",n,t,e),v("transposeA",n,t,e),v("transposeB",n,t,e))];case"Einsum":return[s.einsum(v("equation",n,t,e),...v("tensors",n,t,e))];case"Transpose":return[s.transpose(v("x",n,t,e),v("perm",n,t,e))];case"_FusedMatMul":const[r,o]=v("fusedOps",n,t,e),a="biasadd"===r,i="prelu"===o,l=v("numArgs",n,t,e),u=v("leakyreluAlpha",n,t,e);if(a){if(i&&2!==l)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==l)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[c,h]=v("args",n,t,e);return[s.fused.matMul({a:v("a",n,t,e),b:v("b",n,t,e),transposeA:v("transposeA",n,t,e),transposeB:v("transposeB",n,t,e),bias:c,activation:o,preluActivationWeights:h,leakyreluAlpha:u})];case"MatrixBandPart":return[s.linalg.bandPart(v("a",n,t,e),v("numLower",n,t,e),v("numUpper",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"normalization":return r(()=>((n,t,e,s=Ke)=>{switch(n.op){case"EuclideanNorm":return[s.euclideanNorm(v("x",n,t,e),v("axis",n,t,e),v("keepDims",n,t,e))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[s.batchNorm(v("x",n,t,e),v("mean",n,t,e),v("variance",n,t,e),v("offset",n,t,e),v("scale",n,t,e),v("epsilon",n,t,e))];case"LRN":return[s.localResponseNormalization(v("x",n,t,e),v("radius",n,t,e),v("bias",n,t,e),v("alpha",n,t,e),v("beta",n,t,e))];case"Softmax":return[s.softmax(v("x",n,t,e))];case"LogSoftmax":return[s.logSoftmax(v("x",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"ragged":return r(()=>((n,t,e,s=Ke)=>{switch(n.op){case"RaggedGather":{const{outputNestedSplits:r,outputDenseValues:o}=s.raggedGather(v("paramsNestedSplits",n,t,e),v("paramsDenseValues",n,t,e),v("indices",n,t,e),v("outputRaggedRank",n,t,e));return r.concat(o)}case"RaggedRange":{const{rtNestedSplits:r,rtDenseValues:o}=s.raggedRange(v("starts",n,t,e),v("limits",n,t,e),v("splits",n,t,e));return[r,o]}case"RaggedTensorToTensor":return[s.raggedTensorToTensor(v("shape",n,t,e),v("values",n,t,e),v("defaultValue",n,t,e),v("rowPartitionTensors",n,t,e),v("rowPartitionTypes",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"reduction":return r(()=>((n,t,e,s=Ke)=>{switch(n.op){case"Max":{const i=v("axis",n,t,e),l=v("keepDims",n,t,e);return[s.max(v("x",n,t,e),i,l)]}case"Mean":{const i=v("axis",n,t,e),l=v("keepDims",n,t,e);return[s.mean(v("x",n,t,e),i,l)]}case"Min":{const i=v("axis",n,t,e),l=v("keepDims",n,t,e);return[s.min(v("x",n,t,e),i,l)]}case"Sum":{const i=v("axis",n,t,e),l=v("keepDims",n,t,e);return[s.sum(v("x",n,t,e),i,l)]}case"All":{const i=v("axis",n,t,e),l=v("keepDims",n,t,e);return[s.all(v("x",n,t,e),i,l)]}case"Any":{const i=v("axis",n,t,e),l=v("keepDims",n,t,e);return[s.any(v("x",n,t,e),i,l)]}case"ArgMax":{const i=v("axis",n,t,e);return[s.argMax(v("x",n,t,e),i)]}case"ArgMin":{const i=v("axis",n,t,e);return[s.argMin(v("x",n,t,e),i)]}case"Prod":{const i=v("axis",n,t,e),l=v("keepDims",n,t,e);return[s.prod(v("x",n,t,e),i,l)]}case"Cumprod":{const i=v("axis",n,t,e),l=v("exclusive",n,t,e),u=v("reverse",n,t,e);return[s.cumprod(v("x",n,t,e),i,l,u)]}case"Cumsum":{const i=v("axis",n,t,e),l=v("exclusive",n,t,e),u=v("reverse",n,t,e);return[s.cumsum(v("x",n,t,e),i,l,u)]}case"Bincount":const r=v("x",n,t,e),o=v("weights",n,t,e),a=v("size",n,t,e);return[s.bincount(r,o,a)];case"DenseBincount":{const i=v("x",n,t,e),l=v("weights",n,t,e),u=v("size",n,t,e),c=v("binaryOutput",n,t,e);return[s.denseBincount(i,l,u,c)]}default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"slice_join":return r(()=>((n,t,e,s=Ke)=>{switch(n.op){case"ConcatV2":case"Concat":{const r=v("n",n,t,e),o=v("axis",n,t,e);let a=v("tensors",n,t,e);return a=a.slice(0,r),[s.concat(a,o)]}case"Gather":{const r=v("x",n,t,e),o=v("indices",n,t,e);return[s.gather(r,s.cast(o,"int32"),0)]}case"GatherV2":{const r=v("axis",n,t,e),o=v("batchDims",n,t,e),a=v("x",n,t,e),i=v("indices",n,t,e);return[s.gather(a,s.cast(i,"int32"),r,o)]}case"Reverse":{const r=v("dims",n,t,e),o=[];for(let i=0;i<r.length;i++)r[i]&&o.push(i);const a=v("x",n,t,e);return[s.reverse(a,o)]}case"ReverseV2":{const r=v("axis",n,t,e),o=v("x",n,t,e);return[s.reverse(o,r)]}case"Slice":{const r=v("begin",n,t,e),o=v("size",n,t,e);return[s.slice(v("x",n,t,e),r,o)]}case"StridedSlice":{const r=v("begin",n,t,e),o=v("end",n,t,e),a=v("strides",n,t,e),i=v("beginMask",n,t,e),l=v("endMask",n,t,e),u=v("ellipsisMask",n,t,e),c=v("newAxisMask",n,t,e),h=v("shrinkAxisMask",n,t,e),d=v("x",n,t,e);return[s.stridedSlice(d,r,o,a,i,l,u,c,h)]}case"Pack":return P(()=>{const r=v("axis",n,t,e),o=v("tensors",n,t,e),a=o[0].shape,i=s.squeeze(o[0]).shape,l=o.map(u=>{const c=Xe(u.shape,a);if(!c&&!Xe(s.squeeze(u).shape,i))throw new Error("the input tensors shape does not match");return c?u:s.reshape(u,a)});return[s.stack(l,r)]});case"Unpack":{const r=v("axis",n,t,e),o=v("tensor",n,t,e);return s.unstack(o,r)}case"Tile":{const r=v("reps",n,t,e);return[s.tile(v("x",n,t,e),r)]}case"Split":case"SplitV":{const r=v("axis",n,t,e),o=v("numOrSizeSplits",n,t,e),a=v("x",n,t,e);return s.split(a,o,r)}case"ScatterNd":{const r=v("indices",n,t,e),o=v("values",n,t,e),a=v("shape",n,t,e);return[s.scatterND(r,o,a)]}case"GatherNd":{const r=v("x",n,t,e),o=v("indices",n,t,e);return[s.gatherND(r,o)]}case"SparseToDense":{const r=v("sparseIndices",n,t,e),o=v("outputShape",n,t,e),a=v("sparseValues",n,t,e),i=v("defaultValue",n,t,e);return[s.sparseToDense(r,a,o,a.dtype===i.dtype?i:s.cast(i,a.dtype))]}case"TensorScatterUpdate":{const r=v("indices",n,t,e),o=v("values",n,t,e),a=v("tensor",n,t,e);return[s.tensorScatterUpdate(a,r,o)]}default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"sparse":return r(()=>((n,t,e,s=Ke)=>{switch(n.op){case"SparseFillEmptyRows":{const{outputIndices:r,outputValues:o,emptyRowIndicator:a,reverseIndexMap:i}=s.sparse.sparseFillEmptyRows(v("indices",n,t,e),v("values",n,t,e),v("denseShape",n,t,e),v("defaultValue",n,t,e));return[r,o,a,i]}case"SparseReshape":{const{outputIndices:r,outputShape:o}=s.sparse.sparseReshape(v("inputIndices",n,t,e),v("inputShape",n,t,e),v("newShape",n,t,e));return[r,o]}case"SparseSegmentMean":return[s.sparse.sparseSegmentMean(v("data",n,t,e),v("indices",n,t,e),v("segmentIds",n,t,e))];case"SparseSegmentSum":return[s.sparse.sparseSegmentSum(v("data",n,t,e),v("indices",n,t,e),v("segmentIds",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"spectral":return r(()=>((n,t,e,s=Ke)=>{switch(n.op){case"FFT":return[s.fft(v("x",n,t,e))];case"IFFT":return[s.ifft(v("x",n,t,e))];case"RFFT":return[s.rfft(v("x",n,t,e))];case"IRFFT":return[s.irfft(v("x",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"string":return r(()=>((n,t,e,s=Ke)=>{switch(n.op){case"StaticRegexReplace":return[s.string.staticRegexReplace(v("input",n,t,e),v("pattern",n,t,e),v("rewrite",n,t,e),v("replaceGlobal",n,t,e))];case"StringNGrams":{const{nGrams:r,nGramsSplits:o}=s.string.stringNGrams(v("data",n,t,e),v("dataSplits",n,t,e),v("separator",n,t,e),v("nGramWidths",n,t,e),v("leftPad",n,t,e),v("rightPad",n,t,e),v("padWidth",n,t,e),v("preserveShortSequences",n,t,e));return[r,o]}case"StringSplit":{const{indices:r,values:o,shape:a}=s.string.stringSplit(v("input",n,t,e),v("delimiter",n,t,e),v("skipEmpty",n,t,e));return[r,o,a]}case"StringToHashBucketFast":return[s.string.stringToHashBucketFast(v("input",n,t,e),v("numBuckets",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"transformation":return r(()=>((n,t,e,s=Ke)=>{switch(n.op){case"Cast":return[s.cast(v("x",n,t,e),v("dtype",n,t,e))];case"ExpandDims":{const r=v("axis",n,t,e);return[s.expandDims(v("x",n,t,e),r)]}case"Squeeze":{const r=v("axis",n,t,e);return[s.squeeze(v("x",n,t,e),r)]}case"Reshape":return[s.reshape(v("x",n,t,e),v("shape",n,t,e))];case"EnsureShape":return[s.ensureShape(v("x",n,t,e),v("shape",n,t,e))];case"MirrorPad":return[s.mirrorPad(v("x",n,t,e),v("padding",n,t,e),v("mode",n,t,e))];case"PadV2":case"Pad":return[s.pad(v("x",n,t,e),v("padding",n,t,e),v("constantValue",n,t,e))];case"SpaceToBatchND":{const r=v("blockShape",n,t,e),o=v("paddings",n,t,e);return[s.spaceToBatchND(v("x",n,t,e),r,o)]}case"BatchToSpaceND":{const r=v("blockShape",n,t,e),o=v("crops",n,t,e);return[s.batchToSpaceND(v("x",n,t,e),r,o)]}case"DepthToSpace":{const r=v("blockSize",n,t,e),o=v("dataFormat",n,t,e).toUpperCase();return[s.depthToSpace(v("x",n,t,e),r,o)]}case"BroadcastTo":return[s.broadcastTo(v("x",n,t,e),v("shape",n,t,e))];case"BroadcastArgs":return[s.broadcastArgs(v("s0",n,t,e),v("s1",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}})(a,i,l));case"hash_table":return dR(a,i,l,s);case"custom":const u=Sw(a.op);if(u&&u.customExecutor)return u.customExecutor(new YA(a,i,l));throw TypeError(`Custom op ${a.op} is not registered.`);default:throw TypeError(`Unknown op '${a.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(n,t,e);return Lr(o)?o.then(a=>[].concat(a)):[].concat(o)}class Aw{constructor(t={},e={},s={},r={},o){this.weightMap=t,this.tensorArrayMap=e,this.tensorListMap=s,this.functionMap=r,this.parseNodeNameCache=o,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(t,e){return{id:t,frameName:e,iterationId:0}}set currentContext(t){this.contexts!==t&&(this.contexts=t,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const t=[];for(let e=0;e<this.contexts.length-1;e++){const s=this.contexts.slice(0,this.contexts.length-e);t.push(this.contextIdforContexts(s))}t.push(""),this._currentContextIds=t}contextIdforContexts(t){return t?t.map(e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`).join("/"):""}enterFrame(t){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,t)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const t=Object.assign({},this.contexts[this.contexts.length-1]);t.iterationId+=1,t.id=this.lastId,this.contexts.splice(-1,1,t),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(t){return this.weightMap[t]}addTensorArray(t){this.tensorArrayMap[t.id]=t}getTensorArray(t){return this.tensorArrayMap[t]}addTensorList(t){this.tensorListMap[t.id]=t}getTensorList(t){return this.tensorListMap[t]}dispose(t){for(const e in this.tensorArrayMap)this.tensorArrayMap[e].clearAndClose(t);for(const e in this.tensorListMap)this.tensorListMap[e].clearAndClose(t)}}function Rw(n,t,e,s){const r=new Set,o=[];let a=null,i=null;const l=new Set,u=new Set(Object.keys(n).map(d=>Zn(d)[0]));s=s||[];const c=new Set(s.map(d=>Zn(d.name)[0])),h=[...t];for(;h.length>0;){const d=h.pop();if((Bo(d)||AR(d)||RR(d))&&null==a&&(a=d,i=a.children.map(p=>p.name).filter(p=>r.has(p))),r.add(d.name),null==e[d.name]&&!u.has(d.name)&&!c.has(d.name)){if(0===d.inputs.length){o.push(d.name);continue}d.inputs.forEach(p=>{l.has(p.name)||(l.add(p.name),h.push(p))})}}return{inputs:n,outputs:t,usedNodes:r,missingInputs:o,dynamicNode:a,syncInputs:i}}class yd extends Error{constructor(t){super(`NodesExecutionOrderError: ${t}`)}}const _R=new Set(["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"]),ER=new Set(["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"]),$R=new Set(["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"]);function Bo(n){return _R.has(n.op)}function AR(n){return ER.has(n.op)}function RR(n){return $R.has(n.op)}class bd{get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(t){const e=Object.keys(t).map(s=>t[s].map(r=>r.id));this._weightIds=[].concat(...e),this._weightMap=t}set resourceManager(t){this._resourceManager=t}get inputs(){return this._inputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get outputs(){return this._outputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get inputNodes(){return this._inputs.map(t=>t.signatureKey||t.name)}get outputNodes(){return this._outputs.map(t=>{const e=t.signatureKey||t.name;return t.defaultOutput?`${e}:${t.defaultOutput}`:e})}get functions(){return Object.keys(this._functions).reduce((t,e)=>(t[e]=this._functions[e].signature,t),{})}constructor(t,e){this.graph=t,this.parent=e,this.compiledMap=new Map,this.parseNodeNameCache=new Map,this._weightMap={},this.SEPARATOR=",",this._functions={},this._functionExecutorMap={},this.keepIntermediateTensors=!1,this._outputs=t.outputs,this._inputs=t.inputs,this._initNodes=t.initNodes,this._signature=t.signature,this._functions=t.functions,null!=t.functions&&Object.keys(t.functions).forEach(s=>{this._functionExecutorMap[s]=new bd(t.functions[s],this)})}getCompilationKey(t,e){const s=t.map(o=>o.name).sort(),r=e.map(o=>o.name).sort();return s.join(this.SEPARATOR)+"--"+r.join(this.SEPARATOR)}compile(t,e){const s=Rw(t,e,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:o,syncInputs:a}=s;if(null!=o)throw new Error(`This execution contains the node '${o.name}', which has the dynamic op '${o.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(r.length>0){const u=e.map(h=>h.name),c=Object.keys(t);throw new Error(`Cannot compute the outputs [${u}] from the provided inputs [${c}]. Missing the following inputs: [${r}]`)}const i=function CR(n,t){const{usedNodes:e,inputs:s}=t,a=m=>e.has("string"==typeof m?m:m.name);function i(m){return[...new Map(m.map(y=>[y.name,y])).values()]}const l=i([...Object.keys(s).map(m=>Zn(m)[0]).map(m=>n.nodes[m]),...n.weights,...n.initNodes||[]]).filter(a),u=i([...l,...Object.values(n.nodes)]).filter(a),c=new Map(u.map(m=>[m.name,m])),h={};for(const m of u){h[m.name]=h[m.name]||0;for(const y of m.children)a(y)||(h[y.name]=Number.POSITIVE_INFINITY),h[y.name]=(h[y.name]||0)+1}const d=Object.entries(h).filter(([,m])=>0===m).map(([m])=>m),p=[...d];for(;d.length>0;){const m=d.pop(),y=c.get(m);for(const b of y.children.filter(a))0==--h[b.name]&&(p.push(b.name),d.push(b.name))}const g=function NR(n,t){const e=new Map(n.map(a=>[a.name,a])),s=t.map(a=>a.name),r=new Set(s);for(;s.length>0;){const a=s.pop(),i=e.get(a);for(const l of i.children)!e.has(l.name)||r.has(l.name)||(r.add(l.name),s.push(l.name))}return n.filter(a=>r.has(a.name))}(p.map(m=>c.get(m)),l);return function kR(n,t){const e=new Map(n.map((i,l)=>[i.name,l])),s=new Set(t.map(i=>i.name)),r=i=>s.has("string"==typeof i?i:i.name),o=new Set(n.map(i=>i.name)),a=i=>o.has("string"==typeof i?i:i.name);for(const i of n){for(const l of i.children.filter(a)){if(!e.has(l.name))throw new yd(`Child ${l.name} of node ${i.name} is unreachable.`);if(e.get(i.name)>e.get(l.name))throw new yd(`Node ${i.name} is scheduled to run after its child ${l.name}.`)}if(!r(i))for(const l of i.inputs){if(!e.has(l.name))throw new yd(`Input ${l.name} of node ${i.name} is unreachable.`);if(e.get(l.name)>e.get(i.name))throw new yd(`Node ${i.name} is scheduled to run before its input ${l.name}.`)}}}(g,l),g}(this.graph,s),l=function TR(n){const t=new Map(n.map((i,l)=>[i.name,l])),e=Number.MAX_SAFE_INTEGER,s=n.map((i,l)=>Bo(i)?e:l),r=i=>{const l=s[t.get(i.name)];return null==l?-1:l},o=n.map((i,l)=>i.children.map(r).reduce((u,c)=>Math.max(u,c),s[l])),a=new Map;for(let i=0;i<n.length;++i){const l=o[i];if(l===e)continue;const u=n[i],c=n[l];a.has(c.name)||a.set(c.name,[]),a.get(c.name).push(u)}return a}(i);return{orderedNodes:i,nodeLiveUntilMap:l}}cloneAndKeepTensor(t){if(null==t)return null;const e=t.clone();return Yt(e),e}cloneTensorList(t){return t?t.map(s=>this.cloneAndKeepTensor(s)):null}cloneTensorMap(t){return Object.fromEntries(Object.entries(t).map(([e,s])=>[e,this.cloneTensorList(s)]))}execute(t,e){this.disposeIntermediateTensors(),t=this.mapInputs(t);const s=Object.keys(t).sort();this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e);const r=s.map(d=>this.graph.nodes[Zn(d)[0]]),o=e.map(d=>Zn(d)[0]),a=new Set(o);let i=o.map(d=>this.graph.nodes[d]);0===i.length&&(i=this._outputs);const l=this.getCompilationKey(r,i);let u=this.compiledMap.get(l);null==u&&(u=this.compile(t,i),this.compiledMap.set(l,u));try{this.keepIntermediateTensors=z().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(d){this.keepIntermediateTensors=!1,console.warn(d.message)}const c={},h={};return P(()=>{const d=new Aw(this.weightMap,c,h,this.functionExecutorMap,this.parseNodeNameCache),p=Object.assign({},this.weightMap);this.keepIntermediateTensors&&(this.clonedTensorsMap=this.cloneTensorMap(this.weightMap)),Object.keys(t).forEach(y=>{const[b,w]=Zn(y,d),x=[];x[w]=t[y],p[b]=x,this.keepIntermediateTensors&&(this.clonedTensorsMap[b]=this.cloneTensorList(x))});const f=this.getFrozenTensorIds(p),{orderedNodes:g,nodeLiveUntilMap:m}=u;for(const y of g){if(p[y.name])continue;const b=$w(y,p,d,this._resourceManager);if(Lr(b))throw new Error(`The execution of the op '${y.op}' returned a promise. Please use model.executeAsync() instead.`);p[y.name]=b,this.keepIntermediateTensors&&(this.clonedTensorsMap[y.name]=this.cloneTensorList(b)),this.checkTensorForDisposalWithNodeLiveUntilInfo(y,p,d,f,a,m.get(y.name))}return null==this.parent&&d.dispose(f),e.map(y=>gn(y,p,d))})}getFrozenTensorIds(t){const e=[].concat.apply([],Object.keys(t).map(s=>t[s]).map(s=>s.map(r=>r.id)));return new Set(e)}checkTensorForDisposal(t,e,s,r,o,a,i){if(!Bo(e)&&!a.has(t)){for(const l of s[t])null!=l&&(i[l.id]=(i[l.id]||0)+e.children.length);for(const l of e.inputs){if(Bo(l))continue;const u=Iw(l.name,s,r);if(null!=u)for(const c of u){if(!c||c.kept||o.has(c.id))continue;const h=i[c.id];1===h?(c.dispose(),delete i[c.id]):null!=h&&i[c.id]--}}}}checkTensorForDisposalWithNodeLiveUntilInfo(t,e,s,r,o,a){function i(l){return Bo(l)||o.has(l.name)}if(!Bo(t)&&null!=a)for(const l of a){if(i(l))continue;const u=Iw(l.name,e,s);for(const c of u)!c||c.kept||r.has(c.id)||c.dispose()}}executeAsync(t,e){var s=this;return(0,Y.Z)(function*(){return s._executeAsync(t,e)})()}disposeIntermediateTensors(){this.clonedTensorsMap&&(Object.values(this.clonedTensorsMap).forEach(t=>{for(const e of t)e&&!e.isDisposed&&e.dispose()}),this.clonedTensorsMap=null)}getIntermediateTensors(){return this.clonedTensorsMap}_executeAsync(t,e,s=!1,r={},o={}){var a=this;return(0,Y.Z)(function*(){a.disposeIntermediateTensors(),s||(t=a.mapInputs(t),a.checkInputs(t),a.checkInputShapeAndType(t),e=a.mapOutputs(e),a.checkOutputs(e));try{a.keepIntermediateTensors=z().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(p){a.keepIntermediateTensors=!1,console.warn(p.message)}const i=new Aw(a.weightMap,r,o,a.functionExecutorMap,a.parseNodeNameCache);a.keepIntermediateTensors&&(a.clonedTensorsMap=a.cloneTensorMap(a.weightMap));const l=yield a.executeWithControlFlow(t,i,e,s),u=e.map(p=>gn(p,l,i)),c=u.map(p=>p.id),h=Object.keys(t).map(p=>t[p].id),d=new Set([...c,...h,...a.weightIds]);return Object.values(l).forEach(p=>{p.forEach(f=>{f&&!f.isDisposed&&!d.has(f.id)&&f.dispose()})}),null==a.parent&&i.dispose(d),u})()}executeFunctionAsync(t,e,s){var r=this;return(0,Y.Z)(function*(){const o=t.reduce((a,i,l)=>(a[r.inputs[l].name]=i,a),{});return r._executeAsync(o,r.outputNodes,!0,e,s)})()}executeWithControlFlow(t,e,s,r){var o=this;return(0,Y.Z)(function*(){const a=Object.keys(t),i=a.map(S=>o.graph.nodes[Zn(S)[0]]),l=s.map(S=>Zn(S)[0]),u=new Set(l);let c=l.map(S=>o.graph.nodes[S]);0===c.length&&(c=o._outputs);const{usedNodes:h,missingInputs:d,dynamicNode:p,syncInputs:f}=Rw(t,c,o.weightMap,o._initNodes),g=[...i,...o.graph.weights,...o._initNodes||[]].map(S=>({node:S,contexts:e.currentContext})),m=Object.assign({},o.weightMap);Object.keys(t).forEach(S=>{const[I,k]=Zn(S),T=[];T[k]=t[S],m[I]=T});const y={},b=o.getFrozenTensorIds(m),w={};for(;g.length>0;){const S=o.processStack(i,g,e,m,w,b,u,y,h);yield Promise.all(S)}null==p&&!r&&console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const x=c.filter(S=>!Bo(S)&&!gn(S.name,m,e)).map(S=>S.name);if(x.length>0){let S="";throw null!=p&&(S=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${f}]`),new Error(`Cannot compute the outputs [${x}] from the provided inputs [${a}]. Consider providing the following inputs: [${d}]. ${S}`)}return m})()}processStack(t,e,s,r,o,a,i,l,u){const c=[];for(;e.length>0;){const h=e.pop();s.currentContext=h.contexts;let d="";if("Enter"===h.node.op&&v("isConstant",h.node,r,s)&&([d]=Nr(h.node.name,s)),null==r[h.node.name]){const p=$w(h.node,r,s,this._resourceManager);d||([d]=Nr(h.node.name,s));const f=s.currentContext;Lr(p)?c.push(p.then(g=>(r[d]=g,this.keepIntermediateTensors&&(this.clonedTensorsMap[d]=this.cloneTensorList(g)),s.currentContext=f,this.checkTensorForDisposal(d,h.node,r,s,a,i,l),this.processChildNodes(h.node,e,s,r,o,u),g))):(r[d]=p,this.keepIntermediateTensors&&(this.clonedTensorsMap[d]=this.cloneTensorList(p)),this.checkTensorForDisposal(d,h.node,r,s,a,i,l),this.processChildNodes(h.node,e,s,r,o,u))}else this.processChildNodes(h.node,e,s,r,o,u)}return c}processChildNodes(t,e,s,r,o,a){t.children.forEach(i=>{const[l]=Nr(i.name,s);o[l]||!a.has(i.name)||("Merge"===i.op?i.inputNames.some(u=>!!gn(u,r,s))&&(o[l]=!0,e.push({contexts:s.currentContext,node:i})):i.inputNames.every(u=>!!gn(u,r,s))&&(o[l]=!0,e.push({contexts:s.currentContext,node:i})))})}dispose(){Object.keys(this.weightMap).forEach(t=>this.weightMap[t].forEach(e=>e.dispose()))}checkInputShapeAndType(t){Object.keys(t).forEach(e=>{const s=t[e],[r]=Zn(e),o=this.graph.nodes[r];if(o.attrParams.shape&&o.attrParams.shape.value){const a=o.attrParams.shape.value;C(a.length===s.shape.length&&s.shape.every((l,u)=>-1===a[u]||a[u]===l),()=>`The shape of dict['${o.name}'] provided in model.execute(dict) must be [${a}], but was [${s.shape}]`)}o.attrParams.dtype&&o.attrParams.dtype.value&&C(s.dtype===o.attrParams.dtype.value,()=>`The dtype of dict['${o.name}'] provided in model.execute(dict) must be ${o.attrParams.dtype.value}, but was ${s.dtype}`)})}mapInputs(t){var e,s;const r={};for(const o in t){const a=null===(s=null===(e=this._signature)||void 0===e?void 0:e.inputs)||void 0===s?void 0:s[o];null!=a?r[a.name]=t[o]:r[o]=t[o]}return r}checkInputs(t){const e=Object.keys(t).filter(s=>{const[r]=Zn(s);return null==this.graph.nodes[r]});if(e.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${e}] that are not part of graph`)}mapOutputs(t){return t.map(e=>{var s,r;const o=null===(r=null===(s=this._signature)||void 0===s?void 0:s.outputs)||void 0===r?void 0:r[e];return null!=o?o.name:e},{})}checkOutputs(t){t.forEach(e=>{const[s]=Zn(e);if(!this.graph.nodes[s])throw new Error(`The output '${e}' is not found in the graph`)})}}class DR{constructor(t={},e={}){this.hashTableNameToHandle=t,this.hashTableMap=e}addHashTable(t,e){this.hashTableNameToHandle[t]=e.handle,this.hashTableMap[e.id]=e}getHashTableHandleByName(t){return this.hashTableNameToHandle[t]}getHashTableById(t){return this.hashTableMap[t]}dispose(){for(const t in this.hashTableMap)this.hashTableMap[t].clearAndClose(),delete this.hashTableMap[t];for(const t in this.hashTableNameToHandle)this.hashTableNameToHandle[t].dispose(),delete this.hashTableNameToHandle[t]}}const FR="?tfjs-format=file",OR="model.json";class Dw{get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}constructor(t,e={},s=Ee){this.modelUrl=t,this.loadOptions=e,this.version="n/a",this.io=s,null==e&&(this.loadOptions={}),this.resourceManager=new DR}findIOHandler(){const t=this.modelUrl;if(null!=t.load)this.handler=t;else if(null!=this.loadOptions.requestInit)this.handler=this.io.browserHTTPRequest(t,this.loadOptions);else{const e=this.io.getLoadHandlers(t,this.loadOptions);if(0===e.length)e.push(this.io.browserHTTPRequest(t,this.loadOptions));else if(e.length>1)throw new Error(`Found more than one (${e.length}) load handlers for URL '${[t]}'`);this.handler=e[0]}}load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const t=this.handler.load();return Lr(t)?t.then(e=>this.loadSync(e)):this.loadSync(t)}loadSync(t){this.artifacts=t;const e=this.artifacts.modelTopology;let s=this.artifacts.signature;if(null!=this.artifacts.userDefinedMetadata){const o=this.artifacts.userDefinedMetadata;null!=o.signature&&(s=o.signature),null!=o.structuredOutputKeys&&(this.structuredOutputKeys=o.structuredOutputKeys)}this.signature=s,this.version=`${e.versions.producer}.${e.versions.minConsumer}`;const r=this.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new bd(Cw.Instance.transformGraph(e,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),this.executor.resourceManager=this.resourceManager,null!=t.modelInitializer&&null!=t.modelInitializer.node){const o=Cw.Instance.transformGraph(t.modelInitializer);this.initializer=new bd(o),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializerSignature=t.initializerSignature}return!0}save(t,e){var s=this;return(0,Y.Z)(function*(){if("string"==typeof t){const r=s.io.getSaveHandlers(t);if(0===r.length)throw new Error(`Cannot find any save handlers for URL '${t}'`);if(r.length>1)throw new Error(`Found more than one (${r.length}) save handlers for URL '${t}'`);t=r[0]}if(null==t.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return t.save(s.artifacts)})()}addStructuredOutputNames(t){if(this.structuredOutputKeys){const s={};return(t instanceof st?[t]:t).forEach((r,o)=>s[this.structuredOutputKeys[o]]=r),s}return t}predict(t,e){const s=this.execute(t,this.outputNodes);return this.addStructuredOutputNames(s)}predictAsync(t,e){var s=this;return(0,Y.Z)(function*(){const r=yield s.executeAsync(t,s.outputNodes);return s.addStructuredOutputNames(r)})()}normalizeInputs(t){var e;if(!(t instanceof st||Array.isArray(t))){const o=null===(e=this.signature)||void 0===e?void 0:e.inputs;if(null!=o)for(const a in o){const i=o[a];null!=i.resourceId&&(t[a]=this.resourceIdToCapturedInput[i.resourceId])}return t}t=Array.isArray(t)?t:[t];const s=Object.keys(this.resourceIdToCapturedInput).length;if(t.length+s!==this.inputNodes.length)throw new Error(`Input tensor count mismatch, the graph model has ${this.inputNodes.length-s} non-resource placeholders, while there are ${t.length} input tensors provided.`);let r=0;return this.inputNodes.reduce((o,a)=>{var i,l,u;const c=null===(u=null===(l=null===(i=this.signature)||void 0===i?void 0:i.inputs)||void 0===l?void 0:l[a])||void 0===u?void 0:u.resourceId;return o[a]=null!=c?this.resourceIdToCapturedInput[c]:t[r++],o},{})}normalizeOutputs(t){return t=t||this.outputNodes,Array.isArray(t)?t:[t]}executeInitializerGraph(){return null==this.initializer?[]:this.initializer.execute({},null==this.initializerSignature?[]:Object.keys(this.initializerSignature.outputs))}executeInitializerGraphAsync(){var t=this;return(0,Y.Z)(function*(){return null==t.initializer?[]:t.initializer.executeAsync({},null==t.initializerSignature?[]:Object.keys(t.initializerSignature.outputs))})()}setResourceIdToCapturedInput(t){if(this.resourceIdToCapturedInput={},this.initializerSignature){const e=this.initializerSignature.outputs,s=Object.keys(e);for(let r=0;r<s.length;r++)this.resourceIdToCapturedInput[e[s[r]].resourceId]=t[r]}}execute(t,e){null==this.resourceIdToCapturedInput&&this.setResourceIdToCapturedInput(this.executeInitializerGraph()),t=this.normalizeInputs(t),e=this.normalizeOutputs(e);const s=this.executor.execute(t,e);return s.length>1?s:s[0]}executeAsync(t,e){var s=this;return(0,Y.Z)(function*(){null==s.resourceIdToCapturedInput&&s.setResourceIdToCapturedInput(yield s.executeInitializerGraphAsync()),t=s.normalizeInputs(t),e=s.normalizeOutputs(e);const r=yield s.executor.executeAsync(t,e);return r.length>1?r:r[0]})()}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(t){return Object.keys(t).reduce((e,s)=>(e[s]=[t[s]],e),{})}dispose(){this.executor.dispose(),this.initializer&&(this.initializer.dispose(),this.resourceIdToCapturedInput&&Ge(this.resourceIdToCapturedInput)),this.resourceManager.dispose()}}function Fw(n){return Vg.apply(this,arguments)}function Vg(){return(Vg=(0,Y.Z)(function*(n,t={},e=Ee){if(null==n)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&"string"==typeof n&&(n=function LR(n){return n.endsWith("/")||(n+="/"),`${n}${OR}${FR}`}(n));const s=new Dw(n,t,e);return yield s.load(),s})).apply(this,arguments)}var Wg=function(n,t){return(Wg=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,s){e.__proto__=s}||function(e,s){for(var r in s)s.hasOwnProperty(r)&&(e[r]=s[r])})(n,t)};function Ow(n,t){function e(){this.constructor=n}Wg(n,t),n.prototype=null===t?Object.create(t):(e.prototype=t.prototype,new e)}var Zs=function(){return Zs=Object.assign||function(t){for(var e,s=1,r=arguments.length;s<r;s++)for(var o in e=arguments[s])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},Zs.apply(this,arguments)};function Ys(n,t,e,s){return new(e||(e=Promise))(function(o,a){function i(c){try{u(s.next(c))}catch(h){a(h)}}function l(c){try{u(s.throw(c))}catch(h){a(h)}}function u(c){c.done?o(c.value):function r(o){return o instanceof e?o:new e(function(a){a(o)})}(c.value).then(i,l)}u((s=s.apply(n,t||[])).next())})}function Qs(n,t){var s,r,o,a,e={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function i(u){return function(c){return function l(u){if(s)throw new TypeError("Generator is already executing.");for(;e;)try{if(s=1,r&&(o=2&u[0]?r.return:u[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,u[1])).done)return o;switch(r=0,o&&(u=[2&u[0],o.value]),u[0]){case 0:case 1:o=u;break;case 4:return e.label++,{value:u[1],done:!1};case 5:e.label++,r=u[1],u=[0];continue;case 7:u=e.ops.pop(),e.trys.pop();continue;default:if(!(o=(o=e.trys).length>0&&o[o.length-1])&&(6===u[0]||2===u[0])){e=0;continue}if(3===u[0]&&(!o||u[1]>o[0]&&u[1]<o[3])){e.label=u[1];break}if(6===u[0]&&e.label<o[1]){e.label=o[1],o=u;break}if(o&&e.label<o[2]){e.label=o[2],e.ops.push(u);break}o[2]&&e.ops.pop(),e.trys.pop();continue}u=t.call(n,e)}catch(c){u=[6,c],r=0}finally{s=o=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,c])}}}function Lw(n){var t=n.shape[2],e=Wr(n,2),s=F(e,[-1]);return Eo(s,t)}function xd(n,t){return P(function(){return ue(_n(n,Ce(t)),"int32")})}function zR(n,t){var e=t.shape,s=e[0],r=e[1],o=e[2];return P(function(){var a=Lw(t),i=qt(vr(0,o,1,"int32"),1),l=ue(ze(a,i),"int32"),u=F(l,[s,r]),c=ee(u,Ce(1,"int32"));return ye(function MR(n,t){return D(n,t)}(c,n),Ce(1,"int32"))})}var Pw=function(){function n(t,e){this.model=t,this.outputStride=e;var s=this.model.inputs[0].shape;C(-1===s[1]&&-1===s[2],function(){return"Input shape [".concat(s[1],", ").concat(s[2],"] ")+"must both be equal to or -1"})}return n.prototype.predict=function(t){var e=this;return P(function(){var s=e.preprocessInput(ue(t,"float32")),r=qt(s,0),a=e.model.predict(r).map(function(l){return Kn(l,[0])}),i=e.nameOutputResults(a);return{heatmapScores:os(i.heatmap),offsets:i.offsets,displacementFwd:i.displacementFwd,displacementBwd:i.displacementBwd,segmentation:i.segmentation,partHeatmaps:i.partHeatmaps,longOffsets:i.longOffsets,partOffsets:i.partOffsets}})},n.prototype.dispose=function(){this.model.dispose()},n}(),VR=function(n){function t(){return null!==n&&n.apply(this,arguments)||this}return Ow(t,n),t.prototype.preprocessInput=function(e){return P(function(){return ye(ke(e,127.5),1)})},t.prototype.nameOutputResults=function(e){return{offsets:e[0],segmentation:e[1],partHeatmaps:e[2],longOffsets:e[3],heatmap:e[4],displacementFwd:e[5],displacementBwd:e[6],partOffsets:e[7]}},t}(Pw),wd=["nose","leftEye","rightEye","leftEar","rightEar","leftShoulder","rightShoulder","leftElbow","rightElbow","leftWrist","rightWrist","leftHip","rightHip","leftKnee","rightKnee","leftAnkle","rightAnkle"],$s=wd.length,vd=wd.reduce(function(n,t,e){return n[t]=e,n},{});function Ug(n,t,e){return[t[1]/(e.left+e.right+n[1]),t[0]/(e.top+e.bottom+n[0])]}function Mw(n,t,e,s){return{y:s.get(n,t,e),x:s.get(n,t,e+$s)}}function zw(n,t,e){var a=Mw(n.heatmapY,n.heatmapX,n.id,e);return{x:n.heatmapX*t+a.x,y:n.heatmapY*t+a.y}}function Bw(n,t,e){return n<t?t:n>e?e:n}function Vw(n,t){return{x:n.x+t.x,y:n.y+t.y}}function HR(n,t,e){void 0===e&&(e=.3);for(var s=0,r=0,o=0;o<n.length;o++)t.keypoints[o].score>e&&(r+=1,s+=Math.pow(n[o].x-t.keypoints[o].position.x,2)+Math.pow(n[o].y-t.keypoints[o].position.y,2));return 0===r?s=1/0:s/=r,s}function qR(n,t,e,s,r,o,a){for(var i=a[0],l=a[1],u=e(n),c=u.y*s+u.x,h=r[$s*(2*c)+t],d=r[$s*(2*c+1)+t],p=n.y+h,f=n.x+d,g=0;g<o;g++){p=Math.min(p,i-1);var m=e({x:f=Math.min(f,l-1),y:p}),y=m.y*s+m.x;p+=h=r[$s*(2*y)+t],f+=d=r[$s*(2*y+1)+t]}return{x:f,y:p}}function Ww(n,t,e,s,r,o,a,i,l,u){for(var c=r[0],h=r[1],d=o[0],p=o[1],f=i[0],g=i[1],m=[],y=function(T){return function jR(n,t,e,s){var o=t[1],a=e[0],l=Math.round(((t[0]+n.y+1)*e[1]-1)/s);return{x:Math.round(((o+n.x+1)*a-1)/s),y:l}}(T,[c,h],[d,p],l)},b=0;b<s;b++){var w=qR(n,b,y,a,t,u,[f,g]);m.push(w)}for(var x=-1,S=1/0,I=0;I<e.length;I++){var k=HR(m,e[I]);k<S&&(x=I,S=k)}return x}function Uw(n,t){var e=n[0];return[Math.round((n[1]-1)/t+1),Math.round((e-1)/t+1)]}function Gw(n,t,e,s,r,o,a,i,l,u,c){for(var h=a[0],d=a[1],p=n.shape,f=p[0],g=p[1],m=t.shape.slice(0,2),w=F(t,[m[0],m[1],2,$s]),x=new Float32Array(c*$s*3).fill(0),S=0;S<e.length;S++)for(var I=S*$s*3,k=e[S],T=0;T<$s;T++){var _=k.keypoints[T],E=I+3*T;x[E]=_.score,x[E+1]=_.position.y,x[E+2]=_.position.x}var L=Ug([s,r],[h,d],i),B=L[0],W=L[1],U=ns(x,[c,$s,3]),G=i.top,K=i.left,X={variableNames:["segmentation","longOffsets","poses"],outputShape:[f,g],userCode:"\n    int convertToPositionInOutput(int pos, int pad, float scale, int stride) {\n      return round(((float(pos + pad) + 1.0) * scale - 1.0) / float(stride));\n    }\n\n    float convertToPositionInOutputFloat(\n        int pos, int pad, float scale, int stride) {\n      return ((float(pos + pad) + 1.0) * scale - 1.0) / float(stride);\n    }\n\n    float dist(float x1, float y1, float x2, float y2) {\n      return pow(x1 - x2, 2.0) + pow(y1 - y2, 2.0);\n    }\n\n    float sampleLongOffsets(float h, float w, int d, int k) {\n      float fh = fract(h);\n      float fw = fract(w);\n      int clH = int(ceil(h));\n      int clW = int(ceil(w));\n      int flH = int(floor(h));\n      int flW = int(floor(w));\n      float o11 = getLongOffsets(flH, flW, d, k);\n      float o12 = getLongOffsets(flH, clW, d, k);\n      float o21 = getLongOffsets(clH, flW, d, k);\n      float o22 = getLongOffsets(clH, clW, d, k);\n      float o1 = mix(o11, o12, fw);\n      float o2 = mix(o21, o22, fw);\n      return mix(o1, o2, fh);\n    }\n\n    int findNearestPose(int h, int w) {\n      float prob = getSegmentation(h, w);\n      if (prob < 1.0) {\n        return -1;\n      }\n\n      // Done(Tyler): convert from output space h/w to strided space.\n      float stridedH = convertToPositionInOutputFloat(\n        h, ".concat(G,", ").concat(W,", ").concat(o,");\n      float stridedW = convertToPositionInOutputFloat(\n        w, ").concat(K,", ").concat(B,", ").concat(o,");\n\n      float minDist = 1000000.0;\n      int iMin = -1;\n      for (int i = 0; i < ").concat(c,"; i++) {\n        float curDistSum = 0.0;\n        int numKpt = 0;\n        for (int k = 0; k < ").concat($s,"; k++) {\n          float dy = sampleLongOffsets(stridedH, stridedW, 0, k);\n          float dx = sampleLongOffsets(stridedH, stridedW, 1, k);\n\n          float y = float(h) + dy;\n          float x = float(w) + dx;\n\n          for (int s = 0; s < ").concat(l,"; s++) {\n            int yRounded = round(min(y, float(").concat(s-1,")));\n            int xRounded = round(min(x, float(").concat(r-1,")));\n\n            float yStrided = convertToPositionInOutputFloat(\n              yRounded, ").concat(G,", ").concat(W,", ").concat(o,");\n            float xStrided = convertToPositionInOutputFloat(\n              xRounded, ").concat(K,", ").concat(B,", ").concat(o,");\n\n            float dy = sampleLongOffsets(yStrided, xStrided, 0, k);\n            float dx = sampleLongOffsets(yStrided, xStrided, 1, k);\n\n            y = y + dy;\n            x = x + dx;\n          }\n\n          float poseScore = getPoses(i, k, 0);\n          float poseY = getPoses(i, k, 1);\n          float poseX = getPoses(i, k, 2);\n          if (poseScore > ").concat(u,") {\n            numKpt = numKpt + 1;\n            curDistSum = curDistSum + dist(x, y, poseX, poseY);\n          }\n        }\n        if (numKpt > 0 && curDistSum / float(numKpt) < minDist) {\n          minDist = curDistSum / float(numKpt);\n          iMin = i;\n        }\n      }\n      return iMin;\n    }\n\n    void main() {\n        ivec2 coords = getOutputCoords();\n        int nearestPose = findNearestPose(coords[0], coords[1]);\n        setOutput(float(nearestPose));\n      }\n  ")};return xf().compileAndRun(X,[n,w,U])}function Hw(){return"webgl"===wx()}function QR(n,t,e,s,r,o,a,i,l,u,c,h){var d=a[0],p=a[1];return void 0===l&&(l=.2),void 0===u&&(u=8),void 0===c&&(c=.3),void 0===h&&(h=10),Ys(this,void 0,void 0,function(){var f,g,m,y,b;return Qs(this,function(w){switch(w.label){case 0:return f=e.filter(function(x){return x.score>=l}),Hw()?(m=P(function(){var x=Gw(n,t,f,s,r,o,[d,p],i,u,c,h),S=ss().makeTensorFromDataId(x.dataId,x.shape,x.dtype);return f.map(function(I,k){return function ZR(n,t){return P(function(){return ue(Hn(n,Ce(t)),"int32")})}(S,k)})}),[4,Promise.all(m.map(function(x){return x.data()}))]):[3,2];case 1:return g=w.sent(),m.forEach(function(x){return x.dispose()}),[3,5];case 2:return[4,n.data()];case 3:return y=w.sent(),[4,t.data()];case 4:b=w.sent(),g=function KR(n,t,e,s,r,o,a,i,l,u){var c=a[0],h=a[1];void 0===u&&(u=5);for(var d=e.map(function(T){return new Uint8Array(s*r).fill(0)}),p=i.top,f=i.left,g=Ug([s,r],[c,h],i),m=g[0],y=g[1],b=Uw([c,h],o)[0],w=0;w<s;w+=1)for(var x=0;x<r;x+=1){var S=w*r+x;if(1===n[S]){var k=Ww({x,y:w},t,e,u,[p,f],[m,y],b,[s,r],o,l);k>=0&&(d[k][S]=1)}}return d}(y,b,f,s,r,o,[d,p],i,u),w.label=5;case 5:return[2,g.map(function(x,S){return{data:x,pose:f[S],width:r,height:s}})]}})})}function JR(n,t,e,s,r,o,a,i,l,u,c,h,d){var p=i[0],f=i[1];return void 0===u&&(u=.2),void 0===c&&(c=8),void 0===h&&(h=.3),void 0===d&&(d=10),Ys(this,void 0,void 0,function(){var g,m,y,b,w,x;return Qs(this,function(S){switch(S.label){case 0:return g=s.filter(function(I){return I.score>=u}),Hw()?(y=P(function(){var I=Gw(n,t,g,r,o,a,[p,f],l,c,h,d),k=ss().makeTensorFromDataId(I.dataId,I.shape,I.dtype);return g.map(function(T,_){return function YR(n,t,e){return P(function(){return ye(D(ue(Hn(n,Ce(e)),"int32"),ee(t,1)),1)})}(k,e,_)})}),[4,Promise.all(y.map(function(I){return I.data()}))]):[3,2];case 1:return m=S.sent(),y.forEach(function(I){return I.dispose()}),[3,6];case 2:return[4,n.data()];case 3:return b=S.sent(),[4,t.data()];case 4:return w=S.sent(),[4,e.data()];case 5:x=S.sent(),m=function XR(n,t,e,s,r,o,a,i,l,u,c){var h=i[0],d=i[1];void 0===c&&(c=5);for(var p=s.map(function(_){return new Int32Array(r*o).fill(-1)}),f=l.top,g=l.left,m=Ug([r,o],[h,d],l),y=m[0],b=m[1],w=Uw([h,d],a)[0],x=0;x<r;x+=1)for(var S=0;S<o;S+=1){var I=x*o+S;if(1===n[I]){var T=Ww({x:S,y:x},t,s,c,[f,g],[y,b],w,[r,o],a,u);T>=0&&(p[T][I]=e[I])}}return p}(b,w,x,g,r,o,a,[p,f],l,c),S.label=6;case 6:return[2,m.map(function(I,k){return{pose:g[k],data:I,height:r,width:o}})]}})})}function Gg(n){return Math.floor(n/2)}[["leftHip","leftShoulder"],["leftElbow","leftShoulder"],["leftElbow","leftWrist"],["leftHip","leftKnee"],["leftKnee","leftAnkle"],["rightHip","rightShoulder"],["rightElbow","rightShoulder"],["rightElbow","rightWrist"],["rightHip","rightKnee"],["rightKnee","rightAnkle"],["leftShoulder","rightShoulder"],["leftHip","rightHip"]].map(function(n){return[vd[n[0]],vd[n[1]]]});var eD=function(){function n(t,e){this.priorityQueue=new Array(t),this.numberOfElements=-1,this.getElementValue=e}return n.prototype.enqueue=function(t){this.priorityQueue[++this.numberOfElements]=t,this.swim(this.numberOfElements)},n.prototype.dequeue=function(){var t=this.priorityQueue[0];return this.exchange(0,this.numberOfElements--),this.sink(0),this.priorityQueue[this.numberOfElements+1]=null,t},n.prototype.empty=function(){return-1===this.numberOfElements},n.prototype.size=function(){return this.numberOfElements+1},n.prototype.all=function(){return this.priorityQueue.slice(0,this.numberOfElements+1)},n.prototype.max=function(){return this.priorityQueue[0]},n.prototype.swim=function(t){for(;t>0&&this.less(Gg(t),t);)this.exchange(t,Gg(t)),t=Gg(t)},n.prototype.sink=function(t){for(;2*t<=this.numberOfElements;){var e=2*t;if(e<this.numberOfElements&&this.less(e,e+1)&&e++,!this.less(t,e))break;this.exchange(t,e),t=e}},n.prototype.getValueAt=function(t){return this.getElementValue(this.priorityQueue[t])},n.prototype.less=function(t,e){return this.getValueAt(t)<this.getValueAt(e)},n.prototype.exchange=function(t,e){var s=this.priorityQueue[t];this.priorityQueue[t]=this.priorityQueue[e],this.priorityQueue[e]=s},n}();function tD(n,t,e,s,r,o){for(var a=o.shape,i=a[0],l=a[1],u=!0,c=Math.max(e-r,0),h=Math.min(e+r+1,i),d=c;d<h;++d){for(var p=Math.max(s-r,0),f=Math.min(s+r+1,l),g=p;g<f;++g)if(o.get(d,g,n)>t){u=!1;break}if(!u)break}return u}var jw=[["nose","leftEye"],["leftEye","leftEar"],["nose","rightEye"],["rightEye","rightEar"],["nose","leftShoulder"],["leftShoulder","leftElbow"],["leftElbow","leftWrist"],["leftShoulder","leftHip"],["leftHip","leftKnee"],["leftKnee","leftAnkle"],["nose","rightShoulder"],["rightShoulder","rightElbow"],["rightElbow","rightWrist"],["rightShoulder","rightHip"],["rightHip","rightKnee"],["rightKnee","rightAnkle"]].map(function(n){return[vd[n[0]],vd[n[1]]]}),Hg=jw.map(function(n){return n[1]}),qw=jw.map(function(n){return n[0]});function jg(n,t,e,s){return{y:Bw(Math.round(n.y/t),0,e-1),x:Bw(Math.round(n.x/t),0,s-1)}}function Kw(n,t,e,s,r,o,a,i){void 0===i&&(i=2);for(var l=s.shape,u=l[0],c=l[1],d=function sD(n,t,e){var s=e.shape[2]/2;return{y:e.get(t.y,t.x,n),x:e.get(t.y,t.x,s+n)}}(n,jg(t.position,o,u,c),a),f=Vw(t.position,d),g=0;g<i;g++){var m=jg(f,o,u,c),y=Mw(m.y,m.x,e,r);f=Vw({x:m.x*o,y:m.y*o},{x:y.x,y:y.y})}var b=jg(f,o,u,c),w=s.get(b.y,b.x,e);return{position:f,part:wd[e],score:w}}function rD(n,t,e,s,r,o){var i=Hg.length,l=new Array(t.shape[2]),u=n.part,c=n.score,h=zw(u,s,e);l[u.id]={score:c,part:wd[u.id],position:h};for(var d=i-1;d>=0;--d){var f=qw[d];l[p=Hg[d]]&&!l[f]&&(l[f]=Kw(d,l[p],f,t,e,s,o))}for(d=0;d<i;++d){var p;f=Hg[d],l[p=qw[d]]&&!l[f]&&(l[f]=Kw(d,l[p],f,t,e,s,r))}return l}function Xw(n,t,e,s){var r=e.x,o=e.y;return n.some(function(a){var l=a.keypoints[s].position;return function GR(n,t,e,s){var r=e-n,o=s-t;return r*r+o*o}(o,r,l.y,l.x)<=t})}function oD(n,t,e){return e.reduce(function(r,o,a){var l=o.score;return Xw(n,t,o.position,a)||(r+=l),r},0)/e.length}function Sd(n,t,e,s,r,o,a,i){void 0===a&&(a=.5),void 0===i&&(i=20);for(var l=[],u=function nD(n,t,e){for(var s=e.shape,r=s[0],o=s[1],a=s[2],i=new eD(r*o*a,function(d){return d.score}),l=0;l<r;++l)for(var u=0;u<o;++u)for(var c=0;c<a;++c){var h=e.get(l,u,c);h<n||tD(c,h,l,u,t,e)&&i.enqueue({score:h,part:{heatmapY:l,heatmapX:u,id:c}})}return i}(a,1,n),c=i*i;l.length<o&&!u.empty();){var h=u.dequeue();if(!Xw(l,c,zw(h.part,r,t),h.part.id)){var p=rD(h,n,t,r,e,s),f=oD(l,c,p);l.push({keypoints:p,score:f})}}return l}var bi,iD=[-123.15,-115.9,-103.06],lD=function(n){function t(){return null!==n&&n.apply(this,arguments)||this}return Ow(t,n),t.prototype.preprocessInput=function(e){return ee(e,iD)},t.prototype.nameOutputResults=function(e){return{offsets:e[4],segmentation:e[6],partHeatmaps:e[5],longOffsets:e[3],heatmap:e[2],displacementFwd:e[1],displacementBwd:e[0],partOffsets:e[7]}},t}(Pw),Zw="https://storage.googleapis.com/tfjs-models/savedmodel/bodypix/resnet50/",Yw="https://storage.googleapis.com/tfjs-models/savedmodel/bodypix/mobilenet/";function Tr(n){if(typeof HTMLCanvasElement<"u"&&n instanceof HTMLCanvasElement||typeof OffscreenCanvas<"u"&&n instanceof OffscreenCanvas||typeof HTMLImageElement<"u"&&n instanceof HTMLImageElement)return function hD(n){if("offsetHeight"in n&&0!==n.offsetHeight&&"offsetWidth"in n&&0!==n.offsetWidth)return[n.offsetHeight,n.offsetWidth];if(null!=n.height&&null!=n.width)return[n.height,n.width];throw new Error("HTMLImageElement must have height and width attributes set.")}(n);if(typeof ImageData<"u"&&n instanceof ImageData)return[n.height,n.width];if(typeof HTMLVideoElement<"u"&&n instanceof HTMLVideoElement)return function dD(n){return n.hasAttribute("height")&&n.hasAttribute("width")?[n.height,n.width]:[n.videoHeight,n.videoWidth]}(n);if(n instanceof st)return[n.shape[0],n.shape[1]];throw new Error("error: Unknown input type: ".concat(n,"."))}function Qw(n,t){return function pD(n,t){return(n-1)%t==0}(n,t)?n:Math.floor(n/t)*t+1}var Au={low:"low",medium:"medium",high:"high",full:"full"},fD=((bi={})[Au.low]=.25,bi[Au.medium]=.5,bi[Au.high]=.75,bi[Au.full]=1,bi);function Id(n,t,e){var s=e[0],r=e[1],o=function mD(n){if("string"==typeof n){var t=fD[n];return C("number"==typeof t,function(){return"string value of inputResolution must be one of ".concat(Object.values(Au).join(",")," but was ").concat(n,".")}),t}return C("number"==typeof n&&n<=2&&n>=.1,function(){return"inputResolution must be a string or number between ".concat(.1," and ").concat(2,", but ")+"was ".concat(n)}),n}(n);return[Qw(s*o,t),Qw(r*o,t)]}function xi(n,t,e,s,r){var o=t[0],a=t[1],i=e[0],l=e[1],u=s[0],c=u[0],h=u[1],d=s[1],p=d[0],f=d[1];return void 0===r&&(r=!1),P(function(){var g=Xn.resizeBilinear(n,[i,l],!0);return r&&(g=os(g)),function yD(n,t,e){var s=t[0],r=t[1],o=e[0],a=o[0],i=o[1],l=e[1],u=l[0],c=l[1];return P(function(){var h=qt(n);return Kn(Xn.cropAndResize(h,[[a/(s+a+i-1),u/(r+u+c-1),(a+s-1)/(s+a+i-1),(u+r-1)/(r+u+c-1)]],[0],[s,r]),[0])})}(g,[o,a],[[c,h],[p,f]])})}function Cd(n,t){var e=t[0],s=t[1],r=Tr(n),o=r[0],a=r[1],i=s/e,u=[0,0,0,0],c=u[0],h=u[1],d=u[2],p=u[3];a/o<i?(c=0,h=0,d=Math.round(.5*(i*o-a)),p=Math.round(.5*(i*o-a))):(c=Math.round(.5*(1/i*a-o)),h=Math.round(.5*(1/i*a-o)),d=0,p=0);var f=P(function(){var g=function gD(n){return n instanceof st?n:Dx(n)}(n);return g=Dm(g,[[c,h],[d,p],[0,0]]),Xn.resizeBilinear(g,[e,s])});return{resized:f,padding:{top:c,left:d,right:p,bottom:h}}}function Nd(n){return Ys(this,void 0,void 0,function(){return Qs(this,function(t){return[2,Promise.all(n.map(function(e){return e.buffer()}))]})})}function kd(n,t,e,s,r){var a=t[1],h=function xD(n,t,e,s,r){return void 0===s&&(s=0),void 0===r&&(r=0),1===e&&1===t&&0===s&&0===r?n:n.map(function(o){return function bD(n,t,e,s,r){return void 0===s&&(s=0),void 0===r&&(r=0),{score:n.score,keypoints:n.keypoints.map(function(o){var l=o.position;return{score:o.score,part:o.part,position:{x:l.x*e+r,y:l.y*t+s}}})}}(o,t,e,s,r)})}(n,(t[0]+s.top+s.bottom)/e[0],(a+s.left+s.right)/e[1],-s.top,-s.left);return r?function vD(n,t){return t<=0?n:n.map(function(e){return function wD(n,t){return{score:n.score,keypoints:n.keypoints.map(function(e){var o=e.position;return{score:e.score,part:e.part,position:{x:t-1-o.x,y:o.y}}})}}(e,t)})}(h,a):h}var wi=!0,Td=!1,tv={architecture:"MobileNetV1",outputStride:16,quantBytes:4,multiplier:.75},nv=["MobileNetV1","ResNet50"],sv={MobileNetV1:[8,16,32],ResNet50:[32,16]},rv={MobileNetV1:[.5,.75,1],ResNet50:[1]},ov=[1,2,4],_d={flipHorizontal:!1,internalResolution:"medium",segmentationThreshold:.7,maxDetections:10,scoreThreshold:.4,nmsRadius:20},Ed={flipHorizontal:!1,internalResolution:"medium",segmentationThreshold:.7,maxDetections:10,scoreThreshold:.4,nmsRadius:20,minKeypointScore:.3,refineSteps:10};function av(n){var t=n.segmentationThreshold,e=n.maxDetections,s=n.scoreThreshold,r=n.nmsRadius;if(t<0||t>1)throw new Error("segmentationThreshold ".concat(t,". ")+"Should be in range [0.0, 1.0]");if(e<=0)throw new Error("Invalid maxDetections ".concat(e,". ")+"Should be > 0");if(s<0||s>1)throw new Error("Invalid scoreThreshold ".concat(s,". ")+"Should be in range [0.0, 1.0]");if(r<=0)throw new Error("Invalid nmsRadius ".concat(r,"."))}function iv(n){var t=n.segmentationThreshold,e=n.maxDetections,s=n.scoreThreshold,r=n.nmsRadius,o=n.minKeypointScore,a=n.refineSteps;if(t<0||t>1)throw new Error("segmentationThreshold ".concat(t,". ")+"Should be in range [0.0, 1.0]");if(e<=0)throw new Error("Invalid maxDetections ".concat(e,". ")+"Should be > 0");if(s<0||s>1)throw new Error("Invalid scoreThreshold ".concat(s,". ")+"Should be in range [0.0, 1.0]");if(r<=0)throw new Error("Invalid nmsRadius ".concat(r,"."));if(o<0||o>1)throw new Error("Invalid minKeypointScore ".concat(o,".")+"Should be in range [0.0, 1.0]");if(a<=0||a>20)throw new Error("Invalid refineSteps ".concat(a,".")+"Should be in range [1, 20]")}var lv=function(){function n(t){this.baseModel=t}return n.prototype.predictForPersonSegmentation=function(t){var e=this.baseModel.predict(t);return{segmentLogits:e.segmentation,heatmapScores:e.heatmapScores,offsets:e.offsets,displacementFwd:e.displacementFwd,displacementBwd:e.displacementBwd}},n.prototype.predictForPersonSegmentationAndPart=function(t){var e=this.baseModel.predict(t);return{segmentLogits:e.segmentation,partHeatmapLogits:e.partHeatmaps,heatmapScores:e.heatmapScores,offsets:e.offsets,displacementFwd:e.displacementFwd,displacementBwd:e.displacementBwd}},n.prototype.predictForMultiPersonInstanceSegmentationAndPart=function(t){var e=this.baseModel.predict(t);return{segmentLogits:e.segmentation,longOffsets:e.longOffsets,heatmapScores:e.heatmapScores,offsets:e.offsets,displacementFwd:e.displacementFwd,displacementBwd:e.displacementBwd,partHeatmaps:e.partHeatmaps}},n.prototype.segmentPersonActivation=function(t,e,s){var r=this;void 0===s&&(s=.5);var o=Tr(t),a=o[0],i=o[1],l=Id(e,this.baseModel.outputStride,[a,i]),u=Cd(t,l),c=u.resized,h=u.padding,d=P(function(){var b=r.predictForPersonSegmentation(c),x=b.heatmapScores,S=b.offsets,I=b.displacementFwd,k=b.displacementBwd,T=c.shape,L=xi(b.segmentLogits,[a,i],[T[0],T[1]],[[h.top,h.bottom],[h.left,h.right]],wi);return{segmentation:xd(Kn(L),s),heatmapScores:x,offsets:S,displacementFwd:I,displacementBwd:k}}),p=d.segmentation,f=d.heatmapScores,g=d.offsets,m=d.displacementFwd,y=d.displacementBwd;return c.dispose(),{segmentation:p,heatmapScores:f,offsets:g,displacementFwd:m,displacementBwd:y,padding:h,internalResolutionHeightAndWidth:l}},n.prototype.segmentPerson=function(t,e){return void 0===e&&(e=_d),Ys(this,void 0,void 0,function(){var s,r,o,a,i,l,u,c,h,d,p,f,g,x;return Qs(this,function(S){switch(S.label){case 0:return av(e=Zs(Zs({},_d),e)),s=this.segmentPersonActivation(t,e.internalResolution,e.segmentationThreshold),o=s.heatmapScores,a=s.offsets,i=s.displacementFwd,l=s.displacementBwd,u=s.padding,c=s.internalResolutionHeightAndWidth,d=(h=(r=s.segmentation).shape)[0],p=h[1],[4,r.data()];case 1:return f=S.sent(),r.dispose(),[4,Nd([o,a,i,l])];case 2:return g=S.sent(),x=kd(x=Sd(g[0],g[1],g[2],g[3],this.baseModel.outputStride,e.maxDetections,e.scoreThreshold,e.nmsRadius),[d,p],c,u,Td),o.dispose(),a.dispose(),i.dispose(),l.dispose(),[2,{height:d,width:p,data:f,allPoses:x}]}})})},n.prototype.segmentMultiPerson=function(t,e){return void 0===e&&(e=Ed),Ys(this,void 0,void 0,function(){var s,r,o,a,i,l,u,c,h,d,p,f,g,m,y,I,k,T=this;return Qs(this,function(_){switch(_.label){case 0:return iv(e=Zs(Zs({},Ed),e)),s=Tr(t),a=Id(e.internalResolution,this.baseModel.outputStride,[r=s[0],o=s[1]]),i=Cd(t,a),l=i.resized,u=i.padding,c=P(function(){var H,E=T.predictForMultiPersonInstanceSegmentationAndPart(l),B=E.longOffsets,W=E.heatmapScores,U=E.offsets,G=E.displacementFwd,K=E.displacementBwd,X=xi(E.segmentLogits,[r,o],a,[[u.top,u.bottom],[u.left,u.right]],wi);return H=B,{segmentation:xd(Kn(X),e.segmentationThreshold),longOffsets:H,heatmapScoresRaw:W,offsetsRaw:U,displacementFwdRaw:G,displacementBwdRaw:K}}),h=c.segmentation,d=c.longOffsets,[4,Nd([p=c.heatmapScoresRaw,f=c.offsetsRaw,g=c.displacementFwdRaw,m=c.displacementBwdRaw])];case 1:return y=_.sent(),I=kd(I=Sd(y[0],y[1],y[2],y[3],this.baseModel.outputStride,e.maxDetections,e.scoreThreshold,e.nmsRadius),[r,o],a,u,Td),[4,QR(h,d,I,r,o,this.baseModel.outputStride,a,u,e.scoreThreshold,e.refineSteps,e.minKeypointScore,e.maxDetections)];case 2:return k=_.sent(),l.dispose(),h.dispose(),d.dispose(),p.dispose(),f.dispose(),g.dispose(),m.dispose(),[2,k]}})})},n.prototype.segmentPersonPartsActivation=function(t,e,s){var r=this;void 0===s&&(s=.5);var o=Tr(t),a=o[0],i=o[1],l=Id(e,this.baseModel.outputStride,[a,i]),u=Cd(t,l),c=u.resized,h=u.padding,d=P(function(){var b=r.predictForPersonSegmentationAndPart(c),x=b.partHeatmapLogits,S=b.heatmapScores,I=b.offsets,k=b.displacementFwd,T=b.displacementBwd,_=c.shape,E=_[0],L=_[1],B=xi(b.segmentLogits,[a,i],[E,L],[[h.top,h.bottom],[h.left,h.right]],wi),W=xi(x,[a,i],[E,L],[[h.top,h.bottom],[h.left,h.right]],wi);return{partSegmentation:zR(xd(Kn(B),s),W),heatmapScores:S,offsets:I,displacementFwd:k,displacementBwd:T}}),p=d.partSegmentation,f=d.heatmapScores,g=d.offsets,m=d.displacementFwd,y=d.displacementBwd;return c.dispose(),{partSegmentation:p,heatmapScores:f,offsets:g,displacementFwd:m,displacementBwd:y,padding:h,internalResolutionHeightAndWidth:l}},n.prototype.segmentPersonParts=function(t,e){return void 0===e&&(e=_d),Ys(this,void 0,void 0,function(){var s,r,o,a,i,l,u,c,h,d,p,f,g,x;return Qs(this,function(S){switch(S.label){case 0:return av(e=Zs(Zs({},_d),e)),s=this.segmentPersonPartsActivation(t,e.internalResolution,e.segmentationThreshold),o=s.heatmapScores,a=s.offsets,i=s.displacementFwd,l=s.displacementBwd,u=s.padding,c=s.internalResolutionHeightAndWidth,d=(h=(r=s.partSegmentation).shape)[0],p=h[1],[4,r.data()];case 1:return f=S.sent(),r.dispose(),[4,Nd([o,a,i,l])];case 2:return g=S.sent(),x=kd(x=Sd(g[0],g[1],g[2],g[3],this.baseModel.outputStride,e.maxDetections,e.scoreThreshold,e.nmsRadius),[d,p],c,u,Td),o.dispose(),a.dispose(),i.dispose(),l.dispose(),[2,{height:d,width:p,data:f,allPoses:x}]}})})},n.prototype.segmentMultiPersonParts=function(t,e){return void 0===e&&(e=Ed),Ys(this,void 0,void 0,function(){var s,r,o,a,i,l,u,c,h,d,p,f,g,m,y,b,k,T,_=this;return Qs(this,function(E){switch(E.label){case 0:return iv(e=Zs(Zs({},Ed),e)),s=Tr(t),a=Id(e.internalResolution,this.baseModel.outputStride,[r=s[0],o=s[1]]),i=Cd(t,a),l=i.resized,u=i.padding,c=P(function(){var L=_.predictForMultiPersonInstanceSegmentationAndPart(l),W=L.longOffsets,U=L.heatmapScores,G=L.offsets,K=L.displacementFwd,X=L.displacementBwd,H=L.partHeatmaps,Z=xi(L.segmentLogits,[r,o],a,[[u.top,u.bottom],[u.left,u.right]],wi),se=xi(H,[r,o],a,[[u.top,u.bottom],[u.left,u.right]],wi),oe=W,ce=xd(Kn(Z),e.segmentationThreshold),ie=function BR(n){var t=n.shape,e=t[0],s=t[1],r=t[2];return P(function(){var o=Lw(n),a=qt(vr(0,r,1,"int32"),1),i=ue(ze(o,a),"int32");return F(i,[e,s])})}(se);return{segmentation:ce,longOffsets:oe,heatmapScoresRaw:U,offsetsRaw:G,displacementFwdRaw:K,displacementBwdRaw:X,partSegmentation:ie}}),h=c.segmentation,d=c.longOffsets,y=c.partSegmentation,[4,Nd([p=c.heatmapScoresRaw,f=c.offsetsRaw,g=c.displacementFwdRaw,m=c.displacementBwdRaw])];case 1:return b=E.sent(),k=kd(k=Sd(b[0],b[1],b[2],b[3],this.baseModel.outputStride,e.maxDetections,e.scoreThreshold,e.nmsRadius),[r,o],a,u,Td),[4,JR(h,d,y,k,r,o,this.baseModel.outputStride,a,u,e.scoreThreshold,e.refineSteps,e.minKeypointScore,e.maxDetections)];case 2:return T=E.sent(),l.dispose(),h.dispose(),d.dispose(),p.dispose(),f.dispose(),g.dispose(),m.dispose(),y.dispose(),[2,T]}})})},n.prototype.dispose=function(){this.baseModel.dispose()},n}();function ID(n){return Ys(this,void 0,void 0,function(){var t,e,s,r,o,a;return Qs(this,function(i){switch(i.label){case 0:if(t=n.outputStride,e=n.quantBytes,s=n.multiplier,null==Wt)throw new Error("Cannot find TensorFlow.js. If you are using a <script> tag, please also include @tensorflow/tfjs on the page before using this\n        model.");return r=function cD(n,t,e){var s={1:"100",.75:"075",.5:"050"},r="model-stride".concat(n,".json");return 4===e?Yw+"float/".concat(s[t],"/")+r:Yw+"quant".concat(e,"/").concat(s[t],"/")+r}(t,s,e),[4,Fw(n.modelUrl||r)];case 1:return o=i.sent(),a=new VR(o,t),[2,new lv(a)]}})})}function CD(n){return Ys(this,void 0,void 0,function(){var t,e,s,r,o;return Qs(this,function(a){switch(a.label){case 0:if(t=n.outputStride,e=n.quantBytes,null==Wt)throw new Error("Cannot find TensorFlow.js. If you are using a <script> tag, please also include @tensorflow/tfjs on the page before using this\n        model.");return s=function uD(n,t){var e="model-stride".concat(n,".json");return 4===t?Zw+"float/"+e:Zw+"quant".concat(t,"/")+e}(t,e),[4,Fw(n.modelUrl||s)];case 1:return r=a.sent(),o=new lD(r,t),[2,new lv(o)]}})})}var qg={};function Kg(n){return qg[n]||(qg[n]=function _D(){if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(0,0);throw new Error("Cannot create a canvas in this context")}()),qg[n]}function vi(n,t,e){var s=Kg(e);return 0===t?function $D(n,t){var e=n.width,s=n.height;t.width=e,t.height=s,t.getContext("2d").drawImage(n,0,0,e,s)}(n,s):function ED(n,t,e){var s=n.height,r=n.width,o=e.getContext("2d");e.width=r,e.height=s,o.clearRect(0,0,r,s),o.save(),function TD(){return/^((?!chrome|android).)*safari/i.test(navigator.userAgent)}()?function kD(n,t,e){for(var s=n.getContext("2d"),r=0,a=1/(2*Math.PI*5*5),i=e<3?1:2,l=-e;l<=e;l+=i)for(var u=-e;u<=e;u+=i)r+=a*Math.exp(-(u*u+l*l)/50);for(l=-e;l<=e;l+=i)for(u=-e;u<=e;u+=i)s.globalAlpha=a*Math.exp(-(u*u+l*l)/50)/r*e,s.drawImage(t,u,l);s.globalAlpha=1}(e,n,t):(o.filter="blur(".concat(t,"px)"),o.drawImage(n,0,0,r,s)),o.restore()}(n,t,s),s}var RD=[[110,64,170],[143,61,178],[178,60,178],[210,62,167],[238,67,149],[255,78,125],[255,94,99],[255,115,75],[255,140,56],[239,167,47],[217,194,49],[194,219,64],[175,240,91],[135,245,87],[96,247,96],[64,243,115],[40,234,141],[28,219,169],[26,199,194],[33,176,213],[47,150,224],[65,125,224],[84,101,214],[99,81,195]],As_blurredMask="blurred-mask",As_mask="mask";const hv={kernelName:Gi,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(n,Po(ue(e,"float32"),-1))}}},PD={kernelName:sa,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>{const s=dt(ue(e,"float32")),r=dn(ye(Ce(1),s));return bt(ke(n,r))}}}},MD={kernelName:ra,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>{const s=dn(ye(dt(ue(e,"float32")),1));return ke(n,s)}}}},zD={kernelName:wo,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Le(e.shape,s.shape);return{a:()=>{let i=n;const l=jt(e.shape,r);return l.length>0&&(i=we(i,l)),F(i,e.shape)},b:()=>{let i=n;const l=jt(s.shape,r);return l.length>0&&(i=we(i,l)),F(i,s.shape)}}}},BD={kernelName:Hi,saveAllInputs:!0,gradFunc:(n,t)=>{const e={};return t.forEach((s,r)=>{e[r]=()=>n.clone()}),e}},VD={kernelName:ji,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Qe(e)}}},WD={kernelName:qi,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Qe(e)}}},UD={kernelName:oa,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>ke(n,dn(ye(Ce(1),dt(ue(e,"float32")))))}}},GD={kernelName:aa,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>{const s=dn(ee(Ce(1),dt(ue(e,"float32"))));return ke(n,s)}}}},HD={kernelName:ua,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Le(e.shape,s.shape);return{a:()=>{const i=ee(dt(e),dt(s));let l=D(n,ke(s,i));const u=jt(e.shape,r);return u.length>0&&(l=we(l,u)),F(l,e.shape)},b:()=>{const i=ee(dt(e),dt(s));let l=bt(D(n,ke(e,i)));const u=jt(s.shape,r);return u.length>0&&(l=we(l,u)),F(l,s.shape)}}}},jD={kernelName:ia,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>ke(n,ee(dt(ue(e,"float32")),1))}}},qD={kernelName:la,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>ke(n,ye(Ce(1),dt(ue(e,"float32"))))}}},XD=R({avgPool3dGrad_:function KD(n,t,e,s,r,o){const a=N(n,"dy","avgPool3dGrad"),i=N(t,"input","avgPool3dGrad");let l=a,u=i,c=!1;4===i.rank&&(c=!0,l=F(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]]),u=F(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),C(5===l.rank,()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`),C(5===u.rank,()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${u.rank}.`),Tn("avgPool3dGrad",r,o);const p=$.runKernel(dc,{dy:l,input:u},{filterSize:e,strides:s,pad:r,dimRoundingMode:o});return c?F(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),ZD={kernelName:Xi,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{filterSize:r,strides:o,pad:a,dimRoundingMode:i}=e;return{x:()=>XD(n,s,r,o,a,i)}}},QD=R({avgPoolGrad_:function YD(n,t,e,s,r){const o=N(n,"dy","avgPoolGrad"),a=N(t,"input","avgPoolGrad");C(a.rank===o.rank,()=>`Rank of input (${a.rank}) does not match rank of dy (${o.rank})`);let i=a,l=o,u=!1;3===a.rank&&(u=!0,i=F(a,[1,a.shape[0],a.shape[1],a.shape[2]]),l=F(o,[1,o.shape[0],o.shape[1],o.shape[2]])),C(4===l.rank,()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`),C(4===i.rank,()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${i.rank}.`);const d=$.runKernel(hc,{dy:l,input:i},{filterSize:e,strides:s,pad:r});return u?F(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),JD={kernelName:Ki,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{filterSize:r,strides:o,pad:a}=e;return{x:()=>QD(n,s,r,o,a)}}},eF={kernelName:Zi,inputsToSave:["a","b"],gradFunc:(n,t,e)=>{const[s,r]=t,{transposeA:o,transposeB:a}=e;return o||a?!o&&a?{a:()=>ze(n,r,!1,!1),b:()=>ze(n,s,!0,!1)}:o&&!a?{a:()=>ze(r,n,!1,!0),b:()=>ze(s,n,!1,!1)}:{a:()=>ze(r,n,!0,!0),b:()=>ze(n,s,!0,!0)}:{a:()=>ze(n,r,!1,!0),b:()=>ze(s,n,!0,!1)}}},tF={kernelName:Yi,gradFunc:(n,t,e)=>{const{blockShape:s,crops:r}=e;return{x:()=>wu(n,s,r)}}},nF={kernelName:Rb,gradFunc:(n,t,e)=>{const r=e.inputShape,o=e.shape,a=Array.from(o);for(let l=r.length-1;l>=0;l--)if(r[l]===o[l])a[l]=1;else if(1!==r[l])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${o}].`);const i=[];for(let l=0;l<a.length;l++)a[l]>1&&i.push(l);return{x:()=>we(n,i,!0)}}},sF={kernelName:ca,gradFunc:n=>({x:()=>n.clone()})},rF={kernelName:ha,gradFunc:n=>({x:()=>Qe(n)})},oF={kernelName:da,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{clipValueMin:r,clipValueMax:o}=e;return{x:()=>fn(Ts(xr(s,r),jr(s,o)),n,Qe(n))}}},aF={kernelName:Ji,inputsToSave:["x"],gradFunc:hv.gradFunc},iF={kernelName:el,saveAllInputs:!0,gradFunc:(n,t,e)=>{const s=t.map(l=>l.shape),{axis:r}=e,o=Ue(r,t[0].shape)[0],a=s.map(l=>l[o]);return Pn(n,a,o).map(l=>()=>l)}},lF={kernelName:tl,inputsToSave:["x","filter"],gradFunc:(n,t,e)=>{const[s,r]=t,{dilations:o,strides:a,pad:i,dataFormat:l}=e;return C(Gr(o),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${o}'`),{x:()=>pm(s.shape,n,r,a,i,l),filter:()=>Qm(s,n,r.shape,a,i,l)}}},uF={kernelName:nl,inputsToSave:["dy","filter"],gradFunc:(n,t,e)=>{const[s,r]=t,{strides:o,pad:a,dataFormat:i,dimRoundingMode:l}=e;return{dy:()=>br(n,r,o,a,i,1,l),filter:()=>Qm(n,s,r.shape,o,a,i,l)}}},hF=R({conv3DBackpropFilter_:function cF(n,t,e,s,r){let o=n;4===n.rank&&(o=F(n,[1,n.shape[0],n.shape[1],n.shape[2],n.shape[3]]));let a=t;return 4===a.rank&&(a=F(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),C(5===o.rank,()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${o.shape}.`),C(5===a.rank,()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${a.shape}.`),C(5===e.length,()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${e}.`),C(o.shape[4]===e[3],()=>`Error in conv3dDerFilter: depth of input ${o.shape[4]}) must match input depth in filter (${e[3]}.`),C(a.shape[4]===e[4],()=>`Error in conv3dDerFilter: depth of dy (${a.shape[4]}) must match output depth for filter (${e[4]}).`),$.runKernel(yc,{x:o,dy:a},{strides:s,pad:r,filterShape:e})}}),dF={kernelName:sl,inputsToSave:["x","filter"],gradFunc:(n,t,e)=>{const{dilations:s,strides:r,pad:o}=e;C(Gr(s),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);const[a,i]=t;return{x:()=>Yx(a.shape,n,i,r,o),filter:()=>hF(a,n,i.shape,r,o)}}},pF={kernelName:pa,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(bt(Zh(ue(e,"float32"))),n)}}},fF={kernelName:fa,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(Yh(ue(e,"float32")),n)}}},mF={kernelName:rl,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{axis:r,exclusive:o,reverse:a}=e;return{x:()=>{const i=Et([r],s.rank);let l=Lh(n,r,o,!a);return null!=i&&(l=Ze(l,i)),l}}}},gF={kernelName:ol,inputsToSave:["x","filter"],gradFunc:(n,t,e)=>{const{dilations:s,strides:r,pad:o,dimRoundingMode:a}=e,i=null==s?[1,1]:s;C(Gr(i),()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${i}'`);const[l,u]=t;return C(4===l.rank,()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`),C(4===u.rank,()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`),C(l.shape[3]===u.shape[2],()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`),C(pn(r,i),()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${r} and dilations '${i}'.`),Tn("depthwiseConv2d",o,a),{x:()=>P0(l.shape,n,u,r,o,i,a),filter:()=>L0(l,n,u.shape,r,o,i,a)}}},yF={kernelName:al,inputsToSave:["x","filter"],gradFunc:(n,t,e)=>{const[s,r]=t,o={x:s,filter:r,dy:n},a={x:s,filter:r,dy:n};return{x:()=>$.runKernel(kc,o,e),filter:()=>$.runKernel(Tc,a,e)}}},bF={kernelName:ga,outputsToSave:[!0],gradFunc:(n,t)=>{const[e]=t,s={dy:n,y:e};return{x:()=>$.runKernel($c,s)}}},xF={kernelName:ya,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t,s=D(On(bt(dt(e))),2/Math.sqrt(Math.PI));return{x:()=>D(n,s)}}},wF={kernelName:ba,outputsToSave:[!0],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(n,e)}}},vF={kernelName:ll,inputsToSave:["input"],gradFunc:(n,t)=>{const[e]=t;return{input:()=>F(n,e.shape)}}},SF={kernelName:xa,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(n,On(e))}}},IF={kernelName:wa,gradFunc:n=>({x:()=>Qe(n)})},CF={kernelName:va,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Le(e.shape,s.shape);return{a:()=>{const i=ke(n,ue(s,"float32")),l=jt(e.shape,r);return l.length>0?F(we(i,l),e.shape):i},b:()=>{let i=D(n,ue(e,"float32"));const l=jt(s.shape,r);l.length>0&&(i=F(we(i,l),s.shape));const u=dt(s);return bt(ke(i,ue(u,"float32")))}}}},NF={kernelName:ul,inputsToSave:["x","mean","variance","scale"],gradFunc:(n,t,e)=>{const{varianceEpsilon:s}=e,[r,o,a,i]=t,l=null==i?Ce(1):i,u=jt(o.shape,r.shape),c=[];if(1===o.rank){for(let x=0;x<r.shape.length-1;++x)c.push(r.shape[x]);c.push(1)}const h=ye(r,o),d=D(n,l),p=qh(ee(a,Ce(s))),f=D(D(D(p,p),p),Ce(-.5));return{x:()=>F(D(D(n,1===o.rank?is(F(p,[1,1,1,o.shape[0]]),c):p),l),r.shape),mean:()=>{let x=D(D(p,Ce(-1)),d);return 1===o.rank&&(x=we(x,u)),F(x,o.shape)},variance:()=>{let x=D(D(f,h),d);return 1===o.rank&&(x=we(x,u)),F(x,o.shape)},scale:()=>{const x=D(h,p);let S=D(n,x);return 1===o.rank&&(S=we(S,u)),F(S,o.shape)},offset:()=>{let x=n;return 1===o.rank&&(x=we(x,u)),F(x,o.shape)}}}},kF={kernelName:cl,inputsToSave:["x","indices"],gradFunc:(n,t,e)=>{const[s,r]=t,{axis:o,batchDims:a}=e,i=Ue(o,s.shape)[0],l=(u,c,h)=>()=>{const d=u.shape,p=c.size,f=d.slice(0,i),g=f.length,m=d.slice(o,d.length).slice(1),y=m.length,b=dv(0,g),w=dv(g+1,g+1+y),x=pv([f,[p],m]),S=F(h,x),I=F(c,[p]),k=pv([[g],b,w]),T=Ze(S,k);let _=nd(T,I,u.shape[i]);const E=Hr(k);return _=Ze(_,E),_};if(1===a){const c=s.split(s.shape[0],0);return{x:()=>Mn(c.map((p,f)=>l(p,r.slice(f,1),n.slice(f,1))())).reshape(s.shape),indices:()=>r}}return{x:l(s,r,n),indices:()=>r}}};function dv(n,t){const e=[];for(let s=n;s<t;++s)e.push(s);return e}function pv(n){const t=[];for(let e=0;e<n.length;++e)for(let s=0;s<n[e].length;++s)t.push(n[e][s]);return t}const TF={kernelName:Sa,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t;return{a:()=>Qe(e),b:()=>Qe(s)}}},_F={kernelName:Ia,gradFunc:n=>({x:()=>ue(n,"float32")})},EF={kernelName:Ca,gradFunc:n=>({x:()=>Qe(n)})},$F={kernelName:Na,gradFunc:n=>({x:()=>Qe(n)})},AF={kernelName:ka,gradFunc:n=>({x:()=>Qe(n)})},RF={kernelName:dl,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{alpha:r}=e,o=_n(s,0);return{x:()=>fn(o,n,D(n,r))}}},DF={kernelName:_a,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>ke(n,ee(e,1))}}},FF={kernelName:Ta,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>ke(n,ue(e,"float32"))}}},OF={kernelName:Db,inputsToSave:[],outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s]=t,{axis:r}=e;return{logits:()=>{const a=On(s);return ye(n,D(we(n,r,!0),a))}}}},PF=R({localResponseNormalizationBackprop_:function LF(n,t,e,s=5,r=1,o=1,a=.5){return $.runKernel(Mc,{x:n,y:t,dy:e},{depthRadius:s,bias:r,alpha:o,beta:a})}}),MF={kernelName:bl,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s,r]=t,{depthRadius:o,bias:a,alpha:i,beta:l}=e;return{x:()=>PF(s,r,n,o,a,i,l)}}};function fv(n,t,e,s){return t.rank<e.rank&&(t=F(t,Mt(t.shape,s))),n.rank<e.rank&&(n=F(n,Mt(n.shape,s))),{x:()=>D(n,ue(Hn(e,t),n.dtype))}}const mv={kernelName:xl,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const s=e,{reductionIndices:r}=s,o=t[0],l=fv(n,t[1],o,Ue(r,o.shape));return{x:()=>l.x()}}},zF={kernelName:Ea,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t;return{a:()=>D(n,ue(xr(e,s),"float32")),b:()=>D(n,ue(pi(e,s),"float32"))}}},VF=R({maxPool3dGrad_:function BF(n,t,e,s,r,o,a){const i=N(n,"dy","maxPool3dGrad"),l=N(t,"input","maxPool3dGrad"),u=N(e,"output","maxPool3dGrad");let c=i,h=l,d=u,p=!1;4===l.rank&&(p=!0,c=F(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),h=F(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),d=F(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),C(5===c.rank,()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`),C(5===h.rank,()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${h.rank}.`),C(5===d.rank,()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${d.rank}.`),Tn("maxPool3dGrad",o,a);const m=$.runKernel(Bc,{dy:c,input:h,output:d},{filterSize:s,strides:r,pad:o,dimRoundingMode:a});return p?F(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}}),WF={kernelName:vl,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s,r]=t,{filterSize:o,strides:a,pad:i,dimRoundingMode:l}=e;return{x:()=>VF(n,s,r,o,a,i,l)}}},GF=R({maxPoolGrad_:function UF(n,t,e,s,r,o,a){const i=N(n,"dy","maxPoolGrad"),l=N(t,"input","maxPoolGrad"),u=N(e,"output","maxPoolGrad");return C(l.rank===i.rank,()=>`Rank of input (${l.rank}) does not match rank of dy (${i.rank})`),C(4===i.rank,()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${i.rank}.`),C(4===l.rank,()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`),Tn("maxPoolGrad",o,a),$.runKernel(zc,{dy:i,input:l,output:u},{filterSize:s,strides:r,pad:o,dimRoundingMode:a})}}),gv={kernelName:$l,inputsToSave:["x"],gradFunc:(n,t,e)=>{const s=t[0],{paddings:r}=e,o=r.map(a=>a[0]);return{x:()=>Je(n,o,s.shape)}}};const yv={kernelName:Bl,gradFunc:(n,t,e)=>{const{blockShape:s,paddings:r}=e;return{x:()=>hu(n,s,r)}}},bv={kernelName:Vl,gradFunc:(n,t,e)=>{const{axis:s}=e;return{x:()=>Pt(n,s)}}},BO=[hv,PD,MD,zD,BD,VD,WD,UD,GD,HD,jD,qD,ZD,JD,eF,tF,nF,sF,rF,oF,aF,iF,uF,lF,dF,pF,fF,mF,gF,yF,{kernelName:ma,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Le(e.shape,s.shape);return{a:()=>{const i=ke(n,ue(s,"float32")),l=jt(e.shape,r);return l.length>0?F(we(i,l),e.shape):i},b:()=>{let i=D(n,ue(e,"float32"));const l=jt(s.shape,r);l.length>0&&(i=F(we(i,l),s.shape));const u=dt(s);return bt(ke(i,ue(u,"float32")))}}}},bF,xF,wF,vF,SF,CF,IF,NF,kF,TF,_F,EF,$F,AF,RF,DF,FF,OF,MF,mv,mv,zF,WF,{kernelName:wl,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s,r]=t,{filterSize:o,strides:a,pad:i}=e;return{x:()=>GF(n,s,r,o,a,i)}}},{kernelName:Sl,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{axis:r}=e,o=Ue(r,s.shape),l=j(ln(s.shape,o)[1]);return{x:()=>{const c=s.shape.slice();o.forEach(p=>{c[p]=1});const h=F(n,c);return ke(D(h,Ln(s.shape,"float32")),l)}}}},{kernelName:Il,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const s=e,{axis:r}=s,[o,a]=t,l=fv(n,a,o,Ue(r,o.shape));return{x:()=>l.x()}}},{kernelName:$a,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t;return{a:()=>D(n,ue(jr(e,s),"float32")),b:()=>D(n,ue(_n(e,s),"float32"))}}},{kernelName:Cl,inputsToSave:["x"],gradFunc:(n,t,e)=>{const s=t[0],{paddings:r}=e,o=r.map(a=>a[0]);return{x:()=>Je(n,o,s.shape)}}},{kernelName:Aa,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Le(e.shape,s.shape);return{a:()=>{const i=jt(e.shape,r);return i.length>0?F(we(n,i),e.shape):n},b:()=>{const i=D(n,bt(hi(ke(e,s)))),l=jt(s.shape,r);return l.length>0?F(we(i,l),s.shape):i}}}},{kernelName:Ra,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Le(e.shape,s.shape);return{a:()=>{const i=D(n,ue(s,"float32")),l=jt(e.shape,r);return l.length>0?F(we(i,l),e.shape):i},b:()=>{const i=D(n,ue(e,"float32")),l=jt(s.shape,r);return l.length>0?F(we(i,l),s.shape):i}}}},{kernelName:Nl,gradFunc:n=>({x:()=>bt(n)})},{kernelName:_l,inputsToSave:["indices"],gradFunc:(n,t)=>{const e=t[0];return{indices:()=>Kt(e.shape,"float32")}}},{kernelName:Tl,gradFunc:n=>({x:()=>Qe(n)})},{kernelName:El,saveAllInputs:!0,gradFunc:(n,t,e)=>{const{axis:s}=e;return us(n,s).map(o=>()=>o)}},gv,gv,{kernelName:Da,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(n,t)=>{const[e,s,r]=t,o=e,a=s,i=Le(o.shape,a.shape);return{a:()=>{const c=ue(a,"float32");let h=D(n,D(c,mr(o,ye(c,Ce(1)))));const d=jt(o.shape,i);return d.length>0&&(h=we(h,d)),F(h,o.shape)},b:()=>{const c=_n(o,0),h=fn(c,jn(o),Qe(o));let d=D(n,D(r,h));const p=jt(a.shape,i);return p.length>0&&(d=we(d,p)),F(d,a.shape)}}}},{kernelName:Al,inputsToSave:["x","alpha"],gradFunc:(n,t)=>{const[e,s]=t,r=_n(e,0);return{x:()=>fn(r,n,D(n,s)),alpha:()=>{let o=fn(r,Qe(n),D(n,e));const a=jt(s.shape,n.shape);return a.length>0&&(o=we(o,a)),F(o,s.shape)}}}},{kernelName:Rl,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{axis:r}=e;let o=[];return o=null==r?s.shape.map((a,i)=>i):"number"==typeof r?[r]:r,{x:()=>function oO(n,t,e){const s=n.shape.length,r=s-e.length,o=Et(e,s);let a=n;null!=o&&(a=Ze(n,o));const i=a.shape.slice(),u=i.splice(s-e.length,e.length).reduce((d,p)=>d*p,1);i.push(u);let h=function rO(n,t,e){const s=n.shape.slice();s[e]=1;const r=F(t,s),o=pu(n,e,!0,!1),a=pu(n,e,!0,!0),i=D(o,a);return D(r,i)}(a.reshape(i),t,r);if(h=h.reshape(a.shape),null!=o){const d=Hr(o);h=Ze(h,d)}return h}(s,n,o)}}},{kernelName:Fa,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>ke(n,bt(dt(e)))}}},{kernelName:La,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t,s=D(jr(e,6),Po(e));return{x:()=>D(n,ue(s,"float32"))}}},{kernelName:Oa,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(n,ue(Po(e),"float32"))}}},{kernelName:Dl,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>F(n,e.shape)}}},{kernelName:Ol,inputsToSave:["images"],gradFunc:(n,t,e)=>{const[s]=t,r={dy:n,images:s};return{images:()=>$.runKernel(Qc,r,e)}}},{kernelName:Fl,inputsToSave:["images"],gradFunc:(n,t,e)=>{const[s]=t,r={dy:n,images:s};return{images:()=>$.runKernel(Yc,r,e)}}},{kernelName:Ll,gradFunc:(n,t,e)=>{const{dims:s}=e,r=Ue(s,n.shape);return{x:()=>ls(n,r)}}},{kernelName:Pa,gradFunc:n=>({x:()=>Qe(n)})},{kernelName:Ma,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>bt(ke(n,D(mr(e,1.5),2)))}}},{kernelName:Pl,inputsToSave:["condition"],gradFunc:(n,t)=>{const[e]=t;return{condition:()=>ue(Qe(e),"float32"),t:()=>D(n,ue(e,n.dtype)),e:()=>D(n,ue(yu(e),n.dtype))}}},{kernelName:za,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>{const s=_n(e,Ce(0)),r=Ce(pd),o=Ce(fd),a=D(n,o),i=D(D(n,r),On(ue(e,"float32")));return fn(s,a,i)}}}},{kernelName:Ua,outputsToSave:[!0],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(n,D(e,ye(Ce(1),e)))}}},{kernelName:Wa,gradFunc:n=>({x:()=>Qe(n)})},{kernelName:Ba,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(du(ue(e,"float32")),n)}}},{kernelName:Va,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(Oh(ue(e,"float32")),n)}}},{kernelName:Ml,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{begin:r,size:o}=e,a=s.shape,[i,l]=Ah(s,r,o),u=[];for(let c=0;c<n.rank;c++)u.push([i[c],a[c]-i[c]-l[c]]);return{x:()=>wr(n,u)}}},{kernelName:Wl,outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s]=t,{dim:r}=e,a=D(n,s);return{logits:()=>ye(a,D(we(a,[r],!0),s))}}},{kernelName:Ga,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(n,os(e))}}},yv,yv,bv,bv,{kernelName:Ha,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>ke(n,D(dn(ue(e,"float32")),2))}}},{kernelName:ja,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Ce(2);return{a:()=>D(n,D(r,ye(e,s))),b:()=>D(n,D(r,ye(s,e)))}}},{kernelName:ih,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(n,D(ue(e,"float32"),2))}}},{kernelName:Ya,gradFunc:n=>({x:()=>Qe(n)})},{kernelName:qa,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Le(e.shape,s.shape);return{a:()=>{let i=n;const l=jt(e.shape,r);return l.length>0&&(i=we(i,l)),F(i,e.shape)},b:()=>{let i=n;const l=jt(s.shape,r);return l.length>0&&(i=we(i,l)),F(bt(i),s.shape)}}}},{kernelName:zl,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,r=s.shape.slice(),{axis:o}=e;Ue(o,s.shape).forEach(u=>{r[u]=1});const i=F(n,r),l=D(i,Ln(s.shape,"float32"));return{x:()=>l}}},{kernelName:Ka,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>ke(n,dt(du(e)))}}},{kernelName:Xa,outputsToSave:[!0],gradFunc:(n,t)=>{const[e]=t;return{x:()=>D(ye(Ce(1),dt(e)),n)}}},{kernelName:Za,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{reps:r}=e;return{x:()=>{let a=Qe(s);if(1===s.rank)for(let i=0;i<r[0];++i)a=ee(a,Je(n,[i*s.shape[0]],[s.shape[0]]));else if(2===s.rank)for(let i=0;i<r[0];++i)for(let l=0;l<r[1];++l)a=ee(a,Je(n,[i*s.shape[0],l*s.shape[1]],[s.shape[0],s.shape[1]]));else if(3===s.rank)for(let i=0;i<r[0];++i)for(let l=0;l<r[1];++l)for(let u=0;u<r[2];++u)a=ee(a,Je(n,[i*s.shape[0],l*s.shape[1],u*s.shape[2]],[s.shape[0],s.shape[1],s.shape[2]]));else{if(4!==s.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);for(let i=0;i<r[0];++i)for(let l=0;l<r[1];++l)for(let u=0;u<r[2];++u)for(let c=0;c<r[3];++c)a=ee(a,Je(n,[i*s.shape[0],l*s.shape[1],u*s.shape[2],c*s.shape[3]],[s.shape[0],s.shape[1],s.shape[2],s.shape[3]]))}return a}}}},{kernelName:vo,gradFunc:(n,t,e)=>{const s=e,{perm:r}=s,o=Hr(r);return{x:()=>Ze(n,o)}}},{kernelName:Gl,gradFunc:(n,t,e)=>{const s=e,{axis:r}=s;return{value:()=>Mn(n,r)}}},{kernelName:Hl,inputsToSave:["segmentIds"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>function MO(n,t){const e=qs(t,Qe(t)),s=di(n,e);let r=xr(t,Ce(0,"int32"));const o=s.rank-r.rank;for(let i=0;i<o;++i)r=qt(r,i+1);r=Ts(r,Ln(s.shape,"bool"));const a=Qe(s);return fn(r,s,a)}(n,e)}}},{kernelName:jl,gradFunc:n=>({x:()=>Qe(n)})}];for(const n of BO)Fb(n);q().prototype.abs=function(){return this.throwIfDisposed(),Ht(this)},q().prototype.acos=function(){return this.throwIfDisposed(),qf(this)},q().prototype.acosh=function(){return this.throwIfDisposed(),Kf(this)},q().prototype.add=function(n){return this.throwIfDisposed(),ee(this,n)},q().prototype.all=function(n,t){return this.throwIfDisposed(),Rh(this,n,t)},q().prototype.any=function(n,t){return this.throwIfDisposed(),au(this,n,t)},q().prototype.argMax=function(n){return this.throwIfDisposed(),Wr(this,n)},q().prototype.argMin=function(n){return this.throwIfDisposed(),Xf(this,n)},q().prototype.asScalar=function(){return this.throwIfDisposed(),C(1===this.size,()=>"The array must have only 1 element."),F(this,[])},q().prototype.asType=function(n){return this.throwIfDisposed(),ue(this,n)},q().prototype.as1D=function(){return this.throwIfDisposed(),F(this,[this.size])},q().prototype.as2D=function(n,t){return this.throwIfDisposed(),F(this,[n,t])},q().prototype.as3D=function(n,t,e){return this.throwIfDisposed(),F(this,[n,t,e])},q().prototype.as4D=function(n,t,e,s){return this.throwIfDisposed(),F(this,[n,t,e,s])},q().prototype.as5D=function(n,t,e,s,r){return this.throwIfDisposed(),F(this,[n,t,e,s,r])},q().prototype.asin=function(){return this.throwIfDisposed(),Zf(this)},q().prototype.asinh=function(){return this.throwIfDisposed(),Yf(this)},q().prototype.atan=function(){return this.throwIfDisposed(),Qf(this)},q().prototype.atan2=function(n){return this.throwIfDisposed(),Jf(this,n)},q().prototype.atanh=function(){return this.throwIfDisposed(),em(this)},q().prototype.avgPool=function(n,t,e,s){return this.throwIfDisposed(),cu(this,n,t,e,s)},q().prototype.batchToSpaceND=function(n,t){return this.throwIfDisposed(),hu(this,n,t)},q().prototype.batchNorm=function(n,t,e,s,r){return this.throwIfDisposed(),ai(this,n,t,e,s,r)},q().prototype.broadcastTo=function(n){return this.throwIfDisposed(),Do(this,n)},q().prototype.cast=function(n){return this.throwIfDisposed(),ue(this,n)},q().prototype.ceil=function(){return this.throwIfDisposed(),lm(this)},q().prototype.clipByValue=function(n,t){return this.throwIfDisposed(),Fn(this,n,t)},q().prototype.concat=function(n,t){return this.throwIfDisposed(),n instanceof st&&(n=[n]),Pt([this,...n],t)},q().prototype.conv1d=function(n,t,e,s,r,o){return this.throwIfDisposed(),Dh(this,n,t,e,s,r,o)},q().prototype.conv2dTranspose=function(n,t,e,s,r){return this.throwIfDisposed(),Fh(this,n,t,e,s,r)},q().prototype.conv2d=function(n,t,e,s,r,o){return this.throwIfDisposed(),br(this,n,t,e,s,r,o)},q().prototype.cos=function(){return this.throwIfDisposed(),du(this)},q().prototype.cosh=function(){return this.throwIfDisposed(),Oh(this)},q().prototype.cumprod=function(n,t,e){return this.throwIfDisposed(),pu(this,n,t,e)},q().prototype.cumsum=function(n,t,e){return this.throwIfDisposed(),Lh(this,n,t,e)},q().prototype.depthToSpace=function(n,t){return this.throwIfDisposed(),gm(this,n,t)},q().prototype.depthwiseConv2d=function(n,t,e,s,r,o){return this.throwIfDisposed(),ii(this,n,t,e,s,r,o)},q().prototype.dilation2d=function(n,t,e,s,r){return this.throwIfDisposed(),ym(this,n,t,e,s,r)},q().prototype.divNoNan=function(n){return this.throwIfDisposed(),bm(this,n)},q().prototype.div=function(n){return this.throwIfDisposed(),ke(this,n)},q().prototype.dot=function(n){return this.throwIfDisposed(),xm(this,n)},q().prototype.elu=function(){return this.throwIfDisposed(),li(this)},q().prototype.equal=function(n){return this.throwIfDisposed(),Hn(this,n)},q().prototype.erf=function(){return this.throwIfDisposed(),wm(this)},q().prototype.euclideanNorm=function(n,t){return this.throwIfDisposed(),Sm(this,n,t)},q().prototype.exp=function(){return this.throwIfDisposed(),On(this)},q().prototype.expandDims=function(n){return this.throwIfDisposed(),qt(this,n)},q().prototype.expm1=function(){return this.throwIfDisposed(),Im(this)},q().prototype.fft=function(){return this.throwIfDisposed(),Nu(this)},q().prototype.flatten=function(){return this.throwIfDisposed(),F(this,[this.size])},q().prototype.floor=function(){return this.throwIfDisposed(),hi(this)},q().prototype.floorDiv=function(n){return this.throwIfDisposed(),kh(this,n)},q().prototype.gather=function(n,t,e){return this.throwIfDisposed(),di(this,n,t,e)},q().prototype.greaterEqual=function(n){return this.throwIfDisposed(),xr(this,n)},q().prototype.greater=function(n){return this.throwIfDisposed(),_n(this,n)},q().prototype.ifft=function(){return this.throwIfDisposed(),mi(this)},q().prototype.irfft=function(){return this.throwIfDisposed(),Jh(this)},q().prototype.isFinite=function(){return this.throwIfDisposed(),Cm(this)},q().prototype.isInf=function(){return this.throwIfDisposed(),Nm(this)},q().prototype.isNaN=function(){return this.throwIfDisposed(),km(this)},q().prototype.leakyRelu=function(n){return this.throwIfDisposed(),fu(this,n)},q().prototype.lessEqual=function(n){return this.throwIfDisposed(),jr(this,n)},q().prototype.less=function(n){return this.throwIfDisposed(),pi(this,n)},q().prototype.localResponseNormalization=function(n,t,e,s){return this.throwIfDisposed(),Tm(this,n,t,e,s)},q().prototype.logSigmoid=function(){return this.throwIfDisposed(),_m(this)},q().prototype.logSoftmax=function(n){return this.throwIfDisposed(),zh(this,n)},q().prototype.logSumExp=function(n,t){return this.throwIfDisposed(),gu(this,n,t)},q().prototype.log=function(){return this.throwIfDisposed(),jn(this)},q().prototype.log1p=function(){return this.throwIfDisposed(),mu(this)},q().prototype.logicalAnd=function(n){return this.throwIfDisposed(),Ts(this,n)},q().prototype.logicalNot=function(){return this.throwIfDisposed(),yu(this)},q().prototype.logicalOr=function(n){return this.throwIfDisposed(),Bh(this,n)},q().prototype.logicalXor=function(n){return this.throwIfDisposed(),Em(this,n)},q().prototype.matMul=function(n,t,e){return this.throwIfDisposed(),ze(this,n,t,e)},q().prototype.maxPool=function(n,t,e,s){return this.throwIfDisposed(),bu(this,n,t,e,s)},q().prototype.max=function(n,t){return this.throwIfDisposed(),as(this,n,t)},q().prototype.maximum=function(n){return this.throwIfDisposed(),qs(this,n)},q().prototype.mean=function(n,t){return this.throwIfDisposed(),$t(this,n,t)},q().prototype.min=function(n,t){return this.throwIfDisposed(),ui(this,n,t)},q().prototype.minimum=function(n){return this.throwIfDisposed(),qr(this,n)},q().prototype.mirrorPad=function(n,t){return this.throwIfDisposed(),Am(this,n,t)},q().prototype.mod=function(n){return this.throwIfDisposed(),Rm(this,n)},q().prototype.mul=function(n){return this.throwIfDisposed(),D(this,n)},q().prototype.neg=function(){return this.throwIfDisposed(),bt(this)},q().prototype.norm=function(n,t,e){return this.throwIfDisposed(),ci(this,n,t,e)},q().prototype.notEqual=function(n){return this.throwIfDisposed(),Lo(this,n)},q().prototype.oneHot=function(n,t=1,e=0){return this.throwIfDisposed(),Eo(this,n,t,e)},q().prototype.onesLike=function(){return this.throwIfDisposed(),qn(this)},q().prototype.pad=function(n,t){return this.throwIfDisposed(),wr(this,n,t)},q().prototype.pool=function(n,t,e,s,r,o){return this.throwIfDisposed(),Fm(this,n,t,e,s,r,o)},q().prototype.pow=function(n){return this.throwIfDisposed(),mr(this,n)},q().prototype.prelu=function(n){return this.throwIfDisposed(),vu(this,n)},q().prototype.prod=function(n,t){return this.throwIfDisposed(),Om(this,n,t)},q().prototype.reciprocal=function(){return this.throwIfDisposed(),Mm(this)},q().prototype.relu=function(){return this.throwIfDisposed(),_s(this)},q().prototype.relu6=function(){return this.throwIfDisposed(),Hh(this)},q().prototype.reshapeAs=function(n){return this.throwIfDisposed(),F(this,n.shape)},q().prototype.reshape=function(n){return this.throwIfDisposed(),F(this,n)},q().prototype.resizeBilinear=function(n,t,e){return this.throwIfDisposed(),V0(this,n,t,e)},q().prototype.resizeNearestNeighbor=function(n,t,e){return this.throwIfDisposed(),W0(this,n,t,e)},q().prototype.reverse=function(n){return this.throwIfDisposed(),ls(this,n)},q().prototype.rfft=function(){return this.throwIfDisposed(),ku(this)},q().prototype.round=function(){return this.throwIfDisposed(),jh(this)},q().prototype.rsqrt=function(){return this.throwIfDisposed(),qh(this)},q().prototype.selu=function(){return this.throwIfDisposed(),Kh(this)},q().prototype.separableConv2d=function(n,t,e,s,r,o){return this.throwIfDisposed(),Xh(this,n,t,e,s,r,o)},q().prototype.sigmoid=function(){return this.throwIfDisposed(),os(this)},q().prototype.sign=function(){return this.throwIfDisposed(),Bm(this)},q().prototype.sin=function(){return this.throwIfDisposed(),Zh(this)},q().prototype.sinh=function(){return this.throwIfDisposed(),Yh(this)},q().prototype.slice=function(n,t){return this.throwIfDisposed(),Je(this,n,t)},q().prototype.softmax=function(n){return this.throwIfDisposed(),Cu(this,n)},q().prototype.softplus=function(){return this.throwIfDisposed(),Oo(this)},q().prototype.spaceToBatchND=function(n,t){return this.throwIfDisposed(),wu(this,n,t)},q().prototype.split=function(n,t){return this.throwIfDisposed(),Pn(this,n,t)},q().prototype.sqrt=function(){return this.throwIfDisposed(),dn(this)},q().prototype.square=function(){return this.throwIfDisposed(),dt(this)},q().prototype.squaredDifference=function(n){return this.throwIfDisposed(),ed(this,n)},q().prototype.squeeze=function(n){return this.throwIfDisposed(),Kn(this,n)},q().prototype.stack=function(n,t){this.throwIfDisposed();const e=n instanceof st?[this,n]:[this,...n];return Mn(e,t)},q().prototype.step=function(n){return this.throwIfDisposed(),Po(this,n)},q().prototype.stridedSlice=function(n,t,e,s,r,o,a,i){return this.throwIfDisposed(),Vm(this,n,t,e,s,r,o,a,i)},q().prototype.sub=function(n){return this.throwIfDisposed(),ye(this,n)},q().prototype.sum=function(n,t){return this.throwIfDisposed(),we(this,n,t)},q().prototype.tan=function(){return this.throwIfDisposed(),Wm(this)},q().prototype.tanh=function(){return this.throwIfDisposed(),Ro(this)},q().prototype.tile=function(n){return this.throwIfDisposed(),is(this,n)},q().prototype.toBool=function(){return this.throwIfDisposed(),ue(this,"bool")},q().prototype.toFloat=function(){return this.throwIfDisposed(),ue(this,"float32")},q().prototype.toInt=function(){return this.throwIfDisposed(),ue(this,"int32")},q().prototype.topk=function(n,t){return this.throwIfDisposed(),Um(this,n,t)},q().prototype.transpose=function(n){return this.throwIfDisposed(),Ze(this,n)},q().prototype.unique=function(n){return this.throwIfDisposed(),Gm(this,n)},q().prototype.unsortedSegmentSum=function(n,t){return this.throwIfDisposed(),nd(this,n,t)},q().prototype.unstack=function(n){return this.throwIfDisposed(),us(this,n)},q().prototype.where=function(n,t){return this.throwIfDisposed(),fn(n,this,t)},q().prototype.zerosLike=function(){return this.throwIfDisposed(),Qe(this)};class Js extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Js.prototype)}}class bs extends Error{constructor(t){super(t),Object.setPrototypeOf(this,bs.prototype)}}class O extends Error{constructor(t){super(t),Object.setPrototypeOf(this,O.prototype)}}class Pe extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Pe.prototype)}}class Xg extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Xg.prototype)}}class wv{constructor(t){this.maxEntries=t||100,this.cache=new Map}get(t){let e;return this.cache.has(t)&&(e=this.cache.get(t),this.cache.delete(t),this.cache.set(t,e)),e}put(t,e){if(this.cache.has(t))this.cache.delete(t);else if(this.cache.size>=this.maxEntries){const s=this.cache.keys().next().value;this.cache.delete(s)}this.cache.set(t,e)}getMaxEntries(){return this.maxEntries}setMaxEntries(t){if(t<0)throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${t}.`);if(this.maxEntries>t)for(let e=0;e<this.maxEntries-t;e++){const s=this.cache.keys().next().value;this.cache.delete(s)}this.maxEntries=t}}function Vo(n,t){if(Array.isArray(n)){let e=[];for(let s=0;s<t;s++)e=e.concat(n);return e}{const e=new Array(t);return e.fill(n),e}}function cs(n,t){if(!n)throw new Xg(t)}function vv(n,t){let e=0;for(const s of n)s===t&&e++;return e}function Bn(n){return 1===n.length?n[0]:n}function pt(n){return Array.isArray(n)?n:[n]}function _r(n){const e=n.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==e[0]?e:"private"+e}function Wo(n){return n.length<=1||-1===n.indexOf("_")?n:n.replace(/[_]+(\w|$)/g,(t,e)=>e.toUpperCase())}let xs={};function Zg(n){if(null==n)return null;const t={};return t.className=n.getClassName(),t.config=n.getConfig(),t}function Yg(n){if(null!=n&&"object"==typeof n)if(Array.isArray(n))n.forEach(t=>Yg(t));else{const t=Object.keys(n);for(const e of t){const s=n[e];null!=s&&"object"==typeof s&&(Array.isArray(s)||"ndarray"!==s.type||"number"!=typeof s.value?Yg(s):n[e]=s.value)}}}function Ru(n,t={},e={},s="object",r=!1){if("string"==typeof n){let a;if(n in e)a=e[n];else if(n in xs)a=xs[n];else if(a=t[n],null==a)throw new O(`Unknown ${s}: ${n}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const o=n;if(null==o.className||null==o.config)throw new O(`${s}: Improper config format: ${JSON.stringify(o)}.\n'className' and 'config' must set.`);const a=o.className;let i,l;if(a in e?[i,l]=e[a]:a in xs?[i,l]=xs.className:a in t&&([i,l]=t[a]),null==i)throw new O(`Unknown ${s}: ${a}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const u={};for(const p of Object.keys(xs))u[p]=xs[p];for(const p of Object.keys(e))u[p]=e[p];o.config.customObjects=u;const h=Object.assign({},xs);for(const p of Object.keys(e))xs[p]=e[p];Yg(o.config);const d=l(i,o.config,e,r);return xs=Object.assign({},h),d}{const u=Object.assign({},xs);for(const h of Object.keys(e))xs[h]=e[h];const c=new i(o.config);return xs=Object.assign({},u),c}}}function Dd(n,t){return-1*function VO(n,t){return n<t?-1:n>t?1:0}(n,t)}function Xr(n){if(null==n)return n;const t=[];for(const e of n)-1===t.indexOf(e)&&t.push(e);return t}function WO(n){if(null==n)throw new O(`Invalid value in obj: ${JSON.stringify(n)}`);for(const t in n)if(n.hasOwnProperty(t))return!1;return!0}function Uo(n,t,e){if(null!=e&&n.indexOf(e)<0)throw new O(`${e} is not a valid ${t}.  Valid values are ${n} or null/undefined.`)}function Qg(n,t,e=0,s=1/0){return cs(e>=0),cs(s>=e),Array.isArray(n)&&n.length>=e&&n.length<=s&&n.every(r=>typeof r===t)}function un(n,t){Array.isArray(n)?(C(n.length>0,()=>`${t} is unexpectedly an empty array.`),n.forEach((e,s)=>un(e,`element ${s+1} of ${t}`))):C(Number.isInteger(n)&&n>0,()=>`Expected ${t} to be a positive integer, but got ${Sv(n)}.`)}function Sv(n){return null===n?"null":Array.isArray(n)?"["+n.map(t=>Sv(t)).join(",")+"]":"string"==typeof n?`"${n}"`:`${n}`}function Iv(n){return"relu"===n?"relu":"linear"===n?"linear":"elu"===n?"elu":null}let GO=0;function Cv(){return GO++}const Fd={};function Od(n=""){return n in Fd||(Fd[n]=0),Fd[n]+=1,n+Fd[n].toString()}const HO=["channelsFirst","channelsLast"],jO=["nearest","bilinear"],qO=["valid","same","causal"],KO=["max","avg"],XO=["sum","mul","concat","ave"],Si=new Map;function Bt(n){Uo(HO,"DataFormat",n)}function hs(n){Uo(qO,"PaddingMode",n)}function Nv(n){Uo(KO,"PoolMode",n)}const Du=[];function Go(n,t){Du.push(n);try{const e=t();return Du.pop(),e}catch(e){throw Du.pop(),e}}function Tv(n){if(!Ev(n))throw new Error("Not a valid tensor name: '"+n+"'");return function YO(){return 0===Du.length?"":Du.join("/")+"/"}()+n}function _v(n){if(!Ev(n))throw new Error("Not a valid tensor name: '"+n+"'");Si.has(n)||Si.set(n,0);const t=Si.get(n);if(Si.set(n,Si.get(n)+1),t>0){const e=`${n}_${t}`;return Si.set(e,1),e}return n}const QO=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function Ev(n){return!!n.match(QO)}function JO(n){return n===parseInt(n.toString(),10)}function Zr(n,t,e){null==t&&(t=0),null==e&&(e=n.length);let s=1;for(let r=t;r<e;++r)s*=n[r];return s}function Ii(n){if(0===n.length)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let e=0;e<n.length;e++){const s=n[e];s<t&&(t=s)}return t}function Yr(n){if(0===n.length)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let e=0;e<n.length;e++){const s=n[e];s>t&&(t=s)}return t}function Rs(n,t){if(t<n)throw new O(`end (${t}) < begin (${n}) is forbidden.`);const e=[];for(let s=n;s<t;++s)e.push(s);return e}let Ld;function Qt(){return null==Ld&&(Ld=xf().epsilon()),Ld}function er(n,t){return ue(n,t)}function Fu(n,t=-1){const e=n.shape.slice();return t<0&&(t=e.length+t+1),e.splice(t,0,1),F(n,e)}function Ho(n,t,e){return P(()=>{switch(n.rank){case 1:return Su(n,t,e);case 2:return Qh(n,[t,0],[e,n.shape[1]]);case 3:return Iu(n,[t,0,0],[e,n.shape[1],n.shape[2]]);case 4:return fi(n,[t,0,0,0],[e,n.shape[1],n.shape[2],n.shape[3]]);case 5:return Je(n,[t,0,0,0,0],[e,n.shape[1],n.shape[2],n.shape[3],n.shape[4]]);case 6:return Je(n,[t,0,0,0,0,0],[e,n.shape[1],n.shape[2],n.shape[3],n.shape[4],n.shape[5]]);default:throw new O(`sliceAlongFirstAxis() received an unsupported tensor rank: ${n.rank}`)}})}function Jg(n,t,e){return P(()=>{switch(n.rank){case 1:return Su(n,t,e);case 2:return Qh(n,[0,t],[n.shape[0],e]);case 3:return Iu(n,[0,0,t],[n.shape[0],n.shape[1],e]);case 4:return fi(n,[0,0,0,t],[n.shape[0],n.shape[1],n.shape[2],e]);default:throw new O(`sliceAlongLastAxis() received an unsupported tensor rank: ${n.rank}`)}})}function Pd(n,t,e,s){return P(()=>{switch(n.rank){case 1:return Su(n,t,e);case 2:switch(s){case 1:return Ho(n,t,e);case 2:return Jg(n,t,e);default:throw new O(`The axis is not within the rank of the tensor ${s}`)}case 3:switch(s){case 1:return Ho(n,t,e);case 2:return Iu(n,[0,t,0],[n.shape[0],e,n.shape[2]]);case 3:return Jg(n,t,e);default:throw new O(`The axis is not within the rank of the tensor ${s}`)}case 4:switch(s){case 1:return Ho(n,t,e);case 2:return fi(n,[0,t,0,0],[n.shape[0],e,n.shape[2],n.shape[3]]);case 3:return fi(n,[0,0,t,0],[n.shape[0],n.shape[1],e,n.shape[3]]);case 4:return Jg(n,t,e);default:throw new O(`The axis is not within the rank of the tensor ${s}`)}default:throw new O(`sliceAlongLastAxis() received an unsupported tensor rank: ${n.rank}`)}})}function ey(n,t=-1){let e;return t<0&&(e=n[0].rank,t=0!==e?e:0),t===n[0].rank&&(t=-1),Pt(n,t)}function Av(n,t){switch(n.rank){case 1:return um([n,t]);case 2:return cm([n,t],0);case 3:return hm([n,t],0);case 4:return dm([n,t],0);default:throw new O(`concatAlongFirstAxis() received an unsupported tensor rank: ${n.rank}`)}}function ty(n,t){if(Array.isArray(t)||(t=[t]),n.rank!==t.length)throw new O(`The length of input n (${t.length}) does not match the number of dimensions in input x (${n.rank})`);return is(n,t)}function Md(n,t=0,e=1,s,r){return Gh(n,t,e,s,r)}function tr(n,t,e,s){if(n.rank<2||t.rank<2)throw new Pe(`dot requires both inputs to be rank >= 2 but got x shape = ${n.shape} and y shape = ${t.shape}`);if(t.rank>=3&&n.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new Pe(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${n.shape} and  y shape = ${t.shape}`);if(2===n.rank&&2===t.rank)return Jm({a:n,b:t,transposeA:!1,transposeB:!1,bias:s?ny(n.rank,s,"channelsLast"):null,activation:e});{const r=n.shape.slice(),o=r.pop();n=F(n,[-1,o]);const a=t.shape.slice(),i=a.pop(),l=a.pop(),u=[...a,i],c=Array.from({length:t.rank},(f,g)=>0===g?t.rank-2:g<=t.rank-2?g-1:g);t=F(Ze(t,c),[l,-1]);const h=[...r,...u];return F(Jm({a:n,b:t,transposeA:!1,transposeB:!1,bias:s?ny(n.rank,s,"channelsLast"):null,activation:e}),h)}}function Rv(n,t,e){return P(()=>(t=Array.isArray(t)?wn(t,"int32"):ue(t,"int32"),di(n,t,e)))}function Ou(n){return D(n,n)}function ny(n,t,e){const s=t.shape;if(1!==t.rank&&t.rank!==n)throw new O(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${n}`);if(5===n){if("channelsFirst"===e)return F(t,1===s.length?[1,s[0],1,1,1]:[1,s[3],s[0],s[1],s[2]]);if("channelsLast"===e)return F(t,1===s.length?[1,1,1,1,s[0]]:[1].concat(s))}else if(4===n){if("channelsFirst"===e)return F(t,1===s.length?[1,s[0],1,1]:[1,s[2],s[0],s[1]]);if("channelsLast"===e)return F(t,1===s.length?[1,1,1,s[0]]:[1].concat(s))}else if(3===n){if("channelsFirst"===e)return F(t,1===s.length?[1,s[0],1]:[1,s[1],s[0]]);if("channelsLast"===e)return F(t,1===s.length?[1,1,s[0]]:[1].concat(s))}else if(n<3)return t;throw new O(`Unsupported input rank by biasAdd: ${t.rank}`)}function Fs(n,t,e){return P(()=>(null==e&&(e="channelsLast"),Bt(e),ee(n,ny(n.rank,t,e))))}function Dv(n,t,e,s){return P(()=>Xm(n,t,e,s))}function Lu(n,t,e=!1){return e?n():t()}const lL=["fanIn","fanOut","fanAvg"],uL=["normal","uniform","truncatedNormal"];class ws extends ko{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}ne((()=>{class n extends ws{apply(e,s){return Kt(e,s)}}return n.className="Zeros",n})());let Fv=(()=>{class n extends ws{apply(e,s){return Ln(e,s)}}return n.className="Ones",n})();ne(Fv),ne((()=>{class n extends ws{constructor(e){if(super(),"object"!=typeof e)throw new O(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new O(`config must have value set but got ${e}`);this.value=e.value}apply(e,s){return P(()=>D(Ce(this.value),Ln(e,s)))}getConfig(){return{value:this.value}}}return n.className="Constant",n})()),ne((()=>{class n extends ws{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,s){return Kr(e,this.minval,this.maxval,s,this.seed)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}return n.className="RandomUniform",n})()),ne((()=>{class n extends ws{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,s){if("float32"!==(s=s||"float32")&&"int32"!==s)throw new Pe(`randomNormal does not support dType ${s}.`);return Md(e,this.mean,this.stddev,s,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}return n.className="RandomNormal",n})()),ne((()=>{class n extends ws{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,s){if("float32"!==(s=s||"float32")&&"int32"!==s)throw new Pe(`truncatedNormal does not support dType ${s}.`);return td(e,this.mean,this.stddev,s,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}return n.className="TruncatedNormal",n})()),ne((()=>{class n extends ws{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,s){return P(()=>{if(2!==e.length||e[0]!==e[1])throw new O("Identity matrix initializer can only be used for 2D square matrices.");return D(this.gain,Mh(e[0]))})}getConfig(){return{gain:this.gain}}}return n.className="Identity",n})());let ds=(()=>{class n extends ws{constructor(e){if(super(),e.scale<0)throw new O(`scale must be a positive float. Got: ${e.scale}`);this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,function cL(n){Uo(lL,"FanMode",n)}(this.mode),this.distribution=null==e.distribution?"normal":e.distribution,function hL(n){Uo(uL,"Distribution",n)}(this.distribution),this.seed=e.seed}apply(e,s){const r=function dL(n,t="channelsLast"){let e,s;if(Bt(t),2===n.length)e=n[0],s=n[1];else if(-1!==[3,4,5].indexOf(n.length)){if("channelsFirst"===t){const r=Zr(n,2);e=n[1]*r,s=n[0]*r}else if("channelsLast"===t){const r=Zr(n,0,n.length-2);e=n[n.length-2]*r,s=n[n.length-1]*r}}else{const r=Zr(n);e=Math.sqrt(r),s=Math.sqrt(r)}return[e,s]}(e),o=r[0],a=r[1];let i=this.scale;if(i/="fanIn"===this.mode?Math.max(1,o):"fanOut"===this.mode?Math.max(1,a):Math.max(1,(o+a)/2),"normal"===this.distribution){const l=Math.sqrt(i);if("float32"!==(s=s||"float32")&&"int32"!==s)throw new Pe(`${this.getClassName()} does not support dType ${s}.`);return td(e,0,l,s,this.seed)}{const l=Math.sqrt(3*i);return Kr(e,-l,l,s,this.seed)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}return n.className="VarianceScaling",n})();ne(ds);let Ov=(()=>{class n extends ds{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return ds.className}}return n.className="GlorotUniform",n})();ne(Ov);let Lv=(()=>{class n extends ds{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return ds.className}}return n.className="GlorotNormal",n})();ne(Lv);let Pv=(()=>{class n extends ds{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return ds.className}}return n.className="HeNormal",n})();ne(Pv);let Mv=(()=>{class n extends ds{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return ds.className}}return n.className="HeUniform",n})();ne(Mv);let zv=(()=>{class n extends ds{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return ds.className}}return n.className="LeCunNormal",n})();ne(zv);let Bv=(()=>{class n extends ds{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return ds.className}}return n.className="LeCunUniform",n})();ne(Bv),ne((()=>{class n extends ws{constructor(e){super(),this.DEFAULT_GAIN=1,this.ELEMENTS_WARN_SLOW=2e3,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed}apply(e,s){return P(()=>{if(e.length<2)throw new Pe("Shape must be at least 2D.");if("int32"!==s&&"float32"!==s&&void 0!==s)throw new TypeError(`Unsupported data type ${s}.`);const r=j(e.slice(0,-1)),o=e[e.length-1],a=r*o;a>this.ELEMENTS_WARN_SLOW&&console.warn(`Orthogonal initializer is being called on a matrix with more than ${this.ELEMENTS_WARN_SLOW} (${a}) elements: Slowness may result.`);const l=Md([Math.max(o,r),Math.min(o,r)],0,1,s,this.seed),u=rg.qr(l,!1);let c=u[0];const d=u[1].flatten().stridedSlice([0],[Math.min(o,r)*Math.min(o,r)],[Math.min(o,r)+1]);return c=D(c,d.sign()),r<o&&(c=c.transpose()),D(Ce(this.gain),c.reshape(e))})}getConfig(){return{gain:this.gain,seed:this.seed}}}return n.className="Orthogonal",n})());const Vv={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function Wv(n,t={}){return Ru(n,rs.getMap().classNameMap,t,"initializer")}function At(n){return Zg(n)}function It(n){if("string"==typeof n){const t=n in Vv?Vv[n]:n;if("GlorotNormal"===t)return new Lv;if("GlorotUniform"===t)return new Ov;if("HeNormal"===t)return new Pv;if("HeUniform"===t)return new Mv;if("LeCunNormal"===t)return new zv;if("LeCunUniform"===t)return new Bv;{const e={};return e.className=t,e.config={},Wv(e)}}return n instanceof ws?n:Wv(n)}function sy(n){return Array.isArray(n)&&Array.isArray(n[0])}function zd(n){return 0===n.length?[]:Array.isArray(n[0])?n:[n]}function De(n){let t;if(Array.isArray(n)){if(1!==n.length)throw new O(`Expected Tensor length to be 1; got ${n.length}`);t=n[0]}else t=n;return t}function rt(n){if(Array.isArray(n)&&Array.isArray(n[0])){if(1===n.length)return n[0];throw new O(`Expected exactly 1 Shape; got ${n.length}`)}return n}function Bd(n){let t=0;for(const e of n)t+=0===e.shape.length?1:e.shape.reduce((s,r)=>s*r);return t}const Uv="Variable";class nr{constructor(t,e="float32",s=Uv,r=!0,o=null){this.dtype=null==e?"float32":e,this.shape=t.shape,this.id=Cv(),this.originalName=Tv(s=null==s?Uv:s),this.name=_v(this.originalName),this.trainable_=r,this.constraint=o,this.val=Hm(t,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(t){return this.assertNotDisposed(),function pL(n,t){if(n.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(n.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,t),this.val.id!==t.id&&(this.val.assign(t),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(t){this.trainable_=t,this.val.trainable=t}}function ry(n){return n.map(t=>t.read())}function oy(n){n.forEach(t=>{t[0].write(t[1])})}class Jt{constructor(t){this.dtype=t.dtype,this.shape=t.shape,this.ndim=null!=t.shape?t.shape.length:t.ndim,this.maxNDim=t.maxNDim,this.minNDim=t.minNDim,this.axes=t.axes||{}}}class sr{constructor(t,e,s,r,o,a,i){this.dtype=t,this.shape=e,this.sourceLayer=s,this.inputs=r,this.callArgs=o,this.outputTensorIndex=i,this.id=Cv(),null!=a&&(this.originalName=Tv(a),this.name=_v(this.originalName)),this.rank=e.length}}let fL=0;class Vd{constructor(t,e){this.callArgs=e,this.id=fL++,this.outboundLayer=t.outboundLayer,this.inboundLayers=t.inboundLayers,this.nodeIndices=t.nodeIndices,this.tensorIndices=t.tensorIndices,this.inputTensors=t.inputTensors,this.outputTensors=t.outputTensors,this.inputMasks=t.inputMasks,this.outputMasks=t.outputMasks,this.inputShapes=t.inputShapes,this.outputShapes=t.outputShapes;for(const s of t.inboundLayers)null!=s&&s.outboundNodes.push(this);t.outboundLayer.inboundNodes.push(this)}getConfig(){const t=[];for(const e of this.inboundLayers)t.push(null!=e?e.name:null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:t,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let mL=0;class qe extends ko{constructor(t={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=mL++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let e=t.name;if(!e){const s=this.getClassName();e=_r(s)+"_"+Od(s)}if(this.name=e,this.trainable_=null==t.trainable||t.trainable,null!=t.inputShape||null!=t.batchInputShape){let s;if(null!=t.batchInputShape)s=t.batchInputShape;else if(null!=t.inputShape){let o=null;null!=t.batchSize&&(o=t.batchSize),s=[o].concat(t.inputShape)}this.batchInputShape=s;let r=t.dtype;null==r&&(r=t.inputDType),null==r&&(r="float32"),this.dtype=r}this.initialWeights=null!=t.weights?t.weights:null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(t,e){return t.name+"_ib-"+e.toString()}getNodeAtIndex(t,e){if(0===this.inboundNodes.length)throw new bs(`The layer has never been called and thus has no defined ${e}.`);if(this.inboundNodes.length<=t)throw new O(`Asked to get ${e} at node ${t}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[t]}getInputAt(t){return Bn(this.getNodeAtIndex(t,"input").inputTensors)}getOutputAt(t){return Bn(this.getNodeAtIndex(t,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new Js(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new Js(`Layer ${this.name} is not connected, no input to return.`);return Bn(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new Js(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new Js(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return Bn(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map(t=>t())}get updates(){return this._updates}get built(){return this._built}set built(t){this._built=t}get trainable(){return this.trainable_}set trainable(t){this._trainableWeights.forEach(e=>e.trainable=t),this.trainable_=t}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(t=>t.trainable):[]}set trainableWeights(t){this._trainableWeights=t}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(t=>!t.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(t){this._nonTrainableWeights=t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(t){const e=pt(t);if(null==this.inputSpec||0===this.inputSpec.length)return;const s=pt(this.inputSpec);if(e.length!==s.length)throw new O(`Layer ${this.name} expects ${s.length} inputs, but it received ${e.length} input tensors. Input received: ${t}`);for(let r=0;r<e.length;r++){const o=e[r],a=s[r];if(null==a)continue;const i=o.rank;if(null!=a.ndim&&i!==a.ndim)throw new O(`Input ${r} is incompatible with layer ${this.name}: expected ndim=${a.ndim}, found ndim=${i}`);if(null!=a.maxNDim&&i>a.maxNDim)throw new O(`Input ${r} is incompatible with layer ${this.name}: expected max_ndim=${a.maxNDim}, found ndim=${i}`);if(null!=a.minNDim&&i<a.minNDim)throw new O(`Input ${r} is incompatible with layer ${this.name}: expected min_ndim=${a.minNDim}, found ndim=${i}.`);if(null!=a.dtype&&o.dtype!==a.dtype)throw new O(`Input ${r} is incompatible with layer ${this.name} : expected dtype=${a.dtype}, found dtype=${o.dtype}.`);if(a.axes){const l=o.shape;for(const u in a.axes){const c=Number(u),h=a.axes[u];if(null!=h&&-1===[h,null].indexOf(c>=0?l[c]:l[l.length+c]))throw new O(`Input ${r} is incompatible with layer ${this.name}: expected axis ${c} of input shape to have value ${h} but got shape ${l}.`)}}if(null!=a.shape)for(let l=0;l<a.shape.length;++l){const u=a.shape[l],c=o.shape[l];if(null!=u&&null!=c&&u!==c)throw new O(`Input ${r} is incompatible with layer ${this.name}: expected shape=${a.shape}, found shape=${o.shape}.`)}}}call(t,e){return t}invokeCallHook(t,e){null!=this._callHook&&this._callHook(t,e)}setCallHook(t){this._callHook=t}clearCallHook(){this._callHook=null}apply(t,e){e=e||{},this.assertNotDisposed();const s=pt(t),r=function bL(n){let t=!0;for(const e of pt(n))if(!(e instanceof sr)){t=!1;break}return t}(t),o=function xL(n){let t=!0;for(const e of pt(n))if(e instanceof sr){t=!1;break}return t}(t);if(r===o)throw new O("Arguments to apply() must be all SymbolicTensors or all Tensors");return Go(this.name,()=>{if(!this.built){this.assertInputCompatibility(t);const a=[];for(const i of pt(t))a.push(i.shape);this.build(Bn(a)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&o&&(this._refCount=1)}if(this.assertInputCompatibility(t),o){let a=this.call(t,e);this.supportsMasking&&this.setMaskMetadata(t,a);const i=pt(a),l=[];for(let u of i)-1!==s.indexOf(u)&&(u=u.clone()),l.push(u);if(a=Bn(l),null!=this.activityRegularizer)throw new Pe("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return a}{const a=function gL(n){n=pt(n);const t=[];for(const e of n)t.push(e.shape);return Bn(t)}(t),i=this.computeOutputShape(a);let l;const u="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(t)?a[0]:a),l=null!=i&&i.length>0&&Array.isArray(i[0])?i.map((c,h)=>new sr(u,c,this,pt(t),e,this.name,h)):new sr(u,i,this,pt(t),e,this.name),this.addInboundNode(t,l,null,null,a,i,e),this._refCount++,null!=this.activityRegularizer)throw new Pe("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return l}})}warnOnIncompatibleInputShape(t){if(null!=this.batchInputShape)if(t.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(t)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let e=!1;this.batchInputShape.forEach((s,r)=>{null!=s&&null!=t[r]&&t[r]!==s&&(e=!0)}),e&&console.warn(`The shape of the input tensor (${JSON.stringify(t)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new Js(`The layer ${this.name} has never been called and thus has no defined output shape.`);const t=[];for(const e of this.inboundNodes){const s=JSON.stringify(e.outputShapes);-1===t.indexOf(s)&&t.push(s)}if(1===t.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new Js(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new bs(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return Bd(this.weights)}build(t){this.built=!0}getWeights(t=!1){return ry(t?this.trainableWeights:this.weights)}setWeights(t){P(()=>{const e=this.weights;if(e.length!==t.length)throw new O(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${t.length}, but the layer was expecting ${e.length} weights. Provided weights: ${t}...`);if(0===e.length)return;const s=[],r=ry(e);for(let o=0;o<r.length;++o){const a=r[o],i=e[o],l=t[o];if(!Xe(a.shape,l.shape))throw new O(`Layer weight shape ${a.shape} not compatible with provided weight shape ${l.shape}`);s.push([i,l])}oy(s)})}addWeight(t,e,s,r,o,a,i,l){if(-1!==this._addedWeightNames.indexOf(t))throw new O(`Duplicate weight name ${t} for layer ${this.name}`);this._addedWeightNames.push(t),null==s&&(s="float32"),this.fastWeightInitDuringBuild&&(r=null!=l?l():It("zeros"));const u=r.apply(e,s),c=new nr(u,s,t,a,i);return u.dispose(),null!=o&&this.addLoss(()=>o.apply(c.read())),null==a&&(a=!0),a?this._trainableWeights.push(c):this._nonTrainableWeights.push(c),c}setFastWeightInitDuringBuild(t){this.fastWeightInitDuringBuild=t}addLoss(t){null==t||Array.isArray(t)&&0===t.length||(t=pt(t),null!=this._losses&&this.losses.push(...t))}computeOutputShape(t){return t}computeMask(t,e){if(!this.supportsMasking){if(null!=e){if(!Array.isArray(e))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);e.forEach(s=>{if(null!=s)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)})}return null}return e}setMaskMetadata(t,e,s){if(!this.supportsMasking)return;const r=this.computeMask(t,s);if(e instanceof Array&&r instanceof Array){if(e.length!==r.length)throw new Error(`${this.name} outputs ${e.length} tensors but ${r.length} masks for those tensors`);for(let o=0;o<e.length;o++)e[o].kerasMask=r[o]}else{if(r instanceof Array)throw new Error(`{this.name} outputs a single tensor but ${r.length} masks`);if(e instanceof Array)throw new Error(`{this.name} outputs ${e.length} tensors but only one mask`);e.kerasMask=r}}addInboundNode(t,e,s,r,o,a,i=null){const l=pt(t);e=pt(e),s=pt(s),r=pt(r),o=zd(o),a=zd(a);const u=[],c=[],h=[];for(const d of l)u.push(d.sourceLayer),c.push(d.nodeIndex),h.push(d.tensorIndex);new Vd({outboundLayer:this,inboundLayers:u,nodeIndices:c,tensorIndices:h,inputTensors:l,outputTensors:e,inputMasks:s,outputMasks:r,inputShapes:o,outputShapes:a},i);for(let d=0;d<e.length;d++)e[d].sourceLayer=this,e[d].nodeIndex=this.inboundNodes.length-1,e[d].tensorIndex=d}getConfig(){const t={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(t.batchInputShape=this.batchInputShape),null!=this.dtype&&(t.dtype=this.dtype),t}disposeWeights(){return this.weights.forEach(t=>t.dispose()),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let t=0;return 0==--this._refCount&&(t=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:t}}}function Gv(n,t,e){if((null==t||null!=e&&e>0)&&(t=n.sourceLayer,e=n.nodeIndex),0===t.inboundNodes.length)return[n];{const s=t.inboundNodes[e];if(0===s.inboundLayers.length)return s.inputTensors;{const r=[];for(let o=0;o<s.inboundLayers.length;o++){const u=Gv(s.inputTensors[o],s.inboundLayers[o],s.nodeIndices[o]);for(const c of u)-1===r.indexOf(c)&&r.push(c)}return r}}}let Wd=(()=>{class n extends qe{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:Od("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new O("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let s=e.batchInputShape;if(null==s){if(null==e.inputShape)throw new O("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");s=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new O("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const r=e.dtype||"float32";this.batchInputShape=s,this.dtype=r,this.inputSpec=[{shape:s}];const o=new sr(this.dtype,this.batchInputShape,this,[],{},this.name);o.nodeIndex=0,o.tensorIndex=0,new Vd({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[o],outputTensors:[o],inputMasks:[null],outputMasks:[null],inputShapes:[s],outputShapes:[s]})}apply(e,s){throw new O(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}return n.className="InputLayer",n})();ne(Wd);class Qr{constructor(t){if(this.id2Value={},this.id2Mask={},this.name2Id={},t instanceof Qr)for(const e in t.id2Value)this.id2Value[e]=t.id2Value[e],e in t.id2Mask&&(this.id2Mask[e]=t.id2Mask[e]);else{if(null==t)return;for(const e of t)this.add(e.key,e.value)}}add(t,e,s){if(null!=this.id2Value[t.id])throw new O(`Duplicate key: name=${t.name}, id=${t.id}`);return this.id2Value[t.id]=function vL(n,t){if(null==n.dtype||n.dtype===t.dtype)return t;try{return ue(t,n.dtype)}catch{throw new O(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${n.name}' (${n.dtype}).`)}}(t,e),this.name2Id[t.name]=t.id,null!=s&&(this.id2Mask[t.id]=s),this}addFeed(t){this.add(t.key,t.value)}hasKey(t){return null!=this.id2Value[t.id]}names(){return Object.keys(this.name2Id)}getValue(t){if(t instanceof sr){if(null==this.id2Value[t.id])throw new O(`Nonexistent key: ${t.name}`);return this.id2Value[t.id]}{const e=this.name2Id[t];if(null==e)throw new O(`Feed dict has no SymbolicTensor name: ${t}`);return this.id2Value[e]}}getMask(t){if(t instanceof sr){if(null==this.id2Value[t.id])throw new O(`Nonexistent key: ${t.name}`);return this.id2Mask[t.id]}{const e=this.name2Id[t];if(null==e)throw new O(`Feed dict has no SymbolicTensor name: ${t}`);return this.id2Mask[e]}}disposeMasks(){null!=this.id2Mask&&Ge(this.id2Mask)}}const Ud=new wv,Gd=new wv;function Pu(n,t,e,s){const r=null!=e&&e.training,o=Array.isArray(n),a=o?n:[n],i=a.map(f=>f.name),l=[],u=t.names();for(const f of i)-1!==u.indexOf(f)?l.push(t.getValue(f)):l.push(null);null!=s&&(s.maxNumTensors=-1/0,s.minNumTensors=1/0);const c=i.join(",")+"|"+t.names().sort().join(",");let d,h=Ud.get(c);if(null==h){const f=function IL(n,t){C(null!=n&&n.length>0,()=>"Expected at least one fetch, got none");let e=[],s={};if(1===n.length){const r=Hv(n[0],t);e=r.sorted,s=r.recipientMap}else{const r=new Set;for(const o of n){const{sorted:a,recipientMap:i}=Hv(o,t);for(const l of a)r.has(l.name)||(e.push(l),r.add(l.name));for(const l in i)null==s[l]&&(s[l]=new Set),i[l].forEach(u=>s[l].add(u))}}return{sorted:e,recipientCounts:CL(s)}}(a,t);h=f.sorted,d=f.recipientCounts,Ud.put(c,h),Gd.put(c,d)}d={},r||Object.assign(d,Gd.get(c));const p=new Qr(t);for(let f=0;f<h.length;++f){if(null!=s){const _=Nh().numTensors;_>s.maxNumTensors&&(s.maxNumTensors=_),_<s.minNumTensors&&(s.minNumTensors=_)}const g=h[f],m=g.sourceLayer;if(m instanceof Wd)continue;const y=[],b=[],w=[];let x=!1;for(const _ of g.inputs){const E=p.getValue(_),L=p.getMask(_);y.push(E),b.push(L),null!=L&&(x=!0),r||(d[_.name]--,0===d[_.name]&&!t.hasKey(_)&&-1===i.indexOf(_.name)&&!E.isDisposed&&!0!==_.sourceLayer.stateful&&w.push(E))}x&&((e=e||{}).mask=b[0]);const S=pt(m.apply(y,e));let I=null;m.supportsMasking&&(I=m.computeMask(y,b));const k=NL(g),T=Array.isArray(k)?k:[k];for(let _=0;_<T.length;++_){p.hasKey(T[_])||p.add(T[_],S[_],Array.isArray(I)?I[0]:I);const E=i.indexOf(T[_].name);-1!==E&&(l[E]=S[_])}r||Ge(w)}return p.disposeMasks(),o?l:l[0]}function CL(n){const t={};for(const e in n)t[e]=n[e].size;return t}function Hv(n,t){const e=new Set,s=[],r={};for(const i of t.names())e.add(i);const o=[],a=[];for(o.push(n);o.length>0;){const i=o[o.length-1];if(e.has(i.name)){o.pop();continue}const l=a[a.length-1]===o.length-1;if(0===i.inputs.length||l)o.pop(),s.push(i),e.add(i.name),l&&a.pop();else{a.push(o.length-1);for(const u of i.inputs)null==r[u.name]&&(r[u.name]=new Set),r[u.name].add(i.name),!e.has(u.name)&&o.push(u)}}return{sorted:s,recipientMap:r}}function NL(n){let t;if(1===n.sourceLayer.inboundNodes.length)t=n.sourceLayer.output;else{let e=null;for(let s=0;s<n.sourceLayer.inboundNodes.length;++s)for(const r of n.sourceLayer.inboundNodes[s].outputTensors)if(r.id===n.id){e=s;break}t=n.sourceLayer.getOutputAt(e)}return t}function ay(n,t){return P(()=>dn(we(D(n,n),t,!0)))}z().registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",()=>100,function SL(n){null!=Ud&&Ud.setMaxEntries(n),null!=Gd&&Gd.setMaxEntries(n)});class Mu extends ko{getConfig(){return{}}}ne((()=>{class n extends Mu{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return P(()=>{const s=ay(e,this.axis),r=Fn(s,0,this.maxValue);return D(e,ke(r,ee(Qt(),s)))})}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}return n.className="MaxNorm",n})()),ne((()=>{class n extends Mu{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return P(()=>ke(e,ee(Qt(),ay(e,this.axis))))}getConfig(){return{axis:this.axis}}}return n.className="UnitNorm",n})()),ne((()=>{class n extends Mu{apply(e){return _s(e)}}return n.className="NonNeg",n})()),ne((()=>{class n extends Mu{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return P(()=>{const s=ay(e,this.axis),r=ee(D(this.rate,Fn(s,this.minValue,this.maxValue)),D(1-this.rate,s));return D(e,ke(r,ee(Qt(),s)))})}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}return n.className="MinMaxNorm",n})());const jv={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function en(n){return Zg(n)}function qv(n,t={}){return Ru(n,rs.getMap().classNameMap,t,"constraint")}function tn(n){return null==n?null:"string"==typeof n?qv({className:n in jv?jv[n]:n,config:{}}):n instanceof Mu?n:qv(n)}function Jr(n){return iy.apply(this,arguments)}function iy(){return(iy=(0,Y.Z)(function*(n){if(null==n)return;const t=[],e=[],s=[];for(const r in n){const o=n[r];if("number"!=typeof o){const a=o;t.push(a.data()),e.push(r),s.push(a)}}if(t.length>0){const r=yield Promise.all(t);for(let o=0;o<r.length;++o)n[e[o]]=r[o][0];Ge(s)}})).apply(this,arguments)}function Kv(n){if(null!=n)for(const t in n){const e=n[t];"number"!=typeof e&&e.dispose()}}class Ci{constructor(){this.validationData=null}setParams(t){this.params=t}onEpochBegin(t,e){return(0,Y.Z)(function*(){})()}onEpochEnd(t,e){return(0,Y.Z)(function*(){})()}onBatchBegin(t,e){return(0,Y.Z)(function*(){})()}onBatchEnd(t,e){return(0,Y.Z)(function*(){})()}onTrainBegin(t){return(0,Y.Z)(function*(){})()}onTrainEnd(t){return(0,Y.Z)(function*(){})()}setModel(t){}}class _L{constructor(t,e=10){null==t&&(t=[]),this.callbacks=t,this.queueLength=e}append(t){this.callbacks.push(t)}setParams(t){for(const e of this.callbacks)e.setParams(t)}setModel(t){for(const e of this.callbacks)e.setModel(t)}onEpochBegin(t,e){var s=this;return(0,Y.Z)(function*(){null==e&&(e={});for(const r of s.callbacks)yield r.onEpochBegin(t,e)})()}onEpochEnd(t,e){var s=this;return(0,Y.Z)(function*(){null==e&&(e={});for(const r of s.callbacks)yield r.onEpochEnd(t,e)})()}onBatchBegin(t,e){var s=this;return(0,Y.Z)(function*(){null==e&&(e={});for(const r of s.callbacks)yield r.onBatchBegin(t,e)})()}onBatchEnd(t,e){var s=this;return(0,Y.Z)(function*(){null==e&&(e={});for(const r of s.callbacks)yield r.onBatchEnd(t,e)})()}onTrainBegin(t){var e=this;return(0,Y.Z)(function*(){null==t&&(t={});for(const s of e.callbacks)yield s.onTrainBegin(t)})()}onTrainEnd(t){var e=this;return(0,Y.Z)(function*(){null==t&&(t={});for(const s of e.callbacks)yield s.onTrainEnd(t)})()}}class EL extends Ci{constructor(){super()}onEpochBegin(t){var e=this;return(0,Y.Z)(function*(){e.seen=0,e.totals={}})()}onBatchEnd(t,e){var s=this;return(0,Y.Z)(function*(){null==e&&(e={});const r=null==e.size?0:e.size;s.seen+=r;for(const o in e){const a=e[o];if("number"==typeof a)s.totals.hasOwnProperty(o)||(s.totals[o]=0),s.totals[o]=s.totals[o]+a*r;else{let i;o in s.totals?i=s.totals[o]:s.totals[o]=0;const l=P(()=>ee(s.totals[o],D(a,r)));s.totals[o]=l,null!=i&&i.dispose()}}})()}onEpochEnd(t,e){var s=this;return(0,Y.Z)(function*(){if(null!=e)for(const r of s.params.metrics)null!=s.totals[r]&&("number"==typeof s.totals[r]?e[r]=s.totals[r]/s.seen:P(()=>{const o=D(ke(1,s.seen),s.totals[r]);e[r]=o,s.totals[r].dispose(),Yt(e[r])}))})()}}class $L extends Ci{onTrainBegin(t){var e=this;return(0,Y.Z)(function*(){e.epoch=[],e.history={}})()}onEpochEnd(t,e){var s=this;return(0,Y.Z)(function*(){null==e&&(e={}),s.epoch.push(t);for(const r in e)null==s.history[r]&&(s.history[r]=[]),s.history[r].push(e[r])})()}syncData(){var t=this;return(0,Y.Z)(function*(){const e=[],s=[],r=[];for(const a in t.history){const i=t.history[a];for(let l=0;l<i.length;++l)"number"!=typeof i[l]&&(e.push(i[l].data()),s.push(a),r.push(l))}const o=yield Promise.all(e);for(let a=0;a<o.length;++a)t.history[s[a]][r[a]].dispose(),t.history[s[a]][r[a]]=o[a][0]})()}}class AL extends Ci{constructor(t,e){if(super(),this.currentEpoch=0,this.nowFunc=t.nowFunc,this.nextFrameFunc=t.nextFrameFunc||og,this.yieldEvery=e||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=t.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");ac(this.yieldEvery)&&(this.maybeWait=function UO(n,t,e){let r,s=null!=e?e():Nn();return(...a)=>{const i=null!=e?e():Nn();return i-s<t||(s=i,r=n(...a)),r}}(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=t.onTrainBegin,this.trainEnd=t.onTrainEnd,this.epochBegin=t.onEpochBegin,this.epochEnd=t.onEpochEnd,this.batchBegin=t.onBatchBegin,this.batchEnd=t.onBatchEnd,this.yield=t.onYield}maybeWait(t,e,s){var r=this;return(0,Y.Z)(function*(){const o=[];null!=r.yield&&(yield Jr(s),o.push(r.yield(t,e,s))),o.push(r.nextFrameFunc()),yield Promise.all(o)})()}onEpochBegin(t,e){var s=this;return(0,Y.Z)(function*(){s.currentEpoch=t,null!=s.epochBegin&&(yield Jr(e),yield s.epochBegin(t,e))})()}onEpochEnd(t,e){var s=this;return(0,Y.Z)(function*(){const r=[];null!=s.epochEnd&&(yield Jr(e),r.push(s.epochEnd(t,e))),"epoch"===s.yieldEvery&&r.push(s.nextFrameFunc()),yield Promise.all(r)})()}onBatchBegin(t,e){var s=this;return(0,Y.Z)(function*(){null!=s.batchBegin&&(yield Jr(e),yield s.batchBegin(t,e))})()}onBatchEnd(t,e){var s=this;return(0,Y.Z)(function*(){const r=[];null!=s.batchEnd&&(yield Jr(e),r.push(s.batchEnd(t,e))),"batch"===s.yieldEvery?r.push(s.nextFrameFunc()):ac(s.yieldEvery)&&r.push(s.maybeWait(s.currentEpoch,t,e)),yield Promise.all(r)})()}onTrainBegin(t){var e=this;return(0,Y.Z)(function*(){null!=e.trainBegin&&(yield Jr(t),yield e.trainBegin(t))})()}onTrainEnd(t){var e=this;return(0,Y.Z)(function*(){null!=e.trainEnd&&(yield Jr(t),yield e.trainEnd(t))})()}}function Xv(n,t){return null==n&&(n={}),n instanceof Ci?[n]:Array.isArray(n)&&n[0]instanceof Ci?n:pt(n).map(s=>new AL(s,t))}let RL=(()=>{class n{constructor(){}static registerCallbackConstructor(e,s){C(e>=0&&Number.isInteger(e),()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`),n.checkForDuplicate(s),null==n.constructors[e]&&(n.constructors[e]=[]),n.constructors[e].push(s)}static checkForDuplicate(e){for(const s in n.constructors)n.constructors[+s].forEach(o=>{if(o===e)throw new O("Duplicate callback constructor.")})}static clear(){n.constructors={}}static createCallbacks(e){const s=[];for(const r in n.constructors){const o=+r;e>=o&&s.push(...n.constructors[o])}return s.map(r=>new r)}}return n.constructors={},n})();function Zv(n,t,e,s,r,o,a,i,l){const u=new $L,c=[new EL,...RL.createCallbacks(t)];null!=n&&c.push(...n),c.push(u);const h=new _L(c);return h.setParams({epochs:e,initialEpoch:s,samples:r,steps:o,batchSize:a,verbose:t,doValidation:i,metrics:l}),{callbackList:h,history:u}}function Er(n,t={},e=!1){return Ru(n,rs.getMap().classNameMap,t,"layer",e)}function Hd(n,t){return P(()=>{"float32"!==n.dtype&&(n=ue(n,"float32"));const e=we(Ou(n),t,!0),s=To(e.shape,Qt()),r=dn(qs(e,s));return ke(n,r)})}function jd(n,t){return P(()=>$t(Ou(ye(t,n)),-1))}function ly(n,t){return P(()=>$t(Ht(ye(t,n)),-1))}function uy(n,t){return P(()=>{const e=ye(n,t),s=Fn(Ht(n),Qt(),Number.MAX_VALUE),r=Ht(ke(e,s));return D(100,$t(r,-1))})}function zu(n,t,e=!1){return P(()=>{if(e)t=Cu(t);else{const s=we(t,t.shape.length-1,!0);t=ke(t,s)}return t=Fn(t,Qt(),1-Qt()),bt(we(D(ue(n,"float32"),jn(t)),t.shape.length-1))})}function qd(n,t,e=!1){return P(()=>{const s=ue(hi(function sL(n){const t=[Zr(n.shape)];return F(n,t)}(n)),"int32"),r=(t=Fn(t,Qt(),1-Qt())).shape;return zu(F(Eo(s,r[r.length-1]),r),t,e)})}function Kd(n,t){return P(()=>{let e;return e=Fn(t,Qt(),1-Qt()),e=jn(ke(e,ye(1,e))),$t(function ML(n,t){if(!Xe(n.shape,t.shape))throw new O(`logits and labels must have the same shape, but got shapes ${JSON.stringify(n.shape)} and ${JSON.stringify(t.shape)}`);return P(()=>{const e=_s(t),s=bt(Ht(t));return ee(ye(e,D(t,n)),mu(On(s)))})}(n,e),-1)})}function Yv(n,t){return P(()=>{const e=Hd(n,-1),s=Hd(t,-1),r=D(e,s);return bt(we(r,-1))})}const Xd={meanSquaredError:jd,meanAbsoluteError:ly,meanAbsolutePercentageError:uy,meanSquaredLogarithmicError:function DL(n,t){return P(()=>{const e=Fn(t,Qt(),Number.MAX_VALUE),s=jn(ee(1,e)),r=Fn(n,Qt(),Number.MAX_VALUE),o=jn(ee(1,r));return $t(Ou(ye(s,o)),-1)})},squaredHinge:function FL(n,t){return P(()=>{const e=qs(0,ye(1,D(n,t)));return $t(Ou(e),-1)})},hinge:function OL(n,t){return P(()=>{const e=qs(0,ye(1,D(n,t)));return $t(e,-1)})},categoricalHinge:function LL(n,t){return P(()=>{const e=we(D(n,t),-1),s=as(D(ye(1,n),t),-1);return qs(0,ee(1,ye(s,e)))})},logcosh:function PL(n,t){return P(()=>{const e=Math.log(2),s=ye(t,n),r=ye(ee(s,Oo(D(-2,s))),e);return $t(r,-1)})},categoricalCrossentropy:zu,sparseCategoricalCrossentropy:qd,binaryCrossentropy:Kd,kullbackLeiblerDivergence:function zL(n,t){return P(()=>{const e=Fn(n,Qt(),1),s=Fn(t,Qt(),1);return we(D(n,jn(ke(e,s))),-1)})},poisson:function BL(n,t){return P(()=>{const e=jn(ee(Qt(),t));return $t(ye(t,D(n,e)),-1)})},cosineProximity:Yv};function cy(n){if("string"==typeof n){if(n in Xd)return Xd[n];let t=`Unknown loss ${n}`;throw n.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${n}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new O(t)}return n}function Qv(n,t){return P(()=>{const e=D(.5,qn(t)),s=er(_n(t,e),n.dtype);return $t(Hn(n,s),-1)})}function Jv(n,t){return P(()=>er(Hn(Wr(n,-1),Wr(t,-1)),"float32"))}function GL(n,t){return Kd(n,t)}function HL(n,t){return n.rank===t.rank&&(n=Kn(n,[n.rank-1])),(t=Wr(t,-1)).dtype!==n.dtype&&(t=ue(t,n.dtype)),ue(Hn(n,t),"float32")}const t1=zu,n1=qd,Zd={binaryAccuracy:Qv,categoricalAccuracy:Jv,precision:function UL(n,t){return P(()=>{const e=function e1(n,t){return P(()=>ue(we(Ts(Hn(n,1),Hn(t,1))),"float32"))}(n,t),s=function WL(n,t){return P(()=>ue(we(Ts(Hn(n,0),Hn(t,1))),"float32"))}(n,t),r=ee(e,s);return ue(fn(_n(r,0),ke(e,r),0),"float32")})},categoricalCrossentropy:t1,sparseCategoricalCrossentropy:n1,mse:jd,MSE:jd,mae:ly,MAE:ly,mape:uy,MAPE:uy,cosine:Yv};function JL(n){if("string"==typeof n&&n in Zd)return Zd[n];if("string"!=typeof n&&null!=n)return n;throw new O(`Unknown metric ${n}`)}function Yd(n){if(cs(null!==n,`Unknown LossOrMetricFn ${n}`),"string"==typeof n)return n;{let t;for(const e of Object.keys(Xd))if(Xd[e]===n){t=e;break}if(void 0!==t)return t;for(const e of Object.keys(Zd))if(Zd[e]===n){t=e;break}return void 0!==t?t:n.name}}function r1(n,t,e=!1){if(null==n||"object"!=typeof n||Object.getPrototypeOf(n)!==Object.prototype||!hy(n))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(e){const s=JSON.stringify(n);s.length>1048576&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${s.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function hy(n){if(null===n)return!0;if("object"==typeof n){if(Object.getPrototypeOf(n)===Object.prototype){const t=Object.keys(n);for(const e of t)if("string"!=typeof e||!hy(n[e]))return!1;return!0}if(Array.isArray(n)){for(const t of n)if(!hy(t))return!1;return!0}return!1}{const t=typeof n;return"string"===t||"number"===t||"boolean"===t}}function Qd(n,t,e=console.log){let s="";for(let r=0;r<n.length;++r)r>0&&(s=s.slice(0,s.length-1)+" "),s+=n[r],s=s.slice(0,t[r]),s+=" ".repeat(t[r]-s.length);e(s)}function rP(n,t,e){let s,r;try{r=n.inboundNodes.map(l=>JSON.stringify(l.inputShapes)).join(",")}catch{r="multiple"}try{s=JSON.stringify(n.outputShape)}catch{s="multiple"}Qd([`${n.name} (${n.getClassName()})`,r,s,n.countParams().toString()],t,e)}function oP(n,t,e,s){let r,o;try{o=n.inboundNodes.map(h=>JSON.stringify(h.inputShapes)).join(",")}catch{o="multiple"}try{r=JSON.stringify(n.outputShape)}catch{r="multiple"}const a=[];for(const h of n.inboundNodes)if(!(null!=e&&e.length>0&&-1===e.indexOf(h)))for(let d=0;d<h.inboundLayers.length;++d)a.push(`${h.inboundLayers[d].name}[${h.nodeIndices[d]}][${h.tensorIndices[d]}]`);const i=n.name,l=n.getClassName(),u=0===a.length?"":a[0];Qd([`${i} (${l})`,o,r,n.countParams().toString(),u],t,s);for(let h=1;h<a.length;++h)Qd(["","","","",a[h]],t,s)}function o1(n,t,e){return("inboundNodes"===n||"outputLayers"===n||"inputLayers"===n)&&0===t&&"string"==typeof e}function dy(n,t){if(null===n)return null;if("string"==typeof n)return Wo(n);if("number"==typeof n||"boolean"==typeof n)return n;if(n instanceof Array){const e=[],s=n.length;for(let r=0;r<s;++r){const o=n[r];o1(t,r,o)?e.push(o):e.push(dy(o,t))}return e}{const e={};for(const s of Object.keys(n)){const r=n[s];if("name"===s&&"string"==typeof r)e[s]=r;else{const o=Wo(s);e[o]=dy(r,o)}}return e}}function py(n,t){if(null==n)return null;if("string"==typeof n)return _r(n);if("number"==typeof n||"boolean"==typeof n)return n;if(n instanceof Array){const e=[],s=n.length;for(let r=0;r<s;++r){const o=n[r];o1(t,r,o)?e.push(o):e.push(py(o,t))}return e}{const e={};for(const s of Object.keys(n)){const r=n[s];e[_r(s)]="name"!==s&&"className"!==s||"string"!=typeof r?py(r,s):r}return e}}class Os extends qe{constructor(t){if(super({}),this.containerNodes=new Set,this.name=t.name,null==this.name){const b=this.getClassName().toLowerCase();this.name=Od(b)}if(this.supportsMasking=!1,this.trainable_=!0,this.inputs=Array.isArray(t.inputs)?t.inputs.slice():[t.inputs],this.outputs=Array.isArray(t.outputs)?t.outputs.slice():[t.outputs],Xr(this.inputs).length!==this.inputs.length)throw new O(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map(b=>b.name)}`);Xr(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map(b=>b.name)}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const b of this.outputs){const x=b.nodeIndex,S=b.tensorIndex;this.outputLayers.push(b.sourceLayer),this.outputLayersNodeIndices.push(x),this.outputLayersTensorIndices.push(S)}for(const b of this.inputs){const w=b.sourceLayer,x=b.nodeIndex,S=b.tensorIndex;cs(0===x,"input layer has >1 nodes"),cs(0===S,"input layer has >1 tensors"),this.inputLayers.push(w),this.inputLayersNodeIndices.push(x),this.inputLayersTensorIndices.push(S)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let b=0;b<this.inputLayers.length;b++){const w=this.inputLayers[b];if(!(w instanceof Wd))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${t.inputs}. Input ${b} (0-based) originates from layer type ${w.getClassName()}.`);this.inputNames.push(w.name),this.feedInputShapes.push(w.batchInputShape),this.feedInputNames.push(w.name)}for(const b of this.outputLayers)this.outputNames.push(b.name);this.internalInputShapes=this.inputs.map(b=>b.shape),this.internalOutputShapes=this.outputs.map(b=>b.shape);const e={},s={},r={},o={},a={},i=[],l=(b,w,x,S,I,k)=>{(null==S||null==I||null==k)&&(S=b.sourceLayer,I=b.nodeIndex,k=b.tensorIndex);const T=S.inboundNodes[I];if(-1!==x.indexOf(T))throw new bs(`The tensor ${b.name} at layer "${S.name}" is part of a cycle.`);if(-1!==w.indexOf(T))return;this.containerNodes.add(Os.nodeKey(S,I)),S.id in a||(a[S.id]=Object.keys(a).length),-1===x.indexOf(T)&&x.push(T);const _=T.inboundLayers.length;for(let E=0;E<_;E++)l(T.inputTensors[E],w,x,T.inboundLayers[E],T.nodeIndices[E],T.tensorIndices[E]);for(w.push(T);x.indexOf(T)>=0;)x.splice(x.indexOf(T),1);i.push(T)},u=[],c=[];for(const b of this.outputs)l(b,u,c);const h=i.slice().reverse();for(const b of h){s[b.id]=b,b.id in e||(e[b.id]=0);let w=e[b.id];w=Math.max(w,null==r[b.outboundLayer.id]?0:r[b.outboundLayer.id]),r[b.outboundLayer.id]=w,o[b.outboundLayer.id]=b.outboundLayer,e[b.id]=w;for(let S=0;S<b.inboundLayers.length;S++){const T=b.inboundLayers[S].inboundNodes[b.nodeIndices[S]];e[T.id]=Math.max(w+1,null==e[T.id]?0:e[T.id]),s[T.id]=T}}const d={};for(const b in e){const w=e[b];w in d||(d[w]=[]),d[w].push(s[b])}const p={};for(const b in r){const w=r[b];w in p||(p[w]=[]),p[w].push(o[b])}let f=Object.keys(p).map(b=>parseInt(b,10)).sort(Dd);this.layers=[];for(const b of f){const w=p[b];w.sort((x,S)=>{const I=a[x.id],k=a[S.id];return I<k?-1:I>k?1:0});for(const x of w)x instanceof Os&&this.internalContainerRefs.push(x),this.layers.push(x)}this.layersByDepth=p,f=Object.keys(d).map(b=>parseInt(b,10)).sort(Dd);const g=this.inputs.slice(),m=[];for(const b of f)for(const w of d[b]){const x=w.outboundLayer;if(null!=x){for(const S of w.inputTensors)if(-1===g.indexOf(S))throw new bs(`Graph disconnected: cannot obtain value for tensor ${S} at layer "${x.name}". The following previous layers were accessed without issue: ${m}`);for(const S of w.outputTensors)g.push(S);m.push(x.name)}}this.nodesByDepth=d;const y=this.layers.map(b=>b.name);for(const b of y){const w=y.filter(x=>x===b).length;if(1!==w)throw new bs(`The name "${b}" is used ${w} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(y))}this.outboundNodes=[],this.inboundNodes=[],new Vd({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map(b=>null),outputMasks:this.outputs.map(b=>null),inputShapes:this.inputs.map(b=>b.shape),outputShapes:this.outputs.map(b=>b.shape)}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const t={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const e of this.layers)t.numDisposedVariables+=e.dispose().numDisposedVariables;for(const e of this.internalContainerRefs)t.numDisposedVariables+=e.dispose().numDisposedVariables}return t.refCountAfterDispose=this._refCount,t}get trainable(){return this.trainable_}set trainable(t){this.layers.forEach(e=>{e._trainableWeights.forEach(s=>s.trainable=t)}),this.trainable_=t}get trainableWeights(){if(this._trainableWeights.length>0)throw new O("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let t=[];for(const e of this.layers)t=t.concat(e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.layers)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const s of this.layers)e.push(...s.trainableWeights);return e.concat(t)}return t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(t,e=!0){const s={};let r=0;const o=(n=>{const t=Object.keys(n);if(0===t.length)return!1;const e=t[0].split("/");return!isNaN(parseInt(e[e.length-1],10))})(t);o&&this.parseWeights(t);for(const i of this.layers)for(const[l,u]of i.weights.entries()){const c=o?`${u.name.split("/").slice(0,-1).join("/")+"/"}${l}`:u.originalName;if(null!=s[c])throw new O(`Duplicate weight name: ${c}`);s[c]=u,r++}const a=[];for(const i in t){let l=i;if(null==s[i]){const u=i.split("/");l=u.slice(0,-2).concat([u[u.length-1]]).join("/")}if(null!=s[l])a.push([s[l],t[i]]);else if(e)throw new O(`Provided weight data has no target variable: ${i}`);delete s[l]}if(e){const i=[];for(const l in s)i.push(l);if(i.length>0)throw new O(`${i.length} of ${r} weights are not set: ${i}`)}oy(a)}parseWeights(t){for(const e in Object.keys(t)){const s=e.split("/"),r=["vars","layer_checkpoint_dependencies"],o=s.map(a=>a.startsWith("_")?a.slice(1):a).filter(a=>!r.includes(a)).join("/");o!==e&&(t[o]=t[e],delete t[e])}}updatedConfig(){const t=this.getConfig(),e={};return e.className=this.getClassName(),e.config=t,e.kerasVersion="tfjs-layers 4.11.0",e.backend="TensorFlow.js",e}toJSON(t,e=!0){const s=py(this.updatedConfig());return e?JSON.stringify(s):s}call(t,e){return P(()=>{t=pt(t);const s=new Qr;for(let r=0;r<this.inputs.length;++r)s.add(this.inputs[r],t[r]);return Pu(this.outputs,s,e)})}computeMask(t,e){return P(()=>{let s;return t=pt(t),s=null==e?Vo(null,t.length):pt(e),this.runInternalGraph(t,s)[1]})}computeOutputShape(t){const e=zd(t);if(e.length!==this.inputLayers.length)throw new O(`Invalid inputShape argument ${t}: model has ${this.inputLayers.length} tensor inputs.`);const s={};for(let i=0;i<e.length;i++)s[this.inputLayers[i].name+"_0_0"]=e[i];const r=Object.keys(this.nodesByDepth).map(i=>parseInt(i,10)).sort(Dd);if(r.length>1)for(const i of r){const l=this.nodesByDepth[i];for(const u of l){const c=u.outboundLayer;if(-1!==this.inputLayers.map(g=>g.id).indexOf(c.id))continue;const h=[];for(let g=0;g<u.inboundLayers.length;g++)h.push(s[`${u.inboundLayers[g].name}_${u.nodeIndices[g]}_${u.tensorIndices[g]}`]);const p=zd(c.computeOutputShape(Bn(h))),f=c.inboundNodes.indexOf(u);for(let g=0;g<p.length;g++)s[`${c.name}_${f}_${g}`]=p[g]}}const o=[],a=[];for(let i=0;i<this.outputLayers.length;i++)a.push(`${this.outputLayers[i].name}_${this.outputLayersNodeIndices[i]}_${this.outputLayersTensorIndices[i]}`);for(let i=0;i<a.length;i++){const l=a[i];cs(l in s),o.push(s[l])}return Bn(o)}runInternalGraph(t,e){null==e&&(e=Vo(null,t.length));const s={};for(let l=0;l<this.inputs.length;++l)s[this.inputs[l].id]=[t[l],e[l]];const r=Object.keys(this.nodesByDepth).map(l=>parseInt(l,10)).sort(Dd);for(const l of r){const u=this.nodesByDepth[l];for(const c of u){const h=c.outboundLayer,d=c.inputTensors,p=c.outputTensors,f=new Array;for(const g of d)g.id in s&&f.push(s[g.id]);if(f.length===d.length){let m,y,b,w,g={};if(null!=c.callArgs&&(g=c.callArgs),1===f.length){const[x,S]=f[0];null==g.mask&&(g.mask=S),b=pt(h.call(x,g)),w=pt(h.computeMask(x,S)),m=[x],y=[S]}else m=f.map(x=>x[0]),y=f.map(x=>x[1]),null==g.mask&&(g.mask=y),b=pt(h.call(m,g)),w=pt(h.computeMask(m,y));if(h.activityRegularizer)throw new Pe("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let x=0;x<p.length;++x)s[p[x].id]=[b[x],w[x]]}}}const o=[],a=[],i=[];for(const l of this.outputs){cs(l.id in s,`Could not compute output ${l.name} : ${l.id}`);const[u,c]=s[l.id];i.push(u.shape),o.push(u),a.push(c)}return[o,a,i]}buildNodeConversionMap(t){const e={};let s;for(const r of this.layers){s=r instanceof Os?1:0;for(let o=0;o<r.inboundNodes.length;o++){const a=Os.nodeKey(r,o);this.containerNodes.has(a)&&(e[a]=s,s+=1)}}return e}getLayer(t,e){if(null!=e)return this.findLayer(e);if(null==t)throw new O("Provide either a layer name or layer index");if("number"==typeof t)return this.findLayer(t);for(const s of this.layers)if(s.name===t)return s;throw new O(`No such layer: ${t}`)}findLayer(t){if(this.layers.length<=t)throw new O(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);return this.layers[t]}calculateLosses(){return P(()=>{const t=[];for(const e of this.layers)for(let s=0;s<e.inboundNodes.length;++s){const r=Os.nodeKey(e,s);this.containerNodes.has(r)&&t.push(...e.calculateLosses())}return t})}getConfig(){const t={name:this.name},e=this.buildNodeConversionMap(this.layers),s=[];for(const a of this.layers){const i=a.getClassName(),l=a.getConfig(),u=[];for(let h=0;h<a.inboundNodes.length;h++){const d=a.inboundNodes[h],p=Os.nodeKey(a,h);let f={};if(this.containerNodes.has(p)){if(d.callArgs)try{JSON.stringify(d.callArgs),f=d.callArgs}catch{console.warn(`Layer ${a.name} was passed non-serializable keyword arguments: ${d.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),f={}}if(d.inboundLayers.length>0){const g=[];for(let m=0;m<d.inboundLayers.length;m++){const y=d.inboundLayers[m],w=d.tensorIndices[m];let S=e[Os.nodeKey(y,d.nodeIndices[m])];null==S&&(S=0),g.push([y.name,S,w,f])}u.push(g)}}}const c={};c.name=a.name,c.className=i,c.config=l,c.inboundNodes=u,s.push(c)}t.layers=s;const r=[];for(let a=0;a<this.inputLayers.length;a++){const i=this.inputLayers[a],u=Os.nodeKey(i,this.inputLayersNodeIndices[a]);if(!this.containerNodes.has(u))continue;let c=e[u];null==c&&(c=0),r.push([i.name,c,this.inputLayersTensorIndices[a]])}t.inputLayers=r;const o=[];for(let a=0;a<this.outputLayers.length;a++){const i=this.outputLayers[a],u=Os.nodeKey(i,this.outputLayersNodeIndices[a]);if(!this.containerNodes.has(u))continue;let c=e[u];null==c&&(c=0),o.push([i.name,c,this.outputLayersTensorIndices[a]])}return t.outputLayers=o,t}static fromConfig(t,e,s={},r=!1){const o={},a={};function i(m,y){m.name in a?a[m.name].push(y):a[m.name]=[y]}function l(m,y){const b=[];let w;for(const x of y){const S=x[0],I=x[1],k=x[2];if(w=null==x[3]?{}:x[3],!(S in o))return void i(m,y);const T=o[S];if(T.inboundNodes.length<=I)return void i(m,y);b.push(T.inboundNodes[I].outputTensors[k])}b.length>0&&m.apply(Bn(b),w)}function u(m){const y=m.name,b=Er(m,null!=e.customObjects?e.customObjects:{});b.setFastWeightInitDuringBuild(r),o[y]=b,m.inboundNodes.forEach(x=>{if(!(x instanceof Array))throw new O(`Corrupted configuration, expected array for nodeData: ${x}`);i(b,x)})}const c=e.name,h=e.layers;for(const m of h)u(m);for(;!WO(a);)for(const m of h){const y=o[m.name];if(y.name in a){const b=a[y.name];delete a[y.name];for(const w of b)l(y,w)}}const d=[],p=[],f=e.inputLayers;for(const m of f){const y=m[0],b=m[1],w=m[2];cs(y in o),d.push(o[y].inboundNodes[b].outputTensors[w])}const g=e.outputLayers;for(const m of g){const y=m[0],b=m[1],w=m[2];cs(y in o),p.push(o[y].inboundNodes[b].outputTensors[w])}return new t({inputs:d,outputs:p,name:c})}get stateful(){if(this._stateful)throw new O("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const t of this.layers)if(t.stateful)return!0;return!1}resetStates(){P(()=>{this.layers.forEach(t=>{t.stateful&&t.resetStates()})})}}function i1(n,t){return function a1(n,t,e){const s=t.length;if(null==n||Array.isArray(n)&&0===n.length)return t.map(r=>null);if(1===s)return Array.isArray(n)&&1===n.length?n:"object"==typeof n&&t[0]in n?[n[t[0]]]:[n];if(Array.isArray(n)){if(n.length!==s)throw new Error(`Provided ${e} is an array of ${n.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);return n}if("object"==typeof n&&Object.keys(n).length>0&&"object"==typeof n[Object.keys(n)[0]]){const r=[];return t.forEach(o=>{r.push(o in n?n[o]:null)}),r}throw new Error(`The model has multiple (${s}) outputs, so ${e} must be either an array with ${s} elements or an object with ${t} keys. Provided ${e} not understood: ${JSON.stringify(n)}`)}(n,t,"classWeight")}function l1(n,t,e,s){return my.apply(this,arguments)}function my(){return(my=(0,Y.Z)(function*(n,t,e,s){if(null!=t||null!=s)throw new Error("Support sampleWeight is not implemented yet");if(null!=e){const r=P(()=>{if(1===n.shape.length)return Hs(n);if(2===n.shape.length){if(n.shape[1]>1)return Wr(n,1);if(1===n.shape[1])return F(n,[n.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${n.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${n.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)}),o=Array.from(yield r.data());Ge(r);const a=[];return o.forEach(i=>{if(null==e[i])throw new Error(`classWeight must contain all classes in the training data. The class ${i} exists in the data but not in classWeight`);a.push(e[i])}),wn(a,"float32")}return null})).apply(this,arguments)}function iP(n,t){return D(n,t)}function u1(n,t){let e,s;e=t.xs,s=t.ys,C(null!=e&&null!=s,()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`);const o=c1("input",n.inputNames,e),a=c1("output",n.outputNames,s),i=o[0].shape[0];C(o.length===n.inputs.length,()=>`LayersModel has ${n.inputs.length} inputs, but the dataset provides ${o.length} inputs.  (Expected input keys: ${JSON.stringify(n.inputNames)})`),C(a.length===n.outputs.length,()=>`LayersModel has ${n.outputs.length} outputs, but the dataset provides ${a.length} outputs.  (Expected output keys: ${JSON.stringify(n.outputNames)})`);for(let l=0;l<o.length;l++)C(o[l].shape[0]===i,()=>`Batch size mismatch: input ${n.inputNames[l]} has ${o[l].shape[0]}; expected  ${i} based on input ${n.inputNames[0]}.`);for(let l=0;l<a.length;l++)C(a[l].shape[0]===i,()=>`Batch size mismatch: output ${n.outputNames[l]} has ${a[l].shape[0]}; expected  ${i} based on input ${n.inputNames[0]}.`);return{xs:o,ys:a}}function c1(n,t,e){if(e instanceof st)return[e];if(Array.isArray(e))return C(e.length===t.length,()=>`Received an array of ${e.length} Tensors, but expected ${t.length} to match the ${n} keys ${t}.`),e;{const s=[];for(const r of t){if(null==e[r])throw new O(`The feature data generated by the dataset lacks the required ${n} key '${r}'.`);s.push(e[r])}return s}}function gy(){return(gy=(0,Y.Z)(function*(n,t,e){const s=null!=e.batchesPerEpoch;if(C(null!=n.optimizer,()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."),C(null!=e,()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),C(null!=e.epochs&&e.epochs>0&&Number.isInteger(e.epochs),()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${e.epochs}`),C(!s||e.batchesPerEpoch>0&&Number.isInteger(e.batchesPerEpoch),()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${e.batchesPerEpoch}`),C(null==e.validationSplit,()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),n.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");n.isTraining=!0;try{const r=null!=e.validationData;let o,a;if(r)if(h1(e.validationData))C(null==e.validationBatches||e.validationBatches>0&&Number.isInteger(e.validationBatches),()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${e.validationBatches}`);else{const m=function uP(n){if(3===n.length)throw new Pe("Validation with sample weights is not implemented yet.");return{xs:n[0],ys:n[1]}}(e.validationData);o=m.xs,a=m.ys}const i=n.makeTrainFunction(),l=n.getDedupedMetricsNames();let u;u=r?l.slice().concat(l.map(m=>"val_"+m)):l.slice();const c=Xv(e.callbacks,e.yieldEvery),h=null==e.verbose?1:e.verbose,{callbackList:d,history:p}=Zv(c,h,e.epochs,null,null,function hP(n,t){let e=null;return null!=t.batchesPerEpoch?e=t.batchesPerEpoch:Number.isFinite(n.size)&&(e=n.size),e}(t,e),null,r,u);d.setModel(n),n.history=p,yield d.onTrainBegin(),n.stopTraining_=!1;let f=null==e.initialEpoch?0:e.initialEpoch,g=yield t.iterator();for(;f<e.epochs;){const m={};yield d.onEpochBegin(f);let y=0,b=0;for(s||(g=yield t.iterator());!s||y<e.batchesPerEpoch;){const w=yield g.next();if(s&&w.done){console.warn(`You provided \`batchesPerEpoch\` as ${e.batchesPerEpoch}, but your dataset iterator ran out of data after ${y} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, ${e.batchesPerEpoch*e.epochs} batches). You may need to use the repeat() function when building your dataset.`);break}if(null!=w.value){const{xs:x,ys:S}=u1(n,w.value),I={};I.batch=b,I.size=x[0].shape[0],yield d.onBatchBegin(b,I);const k=[];if(null!=e.classWeight){const E=i1(e.classWeight,n.outputNames);for(let L=0;L<E.length;++L)k.push(yield l1(S[L],null,E[L]))}const T=x.concat(S).concat(k),_=i(T);Ge(T);for(let E=0;E<l.length;++E){const B=_[E];I[l[E]]=B,Yt(B)}yield d.onBatchEnd(b,I),Kv(I),b++,y++}if(s?y>=e.batchesPerEpoch:w.done){if(r){let x;x=h1(e.validationData)?pt(yield n.evaluateDataset(e.validationData,{batches:e.validationBatches})):pt(n.evaluate(o,a,{batchSize:null==e.validationBatchSize?32:e.validationBatchSize,verbose:0}));for(let S=0;S<n.metricsNames.length;++S)m[`val_${n.metricsNames[S]}`]=x[S]}break}if(n.stopTraining_)break}if(yield d.onEpochEnd(f,m),f++,n.stopTraining_)break}return yield d.onTrainEnd(),yield n.history.syncData(),n.history}finally{n.isTraining=!1}})).apply(this,arguments)}function h1(n){return"function"==typeof n.iterator}function yy(){return(yy=(0,Y.Z)(function*(n,t,e){const s=null!=(e=e||{}).batches,r=n.testFunction;let o=[];if(e.verbose>0)throw new Pe("Verbose mode is not implemented yet.");C(!s||e.batches>0&&Number.isInteger(e.batches),()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(e.batches)}`);const a=function dP(n){return"function"==typeof n.next}(t)?t:yield t.iterator();let i=0,l=0;for(;!s||l<e.batches;){const u=yield a.next();if(o=P(()=>{if(u.value){const{xs:c,ys:h}=u1(n,u.value),d=c.concat(h),p=P(()=>r(d));if(Ge(d),0===l)for(let g=0;g<p.length;++g)o.push(Ce(0));const f=d[0].shape[0];for(let g=0;g<p.length;++g){const m=p[g],y=o[g];o[g]=P(()=>ee(o[g],D(f,m))),l>0&&Ge(y)}Ge(p),i+=f,++l}return o}),u.done){s&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${e.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let u=0;u<o.length;++u){const c=o[u];o[u]=ke(o[u],i),Ge(c)}return Bn(o)})).apply(this,arguments)}function by(n){C(n>0&&Number.isInteger(n),()=>`batchSize is required to be a positive integer, but got ${n}`)}function Bu(n,t,e){return null==n?[null]:Array.isArray(n)?n.map(s=>Ho(s,t,e-t)):Ho(n,t,e-t)}function xy(n,t){return P(()=>null==n?null:Array.isArray(n)?n.map(e=>xy(e,t)):Rv(n,"int32"===t.dtype?t:ue(t,"int32")))}function wy(n,t){const e=[];let s=0,r=null;for(;s<n;)r=s+t,r>=n&&(r=n),e.push([s,r]),s=r;return e}function d1(n){const t=[];n instanceof st&&(n=[n]);for(let e=0;e<n.length;++e){const s=n[e];if(1===s.rank)t.push(Fu(s,1));else{if(0===s.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(s)}}return t}function Ls(n,t){if(null==n)return;const e=[];if(t instanceof st)e.push(t.id);else if(Array.isArray(t))t.forEach(r=>e.push(r.id));else if(null!=t)for(const r in t)e.push(t[r].id);const s=[];if(n instanceof st)-1===e.indexOf(n.id)&&s.push(n);else if(Array.isArray(n))n.forEach(r=>{-1===e.indexOf(r.id)&&s.push(r)});else if(null!=n)for(const r in n){const o=n[r];-1===e.indexOf(o.id)&&s.push(o)}s.forEach(r=>{r.isDisposed||r.dispose()})}function vy(n){return Array.isArray(n)}function p1(n){return!function fP(n){return n instanceof st}(n)&&!vy(n)}function f1(n,t,e,s=!0,r=""){if(null==t||0===t.length){if(null!=n){let a=!1;if(vy(n)&&n.length>0)a=!0;else if(p1(n)){for(const i in n)if(n.hasOwnProperty(i)){a=!0;break}}else a=!0;if(a)throw new O(`Error when checking model ${r} expected no data, but got ${n}`)}return[]}if(null==n)return t.map(a=>null);let o;if(p1(n)){o=[];for(const a of t){if(null==n[a])throw new O(`No data provided for "${a}". Need data for each key in: ${t}`);o.push(n[a])}}else if(vy(n)){if(n.length!==t.length)throw new O(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${n}`);o=n}else{if(t.length>1)throw new O(`The model ${r} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${n.shape}`);o=[n]}if(o=d1(o),null!=e)for(let a=0;a<t.length;++a){if(null==e[a])continue;const i=o[a];if(i.shape.length!==e[a].length)throw new O(`Error when checking ${r}: expected ${t[a]} to have ${e[a].length} dimension(s). but got array with shape ${i.shape}`);for(let l=0;l<e[a].length;++l){if(0===l&&!s)continue;const c=e[a][l];if(null!=c&&c>=0&&i.shape[l]!==c)throw new O(`${r} expected a batch of elements where each example has shape [${e[a].slice(1,e[a].length)}] (i.e.,tensor shape [*,${e[a].slice(1,e[a].length)}]) but the ${r} received an input with ${i.shape[0]} examples, each with shape [${i.shape.slice(1,i.shape.length)}] (tensor shape [${i.shape}])`)}}return o}function m1(n,t,e,s=!0,r=""){let o;if(Array.isArray(n)){if(n.length!==t.length)throw new O(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${n.length} Tensors(s).`);o=n}else{if(t.length>1)throw new O(`The model expects ${t.length} ${r} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(n.shape)}.`);o=[n]}if(null!=e)for(let a=0;a<t.length;++a){if(null==e[a])continue;const i=o[a];if(i.shape.length!==e[a].length)throw new O(`Error when checking ${r}: expected ${t[a]} to have ${e[a].length} dimension(s), but got array with shape ${JSON.stringify(i.shape)}`);for(let l=0;l<e[a].length;++l){if(0===l&&!s)continue;const c=e[a][l];if(null!=c&&c!==i.shape[l])throw new O(`Error when checking ${r}: expected ${t[a]} to have shape ${JSON.stringify(e[a])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}let Ni=(()=>{class n extends Os{constructor(e){super(e),this.isTraining=!1}summary(e,s,r=console.log){if(!this.built)throw new O("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");!function tP(n,t,e,s=console.log){const r=function sP(n){let t=!0;const e=[],s=[];for(const r in n.nodesByDepth)e.push(n.nodesByDepth[r]);for(const r of e){if(r.length>1||1===r.length&&r[0].inboundLayers.length>1){t=!1;break}s.push(...r)}if(t)for(const r of n.layers){let o=!1;for(const a of r.inboundNodes)if(-1!==s.indexOf(a)){if(o){t=!1;break}o=!0}if(!t)break}return t}(n),o=["Layer (type)","Input Shape","Output shape","Param #"];let a;if(r?(t=t||90,e=e||[.32,.61,.89,1]):(t=t||115,e=e||[.24,.48,.7,.8,1]),e[e.length-1]<=1&&(e=e.map(c=>Math.floor(t*c))),!r){o.push("Receives inputs"),a=[];for(const c in n.nodesByDepth)a.push(...n.nodesByDepth[c])}s("_".repeat(t)),Qd(o,e,s),s("=".repeat(t));const i=n.layers;for(let c=0;c<i.length;++c)r?rP(i[c],e,s):oP(i[c],e,a,s),s((c===i.length-1?"=":"_").repeat(t));n.checkTrainableWeightsConsistency();const l=function nP(n){let t;return t=Bd(null!=n.collectedTrainableWeights?n.collectedTrainableWeights:n.trainableWeights),t}(n),u=Bd(n.nonTrainableWeights);s(`Total params: ${l+u}`),s(`Trainable params: ${l}`),s(`Non-trainable params: ${u}`),s("_".repeat(t))}(this,e,s,r)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function eP(n){const t={Adagrad:()=>Mo.adagrad(.01),Adadelta:()=>Mo.adadelta(1,.95,Qt()),Adam:()=>Mo.adam(.001,.9,.999,Qt()),Adamax:()=>Mo.adamax(.002,.9,.999,Qt(),0),RMSProp:()=>Mo.rmsprop(.001,.9,0,Qt()),SGD:()=>Mo.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,n in t)return t[n]();throw new O(`Unknown Optimizer ${n}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof fr))throw new O("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let s=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new O(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);s=e.loss.map(l=>cy(l))}else{const i=cy(e.loss);this.outputs.forEach(l=>{s.push(i)})}else{e.loss=e.loss;for(const i in e.loss)if(-1===this.outputNames.indexOf(i))throw new O(`Unknown entry in loss dictionary: "${i}". Only expected the following keys: ${this.outputNames}`);for(const i of this.outputNames)null==e.loss[i]&&console.warn(`Output "${i}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${i} during training`),s.push(cy(e.loss[i]))}this.lossFunctions=s,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let i=0;i<this.outputs.length;++i){const l=this.internalOutputShapes[i];this.feedOutputNames.push(this.outputNames[i]),this.feedOutputShapes.push(l),this.feedLossFns.push(this.lossFunctions[i])}const r=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],Go("loss",()=>{for(let i=0;i<this.outputs.length;++i)-1===r.indexOf(i)&&this.outputs.length>1&&(this.metricsTensors.push([this.lossFunctions[i],i]),this.metricsNames.push(this.outputNames[i]+"_loss"))});const o=function yP(n,t){if(null==n||Array.isArray(n)&&0===n.length)return t.map(s=>[]);let e;if("string"==typeof n||"function"==typeof n)e=[n];else{if(!Array.isArray(n)&&"object"!=typeof n)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${n}`);e=n}if(Array.isArray(e))return t.map(s=>e);{const s=[];for(const r of t){let o=e.hasOwnProperty(r)?e[r]:[];Array.isArray(o)||(o=[o]),s.push(o)}return s}}(e.metrics,this.outputNames),a=(i,l,u)=>{this.outputNames.length>1&&(l=this.outputNames[i]+"_"+l),this.metricsNames.push(l),this.metricsTensors.push([u,i])};Go("metric",()=>{for(let i=0;i<this.outputs.length;++i)-1===r.indexOf(i)&&(c=>{let d,p,f;for(const g of c){if("string"==typeof g&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(g)){const y=this.internalOutputShapes[i];let b;1===y[y.length-1]||this.lossFunctions[i]===Kd?-1!==["accuracy","acc"].indexOf(g)?p=Qv:-1!==["crossentropy","ce"].indexOf(g)&&(p=GL):this.lossFunctions[i]===qd?-1!==["accuracy","acc"].indexOf(g)?p=HL:-1!==["crossentropy","ce"].indexOf(g)&&(p=n1):-1!==["accuracy","acc"].indexOf(g)?p=Jv:-1!==["crossentropy","ce"].indexOf(g)&&(p=t1),-1!==["accuracy","acc"].indexOf(g)?b="acc":-1!==["crossentropy","ce"].indexOf(g)&&(b="ce"),f=p,d=""+b}else f=JL(g),d=""+Yd(g);let m;Go(d,()=>{m=f}),a(i,d,m)}})(o[i])}),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,s,r={}){const o=null==r.batchSize?32:r.batchSize;by(o);const i=this.standardizeUserDataXY(e,s,!0,o);try{const l=i[0].concat(i[1]);return this.makeTestFunction(),Bn(this.testLoop(this.testFunction,l,o,r.verbose,r.steps))}finally{Ls(i[0],e),Ls(i[1],s)}}evaluateDataset(e,s){var r=this;return(0,Y.Z)(function*(){return r.makeTestFunction(),function pP(n,t,e){return yy.apply(this,arguments)}(r,e,s)})()}checkNumSamples(e,s,r,o="steps"){let a;if(null!=r){if(a=null,null!=s)throw new O(`If ${o} is set, batchSize must be null or undefined.Got batchSize = ${s}`)}else{if(null==e)throw new O(`Either the input data should have a defined shape, or ${o} shoud be specified.`);a=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return a}execute(e,s){if(Array.isArray(s)&&0===s.length)throw new O("`outputs` is an empty Array, which is not allowed.");const r=Array.isArray(s),a=this.retrieveSymbolicTensors(r?s:[s]),i=new Qr;if(e instanceof st&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new O(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let u=0;u<this.inputs.length;++u)i.add(this.inputs[u],e[u])}else for(const u of this.inputs){const c=e[u.name];if(null==c)throw new O(`No value is provided for the model's input ${u.name}`);i.add(u,c)}const l=Pu(a,i);return r?l:l[0]}retrieveSymbolicTensors(e){const s=Vo(null,e.length);let r=e.length;for(const o of this.layers){const a=Array.isArray(o.output)?o.output:[o.output],i=a.map(l=>l.name);for(let l=0;l<e.length;++l){const u=i.indexOf(e[l]);if(-1!==u&&(s[l]=a[u],r--),0===r)break}if(0===r)break}if(r>0){const o=[];throw s.forEach((a,i)=>{null==a&&o.push(e[i])}),new O(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(o)}`)}return s}predictLoop(e,s=32,r=!1){return P(()=>{const o=this.checkNumSamples(e);if(r)throw new Pe("Verbose predictLoop() is not implemented yet.");const a=wy(o,s),i=this.outputs.map(l=>[]);for(let l=0;l<a.length;++l)P(()=>{const d=Bu(e,a[l][0],a[l][1]),p=[];if(Array.isArray(d))for(let g=0;g<d.length;++g)p.push({key:this.inputs[g],value:d[g]});else p.push({key:this.inputs[0],value:d});const f=new Qr(p);return Pu(this.outputs,f)}).forEach((c,h)=>i[h].push(c));return Bn(i.map(l=>Pt(l,0)))})}predict(e,s={}){const r=d1(e);m1(r,this.inputNames,this.feedInputShapes,!1);try{const o=null==s.batchSize?32:s.batchSize;return by(o),this.predictLoop(r,o)}finally{Ls(r,e)}}predictOnBatch(e){m1(e,this.inputNames,this.feedInputShapes,!0);const s=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,s)}standardizeUserDataXY(e,s,r=!0,o){if(null==this.optimizer_)throw new bs("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const a=[];for(let i=0;i<this.feedOutputShapes.length;++i){const l=this.feedOutputShapes[i];a.push(this.feedLossFns[i]===qd?l.slice(0,l.length-1).concat([1]):l)}if(function mP(n,t,e){const s=Xr(n.map(o=>o.shape[0]));s.sort();const r=Xr(t.map(o=>o.shape[0]));if(r.sort(),s.length>1)throw new O(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(n.map(o=>o.shape))}`);if(r.length>1)throw new O(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map(o=>o.shape))}`);if(s.length>0&&r.length>0&&!Xe(s,r))throw new O(`Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${r[0]} target sample(s).`)}(e=f1(e,this.feedInputNames,this.feedInputShapes,!1,"input"),s=f1(s,this.feedOutputNames,a,!1,"target")),function gP(n,t,e){const s=[jd,Kd,zu];for(let r=0;r<n.length;++r){const o=n[r],a=t[r],i=e[r];if(null!=a){if(a===zu&&1===o.shape[o.shape.length-1])throw new O(`You are passing a target array of shape ${o.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==s.indexOf(a)){const l=o.shape.slice(1),u=i.slice(1);for(let c=0;c<l.length;++c){const d=u[c];if(null!=d&&l[c]!==d)throw new O(`A target Tensor with shape ${o.shape} was passed for an output of shape ${i}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(s,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=o&&o>0&&e[0].shape[0]%o!=0)throw new O(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${o}. Found: ${e[0].shape[0]} sample(s).`);return[e,s]}standardizeUserData(e,s,r,o,a=!0,i){var l=this;return(0,Y.Z)(function*(){const[u,c]=l.standardizeUserDataXY(e,s,a,i);if(null!=r)throw new Error("sample weight is not supported yet.");let h=null;if(null!=o){const d=i1(o,l.outputNames);h=[];for(let p=0;p<d.length;++p)h.push(yield l1(c[p],null,d[p]))}return[u,c,h]})()}testLoop(e,s,r,o=0,a){return P(()=>{const i=this.checkNumSamples(s,r,a,"steps"),l=[];if(o>0)throw new Pe("Verbose mode is not implemented yet.");if(null!=a)throw new Pe("steps mode in testLoop() is not implemented yet");{const u=wy(i,r),c=wn(Rs(0,i));for(let h=0;h<u.length;++h){const d=u[h][0],p=u[h][1],f=Ho(c,d,p-d),g=xy(s,f),m=e(g);if(0===h)for(let y=0;y<m.length;++y)l.push(Ce(0));for(let y=0;y<m.length;++y)l[y]=ee(l[y],D(p-d,m[y]))}for(let h=0;h<l.length;++h)l[h]=ke(l[h],i)}return l})}getDedupedMetricsNames(){const e=this.metricsNames,s=[];for(let r=0;r<e.length;++r){const o=e[r];let a=o;vv(e,o)>1&&(a+=`_${vv(e.slice(0,r),o)}`),s.push(a)}return s}makeTrainFunction(){return e=>{const s=[],r=e.slice(0,this.inputs.length),o=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),i=[],u=this.collectedTrainableWeights.map(d=>d.read());return[this.optimizer_.minimize(()=>{const d=[];for(let m=0;m<this.inputs.length;++m)d.push({key:this.inputs[m],value:r[m]});const p=new Qr(d),f=Pu(this.outputs,p,{training:!0});let g;for(let m=0;m<this.lossFunctions.length;++m){let b=(0,this.lossFunctions[m])(o[m],f[m]);null!=a[m]&&(b=iP(b,a[m]));const w=$t(b);s.push(w),g=0===m?b:ee(g,b)}for(let m=0;m<this.metricsTensors.length;++m){let y;if(this.outputs.length>1&&m<this.outputs.length)y=s[m];else{const w=this.metricsTensors[m][1];y=$t((0,this.metricsTensors[m][0])(o[w],f[w]))}Yt(y),i.push(y)}return g=$t(g),this.calculateLosses().forEach(m=>{g=ee(g,m)}),g},!0,u)].concat(i)}}makeTestFunction(){this.testFunction=e=>P(()=>{const s=[];let r;const o=e.slice(0,this.inputs.length),a=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),i=[];for(let c=0;c<this.inputs.length;++c)i.push({key:this.inputs[c],value:o[c]});const l=new Qr(i),u=Pu(this.outputs,l);for(let c=0;c<this.lossFunctions.length;++c){const d=$t((0,this.lossFunctions[c])(a[c],u[c]));r=0===c?d:ee(r,d),s.push(r)}for(let c=0;c<this.metricsTensors.length;++c){const d=this.metricsTensors[c][1],p=$t((0,this.metricsTensors[c][0])(a[d],u[d]));s.push(p)}return s})}fit(e,s,r={}){var o=this;return(0,Y.Z)(function*(){if(o.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let a,i,l,u,c,h,d,p,f;o.isTraining=!0;try{const g=null==r.batchSize?32:r.batchSize;by(g);const m=!1,y=yield o.standardizeUserData(e,s,r.sampleWeight,r.classWeight,m,g);a=y[0],i=y[1],f=y[2];let w,b=!1;if(null!=r.validationData&&r.validationData.length>0){if(b=!0,2!==r.validationData.length)throw 3===r.validationData.length?new Pe("validationData including sample weights is not supported yet."):new O(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${r.validationData} is invalid.`);c=r.validationData[0],h=r.validationData[1];const L=!0,B=yield o.standardizeUserData(c,h,null,null,L,g);d=B[0],p=B[1],w=d.concat(p)}else if(null!=r.validationSplit&&r.validationSplit>0&&r.validationSplit<1){b=!0;const L=Math.floor(a[0].shape[0]*(1-r.validationSplit)),B=a[0].shape[0];d=Bu(a,L,B),l=a,a=Bu(a,0,L),p=Bu(i,L,B),u=i,i=Bu(i,0,L),w=d.concat(p)}else null!=r.validationSteps&&(b=!0);const x=a.concat(i).concat(f);o.checkTrainableWeightsConsistency();const S=o.makeTrainFunction(),I=o.getDedupedMetricsNames();let k,T;b?(o.makeTestFunction(),k=o.testFunction,T=I.slice().concat(I.map(L=>"val_"+L))):(k=null,w=[],T=I.slice());const _=Xv(r.callbacks,r.yieldEvery);return yield o.fitLoop(S,x,I,g,r.epochs,r.verbose,_,k,w,r.shuffle,T,r.initialEpoch,null,null)}finally{o.isTraining=!1,Ls(a,e),Ls(i,s),Ls(l,e),Ls(u,s),Ls(d,c),Ls(p,h),null!=f&&Ge(f)}})()}fitLoop(e,s,r,o,a,i,l,u,c,h,d,p,f,g){var m=this;return(0,Y.Z)(function*(){null==o&&(o=32),null==a&&(a=1),null==h&&(h=!0),null==p&&(p=0);let y=!1;if(null!=u&&null!=c&&(y=!0),null!=g&&(y=!0,null==f))throw new O("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const b=m.checkNumSamples(s,o,f,"steps_per_epoch");let w;null!=b&&(w=Rs(0,b)),null==i&&(i=1);const{callbackList:x,history:S}=Zv(l,i,a,p,b,f,o,y,d);x.setModel(m),m.history=S,yield x.onTrainBegin(),m.stopTraining_=!1;for(let I=p;I<a;++I){yield x.onEpochBegin(I);const k={};if(null!=f)throw new Pe("stepsPerEpoch mode is not implemented yet.");{if("batch"===h)throw new Pe("batch shuffling is not implemneted yet");h&&Lp(w);const T=wn(w),_=wy(b,o);for(let E=0;E<_.length;++E){const L={};if(yield x.onBatchBegin(E,L),P(()=>{const B=_[E][0],W=_[E][1],U=Ho(T,B,W-B);L.batch=E,L.size=W-B;const G=xy(s,U),K=e(G);for(let X=0;X<r.length;++X){const Z=K[X];L[r[X]]=Z,Yt(Z)}if(E===_.length-1&&y){const X=m.testLoop(u,c,o);for(let H=0;H<r.length;++H){const Z=r[H],se=X[H];Yt(se),k["val_"+Z]=se}}}),yield x.onBatchEnd(E,L),Kv(L),m.stopTraining_)break}T.dispose()}if(yield x.onEpochEnd(I,k),m.stopTraining_)break}return yield x.onTrainEnd(),yield m.history.syncData(),m.history})()}fitDataset(e,s){var r=this;return(0,Y.Z)(function*(){return function cP(n,t,e){return gy.apply(this,arguments)}(r,e,s)})()}trainOnBatch(e,s){var r=this;return(0,Y.Z)(function*(){const o=yield r.standardizeUserData(e,s),a=o[0],i=o[1],u=r.makeTrainFunction()(a.concat(i)),c=[];for(const h of u){const d=yield h.data();c.push(d[0])}return Ge(u),Ls(o[0],e),Ls(o[1],s),Bn(c)})()}getNamedWeights(e){const s=[],r=null!=e&&e.trainableOnly,o=r?this.trainableWeights:this.weights,a=this.getWeights(r);for(let i=0;i<o.length;++i)r&&!o[i].trainable||s.push({name:o[i].originalName,tensor:a[i]});return s}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const s=Nh().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=s-Nh().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=_r(this.loss);else if(Array.isArray(this.loss)){for(const s of this.loss)if("string"!=typeof s)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map(s=>_r(s))}else{const s=Object.keys(this.loss);e={};const r=this.loss;for(const o of s){if("string"!=typeof r[o])throw new Error("Serialization of non-string loss is not supported.");e[o]=_r(r[o])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[_r(Yd(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map(e=>_r(Yd(e)));{const e={};for(const s in this.metrics)e[s]=_r(Yd(this.metrics[s]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const r=Er(dy(e.optimizer_config));let o,a;if("string"==typeof e.loss)o=Wo(e.loss);else if(Array.isArray(e.loss))o=e.loss.map(i=>Wo(i));else if(null!=e.loss){o={};for(const i in e.loss)o[i]=Wo(e.loss[i])}if(Array.isArray(e.metrics))a=e.metrics.map(i=>Wo(i));else if(null!=e.metrics){a={};for(const i in e.metrics)a[i]=Wo(e.metrics[i])}this.compile({loss:o,metrics:a,optimizer:r})}save(e,s){var r=this;return(0,Y.Z)(function*(){if("string"==typeof e){const h=cx(e);if(0===h.length)throw new O(`Cannot find any save handlers for URL '${e}'`);if(h.length>1)throw new O(`Found more than one (${h.length}) save handlers for URL '${e}'`);e=h[0]}if(null==e.save)throw new O("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const o=yield nf(r.getNamedWeights(s)),u={modelTopology:r.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v4.11.0",convertedBy:null};if(null!=s&&s.includeOptimizer&&null!=r.optimizer){u.trainingConfig=r.getTrainingConfig();const h="optimizer",{data:d,specs:p}=yield nf(yield r.optimizer.getWeights(),h);o.specs.push(...p),o.data=ox([o.data,d])}return null!=r.userDefinedMetadata&&(r1(r.userDefinedMetadata,r.name,!0),u.userDefinedMetadata=r.userDefinedMetadata),u.weightData=o.data,u.weightSpecs=o.specs,e.save(u)})()}setUserDefinedMetadata(e){r1(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}return n.className="Model",n})();ne(Ni),ne((()=>{class n extends Ni{}return n.className="Functional",n})()),ne((()=>{class n extends Ni{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:Od("sequential_"),null!=e.layers)for(const s of e.layers)this.add(s)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some(r=>r<0))throw new O(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const s=e instanceof n||e instanceof Ni;let r;if(s){if(r=e,1!==r.outputs.length)throw new O("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==r.inputs.length)throw new O("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new O("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const o=function wL(n){if(null==n.batchShape&&null==n.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=n.batchShape&&null!=n.shape)throw new O("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=n.batchShape;null!=n.shape&&null==t&&(t=[null].concat(n.shape));let e=n.dtype;return null==e&&(e="float32"),new Wd({batchInputShape:t,name:n.name,dtype:e,sparse:n.sparse}).inboundNodes[0].outputTensors[0]}({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(o)}if(s)this.outputs=r.outputs,this.inputs=r.inputs;else{if(1!==e.inboundNodes.length)throw new O(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new O("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=Gv(this.outputs[0])}this.inboundNodes=[],new Vd({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:Vo(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(o=>o.shape),outputShapes:this.outputs[0].shape})}else{const o=e.apply(this.outputs[0]);if(Array.isArray(o))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[o],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,s){return null==this.model&&this.build(),this.model.call(e,s)}build(e){if(rt(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new Ni({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,s,r=console.log){this.built||this.build(),super.summary(e,s,r)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,s,r={}){if(!this.built)throw new bs("The model needs to be compiled before being used.");return this.model.evaluate(e,s,r)}evaluateDataset(e,s){var r=this;return(0,Y.Z)(function*(){if(!r.built)throw new bs("The model needs to be compiled before being used.");return r.model.evaluateDataset(e,s)})()}predict(e,s={}){return null==this.model&&this.build(),this.model.predict(e,s)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}fit(e,s,r={}){var o=this;return(0,Y.Z)(function*(){if(!o.built)throw new bs("The model needs to be compiled before being used.");return o.model.fit(e,s,r)})()}fitDataset(e,s){var r=this;return(0,Y.Z)(function*(){if(!r.built)throw new bs("The model needs to be compiled before being used.");return r.model.fitDataset(e,s)})()}trainOnBatch(e,s){var r=this;return(0,Y.Z)(function*(){return r.model.trainOnBatch(e,s)})()}static fromConfig(e,s,r={},o=!1){let a,i={};if(s instanceof Array){if(null==s[0].className||"Merge"===s[0].className)throw new O("Legacy serialization format not supported yet.");a=s}else C(null!=s.layers,()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),a=s.layers,delete s.layers,i=s;const l=new e(i);if(!(l instanceof n))throw new Pe(`Sequential.fromConfig called on non-Sequential input: ${l}`);for(const u of a){const h=Er(u,void 0,o);o&&h.setFastWeightInitDuringBuild(!0),l.add(h)}return l}set stopTraining(e){if(null==this.model)throw new O("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new O("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const s of this.layers){const r={};r.className=s.getClassName(),r.config=s.getConfig(),e.push(r)}return{name:this.name,layers:e}}}return n.className="Sequential",n})());class Vn extends ko{getConfig(){return{}}}ne((()=>{class n extends Vn{apply(e,s=1){return function oL(n,t=1){if(1!==t)throw new Pe(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return li(n)}(e,s)}}return n.className="elu",n})()),ne((()=>{class n extends Vn{apply(e){return Kh(e)}}return n.className="selu",n})()),ne((()=>{class n extends Vn{apply(e){return _s(e)}}return n.className="relu",n})()),ne((()=>{class n extends Vn{apply(e){return P(()=>qr(6,_s(e)))}}return n.className="relu6",n})()),ne((()=>{class n extends Vn{apply(e){return e}}return n.className="linear",n})()),ne((()=>{class n extends Vn{apply(e){return os(e)}}return n.className="sigmoid",n})()),ne((()=>{class n extends Vn{apply(e){return function iL(n){return P(()=>{const t=ee(.5,D(.2,n));return Fn(t,0,1)})}(e)}}return n.className="hardSigmoid",n})()),ne((()=>{class n extends Vn{apply(e){return Oo(e)}}return n.className="softplus",n})()),ne((()=>{class n extends Vn{apply(e){return function aL(n){return P(()=>ke(n,ee(Ht(n),1)))}(e)}}return n.className="softsign",n})()),ne((()=>{class n extends Vn{apply(e){return Ro(e)}}return n.className="tanh",n})());let g1=(()=>{class n extends Vn{apply(e,s=-1){return Cu(e,s)}}return n.className="softmax",n})();function eo(n){return n.getClassName()}function Ny(n,t={}){return Ru(n,rs.getMap().classNameMap,t,"activation")}function to(n){if(null==n){return Ny({className:"linear",config:{}})}if("string"==typeof n){const t={};return t.className=n,t.config={},Ny(t)}return n instanceof Vn?n:Ny(n)}ne(g1),ne((()=>{class n extends Vn{apply(e,s=-1){return zh(e,s)}}return n.className="logSoftmax",n})()),ne((()=>{class n extends Vn{apply(e,s=1){return P(()=>D(os(D(e,s)),e))}}return n.className="swish",n})()),ne((()=>{class n extends Vn{apply(e){return P(()=>D(e,Ro(Oo(e))))}}return n.className="mish",n})());class y1 extends ko{}ne((()=>{class n extends y1{constructor(e){super(),function ky(n){if(null!=n&&"object"!=typeof n)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${n}`)}(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return P(()=>{let s=Kt([1]);return this.hasL1&&(s=ee(s,we(D(this.l1,Ht(e))))),this.hasL2&&(s=ee(s,we(D(this.l2,Ou(e))))),F(s,[])})}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,s){return new e({l1:s.l1,l2:s.l2})}}return n.className="L1L2",n})());const b1={l1l2:"L1L2"};function gt(n){return Zg(n)}function x1(n,t={}){return Ru(n,rs.getMap().classNameMap,t,"regularizer")}function Ct(n){return null==n?null:"string"==typeof n?x1({className:n in b1?b1[n]:n,config:{}}):n instanceof y1?n:x1(n)}function ki(n,t,e){if("number"==typeof n)return Vo(n,t);if(n.length!==t)throw new O(`The ${e} argument must be an integer or tuple of ${t} integers. Received: ${n.length} elements.`);for(let s=0;s<t;++s){const r=n[s];if(!JO(r))throw new O(`The ${e} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(n)} including a non-integer number ${r}`)}return n}function Ps(n,t,e,s,r=1){if(null==n)return n;let a;return a="same"===e?n:n-(t+(t-1)*(r-1))+1,Math.floor((a+s-1)/s)}function rr(n,t,e,s){if(null==n)return null;if("valid"===s)n=n*t+Yr([e-t,0]);else{if("same"!==s)throw new O(`Unsupport padding mode: ${s}.`);n*=t}return n}function _y(n,t){return P(()=>(Bt(t),"channelsFirst"===t?Ze(n,[0,2,3,1]):n))}function w1(n,t){return P(()=>(Bt(t),"channelsFirst"===t?Ze(n,[0,2,3,4,1]):n))}function Ey(n,t,e,s=[1,1],r="valid",o,a,i=null){return P(()=>{if(null==o&&(o="channelsLast"),Bt(o),3!==n.rank&&4!==n.rank)throw new O(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${n.rank}.`);if(3!==t.rank&&4!==t.rank)throw new O(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${n.rank}.`);let l=_y(n,o);if("causal"===r)throw new Pe("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=O0({x:l,filter:t,strides:s,pad:"same"===r?"same":"valid",dilations:a,dataFormat:"NHWC",bias:e,activation:i}),"channelsFirst"===o&&(l=Ze(l,[0,3,1,2])),l})}ne((()=>{class n extends qe{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,s){e=De(e);let r=_s(e);return null!=this.maxValue&&(r=Fn(r,0,this.maxValue)),r}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},s=super.getConfig();return Object.assign(e,s),e}}return n.className="ReLU",n})()),ne((()=>{class n extends qe{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,s){const r=De(e);return fu(r,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},s=super.getConfig();return Object.assign(e,s),e}}return n.className="LeakyReLU",n})()),ne((()=>{class n extends qe{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=It(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=Ct(e.alphaRegularizer),this.alphaConstraint=tn(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new O(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const s=(e=rt(e)).slice(1);if(null!=this.sharedAxes)for(const o of this.sharedAxes)s[o-1]=1;this.alpha=this.addWeight("alpha",s,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const r={};if(null!=this.sharedAxes)for(let o=1;o<e.length;++o)r[o]=e[o];this.inputSpec=[new Jt({ndim:e.length,axes:r})],this.built=!0}call(e,s){return e=De(e),vu(e,this.alpha.read())}getConfig(){const e={alphaInitializer:At(this.alphaInitializer),alphaRegularizer:gt(this.alphaRegularizer),alphaConstraint:en(this.alphaConstraint),sharedAxes:this.sharedAxes},s=super.getConfig();return Object.assign(e,s),e}}return n.className="PReLU",n})()),ne((()=>{class n extends qe{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new Pe(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,s){const r=De(e);return li(r)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},s=super.getConfig();return Object.assign(e,s),e}}return n.className="ELU",n})()),ne((()=>{class n extends qe{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,s){const r=De(e);return D(r,ue(_n(r,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},s=super.getConfig();return Object.assign(e,s),e}}return n.className="ThresholdedReLU",n})()),ne((()=>{class n extends qe{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new g1).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,s){return P(()=>{let r=De(e);const o=s.mask;if(null!=o){const a=D(ye(Ln(r.shape),ue(o,r.dtype)),Ce(-1e9));r=ee(r,a)}return this.axis instanceof Array?this.axis.length>1?On(ye(r,gu(r,this.axis,!0))):this.softmax(r,this.axis[0]):this.softmax(r,this.axis)})}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Softmax",n})());class Jd extends qe{constructor(t,e){if(super(e),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",Jd.verifyArgs(e),this.rank=t,un(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new Pe(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=ki(e.kernelSize,t,"kernelSize"),this.strides=ki(null==e.strides?1:e.strides,t,"strides"),this.padding=null==e.padding?"valid":e.padding,hs(this.padding),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Bt(this.dataFormat),this.activation=to(e.activation),this.useBias=null==e.useBias||e.useBias,this.biasInitializer=It(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=tn(e.biasConstraint),this.biasRegularizer=Ct(e.biasRegularizer),this.activityRegularizer=Ct(e.activityRegularizer),this.dilationRate=ki(null==e.dilationRate?1:e.dilationRate,t,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new O(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new O(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new O(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(t){if(cs("kernelSize"in t,"required key 'kernelSize' not in config"),"number"!=typeof t.kernelSize&&!Qg(t.kernelSize,"number",1,3))throw new O(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(t.kernelSize)}.`)}getConfig(){const t={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:eo(this.activation),useBias:this.useBias,biasInitializer:At(this.biasInitializer),biasRegularizer:gt(this.biasRegularizer),activityRegularizer:gt(this.activityRegularizer),biasConstraint:en(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}class Ti extends Jd{constructor(t,e){super(t,e),this.kernel=null,Ti.verifyArgs(e),this.filters=e.filters,un(this.filters,"filters"),this.kernelInitializer=It(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=tn(e.kernelConstraint),this.kernelRegularizer=Ct(e.kernelRegularizer)}build(t){t=rt(t);const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new O(`The channel dimension of the input should be defined. Found ${t[e]}`);const s=t[e],r=this.kernelSize.concat([s,this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[e]:s}}],this.built=!0}call(t,e){return P(()=>{let s;t=De(t);const r=null==this.bias?null:this.bias.read(),o=Iv(this.activation.getClassName());if(null!=o&&2===this.rank)s=Ey(t,this.kernel.read(),r,this.strides,this.padding,this.dataFormat,this.dilationRate,o);else{if(1===this.rank)s=function v1(n,t,e,s=1,r="valid",o,a=1){return P(()=>{if(null==o&&(o="channelsLast"),Bt(o),3!==n.shape.length)throw new O(`The input of a conv1dWithBias operation should be 3, but is ${n.shape.length} instead.`);if(3!==t.shape.length)throw new O(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=e&&1!==e.shape.length)throw new O(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if("channelsFirst"===o&&(n=Ze(n,[0,2,1])),"causal"===r)throw new Pe("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let i=Dh(n,t,s,"same"===r?"same":"valid","NWC",a);return null!=e&&(i=Fs(i,e)),i})}(t,this.kernel.read(),r,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)s=Ey(t,this.kernel.read(),r,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new Pe("convolutions greater than 3D are not implemented yet.");s=function S1(n,t,e,s=[1,1,1],r="valid",o,a){return P(()=>{if(null==o&&(o="channelsLast"),Bt(o),4!==n.rank&&5!==n.rank)throw new O(`conv3dWithBias expects input to be of rank 4 or 5, but received ${n.rank}.`);if(4!==t.rank&&5!==t.rank)throw new O(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${n.rank}.`);let i=w1(n,o);if("causal"===r)throw new Pe("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return i=fm(i,t,s,"same"===r?"same":"valid","NDHWC",a),null!=e&&(i=Fs(i,e)),"channelsFirst"===o&&(i=Ze(i,[0,4,1,2,3])),i})}(t,this.kernel.read(),r,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(s=this.activation.apply(s))}return s})}computeOutputShape(t){t=rt(t);const e=[],s="channelsLast"===this.dataFormat?t.slice(1,t.length-1):t.slice(2);for(let o=0;o<s.length;++o){const a=Ps(s[o],this.kernelSize[o],this.padding,this.strides[o],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[o]);e.push(a)}let r=[t[0]];return"channelsLast"===this.dataFormat?(r=r.concat(e),r.push(this.filters)):(r.push(this.filters),r=r.concat(e)),r}getConfig(){const t={filters:this.filters,kernelInitializer:At(this.kernelInitializer),kernelRegularizer:gt(this.kernelRegularizer),kernelConstraint:en(this.kernelConstraint)},e=super.getConfig();return Object.assign(t,e),t}static verifyArgs(t){if(!("filters"in t)||"number"!=typeof t.filters||t.filters<1)throw new O(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(t.filters)}`)}}let I1=(()=>{class n extends Ti{constructor(e){super(2,e),n.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Qg(e.kernelSize,"number",1,2))throw new O(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}return n.className="Conv2D",n})();ne(I1);let C1=(()=>{class n extends Ti{constructor(e){super(3,e),n.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new O(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}return n.className="Conv3D",n})();ne(C1),ne((()=>{class n extends I1{constructor(e){if(super(e),this.inputSpec=[new Jt({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new O(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=rt(e)).length)throw new O("Input should have rank 4; Received input shape: "+JSON.stringify(e));const s="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[s])throw new O("The channel dimension of the inputs should be defined. Found `None`.");const r=e[s],o=this.kernelSize.concat([this.filters,r]);this.kernel=this.addWeight("kernel",o,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Jt({ndim:4,axes:{[s]:r}})],this.built=!0}call(e,s){return P(()=>{let r=De(e);if(4!==r.shape.length)throw new O(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${r.shape.length}`);const o=r.shape;let i,l;"channelsFirst"===this.dataFormat?(i=2,l=3):(i=1,l=2);const c=o[l],d=this.kernelSize[1],f=this.strides[1],y=[o[0],rr(o[i],this.strides[0],this.kernelSize[0],this.padding),rr(c,f,d,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(r=Ze(r,[0,2,3,1]));let b=Fh(r,this.kernel.read(),y,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(b=Ze(b,[0,3,1,2])),null!=this.bias&&(b=Fs(b,this.bias.read(),this.dataFormat)),null!=this.activation&&(b=this.activation.apply(b)),b})}computeOutputShape(e){const s=(e=rt(e)).slice();let r,o,a;"channelsFirst"===this.dataFormat?(r=1,o=2,a=3):(r=3,o=1,a=2);const i=this.kernelSize[0],l=this.kernelSize[1],u=this.strides[0],c=this.strides[1];return s[r]=this.filters,s[o]=rr(s[o],u,i,this.padding),s[a]=rr(s[a],c,l,this.padding),s}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}return n.className="Conv2DTranspose",n})()),ne((()=>{class n extends C1{constructor(e){if(super(e),this.inputSpec=[new Jt({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new O(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(5!==(e=rt(e)).length)throw new O("Input should have rank 5; Received input shape: "+JSON.stringify(e));const s="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[s])throw new O("The channel dimension of the inputs should be defined. Found `None`.");const r=e[s],o=this.kernelSize.concat([this.filters,r]);this.kernel=this.addWeight("kernel",o,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Jt({ndim:5,axes:{[s]:r}})],this.built=!0}call(e,s){return P(()=>{let r=De(e);if(5!==r.shape.length)throw new O(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${r.shape.length}`);const o=r.shape;let i,l,u;"channelsFirst"===this.dataFormat?(u=2,i=3,l=4):(u=1,i=2,l=3);const h=o[i],d=o[l],f=this.kernelSize[1],g=this.kernelSize[2],y=this.strides[1],b=this.strides[2],I=[o[0],rr(o[u],this.strides[0],this.kernelSize[0],this.padding),rr(h,y,f,this.padding),rr(d,b,g,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(r=Ze(r,[0,2,3,4,1]));let k=mm(r,this.kernel.read(),I,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(k=Ze(k,[0,4,1,2,3])),null!==this.bias&&(k=Fs(k,this.bias.read(),this.dataFormat)),null!==this.activation&&(k=this.activation.apply(k)),k})}computeOutputShape(e){const s=(e=rt(e)).slice();let r,o,a,i;"channelsFirst"===this.dataFormat?(r=1,o=2,a=3,i=4):(r=4,o=1,a=2,i=3);const l=this.kernelSize[0],u=this.kernelSize[1],c=this.kernelSize[2],h=this.strides[0],d=this.strides[1],p=this.strides[2];return s[r]=this.filters,s[o]=rr(s[o],h,l,this.padding),s[a]=rr(s[a],d,u,this.padding),s[i]=rr(s[i],p,c,this.padding),s}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}return n.className="Conv3DTranspose",n})());let vP=(()=>{class n extends Ti{constructor(e,s){if(super(e,s),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==s.filters)throw new O("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=s.kernelInitializer||null!=s.kernelRegularizer||null!=s.kernelConstraint)throw new O("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=s.padding&&"same"!==s.padding&&"valid"!==s.padding)throw new O(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(s.padding)}`);this.depthMultiplier=null==s.depthMultiplier?1:s.depthMultiplier,this.depthwiseInitializer=It(s.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=Ct(s.depthwiseRegularizer),this.depthwiseConstraint=tn(s.depthwiseConstraint),this.pointwiseInitializer=It(s.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=Ct(s.pointwiseRegularizer),this.pointwiseConstraint=tn(s.pointwiseConstraint)}build(e){if((e=rt(e)).length<this.rank+2)throw new O(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const s="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[s]||e[s]<0)throw new O(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[s])}`);const r=e[s],o=this.kernelSize.concat([r,this.depthMultiplier]),a=[];for(let l=0;l<this.rank;++l)a.push(1);a.push(r*this.depthMultiplier,this.filters);const i=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",o,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,i,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",a,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,i,this.pointwiseConstraint),this.bias=this.useBias?this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,i,this.biasConstraint):null,this.inputSpec=[new Jt({ndim:this.rank+2,axes:{[s]:r}})],this.built=!0}call(e,s){return P(()=>{let r;if(e=De(e),1===this.rank)throw new Pe("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=Ze(e,[0,2,3,1])),r=Xh(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(r=Fs(r,this.bias.read(),this.dataFormat)),null!=this.activation&&(r=this.activation.apply(r)),"channelsFirst"===this.dataFormat&&(r=Ze(r,[0,3,1,2])),r})}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=At(this.depthwiseInitializer),e.pointwiseInitializer=At(this.pointwiseInitializer),e.depthwiseRegularizer=gt(this.depthwiseRegularizer),e.pointwiseRegularizer=gt(this.pointwiseRegularizer),e.depthwiseConstraint=en(this.depthwiseConstraint),e.pointwiseConstraint=en(this.pointwiseConstraint),e}}return n.className="SeparableConv",n})();function N1(n,t,e,s){if(Array.isArray(n)){if(null!=t||null!=e)throw new O("When inputs is an array, neither initialState or constants should be provided");null!=s&&(e=n.slice(n.length-s,n.length),n=n.slice(0,n.length-s)),n.length>1&&(t=n.slice(1,n.length)),n=n[0]}function r(o){return null==o||Array.isArray(o)?o:[o]}return{inputs:n,initialState:t=r(t),constants:e=r(e)}}function k1(n,t,e,s=!1,r,o,a=!1,i=!1){return P(()=>{const l=t.shape.length;if(l<3)throw new O(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(Rs(2,l));if(t=Ze(t,u),null!=o)throw new Pe("The rnn() functoin of the deeplearn.js backend does not support constants yet.");a&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=r&&((r=ue(ue(r,"bool"),"float32")).rank===l-1&&(r=qt(r,-1)),r=Ze(r,u)),s&&(t=ls(t,0),null!=r&&(r=ls(r,0)));const c=[];let h,d=e;const p=t.shape[0],f=us(t);let g,m;null!=r&&(g=us(r));for(let y=0;y<p;++y){const b=f[y],w=P(()=>n(b,d));if(null==r)h=w[0],d=w[1];else{const x=P(()=>{const S=g[y],I=ye(qn(S),S);return{output:ee(D(w[0],S),D(d[0],I)),newStates:d.map((_,E)=>ee(D(w[1][E],S),D(_,I)))}});h=x.output,d=x.newStates}i&&c.push(h)}return i&&(m=Mn(c,1)),[h,m,d]})}ne((()=>{class n extends vP{constructor(e){super(2,e)}}return n.className="SeparableConv2D",n})()),ne((()=>{class n extends Ti{constructor(e){super(1,e),n.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Qg(e.kernelSize,"number",1,1))throw new O(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}return n.className="Conv1D",n})()),ne((()=>{class n extends qe{constructor(e){super(e),this.cropping="number"==typeof e.cropping?[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,s){return P(()=>{if(e=De(e),"channelsLast"===this.dataFormat){const r=Pd(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return Pd(r,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const r=Pd(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return Pd(r,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}})}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Cropping2D",n})()),ne((()=>{class n extends qe{constructor(e){super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Bt(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,function ZO(n){Uo(jO,"InterpolationFormat",n)}(this.interpolation)}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],null==e[2]?null:this.size[0]*e[2],null==e[3]?null:this.size[1]*e[3]]:[e[0],null==e[1]?null:this.size[0]*e[1],null==e[2]?null:this.size[1]*e[2],e[3]]}call(e,s){return P(()=>{let r=De(e);const o=r.shape;if("channelsFirst"===this.dataFormat){r=Ze(r,[0,2,3,1]);const a=this.size[0]*o[2],i=this.size[1]*o[3],l="nearest"===this.interpolation?Xn.resizeNearestNeighbor(r,[a,i]):Xn.resizeBilinear(r,[a,i]);return Ze(l,[0,3,1,2])}{const a=this.size[0]*o[1],i=this.size[1]*o[2];return"nearest"===this.interpolation?Xn.resizeNearestNeighbor(r,[a,i]):Xn.resizeBilinear(r,[a,i])}})}getConfig(){const e={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation},s=super.getConfig();return Object.assign(e,s),e}}return n.className="UpSampling2D",n})()),ne((()=>{class n extends Jd{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=It(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=tn(e.depthwiseConstraint),this.depthwiseRegularizer=Ct(e.depthwiseRegularizer)}build(e){if((e=rt(e)).length<4)throw new O(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const s="channelsFirst"===this.dataFormat?1:3;if(null==e[s]||e[s]<0)throw new O(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[s]}).`);const r=e[s];this.depthwiseKernel=this.addWeight("depthwise_kernel",[this.kernelSize[0],this.kernelSize[1],r,this.depthMultiplier],null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.bias=this.useBias?this.addWeight("bias",[r*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,s){return P(()=>{let r=function SP(n,t,e=[1,1],s="valid",r,o){return P(()=>{null==r&&(r="channelsLast"),Bt(r);let a=_y(n,r);if(4!==n.rank)throw new O(`Input for depthwiseConv2d is required to be 4-D, but is instead ${n.rank}-D`);if(4!==t.rank)throw new O(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return a=ii(a,t,e,"same"===s?"same":"valid","NHWC",o),"channelsFirst"===r&&(a=Ze(a,[0,3,1,2])),a})}(e=De(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(r=Fs(r,this.bias.read(),this.dataFormat)),null!=this.activation&&(r=this.activation.apply(r)),r})}computeOutputShape(e){e=rt(e);const r="channelsFirst"===this.dataFormat?e[3]:e[2],o="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,a=Ps("channelsFirst"===this.dataFormat?e[2]:e[1],this.kernelSize[0],this.padding,this.strides[0]),i=Ps(r,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],o,a,i]:[e[0],a,i,o]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=At(this.depthwiseInitializer),e.depthwiseRegularizer=gt(this.depthwiseRegularizer),e.depthwiseConstraint=en(this.depthwiseRegularizer),e}}return n.className="DepthwiseConv2D",n})());let Vu=(()=>{class n extends qe{constructor(e){let s;if(super(e),null==e.cell)throw new O("cell property is missing for the constructor of RNN.");if(s=Array.isArray(e.cell)?new E1({cells:e.cell}):e.cell,null==s.stateSize)throw new O("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=s,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new Jt({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){return null==this.states_?Rs(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map(s=>null):this.states_}setStates(e){this.states_=e}computeOutputShape(e){sy(e)&&(e=e[0]);let s=this.cell.stateSize;Array.isArray(s)||(s=[s]);const r=s[0];let o;if(o=this.returnSequences?[e[0],e[1],r]:[e[0],r],this.returnState){const a=[];for(const i of s)a.push([e[0],i]);return[o].concat(a)}return o}computeMask(e,s){return P(()=>{Array.isArray(s)&&(s=s[0]);const r=this.returnSequences?s:null;if(this.returnState){const o=this.states.map(a=>null);return[r].concat(o)}return r})}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,s=[];for(let r=0;r<e;++r)s.push(null);return s}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new Pe("Constants support is not implemented in RNN yet.");sy(e)&&(e=e[0]);const r=this.stateful?e[0]:null,o=e.slice(2);this.inputSpec[0]=new Jt({shape:[r,null,...o]});const a=[e[0]].concat(e.slice(2));let i;if(this.cell.build(a),i=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!Xe(this.stateSpec.map(l=>l.shape[l.shape.length-1]),i))throw new O(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=i.map(l=>new Jt({shape:[null,l]}));this.stateful&&this.resetStates()}resetStates(e,s=!1){P(()=>{if(!this.stateful)throw new Js("Cannot call resetStates() on an RNN Layer that is not stateful.");const r=this.inputSpec[0].shape[0];if(null==r)throw new O("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)this.states_=Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(o=>Kt([r,o])):[Kt([r,this.cell.stateSize])];else if(null==e)Ge(this.states_),null!=this.keptStates&&(Ge(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(o=>Kt([r,o])):this.states_[0]=Kt([r,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new O(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===s?this.keptStates.push(this.states_.slice()):Ge(this.states_);for(let o=0;o<this.states_.length;++o){const a=e[o],i=Array.isArray(this.cell.stateSize)?this.cell.stateSize[o]:this.cell.stateSize,l=[r,i];if(!Xe(a.shape,l))throw new O(`State ${o} is incompatible with layer ${this.name}: expected shape=${l}, received shape=${a.shape}`);this.states_[o]=a}}this.states_=this.states_.map(o=>Yt(o.clone()))})}apply(e,s){let r=null==s?null:s.initialState,o=null==s?null:s.constants;null==s&&(s={});const a=N1(e,r,o,this.numConstants);e=a.inputs,r=a.initialState,o=a.constants;let i=[],l=[];if(null!=r){s.initialState=r,i=i.concat(r),this.stateSpec=[];for(const c of r)this.stateSpec.push(new Jt({shape:c.shape}));l=l.concat(this.stateSpec)}if(null!=o&&(s.constants=o,i=i.concat(o),this.numConstants=o.length),i[0]instanceof sr){const c=[e].concat(i),h=this.inputSpec.concat(l),d=this.inputSpec;this.inputSpec=h;const p=super.apply(c,s);return this.inputSpec=d,p}return super.apply(e,s)}call(e,s){return P(()=>{const r=null==s?null:s.mask,o=null==s?null:s.training;let a=null==s?null:s.initialState;e=De(e),null==a&&(a=this.stateful?this.states_:this.getInitialState(e));const i=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(a.length!==i)throw new O(`RNN Layer has ${i} state(s) but was passed ${a.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const l={training:o},c=k1((g,m)=>{const y=this.cell.call([g].concat(m),l);return[y[0],y.slice(1)]},e,a,this.goBackwards,r,null,this.unroll,this.returnSequences),h=c[0],d=c[1],p=c[2];this.stateful&&this.resetStates(p,o);const f=this.returnSequences?d:h;return this.returnState?[f].concat(p):f})}getInitialState(e){return P(()=>{let s=Kt(e.shape);return s=we(s,[1,2]),s=Fu(s),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(r=>r>1?ty(s,[1,r]):s):this.cell.stateSize>1?[ty(s,[1,this.cell.stateSize])]:[s]})}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),s={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(s.numConstants=this.numConstants);const r=this.cell.getConfig();return this.getClassName()===n.className&&(s.cell={className:this.cell.getClassName(),config:r}),Object.assign(Object.assign(Object.assign({},r),e),s)}static fromConfig(e,s,r={}){const a=Er(s.cell,r);return new e(Object.assign(s,{cell:a}))}}return n.className="RNN",n})();ne(Vu);class ep extends qe{}let T1=(()=>{class n extends ep{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,un(this.units,"units"),this.activation=to(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=It(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=It(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=It(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Ct(e.kernelRegularizer),this.recurrentRegularizer=Ct(e.recurrentRegularizer),this.biasRegularizer=Ct(e.biasRegularizer),this.kernelConstraint=tn(e.kernelConstraint),this.recurrentConstraint=tn(e.recurrentConstraint),this.biasConstraint=tn(e.biasConstraint),this.dropout=Ii([1,Yr([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Ii([1,Yr([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=rt(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.bias=this.useBias?this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,s){return P(()=>{if(2!==e.length)throw new O(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let r=e[1];e=e[0];const o=null!=s.training&&s.training;let a;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=no({ones:()=>qn(e),rate:this.dropout,training:o,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=no({ones:()=>qn(r),rate:this.recurrentDropout,training:o,dropoutFunc:this.dropoutFunc}));const i=this.dropoutMask,l=this.recurrentDropoutMask;a=tr(null!=i?D(e,i):e,this.kernel.read()),null!=this.bias&&(a=Fs(a,this.bias.read())),null!=l&&(r=D(r,l));let u=ee(a,tr(r,this.recurrentKernel.read()));return null!=this.activation&&(u=this.activation.apply(u)),[u,u]})}getConfig(){const e=super.getConfig(),s={units:this.units,activation:eo(this.activation),useBias:this.useBias,kernelInitializer:At(this.kernelInitializer),recurrentInitializer:At(this.recurrentInitializer),biasInitializer:At(this.biasInitializer),kernelRegularizer:gt(this.kernelRegularizer),recurrentRegularizer:gt(this.recurrentRegularizer),biasRegularizer:gt(this.biasRegularizer),activityRegularizer:gt(this.activityRegularizer),kernelConstraint:en(this.kernelConstraint),recurrentConstraint:en(this.recurrentConstraint),biasConstraint:en(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign(Object.assign({},e),s)}}return n.className="SimpleRNNCell",n})();ne(T1),ne((()=>{class n extends Vu{constructor(e){e.cell=new T1(e),super(e)}call(e,s){return P(()=>(null!=this.cell.dropoutMask&&(Ge(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Ge(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==s?null:s.mask,training:null==s?null:s.training,initialState:null==s?null:s.initialState})))}static fromConfig(e,s){return new e(s)}}return n.className="SimpleRNN",n})());let _1=(()=>{class n extends ep{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new O("GRUCell does not support reset_after parameter set to true.");this.units=e.units,un(this.units,"units"),this.activation=to(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=to(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=It(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=It(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=It(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Ct(e.kernelRegularizer),this.recurrentRegularizer=Ct(e.recurrentRegularizer),this.biasRegularizer=Ct(e.biasRegularizer),this.kernelConstraint=tn(e.kernelConstraint),this.recurrentConstraint=tn(e.recurrentConstraint),this.biasConstraint=tn(e.biasConstraint),this.dropout=Ii([1,Yr([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Ii([1,Yr([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=rt(e),this.kernel=this.addWeight("kernel",[e[e.length-1],3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.bias=this.useBias?this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,s){return P(()=>{if(2!==e.length)throw new O(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const r=null!=s.training&&s.training;let o=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=no({ones:()=>qn(e),rate:this.dropout,training:r,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=no({ones:()=>qn(o),rate:this.recurrentDropout,training:r,count:3,dropoutFunc:this.dropoutFunc}));const i=this.recurrentDropoutMask;let l,u,c;0<this.dropout&&this.dropout<1&&(e=D(e,this.dropoutMask[0]));let h=tr(e,this.kernel.read());this.useBias&&(h=Fs(h,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(o=D(o,i[0]));const d=this.recurrentKernel.read(),[p,f]=Pn(d,[2*this.units,this.units],d.rank-1),g=tr(o,p),[m,y,b]=Pn(h,3,h.rank-1),[w,x]=Pn(g,2,g.rank-1);l=this.recurrentActivation.apply(ee(m,w)),u=this.recurrentActivation.apply(ee(y,x));const S=tr(D(u,o),f);c=this.activation.apply(ee(b,S));const I=ee(D(l,o),D(ee(1,bt(l)),c));return[I,I]})}getConfig(){const e=super.getConfig(),s={units:this.units,activation:eo(this.activation),recurrentActivation:eo(this.recurrentActivation),useBias:this.useBias,kernelInitializer:At(this.kernelInitializer),recurrentInitializer:At(this.recurrentInitializer),biasInitializer:At(this.biasInitializer),kernelRegularizer:gt(this.kernelRegularizer),recurrentRegularizer:gt(this.recurrentRegularizer),biasRegularizer:gt(this.biasRegularizer),activityRegularizer:gt(this.activityRegularizer),kernelConstraint:en(this.kernelConstraint),recurrentConstraint:en(this.recurrentConstraint),biasConstraint:en(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign(Object.assign({},e),s)}}return n.className="GRUCell",n})();ne(_1),ne((()=>{class n extends Vu{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new _1(e),super(e)}call(e,s){return P(()=>(null!=this.cell.dropoutMask&&(Ge(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Ge(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==s?null:s.mask,training:null==s?null:s.training,initialState:null==s?null:s.initialState})))}static fromConfig(e,s){return 0===s.implmentation&&(s.implementation=1),new e(s)}}return n.className="GRU",n})());let $y=(()=>{class n extends ep{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,un(this.units,"units"),this.activation=to(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=to(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=It(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=It(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=It(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=Ct(e.kernelRegularizer),this.recurrentRegularizer=Ct(e.recurrentRegularizer),this.biasRegularizer=Ct(e.biasRegularizer),this.kernelConstraint=tn(e.kernelConstraint),this.recurrentConstraint=tn(e.recurrentConstraint),this.biasConstraint=tn(e.biasConstraint),this.dropout=Ii([1,Yr([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Ii([1,Yr([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var s;let o;if(e=rt(e),this.kernel=this.addWeight("kernel",[e[e.length-1],4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const a=this.biasInitializer,i=this.units;o=new((s=class extends ws{apply(u,c){const h=a.apply([i]),d=(new Fv).apply([i]),p=a.apply([2*i]);return Av(Av(h,d),p)}}).className="CustomInit",s)}else o=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,o,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,s){return P(()=>{const r=null!=s.training&&s.training;if(3!==e.length)throw new O(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let o=e[1];const a=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=no({ones:()=>qn(e),rate:this.dropout,training:r,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=no({ones:()=>qn(o),rate:this.recurrentDropout,training:r,count:4,dropoutFunc:this.dropoutFunc}));const l=this.recurrentDropoutMask;let u,c,h,d;0<this.dropout&&this.dropout<1&&(e=D(e,this.dropoutMask[0]));let p=tr(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(o=D(o,l[0])),p=ee(p,tr(o,this.recurrentKernel.read())),this.useBias&&(p=Fs(p,this.bias.read()));const[f,g,m,y]=Pn(p,4,p.rank-1);u=this.recurrentActivation.apply(f),c=this.recurrentActivation.apply(g),h=ee(D(c,a),D(u,this.activation.apply(m))),d=this.recurrentActivation.apply(y);const b=D(d,this.activation.apply(h));return[b,b,h]})}getConfig(){const e=super.getConfig(),s={units:this.units,activation:eo(this.activation),recurrentActivation:eo(this.recurrentActivation),useBias:this.useBias,kernelInitializer:At(this.kernelInitializer),recurrentInitializer:At(this.recurrentInitializer),biasInitializer:At(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:gt(this.kernelRegularizer),recurrentRegularizer:gt(this.recurrentRegularizer),biasRegularizer:gt(this.biasRegularizer),activityRegularizer:gt(this.activityRegularizer),kernelConstraint:en(this.kernelConstraint),recurrentConstraint:en(this.recurrentConstraint),biasConstraint:en(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign(Object.assign({},e),s)}}return n.className="LSTMCell",n})();ne($y),ne((()=>{class n extends Vu{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new $y(e),super(e)}call(e,s){return P(()=>(null!=this.cell.dropoutMask&&(Ge(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Ge(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==s?null:s.mask,training:null==s?null:s.training,initialState:null==s?null:s.initialState})))}static fromConfig(e,s){return 0===s.implmentation&&(s.implementation=1),new e(s)}}return n.className="LSTM",n})());let E1=(()=>{class n extends ep{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const s of this.cells.slice().reverse())Array.isArray(s.stateSize)?e.push(...s.stateSize):e.push(s.stateSize);return e}call(e,s){return P(()=>{let r=e.slice(1);const o=[];for(const l of this.cells.slice().reverse())Array.isArray(l.stateSize)?o.push(r.splice(0,l.stateSize.length)):o.push(r.splice(0,1));o.reverse();const a=[];let i;for(let l=0;l<this.cells.length;++l){const u=this.cells[l];r=o[l],i=0===l?[e[0]].concat(r):[i[0]].concat(r),i=u.call(i,s),a.push(i.slice(1))}r=[];for(const l of a.slice().reverse())r.push(...l);return[i[0]].concat(r)})}build(e){let s;sy(e)&&(e=e[0]),this.cells.forEach((r,o)=>{Go(`RNNCell_${o}`,()=>{r.build(e),s=Array.isArray(r.stateSize)?r.stateSize[0]:r.stateSize,e=[e[0],s]})}),this.built=!0}getConfig(){const e=super.getConfig(),o={cells:this.cells.map(a=>({className:a.getClassName(),config:a.getConfig()}))};return Object.assign(Object.assign({},e),o)}static fromConfig(e,s,r={}){const o=[];for(const a of s.cells)o.push(Er(a,r));return new e({cells:o})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const s of this.cells)e.push(...s.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const s of this.cells)e.push(...s.nonTrainableWeights);if(!this.trainable){const s=[];for(const r of this.cells)s.push(...r.trainableWeights);return s.concat(e)}return e}getWeights(){const e=[];for(const s of this.cells)e.push(...s.weights);return ry(e)}setWeights(e){const s=[];for(const r of this.cells){const a=e.splice(r.weights.length);for(let i=0;i<r.weights.length;++i)s.push([r.weights[i],a[i]])}oy(s)}}return n.className="StackedRNNCells",n})();function no(n){const{ones:t,rate:e,training:s=!1,count:r=1,dropoutFunc:o}=n,a=()=>null!=o?o(t(),e):Dv(t(),e),i=()=>Lu(a,t,s);return!r||r<=1?Yt(i().clone()):Array(r).fill(void 0).map(i).map(u=>Yt(u.clone()))}ne(E1);let CP=(()=>{class n extends Vu{constructor(e){if(e.unroll)throw new Pe("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new Pe("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new Jt({ndim:5})]}call(e,s){return P(()=>{if(null!=this.cell.dropoutMask&&(Ge(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Ge(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),s&&s.constants)throw new O("ConvRNN2D cell does not support constants");return super.call(e,{mask:null==s?null:s.mask,training:null==s?null:s.training,initialState:null==s?null:s.initialState})})}computeOutputShape(e){let s=this.computeSingleOutputShape(e);return this.returnSequences||(s=[s[0],...s.slice(2)]),this.returnState&&(s=[s,...Array(2).fill([e[0],...s.slice(-3)])]),s}getInitialState(e){return P(()=>{const{stateSize:s}=this.cell,o=this.computeSingleOutputShape(e.shape),i=Kt([o[0],...o.slice(2)]);return Array.isArray(s)?Array(s.length).fill(i):[i]})}resetStates(e,s=!1){P(()=>{if(!this.stateful)throw new Js("Cannot call resetStates() on an RNN Layer that is not stateful.");const r=this.inputSpec[0].shape,o=this.computeSingleOutputShape(r),a=[o[0],...o.slice(2)];if(null==r[0])throw new O("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())this.states_=Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(()=>Kt(a)):[Kt(a)];else if(null==e)Ge(this.states_),null!=this.keptStates&&(Ge(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>Kt(a)):this.states_[0]=Kt(a);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new O(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);s?this.keptStates.push(this.states_.slice()):Ge(this.states_);for(let l=0;l<this.states_.length;++l){const u=e[l],c=a;if(!Xe(u.shape,c))throw new O(`State ${l} is incompatible with layer ${this.name}: expected shape=${c}, received shape=${u.shape}`);this.states_[l]=u}}this.states_=this.states_.map(l=>Yt(l.clone()))})}computeSingleOutputShape(e){const{dataFormat:s,filters:r,kernelSize:o,padding:a,strides:i,dilationRate:l}=this.cell,u="channelsFirst"===s,h=e[u?4:3],d=Ps(e[u?3:2],o[0],a,i[0],l[0]),p=Ps(h,o[1],a,i[1],l[1]);return[...e.slice(0,2),...u?[r,d,p]:[d,p,r]]}}return n.className="ConvRNN2D",n})(),$1=(()=>{class n extends $y{constructor(e){const{filters:s,kernelSize:r,strides:o,padding:a,dataFormat:i,dilationRate:l}=e;super(Object.assign(Object.assign({},e),{units:s})),this.filters=s,un(this.filters,"filters"),this.kernelSize=ki(r,2,"kernelSize"),this.kernelSize.forEach(u=>un(u,"kernelSize")),this.strides=ki(o||1,2,"strides"),this.strides.forEach(u=>un(u,"strides")),this.padding=a||"valid",hs(this.padding),this.dataFormat=i||"channelsLast",Bt(this.dataFormat),this.dilationRate=ki(l||1,2,"dilationRate"),this.dilationRate.forEach(u=>un(u,"dilationRate"))}build(e){var s;e=rt(e);const r="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[r])throw new O(`The channel dimension of the input should be defined. Found ${e[r]}`);const i=this.kernelSize.concat([e[r],4*this.filters]);this.kernel=this.addWeight("kernel",i,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const l=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",l,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let u;if(this.unitForgetBias){const c=this.biasInitializer,h=this.filters;u=new((s=class extends ws{apply(p,f){return ey([c.apply([h]),Ln([h]),c.apply([2*h])])}}).className="CustomInit",s)}else u=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,u,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,s){return P(()=>{if(3!==e.length)throw new O(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const r=s.training||!1,o=e[0],a=e[1],i=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=no({ones:()=>qn(o),rate:this.dropout,training:r,count:4,dropoutFunc:this.dropoutFunc}));const u=this.dropoutMask,c=(oe,ce,ie)=>ce&&ce[ie]?D(ce[ie],oe):oe;let h=c(o,u,0),d=c(o,u,1),p=c(o,u,2),f=c(o,u,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=no({ones:()=>qn(a),rate:this.recurrentDropout,training:r,count:4,dropoutFunc:this.dropoutFunc}));const g=this.recurrentDropoutMask;let m=c(a,g,0),y=c(a,g,1),b=c(a,g,2),w=c(a,g,3);const[S,I,k,T]=Pn(this.kernel.read(),4,3),[_,E,L,B]=this.useBias?Pn(this.bias.read(),4):[null,null,null,null];h=this.inputConv(h,S,_,this.padding),d=this.inputConv(d,I,E,this.padding),p=this.inputConv(p,k,L,this.padding),f=this.inputConv(f,T,B,this.padding);const[W,U,G,K]=Pn(this.recurrentKernel.read(),4,3);m=this.recurrentConv(m,W),y=this.recurrentConv(y,U),b=this.recurrentConv(b,G),w=this.recurrentConv(w,K);const X=this.recurrentActivation.apply(ee(h,m)),H=this.recurrentActivation.apply(ee(d,y)),Z=ee(D(H,i),D(X,this.activation.apply(ee(p,b)))),se=D(this.recurrentActivation.apply(ee(f,w)),this.activation.apply(Z));return[se,se,Z]})}getConfig(){const r=function(n,t){var e={};for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&t.indexOf(s)<0&&(e[s]=n[s]);if(null!=n&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(s=Object.getOwnPropertySymbols(n);r<s.length;r++)t.indexOf(s[r])<0&&Object.prototype.propertyIsEnumerable.call(n,s[r])&&(e[s[r]]=n[s[r]])}return e}(super.getConfig(),["units"]),o={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign(Object.assign({},r),o)}inputConv(e,s,r,o){const a=br(e,s,this.strides,o||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return r?Fs(a,r,this.dataFormat):a}recurrentConv(e,s){return br(e,s,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}return n.className="ConvLSTM2DCell",n})();ne($1),ne((()=>{class n extends CP{constructor(e){const s=new $1(e);super(Object.assign(Object.assign({},e),{cell:s}))}static fromConfig(e,s){return new e(s)}}return n.className="ConvLSTM2D",n})());let A1=(()=>{class n extends qe{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const s=e.shape,r=[];for(let o=0;o<this.noiseShape.length;++o)r.push(null==this.noiseShape[o]?s[o]:this.noiseShape[o]);return r}call(e,s){return P(()=>{this.invokeCallHook(e,s);const r=De(e);if(0<this.rate&&this.rate<1){const o=null!=s.training&&s.training,a=this.getNoiseShape(r);return Lu(()=>Dv(r,this.rate,a,this.seed),()=>r,o)}return e})}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},s=super.getConfig();return Object.assign(e,s),e}dispose(){return super.dispose()}}return n.className="Dropout",n})();ne(A1),ne((()=>{class n extends A1{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const s=e.shape;return[s[0],1,s[2]]}}return n.className="SpatialDropout1D",n})()),ne((()=>{class n extends qe{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let s=null;null!=e.batchSize&&(s=e.batchSize),this.batchInputShape=[s,e.inputDim]}this.units=e.units,un(this.units,"units"),this.activation=to(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=It(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=It(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=tn(e.kernelConstraint),this.biasConstraint=tn(e.biasConstraint),this.kernelRegularizer=Ct(e.kernelRegularizer),this.biasRegularizer=Ct(e.biasRegularizer),this.activityRegularizer=Ct(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const s=(e=rt(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[s,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:s}}],this.built=!0}computeOutputShape(e){const s=(e=rt(e)).slice();return s[s.length-1]=this.units,s}call(e,s){return P(()=>{this.invokeCallHook(e,s);const r=De(e),o=Iv(this.activation.getClassName());let a;return null!=o?a=tr(r,this.kernel.read(),o,this.bias?this.bias.read():null):(a=tr(r,this.kernel.read()),null!=this.bias&&(a=Fs(a,this.bias.read())),null!=this.activation&&(a=this.activation.apply(a))),a})}getConfig(){const e={units:this.units,activation:eo(this.activation),useBias:this.useBias,kernelInitializer:At(this.kernelInitializer),biasInitializer:At(this.biasInitializer),kernelRegularizer:gt(this.kernelRegularizer),biasRegularizer:gt(this.biasRegularizer),activityRegularizer:gt(this.activityRegularizer),kernelConstraint:en(this.kernelConstraint),biasConstraint:en(this.biasConstraint)},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Dense",n})()),ne((()=>{class n extends qe{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=rt(e);for(const s of e.slice(1))if(null==s)throw new O(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],Zr(e,1)]}call(e,s){return P(()=>{this.invokeCallHook(e,s);let r=De(e);if("channelsFirst"===this.dataFormat&&r.rank>1){const o=[0];for(let a=2;a<r.rank;++a)o.push(a);o.push(1),r=Ze(r,o)}return function rL(n){if(n.rank<=1)throw new O(`batchFlatten requires a minimum rank of 2. Got rank: ${n.rank}.`);const t=[n.shape[0],Zr(n.shape,1)];return F(n,t)}(r)})}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const s=super.getConfig();return Object.assign(e,s),e}}return n.className="Flatten",n})()),ne((()=>{class n extends qe{constructor(e){super(e),this.supportsMasking=!0,this.activation=to(e.activation)}call(e,s){return P(()=>{this.invokeCallHook(e,s);const r=De(e);return this.activation.apply(r)})}getConfig(){const e={activation:eo(this.activation)},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Activation",n})()),ne((()=>{class n extends qe{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,s){return P(()=>function nL(n,t){return P(()=>{if(2!==n.shape.length)throw new O(`repeat() expects a rank-2 tensor, but received a rank-${n.shape.length} tensor.`);return ty(Fu(n,1),[1,t,1])})}(e=De(e),this.n))}getConfig(){const e={n:this.n},s=super.getConfig();return Object.assign(e,s),e}}return n.className="RepeatVector",n})()),ne((()=>{class n extends qe{constructor(e){super(e),this.targetShape=e.targetShape;for(let s=0;s<this.targetShape.length;++s)this.isUnknown(this.targetShape[s])&&(this.targetShape[s]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,s){const r="Total size of new array must be unchanged.",o=s.slice();let a=1,i=null;for(let u=0;u<o.length;++u){const c=o[u];if(this.isUnknown(c)){if(null!==i)throw new O("Can only specifiy one unknown dimension.");i=u}else a*=c}const l=Zr(e);if(null!==i){if(0===a||l%a!=0)throw new O(r);o[i]=l/a}else if(l!==a)throw new O(r);return o}computeOutputShape(e){let s=!1;for(let r=0;r<e.length;++r)if(this.isUnknown(e[r])){s=!0;break}return s?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,s){return P(()=>{this.invokeCallHook(e,s);const r=De(e),o=r.shape,a=o.slice(0,1).concat(this.fixUnknownDimension(o.slice(1),this.targetShape));return F(r,a)})}getConfig(){const e={targetShape:this.targetShape},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Reshape",n})()),ne((()=>{class n extends qe{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const s=Rs(1,e.dims.length+1);if(!Xe(e.dims.slice().sort(),s))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new Jt({ndim:this.dims.length+1})]}computeOutputShape(e){const s=(e=rt(e)).slice();return this.dims.forEach((r,o)=>{s[o+1]=e[r]}),s}call(e,s){return Ze(De(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Permute",n})()),ne((()=>{class n extends qe{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),s={maskValue:this.maskValue};return Object.assign(s,e),s}computeMask(e,s){const r=De(e);return au(Lo(r,this.maskValue),-1)}call(e,s){return P(()=>{this.invokeCallHook(e,s);const r=De(e),i=au(Lo(r,this.maskValue),-1,!0);return D(r,ue(i,r.dtype))})}}return n.className="Masking",n})()),ne((()=>{class n extends qe{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let s=null;null!=e.batchSize&&(s=e.batchSize),this.batchInputShape=null==e.inputLength?[s,null]:[s].concat(pt(e.inputLength))}this.inputDim=e.inputDim,un(this.inputDim,"inputDim"),this.outputDim=e.outputDim,un(this.outputDim,"outputDim"),this.embeddingsInitializer=It(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=Ct(e.embeddingsRegularizer),this.activityRegularizer=Ct(e.activityRegularizer),this.embeddingsConstraint=tn(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,s){return P(()=>this.maskZero?(e=De(e),Lo(e,Qe(e))):null)}computeOutputShape(e){if(e=rt(e),null==this.inputLength)return[...e,this.outputDim];const s=pt(this.inputLength);if(s.length!==e.length-1)throw new O(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let r=0;for(let o=0;o<s.length;++o){const a=s[o],i=e[o+1];if(null!=a&&null!=i&&a!==i)throw new O(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==a&&(s[r]=i),r++}}return[e[0],...s,this.outputDim]}call(e,s){return P(()=>{this.invokeCallHook(e,s);let r=De(e);"int32"!==r.dtype&&(r=er(r,"int32"));const o=Rv(this.embeddings.read(),F(r,[r.size]));return F(o,rt(this.computeOutputShape(r.shape)))})}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:At(this.embeddingsInitializer),embeddingsRegularizer:gt(this.embeddingsRegularizer),activityRegularizer:gt(this.activityRegularizer),embeddingsConstraint:en(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Embedding",n})());class jo extends qe{constructor(t){super(t||{}),this.supportsMasking=!0}mergeFunction(t){throw new Pe}computeElementwiseOpOutputShape(t,e){if(null==t||null==e)return null;if(t.length<e.length)return this.computeElementwiseOpOutputShape(e,t);if(0===e.length)return t;const s=t.slice(0,t.length-e.length);for(let r=0;r<e.length;++r){const o=t[t.length-e.length+r],a=e[r];if(null==o||null==a||o<0||a<0)s.push(null);else if(1===o)s.push(a);else if(1===a)s.push(o);else{if(o!==a)throw new O("Operands could not be broadcast together with shapes "+JSON.stringify(t)+" "+JSON.stringify(e));s.push(o)}}return s}build(t){if(Array.isArray(t)&&!Array.isArray(t[0])&&(t=[rt(t)]),t.length<2)throw new O(`A merge layer should be called on an Array of at least 2 inputs. Got ${t.length} input(s).`);let e=[];for(const o of t)null!=o&&null!==o[0]&&e.push(o[0]);if(e=Xr(e),e.length>1)throw new O(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(t)}.`);let s=null==t[0]?null:t[0].slice(1);for(let o=1;o<t.length;++o){const a=null==t[o]?null:t[o].slice(1);s=this.computeElementwiseOpOutputShape(s,a)}const r=t.map(o=>o.length);this.reshapeRequired=-1!==t.indexOf(null)||1!==Xr(r).length}call(t,e){return P(()=>{if(this.reshapeRequired){const s=[],r=t.map(o=>o.rank);if(-1===r.indexOf(null)){const o=Yr(r);for(let a of t){const i=a.rank;for(let l=0;l<o-i;++l)a=Fu(a,1);s.push(a)}return this.mergeFunction(s)}{let o=!1;for(const l of t){const u=l.rank;if(null==u){const c=l.shape,h=c[0],d=c.slice(1).concat([h]);let p=F(l,[h].concat(Zr(c.slice(1))));p=Ze(p,[1,0]),p=F(p,d),s.push(p),o=!0}else if(u>1){const c=Rs(1,u).concat([0]);s.push(Ze(l,c)),o=!0}else s.push(l)}let a=this.mergeFunction(s);const i=a.rank;if(o)if(null==i){const l=a.shape,c=l[l.length-1],h=[c].concat(l.slice(0,l.length-1));a=F(Ze(F(a,[-1,c]),[1,0]),h)}else if(i>1){const l=[i-1].concat(Rs(0,i-1));a=Ze(a,l)}return a}}return this.mergeFunction(t)})}computeOutputShape(t){let e;e=null==t[0]?null:t[0].slice(1);for(let r=1;r<t.length;++r){const o=null==t[r]?null:t[r].slice(1);e=this.computeElementwiseOpOutputShape(e,o)}let s=[];for(const r of t)null!=r&&null!==r[0]&&s.push(r[0]);return s=Xr(s),e=1===s.length?s.concat(e):[null].concat(e),e}computeMask(t,e){return P(()=>{if(null==e)return null;if(!Array.isArray(e))throw new O("`mask` should be an Array");if(!Array.isArray(t))throw new O("`inputs` should be an Array");if(e.length!==t.length)throw new O(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${t.length} vs ${e.length})`);if(e.every(r=>null==r))return null;let s=(e=e.map(r=>null==r?r:qt(r,0)))[0];for(let r=1;r<e.length-1;++r)s=Ts(s,e[r]);return s})}}function Wu(n,t){for(;n<0;)n+=t;return n}function Uu(n,t,e,s,r,o=.001){let a;if(2===n.rank)a=rm(n,t,e,s,r,o);else if(3===n.rank)a=om(n,t,e,s,r,o);else{if(4!==n.rank)throw new Pe(`batchNormalization is not implemented for array of rank ${n.rank} yet`);a=am(n,t,e,s,r,o)}return a}function tp(n,t,e,s,r,o){return P(()=>{let a;Bt(r),Nv(o),hs(s),null==e&&(e=[1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==o&&(o="max"),n=_y(n,r);const i="same"===s?"same":"valid";return a="max"===o?bu(n,t,e,i):cu(n,t,e,i),"channelsFirst"===r&&(a=Ze(a,[0,3,1,2])),a})}function R1(n,t,e,s,r,o){return P(()=>{let a;Bt(r),Nv(o),hs(s),null==e&&(e=[1,1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==o&&(o="max"),n=w1(n,r);const i="same"===s?"same":"valid";return a="max"===o?$m(n,t,e,i):sm(n,t,e,i),"channelsFirst"===r&&(a=Ze(a,[0,4,1,2,3])),a})}ne((()=>{class n extends jo{constructor(e){super(e)}mergeFunction(e){return P(()=>{let s=e[0].clone();for(let r=1;r<e.length;++r)s=ee(s,e[r]);return s})}}return n.className="Add",n})()),ne((()=>{class n extends jo{constructor(e){super(e)}mergeFunction(e){return P(()=>{let s=e[0].clone();for(let r=1;r<e.length;++r)s=D(s,e[r]);return s})}}return n.className="Multiply",n})()),ne((()=>{class n extends jo{constructor(e){super(e)}mergeFunction(e){return P(()=>{let s=e[0].clone();for(let r=1;r<e.length;++r)s=ee(s,e[r]);return D(1/e.length,s)})}}return n.className="Average",n})()),ne((()=>{class n extends jo{constructor(e){super(e)}mergeFunction(e){return P(()=>{let s=e[0];for(let r=1;r<e.length;++r)s=qs(s,e[r]);return s})}}return n.className="Maximum",n})()),ne((()=>{class n extends jo{constructor(e){super(e)}mergeFunction(e){return P(()=>{let s=e[0];for(let r=1;r<e.length;++r)s=qr(s,e[r]);return s})}}return n.className="Minimum",n})()),ne((()=>{class n extends jo{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new O("A `Concatenate` layer should be called on a list of at least 2 inputs");let s=!0;for(const o of e)if(null!=o){s=!1;break}if(s)return;const r=[];for(let o=0;o<e.length;++o){const a=e[o].slice();a.splice(this.axis,1);let i=!1;for(const l of r)if(Xe(l,a)){i=!0;break}i||r.push(a)}if(r.length>1)throw new O("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return P(()=>ey(e,this.axis))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new O("A `Concatenate` layer should be called on a list of inputs.");const s=e,r=s[0].slice(),o=this.axis<0?r.length+this.axis:this.axis;for(const a of s.slice(1)){if(null==r[o]||null==a[o]){r[o]=null;break}r[o]+=a[o]}return r}computeMask(e,s){if(null==s)return null;if(!Array.isArray(s))throw new O("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new O("`inputs` should be an array for Concatenate");if(s.length!==e.length)throw new O(`Mismatch in the length of mask (${s.length}) and the legnth of inputs (${e.length})`);return P(()=>{let r=!0;if(s.forEach(i=>{null==i||(r=!1)}),r)return null;const o=[];for(let i=0;i<e.length;++i)o.push(null==s[i]?ue(qn(e[i]),"bool"):s[i].rank<e[i].rank?qt(s[i],-1):s[i]);const a=Pt(o,this.axis);return Rh(a,-1,!1)})}getConfig(){const e={axis:this.axis},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Concatenate",n})()),ne((()=>{class n extends jo{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){C(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const s=e[0],r=e[1];if(s.length>3||r.length>3)throw new Pe("Dot layer does not support tensors of 4D or higher rank yet.");const o=this.interpretAxes(s,r);if(s[o[0]]!==r[o[1]])throw new O(`Dimension incompatibility: ${s[o[0]]} !== ${r[o[1]]}`)}mergeFunction(e){if(2!==e.length)throw new O(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let o,s=e[0],r=e[1];return o=Array.isArray(this.axes)?this.axes.map((a,i)=>Wu(a,e[i].shape.length)):[Wu(this.axes,s.shape.length),Wu(this.axes,r.shape.length)],this.normalize&&(s=Hd(s,o[0]),r=Hd(r,o[1])),function NP(n,t,e){if(n.shape.length>3||t.shape.length>3)throw new Pe("batchDot is not implemented for tensors of 4D or higher rank yet");if(C(n.shape.length>=2,()=>`batchDot requires the rank of x to be >= 2, but got ${n.shape.length}`),C(n.shape.length>=2,()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`),"number"==typeof e&&(e=[e,e]),"complex64"===n.dtype||"complex64"===t.dtype)throw new Pe("batchDot is not implemented for complex64-type Tensors yet.");const s=n.shape.length,r=t.shape.length;null==e&&(e=[s-1,r-2]);const o=e;return P(()=>{let a,i;if(s>r){a=s-r;const l=[];for(let u=0;u<a;++u)l.push(1);t=F(t,t.shape.concat(l))}else if(r>s){a=r-s;const l=[];for(let u=0;u<a;++u)l.push(1);n=F(n,n.shape.concat(l))}else a=0;if(i=2===n.shape.length&&2===t.shape.length?o[0]===o[1]?we(D(n,t),o[0]):we(D(Ze(n,[1,0]),t),o[1]):ze(n,t,o[0]!==n.shape.length-1,o[1]===t.shape.length-1),a>0){let l;l=s>r?s+r-3:s-1;const u=[];for(let c=l;c<l+a;++c)u.push(c);i=Kn(i,u)}return 1===i.shape.length&&(i=qt(i,1)),i})}(s,r,o)}interpretAxes(e,s){let r;return r=Array.isArray(this.axes)?this.axes:[Wu(this.axes,e.length),Wu(this.axes,s.length)],r}computeOutputShape(e){C(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const s=e[0].slice(),r=e[1].slice();if(s.length>3||r.length>3)throw new Pe("Dot layer does not support tensors of 4D or higher rank yet.");const o=this.interpretAxes(s,r);s.splice(o[0],1),r.splice(o[1],1),r.splice(0,1);const a=s.concat(r);return 1===a.length&&a.push(1),a}computeMask(e,s){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Dot",n})()),ne((()=>{class n extends qe{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),s={stddev:this.stddev};return Object.assign(s,e),s}call(e,s){return P(()=>{this.invokeCallHook(e,s);const r=De(e);return Lu(()=>ee(Md(r.shape,0,this.stddev),r),()=>r,s.training||!1)})}}return n.className="GaussianNoise",n})()),ne((()=>{class n extends qe{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),s={rate:this.rate};return Object.assign(s,e),s}call(e,s){return P(()=>{this.invokeCallHook(e,s);const r=De(e);return this.rate>0&&this.rate<1?Lu(()=>{const a=Math.sqrt(this.rate/(1-this.rate));return D(r,Md(r.shape,1,a))},()=>r,s.training||!1):r})}}return n.className="GaussianDropout",n})()),ne((()=>{class n extends qe{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||De(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),s={rate:this.rate};return Object.assign(s,e),s}call(e,s){return P(()=>{if(this.rate<1&&this.rate>0){const r=this._getNoiseShape(e);return Lu(()=>{const a=De(e),u=-1.7580993408473766;let c=xr(Kr(r),this.rate);c=er(c,"float32");const h=((1-this.rate)*(1+this.rate*u**2))**-.5,d=-h*u*this.rate,p=ee(D(a,c),D(ee(c,-1),u));return ee(D(p,h),d)},()=>De(e),s.training||!1)}return e})}}return n.className="AlphaDropout",n})()),ne((()=>{class n extends qe{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=It(e.betaInitializer||"zeros"),this.gammaInitializer=It(e.gammaInitializer||"ones"),this.movingMeanInitializer=It(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=It(e.movingVarianceInitializer||"ones"),this.betaConstraint=tn(e.betaConstraint),this.gammaConstraint=tn(e.gammaConstraint),this.betaRegularizer=Ct(e.betaRegularizer),this.gammaRegularizer=Ct(e.gammaRegularizer)}build(e){e=rt(e);const s=this.axis>=0?this.axis:this.axis+e.length,r=e[s];if(null==r)throw new O(`Axis ${s} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new Jt({ndim:e.length,axes:{[s]:r}})];const o=[r];this.scale&&(this.gamma=this.addWeight("gamma",o,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",o,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",o,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",o,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,s){return P(()=>{const r=null!=s.training&&s.training,o=De(e),a=o.shape,i=a.length,l=Rs(0,i),u=this.axis>=0?this.axis:this.axis+i;l.splice(u,1);const c=Vo(1,i);c[u]=a[u];const h=l.slice();h.sort();const d=!Xe(h,Rs(0,i).slice(0,i-1));if(!r)return(()=>{if(d){const w=F(this.movingMean.read(),c),x=F(this.movingVariance.read(),c),S=this.center?F(this.beta.read(),c):null,I=this.scale?F(this.gamma.read(),c):null;return Uu(o,w,x,S,I,this.epsilon)}return Uu(o,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[f,g,m]=function _P(n,t,e,s,r=.001){return Xe(s.slice().sort(),Rs(0,n.rank-1))?function kP(n,t,e,s,r=.001){return P(()=>{const o=xu(n,s),a=o.mean,i=o.variance;return[Uu(n,a,i,e,t,r),a,i]})}(n,t,e,s,r):function TP(n,t,e,s,r=.001){return P(()=>{const o=xu(n,s),a=o.mean,i=o.variance,l=[];for(const f of Rs(0,n.rank))-1!==s.indexOf(f)?l.push(1):l.push(n.shape[f]);const u=F(a,l),c=F(i,l),h=null==t?null:F(t,l),d=null==e?null:F(e,l);return[Uu(n,u,c,d,h,r),a,i]})}(n,t,e,s,r)}(o,this.gamma.read(),this.beta.read(),l,this.epsilon),y=(w,x,S)=>{P(()=>{const I=1-S,k=w.read(),T=D(ye(k,x),I);w.write(ye(k,T))})};return(()=>{y(this.movingMean,g,this.momentum),y(this.movingVariance,m,this.momentum)})(),f})}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:At(this.betaInitializer),gammaInitializer:At(this.gammaInitializer),movingMeanInitializer:At(this.movingMeanInitializer),movingVarianceInitializer:At(this.movingVarianceInitializer),betaRegularizer:gt(this.betaRegularizer),gammaRegularizer:gt(this.gammaRegularizer),betaConstraint:en(this.betaConstraint),gammaConstraint:en(this.gammaConstraint)},s=super.getConfig();return Object.assign(e,s),e}}return n.className="BatchNormalization",n})()),ne((()=>{class n extends qe{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const s of this.axis)if(!Number.isInteger(s))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=It(e.betaInitializer||"zeros"),this.gammaInitializer=It(e.gammaInitializer||"ones"),this.betaRegularizer=Ct(e.betaRegularizer),this.gammaRegularizer=Ct(e.gammaRegularizer),this.supportsMasking=!0}build(e){const s=(e=rt(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let a=0;a<this.axis.length;++a)this.axis[a]<0&&(this.axis[a]+=s);for(const a of this.axis)if(a<0||a>=s)throw new Error(`Invalid axis: ${a}`);if(this.axis.length!==Xr(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const r=this.axis.map(a=>e[a]);this.gamma=this.scale?this.addWeight("gamma",r,"float32",this.gammaInitializer,this.gammaRegularizer,!0):null,this.beta=this.center?this.addWeight("beta",r,"float32",this.betaInitializer,this.betaRegularizer,!0):null,this.built=!0}call(e,s){const r=De(e),o=r.shape,a=o.length;return P(()=>{let{mean:l,variance:u}=xu(r,this.axis,!0);const c=Vo(1,a);for(const m of this.axis)c[m]=o[m];const h=m=>null!=m&&m.shape.length!==a?F(m,c):m;let d=this.scale?h(this.gamma.read()):null,p=this.center?h(this.beta.read()):null;const f=[],g=[];for(let m=0;m<a;++m)-1!==this.axis.indexOf(m)?(f.push(o[m]),g.push(1)):(f.push(1),g.push(o[m]));return l=is(l,f),u=is(u,f),null!=d&&(d=is(d,g)),null!=p&&(p=is(p,g)),Uu(r,l,u,p,d,this.epsilon)})}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:At(this.betaInitializer),gammaInitializer:At(this.gammaInitializer),betaRegularizer:gt(this.betaRegularizer),gammaRegularizer:gt(this.gammaRegularizer)},s=super.getConfig();return Object.assign(e,s),e}}return n.className="LayerNormalization",n})()),ne((()=>{class n extends qe{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new O(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let s,r;if("number"==typeof e.padding[0])s=[e.padding[0],e.padding[0]],r=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new O(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(s=e.padding[0],2!==e.padding[1].length)throw new O(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);r=e.padding[1]}this.padding=[s,r]}this.inputSpec=[new Jt({ndim:4})]}computeOutputShape(e){let s,r;return e=rt(e),"channelsFirst"===this.dataFormat?(s=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,r=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],s,r]):(s=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,r=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],s,r,e[3]])}call(e,s){return P(()=>function EP(n,t,e){return P(()=>{if(4!==n.rank)throw new O(`temporalPadding expects input tensor to be 4-D, but received a ${n.rank}-D tensor.`);if(null==t&&(t=[[1,1],[1,1]]),2!==t.length||2!==t[0].length||2!==t[1].length)throw new O("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==e&&(e="channelsLast"),"channelsLast"!==e&&"channelsFirst"!==e)throw new O(`Unknown data format: ${e}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let s;return s="channelsFirst"===e?[[0,0],[0,0],t[0],t[1]]:[[0,0],t[0],t[1],[0,0]],wr(n,s)})}(De(e),this.padding,this.dataFormat))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},s=super.getConfig();return Object.assign(e,s),e}}return n.className="ZeroPadding2D",n})());class D1 extends qe{constructor(t){if(null==t.poolSize&&(t.poolSize=2),super(t),"number"==typeof t.poolSize)this.poolSize=[t.poolSize];else{if(!Array.isArray(t.poolSize)||1!==t.poolSize.length||"number"!=typeof t.poolSize[0])throw new O(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.poolSize)}`);this.poolSize=t.poolSize}if(un(this.poolSize,"poolSize"),null==t.strides)this.strides=this.poolSize;else if("number"==typeof t.strides)this.strides=[t.strides];else{if(!Array.isArray(t.strides)||1!==t.strides.length||"number"!=typeof t.strides[0])throw new O(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.strides)}`);this.strides=t.strides}un(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,hs(this.padding),this.inputSpec=[new Jt({ndim:3})]}computeOutputShape(t){const e=Ps((t=rt(t))[1],this.poolSize[0],this.padding,this.strides[0]);return[t[0],e,t[2]]}call(t,e){return P(()=>{this.invokeCallHook(t,e),t=Fu(De(t),2);const s=this.poolingFunction(De(t),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return Kn(s,[2])})}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides},e=super.getConfig();return Object.assign(t,e),t}}ne((()=>{class n extends D1{constructor(e){super(e)}poolingFunction(e,s,r,o,a){return Bt(a),hs(o),tp(e,s,r,o,a,"max")}}return n.className="MaxPooling1D",n})()),ne((()=>{class n extends D1{constructor(e){super(e)}poolingFunction(e,s,r,o,a){return Bt(a),hs(o),tp(e,s,r,o,a,"avg")}}return n.className="AveragePooling1D",n})());class F1 extends qe{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(2!==t.strides.length)throw new O(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${t.strides.length}.`);this.strides=t.strides}else this.strides=[t.strides,t.strides];un(this.poolSize,"poolSize"),un(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Bt(this.dataFormat),hs(this.padding),this.inputSpec=[new Jt({ndim:4})]}computeOutputShape(t){t=rt(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],s="channelsFirst"===this.dataFormat?t[3]:t[2];return e=Ps(e,this.poolSize[0],this.padding,this.strides[0]),s=Ps(s,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,s]:[t[0],e,s,t[3]]}call(t,e){return P(()=>(this.invokeCallHook(t,e),this.poolingFunction(De(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}ne((()=>{class n extends F1{constructor(e){super(e)}poolingFunction(e,s,r,o,a){return Bt(a),hs(o),tp(e,s,r,o,a,"max")}}return n.className="MaxPooling2D",n})()),ne((()=>{class n extends F1{constructor(e){super(e)}poolingFunction(e,s,r,o,a){return Bt(a),hs(o),tp(e,s,r,o,a,"avg")}}return n.className="AveragePooling2D",n})());class O1 extends qe{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(3!==t.strides.length)throw new O(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${t.strides.length}.`);this.strides=t.strides}else this.strides=[t.strides,t.strides,t.strides];un(this.poolSize,"poolSize"),un(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Bt(this.dataFormat),hs(this.padding),this.inputSpec=[new Jt({ndim:5})]}computeOutputShape(t){t=rt(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],s="channelsFirst"===this.dataFormat?t[3]:t[2],r="channelsFirst"===this.dataFormat?t[4]:t[3];return e=Ps(e,this.poolSize[0],this.padding,this.strides[0]),s=Ps(s,this.poolSize[1],this.padding,this.strides[1]),r=Ps(r,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,s,r]:[t[0],e,s,r,t[4]]}call(t,e){return P(()=>(this.invokeCallHook(t,e),this.poolingFunction(De(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}ne((()=>{class n extends O1{constructor(e){super(e)}poolingFunction(e,s,r,o,a){return Bt(a),hs(o),R1(e,s,r,o,a,"max")}}return n.className="MaxPooling3D",n})()),ne((()=>{class n extends O1{constructor(e){super(e)}poolingFunction(e,s,r,o,a){return Bt(a),hs(o),R1(e,s,r,o,a,"avg")}}return n.className="AveragePooling3D",n})());class L1 extends qe{constructor(t){super(t),this.inputSpec=[new Jt({ndim:3})]}computeOutputShape(t){return[t[0],t[2]]}call(t,e){throw new Pe}}ne((()=>{class n extends L1{constructor(e){super(e||{})}call(e,s){return P(()=>{const r=De(e);return $t(r,1)})}}return n.className="GlobalAveragePooling1D",n})()),ne((()=>{class n extends L1{constructor(e){super(e||{})}call(e,s){return P(()=>{const r=De(e);return as(r,1)})}}return n.className="GlobalMaxPooling1D",n})());class P1 extends qe{constructor(t){super(t),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Bt(this.dataFormat),this.inputSpec=[new Jt({ndim:4})]}computeOutputShape(t){return"channelsLast"===this.dataFormat?[t[0],t[3]]:[t[0],t[1]]}call(t,e){throw new Pe}getConfig(){const t={dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}ne((()=>{class n extends P1{call(e,s){return P(()=>{const r=De(e);return $t(r,"channelsLast"===this.dataFormat?[1,2]:[2,3])})}}return n.className="GlobalAveragePooling2D",n})()),ne((()=>{class n extends P1{call(e,s){return P(()=>{const r=De(e);return as(r,"channelsLast"===this.dataFormat?[1,2]:[2,3])})}}return n.className="GlobalMaxPooling2D",n})());class M1 extends qe{constructor(t){super(t),this.layer=t.layer}build(t){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(t){null!=this.layer&&(this.layer.trainable=t)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(t){this.layer.setWeights(t)}getConfig(){const t={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},e=super.getConfig();return Object.assign(t,e),t}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(t)}static fromConfig(t,e,s={}){const o=Er(e.layer,s);delete e.layer;const a={layer:o};return Object.assign(a,e),new t(a)}}ne((()=>{class n extends M1{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=rt(e)).length<3)throw new O(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const s=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(s),this.layer.built=!0),super.build(e)}computeOutputShape(e){const s=[(e=rt(e))[0]].concat(e.slice(2)),r=this.layer.computeOutputShape(s);return[r[0],e[1]].concat(r.slice(1))}call(e,s){return P(()=>k1((i,l)=>[De(this.layer.call(i,s)),[]],e=De(e),[],!1,null,null,!1,!0)[1])}}return n.className="TimeDistributed",n})()),ne((()=>{class n extends M1{constructor(e){super(e);const s=e.layer.getConfig(),r={};r.className=e.layer.getClassName(),r.config=s,this.forwardLayer=Er(r),s.goBackwards=!0!==s.goBackwards;const o={};if(o.className=e.layer.getClassName(),o.config=s,this.backwardLayer=Er(o),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,function $P(n){Uo(XO,"BidirectionalMergeMode",n)}(this.mergeMode),e.weights)throw new Pe("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const r=Math.floor(e.length/2);this.forwardLayer.setWeights(e.slice(0,r)),this.backwardLayer.setWeights(e.slice(r))}computeOutputShape(e){let r,o,a,s=this.forwardLayer.computeOutputShape(e);return Array.isArray(s)&&Array.isArray(s[0])||(s=[s]),this.returnState&&(a=s.slice(1)),r=s[0],"concat"===this.mergeMode?(r[r.length-1]*=2,o=[r]):o=null==this.mergeMode?[r,r.slice()]:[r],this.returnState?null==this.mergeMode?o.concat(a).concat(a.slice()):[r].concat(a).concat(a.slice()):Bn(o)}apply(e,s){let r=null==s?null:s.initialState,o=null==s?null:s.constants;null==s&&(s={});const a=N1(e,r,o,this.numConstants);if(e=a.inputs,r=a.initialState,o=a.constants,Array.isArray(e)&&(r=e.slice(1),e=e[0]),(null==r||0===r.length)&&null==o)return super.apply(e,s);const i=[],l=[];if(null!=r){const c=r.length;if(c%2>0)throw new O("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");s.initialState=r,i.push(...r);const h=r.map(d=>new Jt({shape:d.shape}));this.forwardLayer.stateSpec=h.slice(0,c/2),this.backwardLayer.stateSpec=h.slice(c/2),l.push(...h)}if(null!=o)throw new Pe("Support for constants in Bidirectional layers is not implemented yet.");const u=i[0]instanceof sr;for(const c of i)if(c instanceof sr!==u)throw new O("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(u){const c=[e].concat(i),h=this.inputSpec.concat(l),d=this.inputSpec;this.inputSpec=h;const p=super.apply(c,s);return this.inputSpec=d,p}return super.apply(e,s)}call(e,s){return P(()=>{const r=s.initialState;let o,a,i,l;if(null==r)o=this.forwardLayer.call(e,s),a=this.backwardLayer.call(e,s);else{const u=r.slice(0,r.length/2),c=r.slice(r.length/2);o=this.forwardLayer.call(e,Object.assign(s,{initialState:u})),a=this.backwardLayer.call(e,Object.assign(s,{initialState:c}))}return this.returnState&&(Array.isArray(o)&&(i=o.slice(1).concat(a.slice(1))),o=o[0],a=a[0]),this.returnSequences&&(a=ls(a,1)),"concat"===this.mergeMode?l=ey([o,a]):"sum"===this.mergeMode?l=ee(o,a):"ave"===this.mergeMode?l=D(.5,ee(o,a)):"mul"===this.mergeMode?l=D(o,a):null==this.mergeMode&&(l=[o,a]),this.returnState?null==this.mergeMode?l.concat(i):[l].concat(i):l})}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){Go(this.forwardLayer.name,()=>{this.forwardLayer.build(e)}),Go(this.backwardLayer.name,()=>{this.backwardLayer.build(e)}),this.built=!0}computeMask(e,s){let r;if(Array.isArray(s)&&(s=s[0]),r=this.returnSequences?null==this.mergeMode?[s,s]:s:null==this.mergeMode?[null,null]:null,this.returnState){const a=this.forwardLayer.states.map(i=>null);return Array.isArray(r)?r.concat(a).concat(a):[r].concat(a).concat(a)}return r}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},s=super.getConfig();return Object.assign(e,s),e}static fromConfig(e,s){const r=Er(s.layer);if(delete s.layer,null!=s.numConstants)throw new Pe("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const o=s;return o.layer=r,new e(o)}}return n.className="Bidirectional",n})()),ne((()=>{class n extends qe{constructor(e){super(e),this.scale=e.scale,this.offset=e.offset?e.offset:0}getConfig(){const e={scale:this.scale,offset:this.offset},s=super.getConfig();return Object.assign(e,s),e}call(e,s){return P(()=>("float32"!==(e=De(e)).dtype&&(e=er(e,"float32")),ee(D(e,this.scale),this.offset)))}}return n.className="Rescaling",n})());const{resizeBilinear:RP,cropAndResize:DP}=Xn;ne((()=>{class n extends qe{constructor(e){super(e),this.height=e.height,this.width=e.width}centerCrop(e,s,r,o,a,i,l,u){return P(()=>{let c,h=!1;const m=[s/i,r/l,(o+s)/i,(a+r)/l],y=[];3===e.rank?(h=!0,c=Mn([e])):c=e;for(let I=0;I<c.shape[0];I++)y.push(m);const b=ns(y,[y.length,4]),w=vr(0,y.length,1,"int32"),S=DP(c,b,w,[o,a],"nearest");return er(h?De(us(S)):S,u)})}upsize(e,s,r,o){return P(()=>er(RP(e,[s,r]),o))}call(e,s){return P(()=>{const r=De(e),o=r.dtype,a=r.shape,i=a[a.length-3],l=a[a.length-2];let u=0;i!==this.height&&(u=Math.floor((i-this.height)/2));let c=0;return l!==this.width&&(c=Math.floor((l-this.width)/2),0===c&&(c=1)),u>=0&&c>=0?this.centerCrop(r,u,c,this.height,this.width,i,l,o):this.upsize(e,this.height,this.width,o)})}getConfig(){const e={height:this.height,width:this.width},s=super.getConfig();return Object.assign(e,s),e}computeOutputShape(e){const r=(e=rt(e)).length-2;return e[e.length-3]=this.height,e[r]=this.width,e}}return n.className="CenterCrop",n})()),ne((()=>{class n extends qe{constructor(e){super(e),this.numTokens=e.numTokens,this.outputMode=e.outputMode?e.outputMode:"multiHot"}getConfig(){const e={numTokens:this.numTokens,outputMode:this.outputMode},s=super.getConfig();return Object.assign(e,s),e}computeOutputShape(e){return null==(e=rt(e))?[this.numTokens]:"oneHot"===this.outputMode&&1!==e[e.length-1]?(e.push(this.numTokens),e):(e[e.length-1]=this.numTokens,e)}call(e,s){return P(()=>{let r;if("int32"!==(e=De(e)).dtype&&(e=er(e,"int32")),typeof s.countWeights<"u"){if("count"!==this.outputMode)throw new O(`countWeights is not used when outputMode !== count.\n              Received countWeights=${s.countWeights}`);r=De(s.countWeights)}const o=as(e),a=ui(e),i=_n(this.numTokens,o).bufferSync().get(0),l=xr(a,0).bufferSync().get(0);if(!i||!l)throw new O(`Input values must be between 0 < values <= numTokens with numTokens=${this.numTokens}`);return function FP(n,t,e,s){let r=De(n);if("int32"!==r.dtype&&(r=er(r,"int32")),"int"===t)return r;const o=r.shape;if(0===r.rank&&(r=qt(r,-1)),"oneHot"===t&&1!==r.shape[r.shape.length-1]&&(r=qt(r,-1)),r.rank>2)throw new O(`When outputMode is not int, maximum output rank is 2 Received outputMode ${t} and input shape ${o} which would result in output rank ${r.rank}.`);const a=["multiHot","oneHot"].includes(t);let l;if(l=Ph(r,typeof s<"u"&&"count"===t?s:[],e,a),"tfIdf"!==t)return l;if(s)return D(l,s);throw new O("When outputMode is 'tfIdf', weights must be provided.")}(e,this.outputMode,this.numTokens,r)})}}return n.className="CategoryEncoding",n})());const z1=new Set(["bilinear","nearest"]);ne((()=>{class n extends qe{constructor(e){if(super(e),this.height=e.height,this.width=e.width,e.interpolation){if(!z1.has(e.interpolation))throw new O(`Invalid interpolation parameter: ${e.interpolation} is not implemented`);this.interpolation=e.interpolation}else this.interpolation="bilinear";this.cropToAspectRatio=!!e.cropToAspectRatio}computeOutputShape(e){return e=rt(e),[this.height,this.width,e[2]]}getConfig(){const e={height:this.height,width:this.width,interpolation:this.interpolation,cropToAspectRatio:this.cropToAspectRatio},s=super.getConfig();return Object.assign(e,s),e}call(e,s){return P(()=>{const r=[this.height,this.width];if("bilinear"===this.interpolation)return Xn.resizeBilinear(e,r,!this.cropToAspectRatio);if("nearest"===this.interpolation)return Xn.resizeNearestNeighbor(e,r,!this.cropToAspectRatio);throw new Error(`Interpolation is ${this.interpolation} but only ${[...z1]} are supported`)})}}return n.className="Resizing",n})());let LP=(()=>{class n{constructor(e){this.seed=e}next(){if(void 0!==this.seed)return this.seed++}}return n.className="RandomSeed",n})(),PP=(()=>{class n extends qe{constructor(e){super(e),this.randomGenerator=new LP(e.seed)}getConfig(){const e={seed:this.randomGenerator.seed},s=super.getConfig();return Object.assign(e,s),e}}return n.className="BaseRandomLayer",n})();const B1=new Set(["bilinear","nearest"]);function Se(n,t){Array.isArray(n)||(n=[n]),n.forEach(e=>{null!=e&&C("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors in the CPU backend.`)})}ne((()=>{class n extends PP{constructor(e){super(e);const{factor:s,interpolation:r="bilinear"}=e;if(this.factor=s,Array.isArray(this.factor)&&2===this.factor.length)this.widthLower=this.factor[0],this.widthUpper=this.factor[1];else{if(Array.isArray(this.factor)||!(this.factor>0))throw new O(`Invalid factor: ${this.factor}. Must be positive number or tuple of 2 numbers`);this.widthLower=-this.factor,this.widthUpper=this.factor}if(this.widthLower<-1||this.widthUpper<-1)throw new O(`factor must have values larger than -1. Got: ${this.factor}`);if(this.widthUpper<this.widthLower)throw new O(`factor cannot have upper bound less than lower bound.\n        Got upper bound: ${this.widthUpper}.\n        Got lower bound: ${this.widthLower}\n      `);if(r){if(!B1.has(r))throw new O(`Invalid interpolation parameter: ${r} is not implemented`);this.interpolation=r}}getConfig(){const e={factor:this.factor,interpolation:this.interpolation},s=super.getConfig();return Object.assign(e,s),e}computeOutputShape(e){return e=rt(e),[this.imgHeight,-1,e[2]]}call(e,s){return P(()=>{const r=De(e);this.imgHeight=r.shape[r.shape.length-3];const o=r.shape[r.shape.length-2];this.widthFactor=Kr([1],1+this.widthLower,1+this.widthUpper,"float32",this.randomGenerator.next());let a=this.widthFactor.dataSync()[0]*o;a=Math.round(a);const i=[this.imgHeight,a];switch(this.interpolation){case"bilinear":return Xn.resizeBilinear(e,i);case"nearest":return Xn.resizeNearestNeighbor(e,i);default:throw new Error(`Interpolation is ${this.interpolation}\n          but only ${[...B1]} are supported`)}})}}return n.className="RandomWidth",n})()),Symbol("out"),Symbol("field"),Symbol("quote"),Symbol("quoteafterquote"),Symbol("quoteinquote");const f3=sd;let m3=(()=>{class n extends sc{nextDataId(){return n.nextDataId++}constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new Op(this,ss())}write(e,s,r){this.firstUse&&(this.firstUse=!1,z().get("IS_NODE")&&ts("\n============================\nHi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. \n============================"));const o={id:this.nextDataId()};return this.data.set(o,{values:e,dtype:r,refCount:1}),o}makeTensorInfo(e,s,r){let o;if("string"===s&&null!=r&&r.length>0&&Bs(r[0])){const a=r.map(i=>Vs(i));o=this.write(a,e,s)}else o=this.write(r,e,s);return{dataId:o,shape:e,dtype:s}}refCount(e){return this.data.has(e)?this.data.get(e).refCount:0}incRef(e){this.data.get(e).refCount++}decRef(e){this.data.has(e)&&this.data.get(e).refCount--}move(e,s,r,o,a){this.data.set(e,{values:s,dtype:o,refCount:a})}numDataIds(){return this.data.numDataIds()}read(e){var s=this;return(0,Y.Z)(function*(){return s.readSync(e)})()}readSync(e){const{dtype:s,complexTensorInfos:r}=this.data.get(e);return"complex64"===s?Ir(this.readSync(r.real.dataId),this.readSync(r.imag.dataId)):_b(this.data.get(e).values,s)}bufferSync(e){const s=this.readSync(e.dataId);if("string"===e.dtype)try{const r=s.map(o=>dr(o));return Me(e.shape,e.dtype,r)}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return Me(e.shape,e.dtype,s)}makeOutput(e,s,r){return ss().makeTensorFromTensorInfo(this.makeTensorInfo(s,r,e),this)}disposeData(e,s=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!s&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:r}=this.data.get(e);null!=r&&(this.disposeData(r.real.dataId,!0),this.disposeData(r.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}time(e){return(0,Y.Z)(function*(){const s=Nn();return e(),{kernelMs:Nn()-s}})()}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){Se([e],"where");const s=this.readSync(e.dataId);return f3(e.shape,s)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}return n.nextDataId=0,n})();function or(n){return(t,e,s)=>{const r=Ft(e,t.length);for(let o=0;o<t.length;++o)r[o]=n(t[o],s);return r}}function ct(n,t,e){return so(n,or(t),e)}function so(n,t,e){return({inputs:s,attrs:r,backend:o})=>{const{x:a}=s;Se(a,n);const i=o,l=i.data.get(a.dataId).values;let u;if("string"===a.dtype){if(!Array.isArray(l))throw new Error("String tensor's value was not an instance of Array");u=Cr(l)}else u=l;const c=e||a.dtype,h=t(u,c,r);return i.makeTensorInfo(a.shape,c,h)}}bf("cpu",()=>new m3,1);const tS=ct(ga,n=>n>=0?n:Math.exp(n)-1),y3={kernelName:ga,backendName:"cpu",kernelFunc:tS};function ar(n){const{inputs:t,backend:e}=n,{x:s}=t;return e.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const b3={kernelName:Ia,backendName:"cpu",kernelFunc:ar};function nS(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{alpha:o}=s;Se([r],"leakyRelu");const a=j(r.shape),i=e.data.get(r.dataId).values,l=sn("float32",a);for(let u=0;u<i.length;u++)l[u]=i[u]<0?o*i[u]:i[u];return e.makeTensorInfo(r.shape,"float32",l)}const x3={kernelName:dl,backendName:"cpu",kernelFunc:nS};function Vt(n){return(t,e,s,r,o)=>{const a=Le(t,e),i=a.length,l=Te(a),c=sn(o,j(a)),h=t.length,d=e.length,p=Te(t),f=Te(e),g=_o(t,a),m=_o(e,a);if(g.length+m.length===0)for(let y=0;y<c.length;++y)c[y]=n(s[y%s.length],r[y%r.length]);else for(let y=0;y<c.length;++y){const b=xo(y,i,l),w=b.slice(-h);g.forEach(k=>w[k]=0);const x=Cs(w,h,p),S=b.slice(-d);m.forEach(k=>S[k]=0);const I=Cs(S,d,f);c[y]=n(s[x],r[I])}return[c,a]}}const w3=Vt((n,t)=>n<0?t*n:n);function sS(n){const{inputs:t,backend:e}=n,{x:s,alpha:r}=t;Se([s,r],"prelu");const o=e.data.get(s.dataId).values,a=e.data.get(r.dataId).values,[i,l]=w3(s.shape,r.shape,o,a,"float32");return e.makeTensorInfo(l,"float32",i)}const v3={kernelName:Al,backendName:"cpu",kernelFunc:sS},rS=ct(Oa,n=>Math.max(0,n)),S3={kernelName:Oa,backendName:"cpu",kernelFunc:rS},oS=ct(La,n=>Math.min(Math.max(0,n),6)),I3={kernelName:La,backendName:"cpu",kernelFunc:oS},C3=or(n=>1/(1+Math.exp(-n))),aS=ct(Ua,n=>1/(1+Math.exp(-n))),N3={kernelName:Ua,backendName:"cpu",kernelFunc:aS};function ap(n,t,e,s,r){if("linear"===e)return ar({inputs:{x:t},backend:n});if("relu"===e)return rS({inputs:{x:t},backend:n});if("elu"===e)return tS({inputs:{x:t},backend:n});if("relu6"===e)return oS({inputs:{x:t},backend:n});if("prelu"===e)return sS({inputs:{x:t,alpha:s},backend:n});if("leakyrelu"===e)return nS({inputs:{x:t},backend:n,attrs:{alpha:r}});if("sigmoid"===e)return aS({inputs:{x:t},backend:n});throw new Error(`Activation ${e} has not been implemented for the CPU backend.`)}function Yn(n){const{inputs:t,backend:e}=n,{real:s,imag:r}=t,o=e.data.get(s.dataId).values,a=e.data.get(r.dataId).values,i=e.makeTensorInfo(s.shape,"complex64");return e.data.get(i.dataId).complexTensorInfos={real:e.makeTensorInfo(s.shape,"float32",o),imag:e.makeTensorInfo(r.shape,"float32",a)},i}const k3={kernelName:mc,backendName:"cpu",kernelFunc:Yn};function ip(n,t,e="float32"){if("complex64"===e)return Yn({inputs:{real:ip(n,t,"float32"),imag:ip(n,t,"float32")},backend:n});const s=hn(j(t),e);return n.makeTensorInfo(t,e,s)}function qo(n){const{inputs:t,backend:e}=n,{input:s}=t,r=e.data.get(s.dataId).complexTensorInfos.real,o=e.data.get(r.dataId).values;return e.makeTensorInfo(r.shape,r.dtype,o)}const T3={kernelName:Zc,backendName:"cpu",kernelFunc:qo};function iS(n,t,e,s){if("int32"===s)return[t,"int32",Int32Array.from(n)];if("bool"===s){const r=Mr([0],e),[o,a]=Vt((i,l)=>i!==l?1:0)(t,[],n,r,"bool");return[a,"bool",o]}throw new Error(`Error in Cast: failed to cast ${e} to ${s}`)}function ro(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{dtype:o}=s;if("complex64"===o){if("complex64"===r.dtype)return ar({inputs:{x:r},backend:e});const c=ip(e,r.shape,r.dtype),h=ro({inputs:{x:r},backend:e,attrs:{dtype:"float32"}}),d=Yn({inputs:{real:h,imag:c},backend:e});return e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(h),d}if("complex64"===r.dtype){const c=qo({inputs:{input:r},backend:e}),h=ro({inputs:{x:c},backend:e,attrs:{dtype:o}});return e.disposeIntermediateTensorInfo(c),h}if(!zp(r.dtype,o)){const c=ar({inputs:{x:r},backend:e});return{dataId:c.dataId,shape:c.shape,dtype:o}}const a=e.data.get(r.dataId).values,[i,l,u]=iS(a,r.shape,r.dtype,o);return e.makeTensorInfo(i,l,u)}const _3={kernelName:ca,backendName:"cpu",kernelFunc:ro};function nn(n,t,e,s){return null==e?({inputs:r,backend:o})=>{const{a,b:i}=r,l=o;Se([a,i],n);const u=l.data.get(a.dataId).values,c=l.data.get(i.dataId).values,h="string"===a.dtype?Cr(u):u,d="string"===a.dtype?Cr(c):c,p=s||a.dtype,[f,g]=t(a.shape,i.shape,h,d,p);return l.makeTensorInfo(g,p,f)}:({inputs:r,backend:o})=>{const{a,b:i}=r,l=o;if("complex64"===a.dtype||"complex64"===i.dtype){const u=ro({inputs:{x:a},backend:l,attrs:{dtype:"complex64"}}),c=l.data.get(u.dataId),d=c.complexTensorInfos.imag,p=l.data.get(c.complexTensorInfos.real.dataId).values,f=l.data.get(d.dataId).values,g=ro({inputs:{x:i},backend:l,attrs:{dtype:"complex64"}}),m=l.data.get(g.dataId),b=m.complexTensorInfos.imag,w=l.data.get(m.complexTensorInfos.real.dataId).values,x=l.data.get(b.dataId).values,[S,I,k]=e(a.shape,i.shape,p,f,w,x),T=l.makeTensorInfo(k,"float32",S),_=l.makeTensorInfo(k,"float32",I),E=Yn({inputs:{real:T,imag:_},backend:l});return l.disposeIntermediateTensorInfo(u),l.disposeIntermediateTensorInfo(g),l.disposeIntermediateTensorInfo(T),l.disposeIntermediateTensorInfo(_),E}{const u=l.data.get(a.dataId).values,c=l.data.get(i.dataId).values,h=s||a.dtype,[d,p]=t(a.shape,i.shape,u,c,h);return l.makeTensorInfo(p,h,d)}}}function Uy(n){return(t,e,s,r,o,a)=>{const i=Le(t,e),l=j(i),u=i.length,c=Te(i),h=sn("float32",l),d=sn("float32",l),p=_o(t,i),f=_o(e,i),g=Ir(s,r),m=Ir(o,a),y=t.length,b=Te(t),w=e.length,x=Te(e);if(p.length+f.length===0)for(let S=0;S<h.length;S++){const I=S%g.length,k=S%m.length,T=n(g[2*I],g[2*I+1],m[2*k],m[2*k+1]);h[S]=T.real,d[S]=T.imag}else for(let S=0;S<h.length;S++){const I=xo(S,u,c),k=I.slice(-y);p.forEach(B=>k[B]=0);const T=Cs(k,y,b),_=I.slice(-w);f.forEach(B=>_[B]=0);const E=Cs(_,w,x),L=n(g[2*T],g[2*T+1],m[2*E],m[2*E+1]);h[S]=L.real,d[S]=L.imag}return[h,d,i]}}const lS=Vt((n,t)=>n+t),E3=Uy((n,t,e,s)=>({real:n+e,imag:t+s})),Ei=nn(wo,lS,E3),$3={kernelName:wo,backendName:"cpu",kernelFunc:Ei};function xt(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{shape:o}=s,a=j(r.shape),i=Mp(o,a),l=j(i);C(a===l,()=>`The new shape (${i}) has ${l} elements and the old shape (${r.shape}) has ${a} elements. The new shape and old shape must have the same number of elements.`),e.incRef(r.dataId);const u=e.data.get(r.dataId);if(null!=u.complexTensorInfos){const h=u.complexTensorInfos.imag;u.complexTensorInfos.real.shape=i,h.shape=i}return{dataId:r.dataId,shape:i,dtype:r.dtype}}const A3={kernelName:Dl,backendName:"cpu",kernelFunc:xt};function uS(n){const{inputs:t,backend:e,attrs:s}=n,{a:r,b:o}=t,{transposeA:a,transposeB:i}=s;Se([r,o],"matMul");const l=r.shape.length,u=o.shape.length,c=a?r.shape[l-2]:r.shape[l-1],h=i?o.shape[u-1]:o.shape[u-2],d=a?r.shape[l-1]:r.shape[l-2],p=i?o.shape[u-2]:o.shape[u-1],f=r.shape.slice(0,-2),g=o.shape.slice(0,-2),m=j(f),y=j(g),w=Le(r.shape.slice(0,-2),o.shape.slice(0,-2)).concat([d,p]);C(c===h,()=>`Error in matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${r.shape} and ${o.shape} and transposeA=${a} and transposeB=${i} must match.`);const S=i?[y,p,h]:[y,h,p],I=xt({inputs:{x:r},backend:e,attrs:{shape:a?[m,c,d]:[m,d,c]}}),k=xt({inputs:{x:o},backend:e,attrs:{shape:S}}),T=a?I.shape[1]:I.shape[2],_=a?I.shape[2]:I.shape[1],E=i?k.shape[1]:k.shape[2],L=Math.max(m,y),B=e.data.get(I.dataId).values,W=e.data.get(k.dataId).values,U=Te(I.shape),G=Te(k.shape),[K,X,H]=a?[U[0],1,U[1]]:[U[0],U[1],1],[Z,se,oe]=i?[1,G[1],G[0]]:[G[1],1,G[0]],ce=_*E,ie=Me([L,_,E],I.dtype),ge=ie.values,he=e.blockSize;for(let be=0;be<L;be++){const _e=be%m,Ae=be%y;for(let $e=0;$e<_;$e+=he){const Ve=Math.min($e+he,_);for(let He=0;He<E;He+=he){const ht=Math.min(He+he,E);for(let wt=0;wt<T;wt+=he){const Ot=Math.min(wt+he,T);for(let vt=$e;vt<Ve;vt++)for(let mt=He;mt<ht;mt++){let Rt=0;for(let Nt=wt;Nt<Ot;Nt++)Rt+=B[_e*K+vt*X+Nt*H]*W[Nt*Z+mt*se+Ae*oe];ge[be*ce+(vt*E+mt)]+=Rt}}}}}return e.disposeIntermediateTensorInfo(I),e.disposeIntermediateTensorInfo(k),e.makeTensorInfo(w,ie.dtype,ie.values)}const R3={kernelName:Zi,backendName:"cpu",kernelFunc:uS},F3={kernelName:ql,backendName:"cpu",kernelFunc:function D3(n){const{inputs:t,backend:e,attrs:s}=n,{a:r,b:o,bias:a,preluActivationWeights:i}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;let d,p,f;const g=[];d=uS({inputs:{a:r,b:o},attrs:{transposeA:l,transposeB:u},backend:e}),a&&(p=Ei({inputs:{a:d,b:a},backend:e}),g.push(d),d=p),c&&(f=ap(e,d,c,i,h),g.push(d),d=f);for(const y of g)e.disposeIntermediateTensorInfo(y);return d}};function cS(n){const t=new Float32Array(n.length);for(let e=0;e<n.length;++e)t[e]=Math.abs(n[e]);return t}const O3={kernelName:Gi,backendName:"cpu",kernelFunc:n=>{const{x:t}=n.inputs,e=n.backend;Se(t,"abs");let s=new Float32Array(j(t.shape));return s=cS(e.data.get(t.dataId).values),e.makeOutput(s,t.shape,t.dtype)}},L3=ct(sa,n=>Math.acos(n)),P3={kernelName:sa,backendName:"cpu",kernelFunc:L3},M3=ct(ra,n=>Math.acosh(n)),z3={kernelName:ra,backendName:"cpu",kernelFunc:M3},V3={kernelName:Hi,backendName:"cpu",kernelFunc:function B3(n){const{inputs:t,backend:e}=n,s=t;Se(t,"addN");const r=s.map(i=>e.data.get(i.dataId).values),o=Me(s[0].shape,s[0].dtype),a=o.values;for(let i=0;i<s.length;i++){const l=r[i];for(let u=0;u<a.length;u++)a[u]+=l[u]}return e.makeTensorInfo(o.shape,o.dtype,o.values)}};function Gy(n,t,e,s,r){const o=t.length,a=j(t),i=Te(t),l=Te(r),u=sn(e,j(r));for(let c=0;c<a;++c){const h=xo(c,o,i),d=new Array(h.length);for(let f=0;f<d.length;f++)d[f]=h[s[f]];u[Cs(d,o,l)]=n[c]}return u}function Wn(n){const{inputs:t,attrs:e,backend:s}=n,{x:r}=t,{perm:o}=e;Se(r,"transpose");const i=new Array(r.shape.length);for(let h=0;h<i.length;h++)i[h]=r.shape[o[h]];const u=Gy(s.data.get(r.dataId).values,r.shape,r.dtype,o,i);return{dataId:s.write(u,i,r.dtype),shape:i,dtype:r.dtype}}const W3={kernelName:vo,backendName:"cpu",kernelFunc:Wn},G3={kernelName:uc,backendName:"cpu",kernelFunc:function U3(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s;Se(r,"all");const i=Ue(o,r.shape);let l=i;const u=Et(l,r.shape.length);let c=r;null!=u&&(c=Wn({inputs:{x:r},backend:e,attrs:{perm:u}}),l=zt(l.length,r.shape.length)),mn("all",l,c.shape.length);const[h,d]=ln(c.shape,l),p=j(d),f=hn(j(h),c.dtype),g=e.data.get(c.dataId).values;for(let y=0;y<f.length;++y){const b=y*p;let w=g[b];for(let x=0;x<p;++x)w=w&&g[b+x];f[y]=w}null!=u&&e.disposeIntermediateTensorInfo(c);const m=e.makeTensorInfo(h,c.dtype,f);if(a){const b=xt({inputs:{x:m},backend:e,attrs:{shape:Mt(h,i)}});return e.disposeIntermediateTensorInfo(m),b}return m}},j3={kernelName:cc,backendName:"cpu",kernelFunc:function H3(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s;Se(r,"any");const i=Ue(o,r.shape);let l=i;const u=Et(l,r.shape.length);let c=r;null!=u&&(c=Wn({inputs:{x:r},backend:e,attrs:{perm:u}}),l=zt(l.length,r.shape.length)),mn("any",l,c.shape.length);const[h,d]=ln(c.shape,l),p=j(d),f=hn(j(h),c.dtype),g=e.data.get(c.dataId).values;for(let y=0;y<f.length;++y){const b=y*p;let w=g[b];for(let x=0;x<p;++x)w=w||g[b+x];f[y]=w}null!=u&&e.disposeIntermediateTensorInfo(c);const m=e.makeTensorInfo(h,c.dtype,f);if(a){const b=xt({inputs:{x:m},backend:e,attrs:{shape:Mt(h,i)}});return e.disposeIntermediateTensorInfo(m),b}return m}},K3={kernelName:ji,backendName:"cpu",kernelFunc:function q3(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o}=s;Se(r,"argMax");let a=Ue(o,r.shape);const i=Et(a,r.shape.length);let l=r;const u=[];null!=i&&(l=Wn({inputs:{x:r},backend:e,attrs:{perm:i}}),u.push(l),a=zt(a.length,l.shape.length)),a=[a[0]],mn("argMax",a,l.shape.length);const[c,h]=ln(l.shape,a),p=hn(j(c),"int32"),f=j(h),g=e.data.get(l.dataId).values;for(let m=0;m<p.length;++m){const y=m*f;let b=g[y],w=0;for(let x=0;x<f;++x){const S=g[y+x];S>b&&(b=S,w=x)}p[m]=w}return u.forEach(m=>e.disposeIntermediateTensorInfo(m)),e.makeTensorInfo(c,"int32",p)}},Z3={kernelName:qi,backendName:"cpu",kernelFunc:function X3(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o}=s;Se(r,"argMin");let a=Ue(o,r.shape);const i=Et(a,r.shape.length);let l=r;const u=[];null!=i&&(l=Wn({inputs:{x:r},backend:e,attrs:{perm:i}}),u.push(l),a=zt(a.length,l.shape.length)),a=[a[0]],mn("argMin",a,l.shape.length);const[c,h]=ln(l.shape,a),p=hn(j(c),"int32"),f=j(h),g=e.data.get(l.dataId).values;for(let m=0;m<p.length;++m){const y=m*f;let b=g[y],w=0;for(let x=0;x<f;++x){const S=g[y+x];S<b&&(b=S,w=x)}p[m]=w}return u.forEach(m=>e.disposeIntermediateTensorInfo(m)),e.makeTensorInfo(c,"int32",p)}},Y3=ct(oa,n=>Math.asin(n)),Q3={kernelName:oa,backendName:"cpu",kernelFunc:Y3},J3=ct(aa,n=>Math.asinh(n)),eM={kernelName:aa,backendName:"cpu",kernelFunc:J3},tM=ct(ia,n=>Math.atan(n)),nM={kernelName:ia,backendName:"cpu",kernelFunc:tM},sM=Vt((n,t)=>Math.atan2(n,t)),rM=nn(ua,sM),oM={kernelName:ua,backendName:"cpu",kernelFunc:rM},aM=ct(la,n=>Math.atanh(n)),iM={kernelName:la,backendName:"cpu",kernelFunc:aM};function Hy(n,t,e,s,r,o){const a=r.strideHeight,i=r.strideWidth,l=r.dilationHeight,u=r.dilationWidth,c=r.effectiveFilterHeight,h=r.effectiveFilterWidth,d=r.padInfo.top,p=r.padInfo.left,f="max"===o?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,g=Me(r.outShape,e),m=g.values,y=r.outShape[1]*r.outShape[2]*r.outShape[3],b=r.outShape[2]*r.outShape[3],w=r.outShape[3];for(let x=0;x<r.batchSize;++x){const S=x*y,I=x*s[0];for(let k=0;k<r.inChannels;++k)for(let T=0;T<r.outHeight;++T){const _=T*a-d,E=Math.max(0,_),L=Math.min(r.inHeight,c+_),B=S+T*b;for(let W=0;W<r.outWidth;++W){const U=W*i-p,G=Math.max(0,U),K=Math.min(r.inWidth,h+U);let X=f,H=0,Z=0;for(let oe=E;oe<L;oe+=l){const ce=I+oe*s[1];for(let ie=G;ie<K;ie+=u){const he=n[ce+ie*s[2]+k];"max"===o&&he>X?X=he:"avg"===o&&(H+=he,Z++)}if(isNaN(X))break}m[B+W*w+k]="avg"===o?H/Z:X}}}return g}function hS(n,t,e,s,r=!1,o=!1){const a=Me(s.outShape,"int32"),i=s.strideHeight,l=s.strideWidth,u=s.dilationHeight,c=s.dilationWidth,h=s.effectiveFilterHeight,d=s.effectiveFilterWidth,p=s.padInfo.top,f=s.padInfo.left,g=Me(t,e,n);for(let m=0;m<s.batchSize;++m)for(let y=0;y<s.inChannels;++y)for(let b=0;b<s.outHeight;++b){const w=b*i-p;let x=w;for(;x<0;)x+=u;const S=Math.min(s.inHeight,h+w);for(let I=0;I<s.outWidth;++I){const k=I*l-f;let T=k;for(;T<0;)T+=c;const _=Math.min(s.inWidth,d+k);let E=Number.NEGATIVE_INFINITY,L=-1;for(let B=x;B<S;B+=u){const W=B-w;for(let U=T;U<_;U+=c){const G=U-k,K=g.get(m,B,U,y);K>E&&(E=K,L=r?o?((m*s.inHeight+B)*s.inWidth+U)*s.inChannels+y:(B*s.inWidth+U)*s.inChannels+y:W*d+G)}}a.set(L,m,b,I,y)}}return a}function dS(n,t,e,s,r,o){const a=r.strideDepth,i=r.strideHeight,l=r.strideWidth,u=r.dilationDepth,c=r.dilationHeight,h=r.dilationWidth,d=r.effectiveFilterDepth,p=r.effectiveFilterHeight,f=r.effectiveFilterWidth,g=r.padInfo.front,m=r.padInfo.top,y=r.padInfo.left,b="max"===o?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,w=Me(r.outShape,e),x=w.values,S=r.outShape[1]*r.outShape[2]*r.outShape[3]*r.outShape[4],I=r.outShape[2]*r.outShape[3]*r.outShape[4],k=r.outShape[3]*r.outShape[4],T=r.outShape[4];for(let _=0;_<r.batchSize;++_){const E=_*S,L=_*s[0];for(let B=0;B<r.inChannels;++B)for(let W=0;W<r.outDepth;++W){const U=W*a-g;let G=U;for(;G<0;)G+=u;const K=Math.min(r.inDepth,d+U),X=E+W*I;for(let H=0;H<r.outHeight;++H){const Z=H*i-m;let se=Z;for(;se<0;)se+=c;const oe=Math.min(r.inHeight,p+Z),ce=X+H*k;for(let ie=0;ie<r.outWidth;++ie){const ge=ie*l-y;let he=ge;for(;he<0;)he+=h;const be=Math.min(r.inWidth,f+ge),_e=ce+ie*T;let Ae=b,$e=0,Ve=0;for(let ht=G;ht<K;ht+=u){const wt=L+ht*s[1];for(let Ot=se;Ot<oe;Ot+=c){const vt=wt+Ot*s[2];for(let mt=he;mt<be;mt+=h){const Nt=n[vt+mt*s[3]+B];if("max"===o&&Nt>Ae?Ae=Nt:"avg"===o&&($e+=Nt,Ve++),isNaN(Ae))break}if(isNaN(Ae))break}if(isNaN(Ae))break}x[_e+B]="avg"===o?$e/Math.max(Ve,1):Ae}}}}return w}const cM={kernelName:Ki,backendName:"cpu",kernelFunc:function uM(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t;Se(r,"avgPool");const{filterSize:o,strides:a,pad:i,dimRoundingMode:l}=s;C(pn(a,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${a} and dilations '1'`);const c=gs(r.shape,o,a,1,i,l);let h;if(1===c.filterWidth&&1===c.filterHeight&&Xe(c.inShape,c.outShape))h=ar({inputs:{x:r},backend:e});else{const d=e.data.get(r.dataId).values,p=Te(r.shape),f=Hy(d,0,r.dtype,p,c,"avg");h=e.makeTensorInfo(c.outShape,r.dtype,f.values)}return h}},dM={kernelName:Xi,backendName:"cpu",kernelFunc:function hM(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{filterSize:o,strides:a,pad:i,dimRoundingMode:l,dataFormat:u}=s;Se(r,"avgPool3d");const c=gr(r.shape,o,a,1,i,l,u),d=dS(e.data.get(r.dataId).values,0,r.dtype,Te(r.shape),c,"avg");return e.makeTensorInfo(d.shape,"float32",d.values)}},fM={kernelName:dc,backendName:"cpu",kernelFunc:function pM(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o}=t,{filterSize:a,strides:i,pad:l,dimRoundingMode:u}=s;Se([r,o],"avgPool3DGrad");const c=gr(o.shape,a,i,1,l,u),h=c.strideDepth,d=c.strideHeight,p=c.strideWidth,f=c.filterDepth,g=c.filterHeight,m=c.filterWidth,y=c.dilationDepth,b=c.dilationHeight,w=c.dilationWidth,x=c.effectiveFilterDepth,S=c.effectiveFilterHeight,I=c.effectiveFilterWidth,k=x-1-c.padInfo.front,T=I-1-c.padInfo.left,_=S-1-c.padInfo.top,E=Me(o.shape,"float32"),L=1/(f*g*m),B=e.bufferSync(r);for(let W=0;W<c.batchSize;++W)for(let U=0;U<c.inChannels;++U)for(let G=0;G<c.inDepth;++G)for(let K=0;K<c.inHeight;++K)for(let X=0;X<c.inWidth;++X){const H=G-k,Z=K-_,se=X-T;let oe=0;for(let ce=0;ce<x;ce+=y){const ie=(H+ce)/h;if(!(ie<0||ie>=c.outDepth||Math.floor(ie)!==ie))for(let ge=0;ge<S;ge+=b){const he=(Z+ge)/d;if(!(he<0||he>=c.outHeight||Math.floor(he)!==he))for(let be=0;be<I;be+=w){const _e=(se+be)/p;_e<0||_e>=c.outWidth||Math.floor(_e)!==_e||(oe+=B.get(W,ie,he,_e,U))}}}E.set(oe*L,W,G,K,X,U)}return e.makeTensorInfo(E.shape,E.dtype,E.values)}},gM={kernelName:hc,backendName:"cpu",kernelFunc:function mM(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o}=t,a=o;Se([r,o],"avgPoolGrad");const{filterSize:i,strides:l,pad:u}=s,c=gs(a.shape,i,l,1,u),h=c.strideHeight,d=c.strideWidth,p=c.filterHeight,f=c.filterWidth,g=c.dilationHeight,m=c.dilationWidth,y=c.effectiveFilterHeight,b=c.effectiveFilterWidth,w=b-1-c.padInfo.left,x=y-1-c.padInfo.top,S=Me(a.shape,"float32"),I=1/(p*f),k=e.data.get(r.dataId).values,T=Me(r.shape,"float32",k);for(let _=0;_<c.batchSize;++_)for(let E=0;E<c.inChannels;++E)for(let L=0;L<c.inHeight;++L)for(let B=0;B<c.inWidth;++B){const W=L-x,U=B-w;let G=0;for(let K=0;K<y;K+=g){const X=(W+K)/h;if(!(X<0||X>=c.outHeight||Math.floor(X)!==X))for(let H=0;H<b;H+=m){const Z=(U+H)/d;Z<0||Z>=c.outWidth||Math.floor(Z)!==Z||(G+=T.get(_,X,Z,E))}}S.set(G*I,_,L,B,E)}return e.makeTensorInfo(S.shape,S.dtype,S.values)}},bM={kernelName:ul,backendName:"cpu",kernelFunc:function yM(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,scale:o,offset:a,mean:i,variance:l}=t;C(i.shape.length===l.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),C(null==a||i.shape.length===a.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),C(null==o||i.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks."),Se([r,i,l,o,a],"batchNorm");let{varianceEpsilon:u}=s;null==u&&(u=.001);const c=e.data.get(r.dataId).values,h=e.data.get(i.dataId).values,d=e.data.get(l.dataId).values,p=o?e.data.get(o.dataId).values:new Float32Array([1]),f=a?e.data.get(a.dataId).values:new Float32Array([0]),g=new Float32Array(c.length),m=f.length,y=p.length,b=d.length,w=h.length;let x=0,S=0,I=0,k=0;for(let T=0;T<c.length;++T)g[T]=f[x++]+(c[T]-h[S++])*p[I++]/Math.sqrt(d[k++]+u),x>=m&&(x=0),S>=w&&(S=0),I>=y&&(I=0),k>=b&&(k=0);return e.makeTensorInfo(r.shape,r.dtype,g)}};function pS(n,t,e,s,r){const o=Bf(s,t,e),a=j(e),i=Te(s);if(o){const h=Vf(t,i);return"string"===r?n.slice(h,h+a):n.subarray(h,h+a)}const u=Me(s,r,"string"===r?Cr(n):n),c=Me(e,r);for(let h=0;h<c.size;++h){const d=c.indexToLoc(h),p=d.map((f,g)=>f+t[g]);c.set(u.get(...p),...d)}return"string"===r?ww(c.values):c.values}function Ko(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{begin:o,size:a}=s;Se(r,"slice");const[i,l]=Ah(r,o,a);Mf(r,i,l);const c=pS(e.data.get(r.dataId).values,i,l,r.shape,r.dtype);return e.makeTensorInfo(l,r.dtype,c)}const xM={kernelName:Ml,backendName:"cpu",kernelFunc:Ko},vM={kernelName:Yi,backendName:"cpu",kernelFunc:function wM(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockShape:o,crops:a}=s;Se([r],"batchToSpaceND");const i=o.reduce((y,b)=>y*b),l=Tu(r.shape,o,i),u=_u(l.length,o.length),c=Eu(r.shape,o,i),h=ug(a,o.length),d=cg(c,a,o.length),p=xt({inputs:{x:r},backend:e,attrs:{shape:l}}),f=Wn({inputs:{x:p},backend:e,attrs:{perm:u}}),g=xt({inputs:{x:f},backend:e,attrs:{shape:c}}),m=Ko({inputs:{x:g},backend:e,attrs:{begin:h,size:d}});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(g),m}};function jy(n,t,e,s,r){const o=j(s),a=hn(r,e);for(let i=0;i<n.length;i++){const l=n[i];if(l<0)throw new Error("Input x must be non-negative!");l>=r||(a[l]+=o>0?t[i]:1)}return a}function fS(n,t,e,s=!1){const r=n.shape[0],o=n.shape[1],a=Me([r,e],t.dtype);for(let i=0;i<r;i++)for(let l=0;l<o;l++){const u=n.get(i,l);if(u<0)throw new Error("Input x must be non-negative!");u>=e||a.set(s?1:t.size>0?a.get(i,u)+t.get(i,l):a.get(i,u)+1,i,u)}return a}const IM={kernelName:pc,backendName:"cpu",kernelFunc:function SM(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,weights:o}=t,{size:a}=s,u=jy(e.data.get(r.dataId).values,e.data.get(o.dataId).values,o.dtype,o.shape,a);return e.makeTensorInfo([a],o.dtype,u)}},mS=Vt((n,t)=>n&t),CM=nn(Qi,mS),NM={kernelName:Qi,backendName:"cpu",kernelFunc:CM},TM={kernelName:fc,backendName:"cpu",kernelFunc:function kM(n){const{inputs:t,backend:e}=n,{s0:s,s1:r}=t,o=e.data.get(s.dataId).values,a=e.data.get(r.dataId).values,i=Le(Array.from(o),Array.from(a));return e.makeTensorInfo([i.length],"int32",Int32Array.from(i))}},gS=or(n=>Math.ceil(n)),_M=so(ha,gS),EM={kernelName:ha,backendName:"cpu",kernelFunc:_M},$M=ct(da,(n,t)=>n>t.clipValueMax?t.clipValueMax:n<t.clipValueMin?t.clipValueMin:n),AM={kernelName:da,backendName:"cpu",kernelFunc:$M},RM={kernelName:Ji,backendName:"cpu",kernelFunc:n=>{const{x:t}=n.inputs,e=n.backend,s=new Float32Array(j(t.shape)),r=e.data.get(t.dataId),a=r.complexTensorInfos.imag,i=e.data.get(r.complexTensorInfos.real.dataId).values,l=e.data.get(a.dataId).values;for(let u=0;u<i.length;u++)s[u]=Math.hypot(i[u],l[u]);return e.makeOutput(s,t.shape,"float32")}};function yS(n,t,e,s){const r=Ft(e,j(t));if(s&&"string"!==e){let o=0;n.forEach(a=>{const i=j(a.shape);r.set(a.vals,o),o+=i})}else{let o=0;n.forEach(a=>{const i="string"===e?Cr(a.vals):a.vals;let l=0;for(let u=0;u<a.shape[0];++u){const c=u*t[1]+o;for(let h=0;h<a.shape[1];++h)r[c+h]=i[l++]}o+=a.shape[1]})}return r}function $i(n){const{inputs:t,backend:e}=n,{input:s}=t,r=e.data.get(s.dataId).complexTensorInfos.imag,o=e.data.get(r.dataId).values;return e.makeTensorInfo(r.shape,r.dtype,o)}const DM={kernelName:Lc,backendName:"cpu",kernelFunc:$i};function Ai(n){const{inputs:t,backend:e,attrs:s}=n,{axis:r}=s,o=Ue(r,t[0].shape)[0];ag(t.map(g=>g.shape),o);let i=Ks(t.map(g=>g.shape),o);if(0===j(i))return e.makeTensorInfo(i,t[0].dtype,[]);const l=t.filter(g=>j(g.shape)>0);if(1===l.length)return ar({inputs:{x:l[0]},backend:e});if("complex64"===l[0].dtype){const g=l.map(x=>qo({inputs:{input:x},backend:e})),m=l.map(x=>$i({inputs:{input:x},backend:e})),y=Ai({inputs:g,backend:e,attrs:{axis:o}}),b=Ai({inputs:m,backend:e,attrs:{axis:o}}),w=Yn({inputs:{real:y,imag:b},backend:e});return g.forEach(x=>e.disposeIntermediateTensorInfo(x)),m.forEach(x=>e.disposeIntermediateTensorInfo(x)),e.disposeIntermediateTensorInfo(y),e.disposeIntermediateTensorInfo(b),w}const u=l.map(g=>{const y=[-1,j(g.shape.slice(o))];return xt({inputs:{x:g},backend:e,attrs:{shape:y}})}),c=u.map(g=>({vals:e.data.get(g.dataId).values,shape:g.shape}));i=Ks(u.map(g=>g.shape),1);const d=yS(c,i,t[0].dtype,1===u[0].shape[0]),p=Ks(l.map(g=>g.shape),o),f=e.makeTensorInfo(p,t[0].dtype,d);return u.forEach(g=>e.disposeIntermediateTensorInfo(g)),f}const FM={kernelName:el,backendName:"cpu",kernelFunc:Ai};function bS(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:a,pad:i,dataFormat:l,dilations:u,dimRoundingMode:c}=s;Se([r,o],"conv2d");const h=yr(l),d=an(r.shape,o.shape,a,u,i,c,!1,h),p=d.filterHeight,f=d.filterWidth,g=d.dilationHeight,m=d.dilationWidth,y=d.padInfo.left,b=d.padInfo.top,w="channelsLast"===d.dataFormat,x=new Gt(d.outShape,r.dtype),S=Te(r.shape),I=Te(o.shape),k=S[0],T=w?S[1]:S[2],_=w?S[2]:1,E=w?1:S[1],L=x.strides[0],B=w?x.strides[1]:x.strides[2],W=w?x.strides[2]:1,U=w?1:x.strides[1],G=e.data.get(r.dataId).values,K=e.data.get(o.dataId).values,X=x.values;for(let H=0;H<d.batchSize;++H){const Z=H*k,se=H*L;for(let oe=0;oe<d.outHeight;++oe){const ce=se+oe*B,ie=oe*d.strideHeight-b;for(let ge=0;ge<p;++ge){const he=ie+ge*g;if(he<0||he>=d.inHeight)continue;const be=ge*I[0],_e=Z+he*T;for(let Ae=0;Ae<d.outWidth;++Ae){const $e=ce+Ae*W,Ve=Ae*d.strideWidth-y;for(let He=0;He<f;++He){const ht=Ve+He*m;if(ht<0||ht>=d.inWidth)continue;const Ot=_e+ht*_;let vt=be+He*I[1];for(let mt=0;mt<d.inChannels;++mt){const Rt=G[Ot+mt*E];for(let Nt=0;Nt<d.outChannels;++Nt)X[$e+Nt*U]+=Rt*K[vt+Nt];vt+=d.outChannels}}}}}}return e.makeTensorInfo(x.shape,x.dtype,X)}const OM={kernelName:tl,backendName:"cpu",kernelFunc:bS},PM={kernelName:gc,backendName:"cpu",kernelFunc:function LM(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:o}=t,{strides:a,pad:i,dataFormat:l,dimRoundingMode:u,filterShape:c}=s;Se([r,o],"conv2dBackpropFilter");const h=yr(l),d=an(r.shape,c,a,1,i,u,!1,h),{strideHeight:p,strideWidth:f,filterHeight:g,filterWidth:m}=d,y="channelsLast"===d.dataFormat,b=new Gt(d.filterShape,"float32"),w=d.padInfo.left,x=d.padInfo.top,S=e.data.get(r.dataId).values,I=e.data.get(o.dataId).values,k=new Gt(r.shape,r.dtype,S),T=new Gt(o.shape,o.dtype,I);for(let _=0;_<g;++_){const E=Math.max(0,Math.ceil((x-_)/p)),L=Math.min(d.outHeight,(d.inHeight+x-_)/p);for(let B=0;B<m;++B){const W=Math.max(0,Math.ceil((w-B)/f)),U=Math.min(d.outWidth,(d.inWidth+w-B)/f);for(let G=0;G<d.inChannels;++G)for(let K=0;K<d.outChannels;++K){let X=0;for(let H=0;H<d.batchSize;++H)for(let Z=E;Z<L;++Z){const se=_+Z*p-x;for(let oe=W;oe<U;++oe){const ce=B+oe*f-w;X+=y?k.get(H,se,ce,G)*T.get(H,Z,oe,K):k.get(H,G,se,ce)*T.get(H,K,Z,oe)}}b.set(X,_,B,G,K)}}}return e.makeTensorInfo(b.shape,b.dtype,b.values)}},zM={kernelName:nl,backendName:"cpu",kernelFunc:function MM(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:o}=t,{inputShape:a,strides:i,pad:l,dataFormat:u,dimRoundingMode:c}=s;Se([r,o],"conv2dBackpropInput");const h=Te(o.shape),d=Te(r.shape);let p=yr(u);const f=an(a,o.shape,i,1,l,c,!1,p),g=new Gt(f.inShape,"float32"),m=g.values,y=e.data.get(r.dataId).values,b=e.data.get(o.dataId).values,[w,x,S]=h,{batchSize:I,filterHeight:k,filterWidth:T,inChannels:_,inHeight:E,inWidth:L,outChannels:B,outHeight:W,outWidth:U,strideHeight:G,strideWidth:K}=f;p=f.dataFormat;const X=k-1-f.padInfo.top,H=T-1-f.padInfo.left,Z="channelsLast"===p,se=g.strides[0],oe=Z?g.strides[1]:g.strides[2],ce=Z?g.strides[2]:1,ie=Z?1:g.strides[1],ge=d[0],he=Z?d[1]:d[2],be=Z?d[2]:1,_e=Z?1:d[1];for(let Ae=0;Ae<I;++Ae)for(let $e=0;$e<_;++$e)for(let Ve=0;Ve<E;++Ve){const He=Ve-X,ht=Math.max(0,Math.ceil(He/G)),wt=Math.min(W,(k+He)/G);for(let Ot=0;Ot<L;++Ot){const vt=Ot-H,mt=Math.max(0,Math.ceil(vt/K)),Rt=Math.min(U,(T+vt)/K);let Nt=0;for(let bn=ht;bn<wt;++bn){const co=bn*G-He;for(let fs=mt;fs<Rt;++fs){const zs=ge*Ae+he*bn+be*fs,Rr=w*(k-1-co)+x*(T-1-(fs*K-vt))+S*$e;for(let ho=0;ho<B;++ho)Nt+=y[zs+_e*ho]*b[Rr+ho]}}m[se*Ae+oe*Ve+ce*Ot+ie*$e]=Nt}}return e.makeTensorInfo(g.shape,g.dtype,g.values)}},VM={kernelName:sl,backendName:"cpu",kernelFunc:function BM(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:a,pad:i,dilations:l}=s;Se([r,o],"conv3d");const u=Ur(r.shape,o.shape,a,l,i),{filterDepth:c,filterHeight:h,filterWidth:d,dilationDepth:p,dilationHeight:f,dilationWidth:g,padInfo:m}=u,y=m.front,b=m.left,w=m.top,x=new Gt(u.outShape,r.dtype),S=e.data.get(r.dataId).values,I=e.data.get(o.dataId).values,k=x.values,T=Te(r.shape),_=Te(o.shape);for(let E=0;E<u.batchSize;++E){const L=E*T[0],B=E*x.strides[0];for(let W=0;W<u.outDepth;++W){const U=B+W*x.strides[1],G=W*u.strideDepth-y;for(let K=0;K<c;++K){const X=G+K*p;if(X<0||X>=u.inDepth)continue;const H=K*_[0],Z=L+X*T[1];for(let se=0;se<u.outHeight;++se){const oe=U+se*x.strides[2],ce=se*u.strideHeight-w;for(let ie=0;ie<h;++ie){const ge=ce+ie*f;if(ge<0||ge>=u.inHeight)continue;const he=H+ie*_[1],be=Z+ge*T[2];for(let _e=0;_e<u.outWidth;++_e){const Ae=oe+_e*u.outChannels,$e=_e*u.strideWidth-b;for(let Ve=0;Ve<d;++Ve){const He=$e+Ve*g;if(He<0||He>=u.inWidth)continue;const wt=be+He*u.inChannels;let Ot=he+Ve*_[2];for(let vt=0;vt<u.inChannels;++vt){const mt=S[wt+vt];for(let Rt=0;Rt<u.outChannels;++Rt)k[Ae+Rt]+=mt*I[Ot+Rt];Ot+=u.outChannels}}}}}}}}return e.makeTensorInfo(x.shape,x.dtype,x.values)}},UM={kernelName:yc,backendName:"cpu",kernelFunc:function WM(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:o}=t,{strides:a,pad:i,filterShape:l}=s;Se([r,o],"conv3dBackpropFilterV2");const u=Te(r.shape),c=Te(o.shape),h=Ur(r.shape,l,a,1,i),d=h.strideDepth,p=h.strideHeight,f=h.strideWidth,g=h.filterDepth,m=h.filterHeight,y=h.filterWidth,b=new Gt(h.filterShape,"float32"),w=b.values,[x,S,I,k]=b.strides,T=e.data.get(o.dataId).values,[_,E,L,B]=c,W=e.data.get(r.dataId).values,[U,G,K,X]=u,H=h.padInfo.front,Z=h.padInfo.left,se=h.padInfo.top;for(let oe=0;oe<g;++oe){const ce=Math.max(0,Math.ceil((H-oe)/d)),ie=Math.min(h.outDepth,(h.inDepth+H-oe)/d),ge=oe*x;for(let he=0;he<m;++he){const be=Math.max(0,Math.ceil((se-he)/p)),_e=Math.min(h.outHeight,(h.inHeight+se-he)/p),Ae=he*S+ge;for(let $e=0;$e<y;++$e){const Ve=Math.max(0,Math.ceil((Z-$e)/f)),He=Math.min(h.outWidth,(h.inWidth+Z-$e)/f),ht=$e*I+Ae;for(let wt=0;wt<h.inChannels;++wt){const Ot=wt*k+ht;for(let vt=0;vt<h.outChannels;++vt){let mt=0;for(let Rt=0;Rt<h.batchSize;++Rt){const Nt=Rt*U,Ar=Rt*_;for(let bn=ce;bn<ie;++bn){const fs=(oe+bn*d-H)*G+Nt,na=bn*E+Ar;for(let zs=be;zs<_e;++zs){const ho=(he+zs*p-se)*K+fs,po=zs*L+na;for(let fo=Ve;fo<He;++fo)mt+=W[($e+fo*f-Z)*X+ho+wt]*T[fo*B+po+vt]}}}w[Ot+vt]=mt}}}}}return e.makeTensorInfo(b.shape,b.dtype,b.values)}},HM={kernelName:bc,backendName:"cpu",kernelFunc:function GM(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:o}=t,{pad:a,strides:i,inputShape:l}=s;Se([r],"conv3dBackpropInputV2");const u=Te(r.shape),c=Te(o.shape),h=Ur(l,o.shape,i,1,a),d=new Gt(h.inShape,"float32"),p=d.values,[f,g,m,y]=d.strides,b=e.data.get(r.dataId).values,[w,x,S,I]=u,k=e.data.get(o.dataId).values,[T,_,E,L]=c,{batchSize:B,filterDepth:W,filterHeight:U,filterWidth:G,inChannels:K,inDepth:X,inHeight:H,inWidth:Z,outChannels:se,outDepth:oe,outHeight:ce,outWidth:ie,strideDepth:ge,strideHeight:he,strideWidth:be}=h,_e=W-1-h.padInfo.front,Ae=U-1-h.padInfo.top,$e=G-1-h.padInfo.left;for(let Ve=0;Ve<B;++Ve)for(let He=0;He<K;++He)for(let ht=0;ht<X;++ht){const wt=ht-_e,Ot=Math.max(0,Math.ceil(wt/ge)),vt=Math.min(oe,(W+wt)/ge);for(let mt=0;mt<H;++mt){const Rt=mt-Ae,Nt=Math.max(0,Math.ceil(Rt/he)),Ar=Math.min(ce,(U+Rt)/he);for(let bn=0;bn<Z;++bn){const co=bn-$e,fs=Math.max(0,Math.ceil(co/be)),na=Math.min(ie,(G+co)/be);let zs=0;for(let Rr=Ot;Rr<vt;++Rr){const ho=Rr*ge-wt;for(let po=Nt;po<Ar;++po){const fo=po*he-Rt;for(let nc=fs;nc<na;++nc){const xb=w*Ve+x*Rr+S*po+I*nc,oY=T*(W-1-ho)+_*(U-1-fo)+E*(G-1-(nc*be-co))+L*He;for(let Fp=0;Fp<se;++Fp)zs+=b[xb+Fp]*k[oY+Fp]}}}p[f*Ve+g*ht+m*mt+y*bn+He]=zs}}}return e.makeTensorInfo(d.shape,d.dtype,d.values)}},jM=ct(pa,n=>Math.cos(n)),qM={kernelName:pa,backendName:"cpu",kernelFunc:jM},KM=ct(fa,n=>Math.cosh(n)),XM={kernelName:fa,backendName:"cpu",kernelFunc:KM},YM={kernelName:wc,backendName:"cpu",kernelFunc:function ZM(n){const{inputs:t,backend:e,attrs:s}=n,{image:r,boxes:o,boxInd:a}=t,{cropSize:i,method:l,extrapolationValue:u}=s,[c,h,d,p]=r.shape,f=o.shape[0],[g,m]=i,y=Me([f,g,m,p],"float32"),b=e.data.get(o.dataId).values,w=e.data.get(a.dataId).values,x=e.data.get(r.dataId).values,S=Te(r.shape),I=Te(y.shape);for(let k=0;k<f;k++){const T=4*k,_=b[T],E=b[T+1],L=b[T+2],B=b[T+3],W=w[k];if(W>=c)continue;const U=g>1?(L-_)*(h-1)/(g-1):0,G=m>1?(B-E)*(d-1)/(m-1):0;for(let K=0;K<g;K++){const X=g>1?_*(h-1)+K*U:.5*(_+L)*(h-1);if(X<0||X>h-1)for(let H=0;H<m;H++)for(let Z=0;Z<p;Z++)y.values[Z+H*I[2]+K*I[1]+k*I[0]]=u;else if("bilinear"===l){const H=Math.floor(X),Z=Math.ceil(X),se=X-H;for(let oe=0;oe<m;oe++){const ce=m>1?E*(d-1)+oe*G:.5*(E+B)*(d-1);if(ce<0||ce>d-1){for(let be=0;be<p;be++)y.values[be+oe*I[2]+K*I[1]+k*I[0]]=u;continue}const ie=Math.floor(ce),ge=Math.ceil(ce),he=ce-ie;for(let be=0;be<p;be++){let _e=be+ie*S[2]+H*S[1]+W*S[0];const Ae=x[_e];_e=be+ge*S[2]+H*S[1]+W*S[0];const $e=x[_e];_e=be+ie*S[2]+Z*S[1]+W*S[0];const Ve=x[_e];_e=be+ge*S[2]+Z*S[1]+W*S[0];const He=x[_e],ht=Ae+($e-Ae)*he;_e=be+oe*I[2]+K*I[1]+k*I[0],y.values[_e]=ht+(Ve+(He-Ve)*he-ht)*se}}}else for(let H=0;H<m;++H){const Z=m>1?E*(d-1)+H*G:.5*(E+B)*(d-1);if(Z<0||Z>d-1){for(let ce=0;ce<p;ce++)y.values[ce+H*I[2]+K*I[1]+k*I[0]]=u;continue}const se=Math.round(Z),oe=Math.round(X);for(let ce=0;ce<p;ce++)y.values[ce+H*I[2]+K*I[1]+k*I[0]]=x[ce+se*S[2]+oe*S[1]+W*S[0]]}}}return e.makeTensorInfo(y.shape,y.dtype,y.values)}},JM={kernelName:xc,backendName:"cpu",kernelFunc:function QM(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,exclusive:a,reverse:i}=s;Se(r,"cumprod");const l=Et([o],r.shape.length);let u=r;null!=l&&(u=Wn({inputs:{x:r},backend:e,attrs:{perm:l}}));const c=zt(1,r.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const h=Rn(u.dtype,"int32"),d=lc(j(u.shape),h),p=e.data.get(u.dataId).values,f=u.shape[u.shape.length-1],g=i?(y,b)=>y+f-b-1:(y,b)=>y+b;for(let y=0;y<p.length;y+=f)for(let b=0;b<f;b++){const w=g(y,b);if(0===b)d[w]=a?1:p[w];else{const x=g(y,b-1);d[w]=a?p[x]*d[x]:p[w]*d[x]}}const m=e.makeTensorInfo(u.shape,h,d);if(null!=l){const b=Wn({inputs:{x:m},backend:e,attrs:{perm:Hr(l)}});return e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(u),b}return m}},tz={kernelName:rl,backendName:"cpu",kernelFunc:function ez(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,exclusive:a,reverse:i}=s;Se(r,"cumsum");const l=Et([o],r.shape.length);let u=r;null!=l&&(u=Wn({inputs:{x:r},backend:e,attrs:{perm:l}}));const c=zt(1,r.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const h=Rn(u.dtype,"int32"),d=hn(j(u.shape),h),p=e.data.get(u.dataId).values,f=u.shape[u.shape.length-1],g=i?(y,b)=>y+f-b-1:(y,b)=>y+b;for(let y=0;y<p.length;y+=f)for(let b=0;b<f;b++){const w=g(y,b);if(0===b)d[w]=a?0:p[w];else{const x=g(y,b-1);d[w]=a?p[x]+d[x]:p[w]+d[x]}}const m=e.makeTensorInfo(u.shape,h,d);if(null!=l){const b=Wn({inputs:{x:m},backend:e,attrs:{perm:Hr(l)}});return e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(u),b}return m}},sz={kernelName:vc,backendName:"cpu",kernelFunc:function nz(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,weights:o}=t,{size:a,binaryOutput:i}=s;if(1===r.shape.length){const c=jy(e.data.get(r.dataId).values,e.data.get(o.dataId).values,o.dtype,o.shape,a);return e.makeTensorInfo([a],o.dtype,c)}if(2===r.shape.length){const c=fS(e.bufferSync(r),e.bufferSync(o),a,i);return e.makeTensorInfo(c.shape,o.dtype,c.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}},oz={kernelName:Sc,backendName:"cpu",kernelFunc:function rz(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockSize:o,dataFormat:a}=s;C("NHWC"===a,()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${a}`);const i=r.shape[0],l=r.shape[1],u=r.shape[2],c=r.shape[3],h=l*o,d=u*o,p=c/(o*o),f=e.data.get(r.dataId).values,g=new Float32Array(i*h*d*p);let m=0;for(let y=0;y<i;++y)for(let b=0;b<h;++b){const w=Math.floor(b/o),x=b%o;for(let S=0;S<d;++S){const I=Math.floor(S/o),T=(x*o+S%o)*p;for(let _=0;_<p;++_)g[m++]=f[_+T+c*(I+u*(w+l*y))]}}return e.makeTensorInfo([i,h,d,p],r.dtype,g)}};function xS(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:a,pad:i,dilations:l,dimRoundingMode:u}=s;Se([r,o],"depthwiseConv2DNative");const c=Te(r.shape),h=Te(o.shape);let d=l;null==d&&(d=[1,1]),C(pn(a,d),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${a} and dilations '${d}'`);const p=an(r.shape,o.shape,a,d,i,u,!0),{filterHeight:f,filterWidth:g,dilationHeight:m,dilationWidth:y,padInfo:b}=p,w=b.left,x=b.top,S=p.outChannels/p.inChannels,I=new Gt(p.outShape,r.dtype),k=e.data.get(r.dataId).values,T=e.data.get(o.dataId).values,_=I.values;for(let E=0;E<p.batchSize;++E){const L=E*c[0],B=E*I.strides[0];for(let W=0;W<p.outHeight;++W){const U=B+W*I.strides[1],G=W*p.strideHeight-x;for(let K=0;K<f;++K){const X=G+K*m;if(X<0||X>=p.inHeight)continue;const H=K*h[0],Z=L+X*c[1];for(let se=0;se<p.outWidth;++se){const oe=U+se*I.strides[2],ce=se*p.strideWidth-w;for(let ie=0;ie<g;++ie){const ge=ce+ie*y;if(ge<0||ge>=p.inWidth)continue;const be=Z+ge*p.inChannels;let _e=oe,Ae=H+ie*h[1];for(let $e=0;$e<p.inChannels;++$e){const Ve=k[be+$e];for(let He=0;He<S;++He)_[_e+He]+=Ve*T[Ae+He];_e+=S,Ae+=S}}}}}}return e.makeTensorInfo(I.shape,I.dtype,I.values)}const az={kernelName:ol,backendName:"cpu",kernelFunc:xS},lz={kernelName:Ic,backendName:"cpu",kernelFunc:function iz(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:o}=t,{strides:a,dilations:i,pad:l,dimRoundingMode:u,filterShape:c}=s;Se([r,o],"depthwiseConv2dNativeBackpropFilter");const h=an(r.shape,c,a,i,l,u,!0),{strideHeight:d,strideWidth:p,filterHeight:f,filterWidth:g}=h,m=new Gt(h.filterShape,"float32"),y=h.padInfo.left,b=h.padInfo.top,w=h.outChannels/h.inChannels,x=e.data.get(r.dataId).values,S=new Gt(r.shape,r.dtype,x),I=e.data.get(o.dataId).values,k=new Gt(o.shape,o.dtype,I);for(let T=0;T<f;++T){const _=Math.max(0,Math.ceil((b-T)/d)),E=Math.min(h.outHeight,(h.inHeight+b-T)/d);for(let L=0;L<g;++L){const B=Math.max(0,Math.ceil((y-L)/p)),W=Math.min(h.outWidth,(h.inWidth+y-L)/p);for(let U=0;U<h.outChannels;++U){const G=Math.trunc(U/w),K=U%w;let X=0;for(let H=0;H<h.batchSize;++H)for(let Z=_;Z<E;++Z){const se=T+Z*d-b;for(let oe=B;oe<W;++oe)X+=S.get(H,se,L+oe*p-y,G)*k.get(H,Z,oe,U)}m.set(X,T,L,G,K)}}}return e.makeTensorInfo(m.shape,m.dtype,m.values)}},cz={kernelName:Cc,backendName:"cpu",kernelFunc:function uz(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:o}=t,{strides:a,dilations:i,pad:l,dimRoundingMode:u,inputShape:c}=s;Se([r,o],"depthwiseConv2DNativeBackpropInput");const h=Te(r.shape),d=Te(o.shape),p=an(c,o.shape,a,i,l,u,!0),f=new Gt(p.inShape,"float32"),g=f.values,[m,y,b]=f.strides,w=e.data.get(r.dataId).values,[x,S,I]=h,k=e.data.get(o.dataId).values,[T,_,E]=d,{batchSize:L,filterHeight:B,filterWidth:W,inChannels:U,inHeight:G,inWidth:K,outChannels:X,outHeight:H,outWidth:Z,strideHeight:se,strideWidth:oe}=p,ce=B-1-p.padInfo.top,ie=W-1-p.padInfo.left,ge=X/U;for(let he=0;he<L;++he)for(let be=0;be<U;++be)for(let _e=0;_e<G;++_e){const Ae=_e-ce,$e=Math.max(0,Math.ceil(Ae/se)),Ve=Math.min(H,(B+Ae)/se);for(let He=0;He<K;++He){const ht=He-ie,wt=Math.max(0,Math.ceil(ht/oe)),Ot=Math.min(Z,(W+ht)/oe);let vt=0;for(let mt=$e;mt<Ve;++mt){const Rt=mt*se-Ae;for(let Nt=wt;Nt<Ot;++Nt){const bn=x*he+S*mt+I*Nt,co=T*(B-1-Rt)+_*(W-1-(Nt*oe-ht))+E*be;for(let fs=0;fs<ge;++fs)vt+=w[bn+(be*ge+fs)]*k[co+fs]}}g[m*he+y*_e+b*He+be]=vt}}return e.makeTensorInfo(f.shape,f.dtype,f.values)}},dz={kernelName:Nc,backendName:"cpu",kernelFunc:function hz(n){const{inputs:t,backend:e}=n,{x:s}=t,r=j(s.shape),o=e.data.get(s.dataId).values,a=Me([r,r],s.dtype),i=a.values;for(let u=0;u<o.length;u++)i[u*r+u]=o[u];const l=[...s.shape,...s.shape];return e.makeTensorInfo(l,a.dtype,a.values)}},pz={kernelName:al,backendName:"cpu",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s,filter:r}=n,{strides:o,pad:a,dilations:i}=e,l=t,u=l.data.get(s.dataId).values,c=s.shape.length,h=l.data.get(r.dataId).values,d=r.shape.length,{batchSize:p,inHeight:f,inWidth:g,inChannels:m,outHeight:y,outWidth:b,padInfo:w,strideHeight:x,strideWidth:S,filterHeight:I,filterWidth:k,dilationHeight:T,dilationWidth:_,outShape:E}=iu(s.shape,r.shape,o,a,"NHWC",i),L=j(E),B=E.length,W=Ft(s.dtype,L);for(let G=0;G<p;++G)for(let K=0;K<y;++K){const X=K*x-w.top;for(let H=0;H<b;++H){const Z=H*S-w.left;for(let se=0;se<m;++se){let oe=Number.MIN_SAFE_INTEGER;for(let ie=0;ie<I;++ie){const ge=X+ie*T;if(ge>=0&&ge<f)for(let he=0;he<k;++he){const be=Z+he*_;if(be>=0&&be<g){const _e=Cs([G,ge,be,se],c,Te(s.shape)),Ae=Cs([ie,he,se],d,Te(r.shape)),$e=u[_e]+h[Ae];$e>oe&&(oe=$e)}}}W[Cs([G,K,H,se],B,Te(E))]=oe}}}return{dataId:l.write(Mr(W,s.dtype),E,s.dtype),shape:E,dtype:s.dtype}}},fz={kernelName:Tc,backendName:"cpu",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s,filter:r,dy:o}=n,{strides:a,pad:i,dilations:l}=e,u=t,c=es(s.shape,u.data.get(s.dataId).values),h=es(r.shape,u.data.get(r.dataId).values),{batchSize:d,inHeight:p,inWidth:f,inChannels:g,outHeight:m,outWidth:y,padInfo:b,strideHeight:w,strideWidth:x,filterHeight:S,filterWidth:I,dilationHeight:k,dilationWidth:T,outShape:_}=iu(s.shape,r.shape,a,i,"NHWC",l);C(o.rank===_.length,()=>`Error in ${Tc}, dy must have the same rank as output ${_.length}, but got ${o.rank}`);const E=es(_,u.data.get(o.dataId).values),L=Bp(r.shape,r.dtype);for(let W=0;W<d;++W)for(let U=0;U<m;++U){const G=U*w-b.top;for(let K=0;K<y;++K){const X=K*x-b.left;for(let H=0;H<g;++H){let Z=Number.MIN_SAFE_INTEGER,se=0,oe=0;for(let ce=0;ce<S;++ce){const ie=G+ce*k;if(ie>=0&&ie<p)for(let ge=0;ge<I;++ge){const he=X+ge*T;if(he>=0&&he<f){const be=c[W][ie][he][H]+h[ce][ge][H];be>Z&&(Z=be,se=ce,oe=ge)}}}L[se][oe][H]+=E[W][U][K][H]}}}return{dataId:u.write(Mr(L,s.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},mz={kernelName:kc,backendName:"cpu",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s,filter:r,dy:o}=n,{strides:a,pad:i,dilations:l}=e,u=t,c=es(s.shape,u.data.get(s.dataId).values),h=es(r.shape,u.data.get(r.dataId).values),{batchSize:d,inHeight:p,inWidth:f,inChannels:g,outHeight:m,outWidth:y,padInfo:b,strideHeight:w,strideWidth:x,filterHeight:S,filterWidth:I,dilationHeight:k,dilationWidth:T,outShape:_}=iu(s.shape,r.shape,a,i,"NHWC",l);C(o.rank===_.length,()=>`Error in ${kc}, dy must have the same rank as output ${_.length}, but got ${o.rank}`);const E=es(_,u.data.get(o.dataId).values),L=Bp(s.shape,s.dtype);for(let W=0;W<d;++W)for(let U=0;U<m;++U){const G=U*w-b.top;for(let K=0;K<y;++K){const X=K*x-b.left;for(let H=0;H<g;++H){let Z=Number.MIN_SAFE_INTEGER,se=G<0?0:G,oe=X<0?0:X;for(let ce=0;ce<S;++ce){const ie=G+ce*k;if(ie>=0&&ie<p)for(let ge=0;ge<I;++ge){const he=X+ge*T;if(he>=0&&he<f){const be=c[W][ie][he][H]+h[ce][ge][H];be>Z&&(Z=be,se=ie,oe=he)}}}L[W][se][oe][H]+=E[W][U][K][H]}}}return{dataId:u.write(Mr(L,s.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},yz={kernelName:_c,backendName:"cpu",kernelFunc:function gz(n){const{inputs:t,backend:e,attrs:s}=n,{image:r}=t,{canvas:o,options:a}=s,{contextOptions:i,imageOptions:l}=a||{},u=(null==l?void 0:l.alpha)||1,c=(null==i?void 0:i.contextType)||"2d";if("2d"!==c)throw new Error(`Context type ${i.contextType} is not supported by the CPU backend.`);const h=o.getContext(c,(null==i?void 0:i.contextAttributes)||{});if(null==h)throw new Error(`Could not get the context with ${c} type.`);const[d,p]=r.shape.slice(0,2),f=2===r.shape.length?1:r.shape[2],g=e.data.get(r.dataId).values,m="float32"===r.dtype?255:1,y=new Uint8ClampedArray(p*d*4);for(let w=0;w<d*p;++w){const x=[0,0,0,255*u];for(let I=0;I<f;I++){const k=g[w*f+I];if("float32"===r.dtype){if(k<0||k>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${k}.`)}else if("int32"===r.dtype&&(k<0||k>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${k}.`);1===f?(x[0]=k*m,x[1]=k*m,x[2]=k*m):x[I]=k*m}const S=4*w;y[S+0]=Math.round(x[0]),y[S+1]=Math.round(x[1]),y[S+2]=Math.round(x[2]),y[S+3]=Math.round(x[3])}o.width=p,o.height=d;const b=new ImageData(y,p,d);return h.putImageData(b,0,0),r}},qy=Vt((n,t)=>n*t),bz=Uy((n,t,e,s)=>({real:n*e-t*s,imag:n*s+t*e})),lp=nn(Ra,qy,bz),xz={kernelName:Ra,backendName:"cpu",kernelFunc:lp};function Hu(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s;let i;Se(r,"sum"),i="bool"===r.dtype?ro({inputs:{x:r},backend:e,attrs:{dtype:"int32"}}):ar({inputs:{x:r},backend:e});const l=i.shape.length,u=Ue(o,i.shape),c=Et(u,l);let h=u,d=i;null!=c&&(d=Wn({inputs:{x:i},backend:e,attrs:{perm:c}}),h=zt(h.length,l)),mn("sum",h,d.shape.length);const[p,f]=ln(d.shape,h);let m=ip(e,p,Rn(d.dtype,"int32"));const y=j(f),b=e.data.get(m.dataId).values,w=e.data.get(d.dataId).values;for(let x=0;x<b.length;++x){const S=x*y;let I=0;for(let k=0;k<y;++k)I+=w[S+k];b[x]=I}if(a){const S=m;m=xt({inputs:{x:m},backend:e,attrs:{shape:Mt(m.shape,u)}}),e.disposeIntermediateTensorInfo(S)}return e.disposeIntermediateTensorInfo(i),null!=c&&e.disposeIntermediateTensorInfo(d),m}const wz={kernelName:zl,backendName:"cpu",kernelFunc:Hu},Sz={kernelName:Ec,backendName:"cpu",kernelFunc:function vz(n){const{inputs:t,backend:e,attrs:s}=n,{equation:r}=s,o=t,{allDims:a,summedDims:i,idDims:l}=xg(r,o.length);vg(a.length,l,o);const{path:u,steps:c}=Sg(i,l),h=c.length;let d=null,p=a.length;const f=[];for(let g=0;g<h;++g){for(const m of c[g]){const{permutationIndices:y,expandDims:b}=wg(p,l[m]);let w;Ig(y)?w=o[m]:(w=Wn({inputs:{x:o[m]},backend:e,attrs:{perm:y}}),f.push(w));const x=w.shape.slice();for(let S=0;S<b.length;++S)x.splice(b[S],0,1);Xe(w.shape,x)||(w=xt({inputs:{x:w},backend:e,attrs:{shape:x}}),f.push(w)),null===d?d=w:(d=lp({inputs:{a:w,b:d},backend:e}),f.push(d))}g<h-1&&(u[g]>=0&&(d=Hu({inputs:{x:d},backend:e,attrs:{axis:u[g]-(a.length-p),keepDims:!1}}),f.push(d)),p--)}for(const g of f)g!==d&&e.disposeIntermediateTensorInfo(g);return d}},Cz={kernelName:$c,backendName:"cpu",kernelFunc:function Iz(n){const{inputs:t,backend:e}=n,{dy:s,y:r}=t;Se([s,r],"eluGrad");const o=new Float32Array(j(r.shape)),a=e.data.get(r.dataId).values,i=e.data.get(s.dataId).values;for(let l=0;l<a.length;++l){const u=a[l];o[l]=u>=0?i[l]:i[l]*(u+1)}return e.makeTensorInfo(r.shape,"float32",o)}},wS=Vt((n,t)=>n===t?1:0),vS=nn(il,wS,null,"bool"),Nz={kernelName:il,backendName:"cpu",kernelFunc:vS},kz=hg,Tz=dg,_z=pg,Ez=fg,$z=mg,Az=gg,Rz=ct(ya,n=>{const t=Math.sign(n),e=Math.abs(n),s=1/(1+kz*e);return t*(1-((((Az*s+$z)*s+Ez)*s+_z)*s+Tz)*s*Math.exp(-e*e))}),Dz={kernelName:ya,backendName:"cpu",kernelFunc:Rz},SS=or(n=>Math.exp(n)),IS=so(ba,SS,"float32"),Fz={kernelName:ba,backendName:"cpu",kernelFunc:IS};function up(n){const{inputs:t,backend:e,attrs:s}=n,{input:r}=t,{dim:o}=s,a=r.shape.length,i=r.shape.slice();let l=o;return o<0&&(C(-(a+1)<=o,()=>`Axis must be in the interval [${-(a+1)}, ${a}]`),l=a+o+1),i.splice(l,0,1),xt({inputs:{x:r},backend:e,attrs:{shape:i}})}const Oz={kernelName:ll,backendName:"cpu",kernelFunc:up},CS=or(n=>Math.expm1(n)),Lz=so(xa,CS),Pz={kernelName:xa,backendName:"cpu",kernelFunc:Lz},Mz=Vt((n,t)=>n/t),Ky=nn(ma,Mz),Xy={kernelName:ma,backendName:"cpu",kernelFunc:Ky},NS=Vt((n,t)=>n-t),zz=Uy((n,t,e,s)=>({real:n-e,imag:t-s})),Zy=nn(qa,NS,zz),Bz={kernelName:qa,backendName:"cpu",kernelFunc:Zy};function kS(n,t,e){const s=n.shape,r=s[0],o=s[1],a=e.data.get(n.dataId),i=a.complexTensorInfos.real,l=a.complexTensorInfos.imag,u=[r,o],c=j(u),h=sn("float32",c),d=sn("float32",c);for(let m=0;m<r;m++){const y=Ko({inputs:{x:i},backend:e,attrs:{begin:[m,0],size:[1,o]}}),b=Ko({inputs:{x:l},backend:e,attrs:{begin:[m,0],size:[1,o]}}),w=Yn({inputs:{real:y,imag:b},backend:e}),{real:x,imag:S}=Vz(w,t,e),I=Ir(x,S);for(let k=0;k<o;k++){const T=yg(I,k);h[m*o+k]=T.real,d[m*o+k]=T.imag}e.disposeIntermediateTensorInfo(y),e.disposeIntermediateTensorInfo(b),e.disposeIntermediateTensorInfo(w)}const p=e.makeTensorInfo(u,"float32",h),f=e.makeTensorInfo(u,"float32",d),g=Yn({inputs:{real:p,imag:f},backend:e});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),g}function Vz(n,t,e){const s=j(n.shape),r=e.data.get(n.dataId),o=e.data.get(r.complexTensorInfos.real.dataId).values,a=e.data.get(r.complexTensorInfos.imag.dataId).values;if(function Wz(n){return 0==(n&n-1)}(s)){const i=Yy(o,a,s,t,e),l=[n.shape[0],n.shape[1]];if(t){const u=e.makeTensorInfo(l,"float32",i.real),c=e.makeTensorInfo(l,"float32",i.imag),h=e.makeTensorInfo([],"float32",hr(s,"float32")),d=ar({inputs:{x:h},backend:e}),p=Xy.kernelFunc({inputs:{a:u,b:h},backend:e}),f=Xy.kernelFunc({inputs:{a:c,b:d},backend:e}),g=e.data.get(p.dataId).values,m=e.data.get(f.dataId).values;return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),{real:g,imag:m}}return i}{const l=function Uz(n,t,e){const s=new Float32Array(2*t);for(let r=0;r<t;r++){let o=0,a=0;for(let i=0;i<t;i++){const l=rw(r*i,t,e),u=yg(n,i);o+=u.real*l.real-u.imag*l.imag,a+=u.real*l.imag+u.imag*l.real}e&&(o/=t,a/=t),nw(s,o,a,r)}return s}(Ir(o,a),s,t);return J0(l)}}function Yy(n,t,e,s,r){if(1===e)return{real:n,imag:t};const o=Ir(n,t),a=e/2,i=ew(o),l=i.real,u=i.imag,c=[l.length],h=r.makeTensorInfo(c,"float32",l),d=r.makeTensorInfo(c,"float32",u),p=Yn({inputs:{real:h,imag:d},backend:r}),f=tw(o),g=f.real,m=f.imag,y=[g.length],b=r.makeTensorInfo(y,"float32",g),w=r.makeTensorInfo(y,"float32",m),x=Yn({inputs:{real:b,imag:w},backend:r}),S=Yy(l,u,a,s,r),I=S.real,k=S.imag,T=[I.length],_=r.makeTensorInfo(T,"float32",I),E=r.makeTensorInfo(T,"float32",k),L=Yn({inputs:{real:_,imag:E},backend:r}),B=Yy(g,m,a,s,r),W=B.real,U=B.imag,G=[W.length],K=r.makeTensorInfo(G,"float32",W),X=r.makeTensorInfo(G,"float32",U),H=Yn({inputs:{real:K,imag:X},backend:r}),Z=sw(e,s),se=[Z.real.length],oe=r.makeTensorInfo(se,"float32",Z.real),ce=r.makeTensorInfo(se,"float32",Z.imag),ie=Yn({inputs:{real:oe,imag:ce},backend:r}),ge=lp({inputs:{a:ie,b:H},backend:r}),he=Ei({inputs:{a:L,b:ge},backend:r}),be=Zy({inputs:{a:L,b:ge},backend:r}),_e=qo({inputs:{input:he},backend:r}),Ae=qo({inputs:{input:be},backend:r}),$e=$i({inputs:{input:he},backend:r}),Ve=$i({inputs:{input:be},backend:r}),He=Ai({inputs:[_e,Ae],backend:r,attrs:{axis:0}}),ht=Ai({inputs:[$e,Ve],backend:r,attrs:{axis:0}}),wt=r.data.get(He.dataId).values,Ot=r.data.get(ht.dataId).values;return r.disposeIntermediateTensorInfo(h),r.disposeIntermediateTensorInfo(d),r.disposeIntermediateTensorInfo(p),r.disposeIntermediateTensorInfo(b),r.disposeIntermediateTensorInfo(w),r.disposeIntermediateTensorInfo(x),r.disposeIntermediateTensorInfo(_),r.disposeIntermediateTensorInfo(E),r.disposeIntermediateTensorInfo(L),r.disposeIntermediateTensorInfo(K),r.disposeIntermediateTensorInfo(X),r.disposeIntermediateTensorInfo(H),r.disposeIntermediateTensorInfo(oe),r.disposeIntermediateTensorInfo(ce),r.disposeIntermediateTensorInfo(ie),r.disposeIntermediateTensorInfo(ge),r.disposeIntermediateTensorInfo(he),r.disposeIntermediateTensorInfo(be),r.disposeIntermediateTensorInfo(_e),r.disposeIntermediateTensorInfo($e),r.disposeIntermediateTensorInfo(Ae),r.disposeIntermediateTensorInfo(Ve),r.disposeIntermediateTensorInfo(He),r.disposeIntermediateTensorInfo(ht),{real:wt,imag:Ot}}const Hz={kernelName:Ac,backendName:"cpu",kernelFunc:function Gz(n){const{inputs:t,backend:e}=n,{input:s}=t,r=j(s.shape),o=s.shape[s.shape.length-1],i=xt({inputs:{x:s},backend:e,attrs:{shape:[r/o,o]}}),l=kS(i,!1,e),u=xt({inputs:{x:l},backend:e,attrs:{shape:s.shape}});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(l),u}};function Qy(n){const{backend:t,attrs:e}=n,{shape:s,value:r,dtype:o}=e,a=o||bo(r),i=Ft(a,j(s));return function qz(n,t,e){n.fill(t)}(i,r),t.makeTensorInfo(s,a,i)}const jz={kernelName:Rc,backendName:"cpu",kernelFunc:Qy},Kz={kernelName:Dc,backendName:"cpu",kernelFunc:({inputs:n,backend:e})=>{const{image:s}=n,r=e,o=sn(s.dtype,j(s.shape)),[a,i,l,u]=s.shape,c=r.data.get(s.dataId).values;for(let d=0;d<a;d++){const p=d*l*i*u;for(let f=0;f<i;f++){const g=f*(l*u);for(let m=0;m<l;m++){const y=m*u;for(let b=0;b<u;b++){const w=Math.round(l-m-1),x=p+g+y+b;let S=c[x];w>=0&&w<l&&(S=c[p+g+w*u+b]),o[x]=S}}}}return{dataId:r.write(o,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},TS=or(n=>Math.floor(n)),Xz=so(wa,TS),Zz={kernelName:wa,backendName:"cpu",kernelFunc:Xz},Yz=Vt((n,t)=>Math.floor(n/t)),Qz=nn(va,Yz,null,"int32"),Jz={kernelName:va,backendName:"cpu",kernelFunc:Qz},tB={kernelName:Kl,backendName:"cpu",kernelFunc:function eB(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o,bias:a,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s;let g=bS({inputs:{x:r,filter:o},backend:e,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d}});if(a){const m=g;if("NCHW"===c&&1===a.shape.length&&1!==a.shape[0]){const y=xt({inputs:{x:a},backend:e,attrs:{shape:[a.shape[0],1,1]}});g=Ei({inputs:{a:g,b:y},backend:e}),e.disposeIntermediateTensorInfo(y)}else g=Ei({inputs:{a:g,b:a},backend:e});e.disposeIntermediateTensorInfo(m)}if(p){const m=g;if("NCHW"===c&&"prelu"===p&&1===i.shape.length&&1!==i.shape[0]){const y=xt({inputs:{x:i},backend:e,attrs:{shape:[i.shape[0],1,1]}});g=ap(e,g,p,y,f),e.disposeIntermediateTensorInfo(y)}else g=ap(e,g,p,i,f);e.disposeIntermediateTensorInfo(m)}return g}},sB={kernelName:Xl,backendName:"cpu",kernelFunc:function nB(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o,bias:a,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s;let g=xS({inputs:{x:r,filter:o},backend:e,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d}});if(a){const m=g;g=Ei({inputs:{a:g,b:a},backend:e}),e.disposeIntermediateTensorInfo(m)}if(p){const m=g;g=ap(e,g,p,i,f),e.disposeIntermediateTensorInfo(m)}return g}};function _S(n,t,e,s,r,o,a,i,l){const u=Me([s,o],e);for(let c=0;c<s;c++){const h=[];let d=0;for(let p=0;p<r;p++){const f=n[c*r+p];d+=f*a[p],h.push(f)}if(d<0||d>=l/o)throw new Error(`Invalid indices: ${h} does not index into ${i}`);for(let p=0;p<o;p++)u.values[c*o+p]=t.get(...t.indexToLoc(d*o+p))}return u}const oB={kernelName:Fc,backendName:"cpu",kernelFunc:function rB(n){const{inputs:t,backend:e}=n,{params:s,indices:r}=t,o=j(s.shape),a=r.shape,i=a[a.length-1],[l,u,c,h]=Eh(s,r);if(0===u)return e.makeTensorInfo(l,s.dtype,[]);const f=_S(e.data.get(r.dataId).values,e.bufferSync(s),s.dtype,u,i,c,h,s.shape,o);return e.makeTensorInfo(l,s.dtype,f.values)}};function ES(n,t,e){const s=Me(e,n.dtype);for(let r=0;r<s.size;++r){const a=s.indexToLoc(r).slice(),u=t.locToIndex([a[0],a[2]]);a[2]=t.values[u];const c=n.locToIndex(a);0<=c&&c<n.values.length&&(s.values[r]=n.values[c])}return s}const iB={kernelName:cl,backendName:"cpu",kernelFunc:function aB(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,indices:o}=t,{axis:a,batchDims:i}=s;Se([r,o],"gatherV2");const l=Ue(a,r.shape)[0],u=e.data.get(o.dataId).values,c=r.shape[l];for(let x=0;x<u.length;++x){const S=u[x];C(S<=c-1&&S>=0,()=>`GatherV2: the index value ${S} is not in [0, ${c-1}]`)}let h=i;null==i&&(h=0);const d=j(o.shape),p=kg(r,o,l,h),f=xt({inputs:{x:r},backend:e,attrs:{shape:[p.batchSize,p.outerSize,p.dimSize,p.sliceSize]}}),g=xt({inputs:{x:o},backend:e,attrs:{shape:[p.batchSize,d/p.batchSize]}}),m=[p.batchSize,p.outerSize,d/p.batchSize,p.sliceSize],y=e.bufferSync(g),w=ES(e.bufferSync(f),y,m);return e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(g),e.makeTensorInfo(p.outputShape,w.dtype,w.values)}},$S=Vt((n,t)=>n>t?1:0),lB=nn(hl,$S,null,"bool"),uB={kernelName:hl,backendName:"cpu",kernelFunc:lB},AS=Vt((n,t)=>n>=t?1:0),cB=nn(Sa,AS,null,"bool"),hB={kernelName:Sa,backendName:"cpu",kernelFunc:cB},pB={kernelName:Oc,backendName:"cpu",kernelFunc:function dB(n){const{inputs:t,backend:e}=n,{input:s}=t,r=j(s.shape),o=s.shape[s.shape.length-1],i=xt({inputs:{x:s},backend:e,attrs:{shape:[r/o,o]}}),l=kS(i,!0,e),u=xt({inputs:{x:l},backend:e,attrs:{shape:s.shape}});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(l),u}},fB=ct(Ca,n=>Number.isFinite(n)?1:0,"bool"),mB={kernelName:Ca,backendName:"cpu",kernelFunc:fB},gB=ct(Na,n=>Math.abs(n)===1/0?1:0,"bool"),yB={kernelName:Na,backendName:"cpu",kernelFunc:gB},bB=ct(ka,n=>Number.isNaN(n)?1:0,"bool"),xB={kernelName:ka,backendName:"cpu",kernelFunc:bB},RS=Vt((n,t)=>n<t?1:0),wB=nn(pl,RS,null,"bool"),vB={kernelName:pl,backendName:"cpu",kernelFunc:wB},DS=Vt((n,t)=>n<=t?1:0),SB=nn(fl,DS,null,"bool"),IB={kernelName:fl,backendName:"cpu",kernelFunc:SB};function FS(n,t,e){const s=(t-n)/(e-1),r=hn(e,"float32");r[0]=n;for(let o=1;o<r.length;o++)r[o]=r[o-1]+s;return r}const NB={kernelName:Pc,backendName:"cpu",kernelFunc:function CB(n){const{backend:t,attrs:e}=n,{start:s,stop:r,num:o}=e,a=FS(s,r,o);return t.makeTensorInfo([a.length],"float32",a)}},OS=or(n=>Math.log(n)),kB=so(Ta,OS),TB={kernelName:Ta,backendName:"cpu",kernelFunc:kB},_B=ct(_a,n=>Math.log1p(n)),EB={kernelName:_a,backendName:"cpu",kernelFunc:_B},$B=Vt((n,t)=>n&&t),AB=nn(ml,$B,null,"bool"),RB={kernelName:ml,backendName:"cpu",kernelFunc:AB},DB=ct(gl,n=>n?0:1,"bool"),FB={kernelName:gl,backendName:"cpu",kernelFunc:DB},OB=Vt((n,t)=>n||t),LB=nn(yl,OB,null,"bool"),PB={kernelName:yl,backendName:"cpu",kernelFunc:LB},zB={kernelName:bl,backendName:"cpu",kernelFunc:function MB(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{depthRadius:o,bias:a,alpha:i,beta:l}=s;Se(r,"LRN");const u=r.shape[3],c=u-1,h=e.data.get(r.dataId).values,d=j(r.shape),p=new Float32Array(d);function f(g){const m=g%u;let y=g-m+Math.max(0,m-o);const b=g-m+Math.min(m+o,c);let w=0;for(;y<=b;y++){const x=h[y];w+=x*x}return w}for(let g=0;g<d;g++){const m=f(g),y=h[g]*Math.pow(a+i*m,-l);p[g]=y}return e.makeTensorInfo(r.shape,r.dtype,p)}},VB={kernelName:Mc,backendName:"cpu",kernelFunc:function BB(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,y:o,dy:a}=t,{depthRadius:i,bias:l,alpha:u,beta:c}=s;Se(a,"LRNGrad");const h=j(a.shape),d=a.shape[3],p=e.data.get(a.dataId).values,f=e.data.get(r.dataId).values,g=e.data.get(o.dataId).values,m=new Float32Array(h),y=h;for(let b=0;b<y;b++){const w=b%d,x=b-w+Math.max(0,w-i),S=b-w+Math.min(d,w+i+1);let I=0;for(let k=x;k<S;k++)I+=Math.pow(f[k],2);I=u*I+l;for(let k=x;k<S;k++){let T=-2*u*c*f[k]*g[b]/I;b===k&&(T+=Math.pow(I,-c)),T*=p[b],m[k]+=T}}return e.makeTensorInfo(a.shape,r.dtype,m)}};function LS(n,t,e,s){const r=sn(s,j(e));for(let o=0;o<r.length;++o){const a=o*t;let i=n[a];for(let l=0;l<t;++l){const u=n[a+l];(Number.isNaN(u)||u>i)&&(i=u)}r[o]=i}return r}function PS(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{reductionIndices:o,keepDims:a}=s,i=e;let l=r.shape;const u=l.length,c=Ue(o,l);let h=c;const d=Et(h,u);let p=i.data.get(r.dataId).values;if(null!=d){const x=new Array(u);for(let S=0;S<x.length;S++)x[S]=l[d[S]];p=Gy(p,l,r.dtype,d,x),h=zt(h.length,u),l=x}Se(r,"max"),mn("max",h,u);const[f,g]=ln(l,h),y=LS(p,j(g),f,r.dtype),b=i.write(y,f,r.dtype);let w=f;return a&&(w=Mt(f,c)),{dataId:b,shape:w,dtype:r.dtype}}const WB={kernelName:xl,backendName:"cpu",kernelFunc:PS},MS=Vt((n,t)=>Math.max(n,t)),UB=nn(Ea,MS),GB={kernelName:Ea,backendName:"cpu",kernelFunc:UB},jB={kernelName:wl,backendName:"cpu",kernelFunc:function HB(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t;Se(r,"maxPool");const{filterSize:o,strides:a,pad:i,dimRoundingMode:l}=s;C(pn(a,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '1'`);const c=gs(r.shape,o,a,1,i,l);let h;if(1===c.filterWidth&&1===c.filterHeight&&Xe(c.inShape,c.outShape))h=ar({inputs:{x:r},backend:e});else{const d=e.data.get(r.dataId).values,p=Te(r.shape),f=Hy(d,0,r.dtype,p,c,"max");h=e.makeTensorInfo(c.outShape,r.dtype,f.values)}return h}},KB={kernelName:vl,backendName:"cpu",kernelFunc:function qB(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{filterSize:o,strides:a,pad:i,dimRoundingMode:l,dataFormat:u}=s;Se(r,"maxPool3d");const c=gr(r.shape,o,a,1,i,l,u),d=dS(e.data.get(r.dataId).values,0,r.dtype,Te(r.shape),c,"max");return e.makeTensorInfo(d.shape,"float32",d.values)}},ZB={kernelName:Bc,backendName:"cpu",kernelFunc:function XB(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o}=t,{filterSize:a,strides:i,pad:l,dimRoundingMode:u}=s;Se([r,o],"maxPool3DGrad");const c=gr(o.shape,a,i,1,l,u),d=function lM(n,t){const e=Me(t.outShape,"int32"),s=t.strideDepth,r=t.strideHeight,o=t.strideWidth,a=t.dilationDepth,i=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,d=t.padInfo.front,p=t.padInfo.top,f=t.padInfo.left;for(let g=0;g<t.batchSize;++g)for(let m=0;m<t.inChannels;++m)for(let y=0;y<t.outDepth;++y){const b=y*s-d;let w=b;for(;w<0;)w+=a;const x=Math.min(t.inDepth,u+b);for(let S=0;S<t.outHeight;++S){const I=S*r-p;let k=I;for(;k<0;)k+=i;const T=Math.min(t.inHeight,c+I);for(let _=0;_<t.outWidth;++_){const E=_*o-f;let L=E;for(;L<0;)L+=l;const B=Math.min(t.inWidth,h+E);let W=Number.NEGATIVE_INFINITY,U=-1;for(let G=w;G<x;G+=a){const K=G-b;for(let X=k;X<T;X+=i){const H=X-I;for(let Z=L;Z<B;Z+=l){const se=Z-E,oe=n.get(g,G,X,Z,m);oe>=W&&(W=oe,U=K*c*h+H*c+se)}}}e.set(U,g,y,S,_,m)}}}return e}(e.bufferSync(o),c),p=c.strideDepth,f=c.strideHeight,g=c.strideWidth,m=c.dilationDepth,y=c.dilationHeight,b=c.dilationWidth,w=c.effectiveFilterDepth,x=c.effectiveFilterHeight,S=c.effectiveFilterWidth,I=w-1-c.padInfo.front,k=S-1-c.padInfo.left,T=x-1-c.padInfo.top,_=Me(o.shape,"float32"),E=e.bufferSync(r);for(let L=0;L<c.batchSize;++L)for(let B=0;B<c.inChannels;++B)for(let W=0;W<c.inDepth;++W)for(let U=0;U<c.inHeight;++U)for(let G=0;G<c.inWidth;++G){const K=W-I,X=U-T,H=G-k;let Z=0;for(let se=0;se<w;se+=m){const oe=(K+se)/p;if(!(oe<0||oe>=c.outDepth||Math.floor(oe)!==oe))for(let ce=0;ce<x;ce+=y){const ie=(X+ce)/f;if(!(ie<0||ie>=c.outHeight||Math.floor(ie)!==ie))for(let ge=0;ge<S;ge+=b){const he=(H+ge)/g;if(he<0||he>=c.outWidth||Math.floor(he)!==he)continue;const Ae=w*x*S-1-d.get(L,oe,ie,he,B)===se*x*S+ce*S+ge?1:0;0!==Ae&&(Z+=E.get(L,oe,ie,he,B)*Ae)}}}_.set(Z,L,W,U,G,B)}return e.makeTensorInfo(_.shape,_.dtype,_.values)}},QB={kernelName:zc,backendName:"cpu",kernelFunc:function YB(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o,output:a}=t,i=o;Se([o,a],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,d=gs(i.shape,l,u,1,c,h),p=e.data.get(i.dataId).values,f=Me(d.outShape,i.dtype,hS(p,i.shape,i.dtype,d).values),g=d.strideHeight,m=d.strideWidth,y=d.dilationHeight,b=d.dilationWidth,w=d.effectiveFilterHeight,x=d.effectiveFilterWidth,S=x-1-d.padInfo.left,I=w-1-d.padInfo.top,k=Me(i.shape,"float32"),T=e.data.get(r.dataId).values,_=Me(r.shape,"float32",T);for(let E=0;E<d.batchSize;++E)for(let L=0;L<d.inChannels;++L)for(let B=0;B<d.inHeight;++B)for(let W=0;W<d.inWidth;++W){const U=B-I,G=W-S;let K=0;for(let X=0;X<w;X+=y){const H=(U+X)/g;if(!(H<0||H>=d.outHeight||Math.floor(H)!==H))for(let Z=0;Z<x;Z+=b){const se=(G+Z)/m;if(se<0||se>=d.outWidth||Math.floor(se)!==se)continue;const ie=w*x-1-f.get(E,H,se,L)===X*x+Z?1:0;0!==ie&&(K+=_.get(E,H,se,L)*ie)}}k.set(K,E,B,W,L)}return e.makeTensorInfo(k.shape,k.dtype,k.values)}},eV={kernelName:Vc,backendName:"cpu",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{x:s}=n,{filterSize:r,strides:o,pad:a,includeBatchInIndex:i}=t,l=e;Se(s,"MaxPoolWithArgmax");const u=l.data.get(s.dataId).values,c=gs(s.shape,r,o,[1,1],a),[h,d]=function JB(n,t,e,s,r){const a=Hy(n,0,e,Te(t),r,"max"),i=hS(n,t,e,r,!0,s);return[a.values,i.values]}(u,s.shape,s.dtype,i,c),p=l.write(h,c.outShape,s.dtype),f=l.write(d,c.outShape,s.dtype);return[{dataId:p,shape:c.outShape,dtype:s.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}},nV={kernelName:Sl,backendName:"cpu",kernelFunc:function tV(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s,i=Ue(o,r.shape),c=j(ln(r.shape,i)[1]),h=[],d=e.makeTensorInfo([],"float32",new Float32Array([c]));h.push(d);const p=ro({inputs:{x:r},backend:e,attrs:{dtype:"float32"}});h.push(p);const f=Ky({inputs:{a:p,b:d},backend:e});h.push(f);const g=Hu({inputs:{x:f},backend:e,attrs:{axis:o,keepDims:a}});return h.forEach(m=>e.disposeIntermediateTensorInfo(m)),g}},rV={kernelName:Il,backendName:"cpu",kernelFunc:function sV(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s;Se(r,"min");const i=Ue(o,r.shape);let l=i;const u=Et(l,r.shape.length);let c=r;null!=u&&(c=Wn({inputs:{x:r},backend:e,attrs:{perm:u}}),l=zt(l.length,r.shape.length)),mn("min",l,c.shape.length);const[h,d]=ln(c.shape,l),p=j(d),f=hn(j(h),c.dtype),g=e.data.get(c.dataId).values;for(let y=0;y<f.length;++y){const b=y*p;let w=g[b];for(let x=0;x<p;++x){const S=g[b+x];(Number.isNaN(S)||S<w)&&(w=S)}f[y]=w}null!=u&&e.disposeIntermediateTensorInfo(c);const m=e.makeTensorInfo(h,c.dtype,f);if(a){const b=xt({inputs:{x:m},backend:e,attrs:{shape:Mt(h,i)}});return e.disposeIntermediateTensorInfo(m),b}return m}},zS=Vt((n,t)=>Math.min(n,t)),oV=nn($a,zS),aV={kernelName:$a,backendName:"cpu",kernelFunc:oV},lV={kernelName:Cl,backendName:"cpu",kernelFunc:function iV(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{paddings:o,mode:a}=s;Se(r,"mirrorPad");const i=o.map((w,x)=>w[0]+r.shape[x]+w[1]),l=o.map(w=>w[0]),u=o.map((w,x)=>w[0]+r.shape[x]),c="reflect"===a?0:1,h=e.data.get(r.dataId).values,d=r.shape.length,p=Te(r.shape),f=j(i),g=i.length,m=Te(i),y=sn(r.dtype,f);for(let w=0;w<f;w++){let x=xo(w,g,m);for(let I=0;I<g;I++)x[I]<l[I]?x[I]=2*l[I]-x[I]-c:x[I]>=u[I]&&(x[I]=2*(u[I]-1)-x[I]+c);x=x.map((I,k)=>I-l[k]);const S=Cs(x,d,p);y[w]=h[S]}return{dataId:e.write(y,i,r.dtype),shape:i,dtype:r.dtype}}},uV=Vt((n,t)=>{const e=n%t;return n<0&&t<0||n>=0&&t>=0?e:(e+t)%t}),cV=nn(Aa,uV),hV={kernelName:Aa,backendName:"cpu",kernelFunc:cV};function BS(n){const{inputs:t,backend:e,attrs:s}=n,{logits:r}=t,{dim:o}=s,a=r.shape.length;let i=o;if(-1===i&&(i=a-1),i!==a-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${a} and dim was ${i}`);const l=Ue([i],r.shape),u=PS({inputs:{x:r},backend:e,attrs:{reductionIndices:l,keepDims:!1}}),c=Mt(u.shape,l),h=xt({inputs:{x:u},backend:e,attrs:{shape:c}}),d=Zy({inputs:{a:r,b:h},backend:e}),p=IS({inputs:{x:d},backend:e}),f=Hu({inputs:{x:p},backend:e,attrs:{axis:l,keepDims:!1}}),g=xt({inputs:{x:f},backend:e,attrs:{shape:c}}),m=Ky({inputs:{a:p,b:g},backend:e});return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(g),m}const dV={kernelName:Wl,backendName:"cpu",kernelFunc:BS},fV={kernelName:Wc,backendName:"cpu",kernelFunc:function pV(n){const{inputs:t,backend:e,attrs:s}=n,{logits:r}=t,{numSamples:o,seed:a,normalized:i}=s;Se(r,"multinomial");const l=i?r:BS({inputs:{logits:r},backend:e,attrs:{dim:-1}}),u=l.shape[0],c=l.shape[1],h=e.data.get(l.dataId).values,d=[u,o],p=hn(j(d),"int32");for(let f=0;f<u;++f){const g=f*c,m=new Float32Array(c-1);m[0]=h[g];for(let w=1;w<m.length;++w)m[w]=m[w-1]+h[g+w];const y=Uh.alea(a.toString()),b=f*o;for(let w=0;w<o;++w){const x=y();p[b+w]=m.length;for(let S=0;S<m.length;S++)if(x<m[S]){p[b+w]=S;break}}}return i||e.disposeIntermediateTensorInfo(l),e.makeTensorInfo(d,"int32",p)}};function VS(n,t,e){const s=hr(-1,e);return qy([],t,s,n,e)}const gV={kernelName:Nl,backendName:"cpu",kernelFunc:function mV(n){const{inputs:t,backend:e}=n,{x:s}=t;Se(s,"neg");const r=e.data.get(s.dataId).values,[o,a]=VS(r,s.shape,s.dtype);return e.makeTensorInfo(a,s.dtype,o)}},yV=ud,xV={kernelName:Uc,backendName:"cpu",kernelFunc:function bV(n){const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:o}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:l}=s;Se(r,"NonMaxSuppression");const u=e.data.get(r.dataId).values,c=e.data.get(o.dataId).values,{selectedIndices:h}=yV(u,c,a,i,l);return e.makeTensorInfo([h.length],"int32",new Int32Array(h))}},wV=cd,SV={kernelName:Gc,backendName:"cpu",kernelFunc:function vV(n){const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:o}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:l,padToMaxOutputSize:u}=s;Se(r,"NonMaxSuppressionPadded");const c=e.data.get(r.dataId).values,h=e.data.get(o.dataId).values,{selectedIndices:d,validOutputs:p}=wV(c,h,a,i,l,u);return[e.makeTensorInfo([d.length],"int32",new Int32Array(d)),e.makeTensorInfo([],"int32",new Int32Array([p]))]}},IV=hd,NV={kernelName:Hc,backendName:"cpu",kernelFunc:function CV(n){const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:o}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:l,softNmsSigma:u}=s;Se(r,"NonMaxSuppressionWithScore");const c=e.data.get(r.dataId).values,h=e.data.get(o.dataId).values,d=a,p=i,f=l,g=u,{selectedIndices:m,selectedScores:y}=IV(c,h,d,p,f,g);return[e.makeTensorInfo([m.length],"int32",new Int32Array(m)),e.makeTensorInfo([y.length],"float32",new Float32Array(y))]}},WS=Vt((n,t)=>n!==t?1:0),kV=nn(kl,WS,null,"bool"),TV={kernelName:kl,backendName:"cpu",kernelFunc:kV},EV={kernelName:_l,backendName:"cpu",kernelFunc:function _V(n){const{inputs:t,backend:e,attrs:s}=n,{indices:r}=t,{dtype:o,depth:a,onValue:i,offValue:l}=s;Se(r,"oneHot");const u=j(r.shape),c=new Float32Array(u*a);c.fill(l);const h=e.data.get(r.dataId).values;for(let d=0;d<u;++d)h[d]>=0&&h[d]<a&&(c[d*a+h[d]]=i);return e.makeTensorInfo([...r.shape,a],o,c)}};function cp(n){const{inputs:t,backend:e}=n,{x:s}=t;if("string"===s.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===s.dtype){const r=qo({inputs:{input:s},backend:e}),o=cp({inputs:{x:r},backend:e}),a=$i({inputs:{input:s},backend:e}),i=cp({inputs:{x:a},backend:e}),l=Yn({inputs:{real:o,imag:i},backend:e});return e.disposeIntermediateTensorInfo(r),e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(i),l}return Qy({backend:e,attrs:{shape:s.shape,value:0,dtype:s.dtype}})}const $V={kernelName:jl,backendName:"cpu",kernelFunc:cp},AV={kernelName:Tl,backendName:"cpu",kernelFunc:function US(n){const{inputs:t,backend:e}=n,{x:s}=t;if("string"===s.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===s.dtype){const r=qo({inputs:{input:s},backend:e}),o=US({inputs:{x:r},backend:e}),a=$i({inputs:{input:s},backend:e}),i=cp({inputs:{x:a},backend:e}),l=Yn({inputs:{real:o,imag:i},backend:e});return e.disposeIntermediateTensorInfo(r),e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(i),l}return Qy({backend:e,attrs:{shape:s.shape,value:1,dtype:s.dtype}})}};function GS(n){const{inputs:t,backend:e,attrs:s}=n,{axis:r}=s;if(1===t.length)return up({inputs:{input:t[0]},backend:e,attrs:{dim:r}});const o=t[0].shape,a=t[0].dtype;t.forEach(c=>{cn(o,c.shape,"All tensors passed to stack must have matching shapes"),C(a===c.dtype,()=>"All tensors passed to stack must have matching dtypes")});const i=[],u=Ai({inputs:t.map(c=>{const h=up({inputs:{input:c},backend:e,attrs:{dim:r}});return i.push(h),h}),backend:e,attrs:{axis:r}});return i.forEach(c=>e.disposeIntermediateTensorInfo(c)),u}const RV={kernelName:El,backendName:"cpu",kernelFunc:GS},HS={kernelName:$l,backendName:"cpu",kernelFunc:function DV(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{paddings:o,constantValue:a}=s;Se(r,"pad");const i=o.map((b,w)=>b[0]+r.shape[w]+b[1]),l=o.map(b=>b[0]),u=e.data.get(r.dataId).values,c=j(r.shape),h=r.shape.length,d=Te(r.shape),p=j(i),f=i.length,g=Te(i),m=sn(r.dtype,p);0!==a&&m.fill(a);for(let b=0;b<c;b++)m[Cs(xo(b,h,d).map((I,k)=>I+l[k]),f,g)]=u[b];return{dataId:e.write(m,i,r.dtype),shape:i,dtype:r.dtype}}},FV=Vt((n,t)=>Math.pow(n,t)),OV=nn(Da,FV),LV={kernelName:Da,backendName:"cpu",kernelFunc:OV};function jS(n,t,e,s){const[r,o]=ln(n,s),a=Rn(t,"int32"),i=hn(j(r),a),l=j(o);for(let u=0;u<i.length;++u){const c=u*l;let h=1;for(let d=0;d<l;++d)h*=e[c+d];i[u]=h}return{outVals:i,outShape:r,outDtype:a}}const MV={kernelName:Rl,backendName:"cpu",kernelFunc:function PV(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s;Se(r,"prod");const i=r.shape.length,l=Ue(o,r.shape),u=Et(l,i);let c=l,h=r;const d=[];null!=u&&(h=Wn({inputs:{x:r},backend:e,attrs:{perm:u}}),d.push(h),c=zt(c.length,i));const p=e.data.get(h.dataId).values,{outVals:f,outShape:g,outDtype:m}=jS(h.shape,h.dtype,p,c);let y=g;return a&&(y=Mt(g,l)),d.forEach(b=>e.disposeIntermediateTensorInfo(b)),e.makeTensorInfo(y,m,f)}};function qS(n,t){const e=n.slice(0,t);for(;e.length<t;)e.push(1);for(let s=t;s<n.length;s++)e[t-1]*=n[s];return e}function KS(n,t,e,s,r,o,a,i){if(0===n.length)throw new Error("paramsNestedSplits must be non empty");if(0===t[0].length)throw new Error("Split tensors must not be scalars");if(function zV(n,t,e){n.forEach((s,r)=>{if(s<0||s>=e){const o=xo(r,t.length,Te(t)).join(",");throw new Error(`indices[${o}] = ${s} is not in [0, ${e})`)}})}(o,a,t[0][0]-1),0===s.length)throw new Error("params.rank must be nonzero");const u=s[0],{outSplits:c,valueSlices:h,numValues:d}=function VV(n,t,e,s){const r=[];let o=0;const i=new Array(t.length-1+e.length).fill(null).map(()=>[0]);!function BV(n,t){for(let e=0;e<n.length;++e){const s=n[e],r=e===n.length-1?t:n[e+1].length;if(0===s.length)throw new Error("Ragged splits may not be empty");if(s[0]<0)throw new Error("Ragged splits must be non-negative");if(s[s.length-1]>r)throw new Error("Ragged splits must not point past values");for(let o=1;o<s.length;++o)if(s[o-1]>s[o])throw new Error("Ragged splits must be sorted in ascending order")}}(e,s);let l=1;for(let u=0;u<t.length-1;++u){l*=t[u];const c=t[u+1];for(let h=1;h<l+1;++h)i[u].push(h*c)}for(let u=0;u<n.length;++u){let c=n[u],h=n[u]+1;for(let d=0;d<e.length;++d){const p=e[d],f=d+t.length-1;if(f>=0){const g=i[f],m=g[g.length-1]-p[c];for(let y=c;y<h;++y)i[f].push(p[y+1]+m)}c=p[c],h=p[h]}h!==c&&(r.push([c,h]),o+=h-c)}return{outSplits:i,valueSlices:r,numValues:o}}(o,a,n,u),p=function WV(n){const t=[];for(let e=0;e<n.length;++e){const r=Ft("int32",n[e].length);t.push(r),n[e].forEach((o,a)=>r[a]=o)}return t}(c),f=function GV(n,t,e,s,r){const o=t.slice();o[0]=r;const a=Ft(e,j(o)),i=n.length;return function UV(n,t,e,s,r,o){const a=qS(t,2)[1],i=qS(o,2)[1];let l=0;for(const u of e)for(let c=u[0];c<u[1];++c){for(let h=0;h<s;++h)r[l*i+h]=n[c*a+h];++l}}(n,t,s,0===i?0:i/t[0],a,o),[a,o]}(e,s,r,h,d);return[p,f[0],f[1]]}const jV={kernelName:jc,backendName:"cpu",kernelFunc:function HV(n){const{inputs:t,backend:e,attrs:s}=n,{paramsNestedSplits:r,paramsDenseValues:o,indices:a}=t,l=r.map(y=>e.data.get(y.dataId).values),u=r.map(y=>y.shape),c=e.data.get(o.dataId).values,h=e.data.get(a.dataId).values,[d,p,f]=KS(l,u,c,o.shape,o.dtype,h,a.shape),g=d.map(y=>e.makeTensorInfo([y.length],"int32",y)),m=e.makeTensorInfo(f,o.dtype,p);return g.concat([m])}},XS=2147483647;function ZS(n,t,e,s,r,o,a){if(t.length>1)throw new Error("starts must be a scalar or vector");if(r.length>1)throw new Error("limits must be a scalar or vector");if(a.length>1)throw new Error("deltas must be a scalar or vector");const i=0===t.length,l=0===r.length,u=0===a.length,c=[];i||c.push(t[0]),l||c.push(r[0]),u||c.push(a[0]);for(let m=1;m<c.length;++m)if(c[m]!==c[m-1])throw new Error("starts, limits, and deltas must have the same shape");const h=0===c.length?1:c[0],d=Ft("int32",h+1);d[0]=0;for(let m=0;m<h;++m){const y=i?n[0]:n[m],b=l?s[0]:s[m],w=u?o[0]:o[m];if(0===w)throw new Error("Requires delta != 0");let x;if(w>0&&b<y||w<0&&b>y)x=0;else if(x=Math.ceil(Math.abs((b-y)/w)),x>XS)throw new Error(`Requires ((limit - start) / delta) <= ${XS}`);d[m+1]=d[m]+x}const f=Ft(e,d[h]);let g=0;for(let m=0;m<h;++m){const y=d[m+1]-d[m];let b=i?n[0]:n[m];const w=u?o[0]:o[m];for(let x=0;x<y;++x)f[g++]=b,b+=w}return[d,f]}const KV={kernelName:qc,backendName:"cpu",kernelFunc:function qV(n){const{inputs:t,backend:e}=n,{starts:s,limits:r,deltas:o}=t,a=e.data.get(s.dataId).values,i=e.data.get(r.dataId).values,l=e.data.get(o.dataId).values,[u,c]=ZS(a,s.shape,s.dtype,i,r.shape,l,o.shape);return[e.makeTensorInfo([u.length],"int32",u),e.makeTensorInfo([c.length],s.dtype,c)]}};var vs=Xs;class hp{constructor(t,e,s,r,o,a,i,l,u,c){this.shape=t,this.shapeShape=e,this.values=s,this.valuesShape=r,this.valuesDType=o,this.defaultValue=a,this.defaultValueShape=i,this.rowPartitionValues=l,this.rowPartitionValuesShapes=u,this.rowPartitionTypes=Z0(c),this.raggedRank=Y0(this.rowPartitionTypes)}getRowPartitionTypeByDimension(t){return this.rowPartitionTypes[0]===vs.FIRST_DIM_SIZE?this.rowPartitionTypes[t+1]:this.rowPartitionTypes[t]}getRowPartitionTensor(t){return this.rowPartitionTypes[0]===vs.FIRST_DIM_SIZE?this.rowPartitionValues[t+1]:this.rowPartitionValues[t]}getMaxWidth(t){const e=this.getRowPartitionTensor(t-1);switch(this.getRowPartitionTypeByDimension(t-1)){case vs.VALUE_ROWIDS:return hp.getMaxWidthValueRowID(e);case vs.ROW_SPLITS:return hp.getMaxWidthRowSplit(e);default:throw new Error(`Cannot handle partition type ${vs[this.getRowPartitionTypeByDimension(t-1)]}`)}}static getMaxWidthRowSplit(t){const e=t.length;if(0===e||1===e)return 0;let s=0;for(let r=0;r<e-1;++r){const o=t[r+1]-t[r];o>s&&(s=o)}return s}static getMaxWidthValueRowID(t){const e=t.length;if(0===e)return 0;let s=0,r=t[0],o=0;for(let a=1;a<e;++a){const i=t[a];i!==r&&(r=i,o=Math.max(a-s,o),s=a)}return Math.max(e-s,o)}tensorShapeFromTensor(t,e,s=!0){if(0===e.length){if(-1===t[0])return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return QS(t,s)}calculateOutputSize(t){const e=this.valuesShape;Q0(this.defaultValueShape,e);const r=this.tensorShapeFromTensor(this.shape,this.shapeShape),a=X0(this.raggedRank,r,e);a[0]<0&&(a[0]=t);for(let i=1;i<=this.raggedRank;++i)a[i]<0&&(a[i]=this.getMaxWidth(i));return a}calculateFirstParentOutputIndex(t,e,s){const r=Math.min(t,s),o=[];let a=0;for(let i=0;i<r;++i,a+=e)o.push(a);for(let i=r;i<t;++i)o.push(-1);return C(o.length===t,()=>"Final length of result must be equal to firstDimension."),o}calculateOutputIndexRowSplit(t,e,s,r){const o=t.length,a=[];for(let i=0;i<o-1;++i){const l=t[i+1]-t[i];let u=Math.min(r,l),c=e[i];-1===c&&(u=0);for(let h=0;h<u;++h)a.push(c),c+=s;for(let h=0;h<l-u;++h)a.push(-1)}if(o>0&&a.length!==t[o-1])throw new Error("Invalid row split size.");return a}calculateOutputIndexValueRowID(t,e,s,r){const o=t.length,a=[];if(0===o)return[];let i=0,l=t[0];if(l>=e.length)throw new Error(`Got currentValueRowId=${l}, which is not less than ${e.length}`);let u=e[l];a.push(u);for(let c=1;c<o;++c){const h=t[c];if(h===l)u>=0&&(++i,i<r?u+=s:u=-1);else{if(i=0,l=h,h>=e.length)throw new Error(`Got nextValueRowId=${h} which is not less than ${e.length}`);u=e[h]}a.push(u)}if(a.length!==t.length)throw new Error("Invalid row ids.");return a}calculateOutputIndex(t,e,s,r){const o=this.getRowPartitionTensor(t),a=this.getRowPartitionTypeByDimension(t);switch(a){case vs.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(o,e,s,r);case vs.ROW_SPLITS:if(o.length-1>e.length)throw new Error(`Row partition size is greater than output size: ${o.length-1} > ${e.length}`);return this.calculateOutputIndexRowSplit(o,e,s,r);default:throw new Error(`Unsupported partition type: ${vs[a]}`)}}getFirstDimensionSize(){const t=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw new Error("No row_partition_types given.");const e=this.rowPartitionTypes[0];switch(e){case vs.FIRST_DIM_SIZE:return t[0];case vs.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case vs.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${vs[e]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const e=this.getFirstDimensionSize(),s=this.calculateOutputSize(e),r=new Array(this.raggedRank+1);r[r.length-1]=1;for(let l=r.length-2;l>=0;--l)r[l]=r[l+1]*s[l+1];const o=QS(s,!1),a=Ft(this.valuesDType,j(o));if(r[0]*s[0]>0){let l=this.calculateFirstParentOutputIndex(e,r[0],s[0]);for(let u=1;u<=this.raggedRank;++u)l=this.calculateOutputIndex(u-1,l,r[u],s[u]);this.setOutput(this.raggedRank,l,a,o)}return[o,a]}setOutput(t,e,s,r){if(0===s.length)return;const o=this.values,a=s;let i=r.slice();i=i.slice(t+1);const l=j(i),u=e.length;let c=this.defaultValue;if(c.length!==l&&1!==c.length){const f=this.defaultValueShape;P(()=>{const g=F(c,f);c=Do(g,i).dataSync()})}let h=0,d=0,p=0;for(let f=0;f<=u;++f){let g=f<u?e[f]:-1;if(g!==p){if(d<p){const m=o.subarray(h*l);YS(a.subarray(d*l),m,(p-d)*l)}if(f>=u&&(g=Math.floor(s.length/l)),g>p)if(1===this.defaultValue.length)a.subarray(p*l,g*l).fill(this.defaultValue[0]),p=g;else for(;g>p;)YS(a.slice(p*l),c,l),++p;g<0?(h=f+1,d=p):(h=f,d=p,p=d+1)}else++p}}}function YS(n,t,e){for(let s=0;s<e;s++)n[s]=t[s]}function QS(n,t){const e=[];for(let s of n){if(s<0){if(!t)throw new Error(`Dimension ${s} must be >= 0`);if(s<-1)throw new Error(`Dimension ${s} must be >= -1`);s=-1}e.push(s)}return e}function JS(n,t,e,s,r,o,a,i,l,u){return new hp(n,t,e,s,r,o,a,i,l,u).compute()}const ZV={kernelName:Kc,backendName:"cpu",kernelFunc:function XV(n){const{inputs:t,backend:e,attrs:s}=n,{shape:r,values:o,defaultValue:a,rowPartitionTensors:i}=t,{rowPartitionTypes:l}=s,u=e.data.get(r.dataId).values,c=e.data.get(o.dataId).values,h=e.data.get(a.dataId).values,d=i.map(m=>e.data.get(m.dataId).values),p=i.map(m=>m.shape),[f,g]=JS(u,r.shape,c,o.shape,o.dtype,h,a.shape,d,p,l);return e.makeTensorInfo(f,o.dtype,g)}};function eI(n,t,e,s){if(n===t||n<t&&e<0||t<n&&e>1)return hn(0,s);const l=hn(Math.abs(Math.ceil((t-n)/e)),s);t<n&&1===e&&(e=-1),l[0]=n;for(let u=1;u<l.length;u++)l[u]=l[u-1]+e;return l}const QV={kernelName:Xc,backendName:"cpu",kernelFunc:function YV(n){const{backend:t,attrs:e}=n,{start:s,stop:r,dtype:o,step:a}=e,i=eI(s,r,a,o);return t.makeTensorInfo([i.length],o,i)}},JV=ct(Fa,n=>1/n),eW={kernelName:Fa,backendName:"cpu",kernelFunc:JV},nW={kernelName:Ol,backendName:"cpu",kernelFunc:function tW(n){const{inputs:t,backend:e,attrs:s}=n,{images:r}=t,{alignCorners:o,halfPixelCenters:a,size:i}=s;Se(r,"resizeBilinear");const l=Te(r.shape),[u,c]=i,[h,d,p,f]=r.shape,g=e.data.get(r.dataId).values,m=new Float32Array(j([h,u,c,f])),y=[o&&u>1?d-1:d,o&&c>1?p-1:p],b=[o&&u>1?u-1:u,o&&c>1?c-1:c];let w=0;const x=y[0]/b[0],S=y[1]/b[1];for(let I=0;I<h;I++)for(let k=0;k<u;k++){let T;T=a?x*(k+.5)-.5:x*k;const _=Math.max(0,Math.floor(T)),E=T-_,L=Math.min(d-1,Math.ceil(T)),B=I*l[0]+_*l[1],W=I*l[0]+L*l[1];for(let U=0;U<c;U++){let G;G=a?S*(U+.5)-.5:S*U;const K=Math.max(0,Math.floor(G)),X=G-K,H=Math.min(p-1,Math.ceil(G)),Z=B+K*l[2],se=W+K*l[2],oe=B+H*l[2],ce=W+H*l[2];for(let ie=0;ie<f;ie++){const ge=g[Z+ie],he=g[se+ie],Ae=ge+(g[oe+ie]-ge)*X;m[w++]=Ae+(he+(g[ce+ie]-he)*X-Ae)*E}}}return e.makeTensorInfo([h,u,c,f],"float32",m)}},rW={kernelName:Qc,backendName:"cpu",kernelFunc:function sW(n){const{inputs:t,backend:e,attrs:s}=n,{images:r,dy:o}=t,{alignCorners:a}=s;Se([o,r],"resizeBilinearGrad");const i=Te(r.shape),[l,u,c,h]=r.shape,[,d,p]=o.shape,f=new Float32Array(l*u*c*h),g=[a&&d>1?u-1:u,a&&p>1?c-1:c],m=[a&&d>1?d-1:d,a&&p>1?p-1:p],y=g[0]/m[0],b=g[1]/m[1],w=e.data.get(o.dataId).values;let x=0;for(let S=0;S<l;S++){const I=S*i[0];for(let k=0;k<d;k++){const T=k*y,_=Math.floor(T),E=Math.min(Math.ceil(T),u-1),L=I+_*i[1],B=I+E*i[1],W=T-_,U=1-W;for(let G=0;G<p;G++){const K=G*b,X=Math.floor(K),H=Math.min(Math.ceil(K),c-1),Z=K-X,se=1-Z,oe=L+X*i[2],ce=L+H*i[2],ie=B+X*i[2],ge=B+H*i[2],he=U*se,be=U*Z,_e=W*se,Ae=W*Z;for(let $e=0;$e<h;$e++){const Ve=w[x++];f[oe+$e]+=Ve*he,f[ce+$e]+=Ve*be,f[ie+$e]+=Ve*_e,f[ge+$e]+=Ve*Ae}}}}return e.makeTensorInfo([l,c,u,h],"float32",f)}},aW={kernelName:Fl,backendName:"cpu",kernelFunc:function oW(n){const{inputs:t,backend:e,attrs:s}=n,{images:r}=t,{alignCorners:o,halfPixelCenters:a,size:i}=s;Se(r,"resizeNearestNeighbor");const l=Te(r.shape),[u,c]=i,[h,d,p,f]=r.shape,g=e.data.get(r.dataId).values,m=new Float32Array(h*u*c*f),y=[o&&u>1?d-1:d,o&&c>1?p-1:p],b=[o&&u>1?u-1:u,o&&c>1?c-1:c],w=y[0]/b[0],x=y[1]/b[1];let S=0;for(let I=0;I<h;I++){const k=I*l[0];for(let T=0;T<u;T++){const _=a?w*(T+.5):w*T;let E=Math.min(d-1,o?Math.round(_):Math.floor(_));a&&(E=Math.max(0,E));const L=k+E*l[1];for(let B=0;B<c;B++){const W=a?x*(B+.5):x*B;let U=Math.min(p-1,o?Math.round(W):Math.floor(W));a&&(U=Math.max(0,U));const G=L+U*l[2];for(let K=0;K<f;K++)m[S++]=g[G+K]}}}return e.makeTensorInfo([h,u,c,f],r.dtype,m)}},lW={kernelName:Yc,backendName:"cpu",kernelFunc:function iW(n){const{inputs:t,backend:e,attrs:s}=n,{images:r,dy:o}=t,{alignCorners:a}=s;Se([o,r],"resizeNearestNeighborGrad");const i=Te(r.shape),l=Te(o.shape),[u,c,h,d]=r.shape,[,p,f]=o.shape,g=new Float32Array(u*c*h*d),m=e.data.get(o.dataId).values,y=[a&&p>1?c-1:c,a&&f>1?h-1:h],b=[a&&p>1?p-1:p,a&&f>1?f-1:f],w=y[0]/b[0],x=y[1]/b[1],S=1/w,I=1/x,k=2*Math.ceil(S)+2,T=2*Math.ceil(I)+2;for(let _=0;_<u;_++){const E=_*i[0];for(let L=0;L<c;L++){const B=E+L*i[1],W=Math.floor(L*S),U=Math.floor(W-k/2);for(let G=0;G<h;G++){const K=B+G*i[2],X=Math.floor(G*I),H=Math.floor(X-T/2);for(let Z=0;Z<d;Z++){let se=0;for(let oe=0;oe<k;oe++){const ce=oe+U;if(ce<0||ce>=p)continue;const ie=E+ce*l[1],ge=ce*w;if(L===Math.min(c-1,a?Math.round(ge):Math.floor(ge)))for(let be=0;be<T;be++){const _e=be+H;if(_e<0||_e>=f)continue;const Ae=ie+_e*l[2],$e=_e*x;G===Math.min(h-1,a?Math.round($e):Math.floor($e))&&(se+=m[Ae+Z])}}g[K+Z]=se}}}}return e.makeTensorInfo(r.shape,r.dtype,g)}},cW={kernelName:Ll,backendName:"cpu",kernelFunc:function uW(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{dims:o}=s;Se(r,"reverse");const a=r.shape.length,i=Ue(o,r.shape);if(0===a)return ar({inputs:{x:r},backend:e});const l=new Gt(r.shape,r.dtype),u=e.bufferSync(r);for(let c=0;c<l.size;c++){const h=l.indexToLoc(c),d=h.slice();i.forEach(p=>d[p]=r.shape[p]-1-d[p]),l.set(u.get(...d),...h)}return e.makeTensorInfo(l.shape,l.dtype,l.values)}},hW={kernelName:gh,backendName:"cpu",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{image:s}=n,{radians:r,fillValue:o,center:a}=t,i=e,l=sn(s.dtype,j(s.shape)),[u,c,h,d]=s.shape,[p,f]=lg(a,c,h),m=Math.sin(r),y=Math.cos(r),b=i.data.get(s.dataId).values;for(let x=0;x<u;x++){const S=x*h*c*d;for(let I=0;I<c;I++){const k=I*(h*d);for(let T=0;T<h;T++){const _=T*d;for(let E=0;E<d;E++){const L=[u,I,T,E],B=L[2],W=L[1];let U=(B-p)*y-(W-f)*m,G=(B-p)*m+(W-f)*y;U=Math.round(U+p),G=Math.round(G+f);let K=o;"number"!=typeof o&&(K=3===E?255:o[E]),U>=0&&U<h&&G>=0&&G<c&&(K=b[S+G*(h*d)+U*d+E]),l[S+k+_+E]=K}}}}return{dataId:i.write(l,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},dW=ct(Pa,n=>{const t=Math.floor(n);return n-t<.5?Math.floor(n):n-t>.5?Math.ceil(n):t%2==0?t:t+1}),pW={kernelName:Pa,backendName:"cpu",kernelFunc:dW},tI=or(n=>1/Math.sqrt(n)),fW=so(Ma,tI),mW={kernelName:Ma,backendName:"cpu",kernelFunc:fW};function Xo(n,t,e,s,r,o,a,i,l,u){const c=[s/r,r],h=n.values,d=t.values;if(0===s)return Me(e,t.dtype);const p=l instanceof Gt?l:Me(c,t.dtype);"string"==typeof l||"number"==typeof l?p.values.fill(l):"boolean"==typeof l&&p.values.fill(+l);for(let f=0;f<o;f++){const g=[];let m=0;for(let y=0;y<a;y++){const b=h[f*a+y];g.push(b),m+=b*i[y]}if(m<0||m>=s/r)throw new Error(`Invalid indices: ${g} does not index into ${e}`);for(let y=0;y<r;y++)u?p.values[m*r+y]+=d[f*r+y]:p.values[m*r+y]=0===t.rank?d[0]:d[f*r+y]}return p}const yW={kernelName:Jc,backendName:"cpu",kernelFunc:function gW(n){const{inputs:t,backend:e,attrs:s}=n,{indices:r,updates:o}=t,{shape:a}=s,{sliceRank:i,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=Vr(0,r,a),g=Xo(e.bufferSync(r),e.bufferSync(o),a,h,u,l,i,c,0,!0);return e.makeTensorInfo(a,g.dtype,g.values)}};function bW(n,t){let e=0,s=n.length,r=0;for(;e<s;)r=Math.floor((e+s)/2),n[r]<t?e=r+1:s=r;return s}function xW(n,t){let e=0,s=n.length,r=0;for(;e<s;)r=Math.floor((e+s)/2),n[r]<=t?e=r+1:s=r;return s}const SW={kernelName:th,backendName:"cpu",kernelFunc:function vW(n){const{inputs:t,backend:e,attrs:s}=n,{sortedSequence:r,values:o}=t,{side:a}=s,u=function wW(n,t,e,s,r,o){const a=Ft("int32",e*r);for(let i=0;i<e;++i){const l=n.slice(i*s,(i+1)*s),u=i*r;for(let c=0;c<r;++c)a[u+c]="left"===o?bW(l,t[c+u]):xW(l,t[c+u])}return a}(e.data.get(r.dataId).values,e.data.get(o.dataId).values,r.shape[0],r.shape[1],o.shape[1],a);return e.makeTensorInfo(o.shape,"int32",u)}},CW={kernelName:Pl,backendName:"cpu",kernelFunc:function IW(n){const{inputs:t,backend:e}=n,{condition:s,t:r,e:o}=t;Se([s,r,o],"select");const a=s.shape.length,i=e.data.get(s.dataId).values,l=e.data.get(r.dataId).values,u=e.data.get(o.dataId).values,c=Rn(r.dtype,o.dtype),h=hn(j(r.shape),c);let d=0;const p=0===a||a>1||1===r.shape.length?1:j(r.shape.slice(1));for(let f=0;f<i.length;f++)for(let g=0;g<p;g++)h[d++]=1===i[f]?l[f]:u[f];return e.makeTensorInfo(r.shape,c,h)}},NW=pd,kW=fd,TW=ct(za,n=>n>=0?kW*n:NW*(Math.exp(n)-1)),_W={kernelName:za,backendName:"cpu",kernelFunc:TW},EW=ct(Wa,n=>n<0?-1:n>0?1:0),$W={kernelName:Wa,backendName:"cpu",kernelFunc:EW},AW=ct(Ba,n=>Math.sin(n)),RW={kernelName:Ba,backendName:"cpu",kernelFunc:AW},DW=ct(Va,n=>Math.sinh(n)),FW={kernelName:Va,backendName:"cpu",kernelFunc:DW},nI=Math.log(1.1920928955078125e-7)+2,OW=ct(Ga,n=>{const t=n>-nI,e=n<nI,s=Math.exp(n);let r;return r=e?s:t?n:Math.log(1+s),r}),LW={kernelName:Ga,backendName:"cpu",kernelFunc:OW},MW={kernelName:Bl,backendName:"cpu",kernelFunc:function PW(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockShape:o,paddings:a}=s;Se([r],"spaceToBatchND");const i=j(o),l=[[0,0]];l.push(...a);for(let I=1+o.length;I<r.shape.length;++I)l.push([0,0]);const u=HS.kernelFunc({inputs:{x:r},backend:e,attrs:{paddings:l,constantValue:0}}),c=Tu(u.shape,o,i,!1),h=_u(c.length,o.length,!1),d=Eu(u.shape,o,i,!1),g=xt({inputs:{x:u},backend:e,attrs:{shape:c}}),b=Wn({inputs:{x:g},backend:e,attrs:{perm:h}}),S=xt({inputs:{x:b},backend:e,attrs:{shape:d}});return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(b),S}};function sI(n,t,e,s,r,o,a){const i=t[0],l=o[0],u=new Array(l),c=new Array(i),h=t[1];if(0===l){if(0!==i)throw new Error(iw(i));return[Ft(e,0),[0,h],Ft(r,0),u,c]}let d=!0,p=0;const f=new Array(l).fill(0);for(let m=0;m<i;++m){const y=n[m*h];if(y<0)throw new Error(lw(m,y));if(y>=l)throw new Error(uw(m,y,l));++f[y],d=d&&y>=p,p=y}let g=!0;for(let m=0;m<l;++m){const y=0===f[m];u[m]=y,g=g&&!y,f[m]=Math.max(f[m],1),m>0&&(f[m]+=f[m-1])}if(g&&d){const m=n,y=s;for(let b=0;b<i;++b)c[b]=b;return[m,[i,h],y,u,c]}{const m=f[l-1],y=Ft(e,m*h),b=Ft(r,m),w=new Array(l).fill(0);for(let x=0;x<i;++x){const S=n[x*h],k=(0===S?0:f[S-1])+w[S];w[S]++;for(let T=0;T<h;++T)y[k*h+T]=n[x*h+T];b[k]=s[x],c[x]=k}for(let x=0;x<l;++x)if(0===w[x]){const I=0===x?0:f[x-1];y[I*h+0]=x;for(let k=1;k<h;++k)y[I*h+k]=0;b[I]=a}return[y,[m,h],b,u,c]}}const BW={kernelName:nh,backendName:"cpu",kernelFunc:function zW(n){const{inputs:t,backend:e}=n,{indices:s,values:r,denseShape:o,defaultValue:a}=t;if(1!==o.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${o.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n        ${r.shape}`);if(0!==a.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${a.shape}`);const i=e.data.get(s.dataId).values,l=e.data.get(r.dataId).values,u=e.data.get(o.dataId).values,c=e.data.get(a.dataId).values[0],[h,d,p,f,g]=sI(i,s.shape,s.dtype,l,r.dtype,u,c);return[e.makeTensorInfo(d,s.dtype,h),e.makeTensorInfo([d[0]],r.dtype,p),e.makeTensorInfo([f.length],"bool",new Uint8Array(f.map(m=>Number(m)))),e.makeTensorInfo([g.length],s.dtype,new Int32Array(g))]}};function rI(n,t,e,s,r){const o=j(s),a=t[0],i=r.length,l=[];let u=1,c=-1;for(let m=0;m<i;++m){const y=r[m];if(-1===y){if(-1!==c)throw new Error(cw(c,m));c=m,l.push(1)}else{if(y<0)throw new Error(hw(m,y));u*=y,l.push(y)}}if(-1!==c){if(u<=0)throw new Error("reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero");const m=Math.trunc(o/u);if(u*m!==o)throw new Error(pw(s,l));l[c]=m}if(j(l)!==o)throw new Error(fw(s,l));const d=s.length,p=[];if(d>0){p[d-1]=1;for(let m=d-2;m>=0;--m)p[m]=p[m+1]*s[m+1]}const f=[];if(i>0){f[i-1]=1;for(let m=i-2;m>=0;--m)f[m]=f[m+1]*l[m+1]}const g=Ft(e,a*i);for(let m=0;m<a;++m){let y=0;for(let b=0;b<d;++b)y+=n[m*d+b]*p[b];for(let b=0;b<i;++b)g[m*i+b]=Math.trunc(y/f[b]),y%=f[b]}return[g,[a,i],l]}const WW={kernelName:sh,backendName:"cpu",kernelFunc:function VW(n){const{inputs:t,backend:e}=n,{inputIndices:s,inputShape:r,newShape:o}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${r.shape}`);if(1!==o.shape.length)throw new Error(`Target shape should be a vector but received shape ${o.shape}`);const a=Array.from(e.data.get(r.dataId).values),i=e.data.get(s.dataId).values,l=Array.from(e.data.get(o.dataId).values),[u,c,h]=rI(i,s.shape,s.dtype,a,l);return[e.makeTensorInfo(c,s.dtype,u),e.makeTensorInfo([h.length],o.dtype,new Int32Array(h))]}};function Jy(n,t,e,s,r,o=!1,a=0){const i=s.length,l=[t[0],n.length/t[0]],u=l[1],h=i>0?r[i-1]+1:0;if(h<0)throw new Error("segment ids must be >= 0");const d=t.slice();d[0]=h;const f=Ft(e,d.reduce((w,x)=>w*x,1));if(0===i)return h>0&&f.fill(a),[f,d];if(h<=0)throw new Error("segment ids must be >= 0");let g=0,m=1,y=0,b=r[g];for(;;){let w=0;if(m<i){if(w=r[m],b===w){++m;continue}if(b>=w)throw new Error("segment ids are not increasing")}if(b<0||b>=h)throw new Error(gw(b,h));b>y&&f.fill(a,y*u,b*u);for(let x=g;x<m;++x){const S=s[x];if(S<0||S>=l[0])throw new Error(yw(x,s[x],l[0]));for(let I=0;I<u;I++)f[b*u+I]+=n[S*u+I]}if(o)for(let x=0;x<u;x++)f[b*u+x]/=m-g;if(g=m,++m,y=b+1,b=w,m>i)break}return y<h&&f.fill(a,y*u,h*u),[f,d]}const GW={kernelName:rh,backendName:"cpu",kernelFunc:function UW(n){const{inputs:t,backend:e}=n,{data:s,indices:r,segmentIds:o}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${r.shape}`);if(1!==o.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${o.shape}`);if(r.shape[0]!==o.shape[0])throw new Error("segmentIds and indices should have same size.");const a=e.data.get(s.dataId).values,i=e.data.get(r.dataId).values,l=e.data.get(o.dataId).values,[u,c]=Jy(a,s.shape,s.dtype,i,l,!0);return e.makeTensorInfo(c,s.dtype,u)}},jW={kernelName:oh,backendName:"cpu",kernelFunc:function HW(n){const{inputs:t,backend:e}=n,{data:s,indices:r,segmentIds:o}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${r.shape}`);if(1!==o.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${o.shape}`);if(r.shape[0]!==o.shape[0])throw new Error("segmentIds and indices should have same size.");const a=e.data.get(s.dataId).values,i=e.data.get(r.dataId).values,l=e.data.get(o.dataId).values,[u,c]=Jy(a,s.shape,s.dtype,i,l);return e.makeTensorInfo(c,s.dtype,u)}},KW={kernelName:ah,backendName:"cpu",kernelFunc:function qW(n){const{inputs:t,backend:e,attrs:s}=n,{sparseIndices:r,sparseValues:o,defaultValue:a}=t,{outputShape:i}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:d}=Vr(0,r,i),p=!1,f=e.bufferSync(r);let g;switch(o.dtype){case"bool":g=Xo(f,e.bufferSync(o),i,d,c,u,l,h,!!e.data.get(a.dataId).values[0],p);break;case"float32":case"int32":g=Xo(f,e.bufferSync(o),i,d,c,u,l,h,e.data.get(a.dataId).values[0],p);break;case"string":g=Xo(f,e.bufferSync(o),i,d,c,u,l,h,dr(e.data.get(a.dataId).values[0]),p);break;default:throw new Error(`Unsupported type ${o.dtype}`)}return e.makeTensorInfo(i,g.dtype,g.values)}},ZW={kernelName:Vl,backendName:"cpu",kernelFunc:function XW(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{numOrSizeSplits:o,axis:a}=s,i=Ue(a,r.shape)[0],l=Cg(r,o,i),u=new Array(r.shape.length).fill(0),c=r.shape.slice();return l.map(h=>{const d=[...c];d[i]=h;const p=Ko({inputs:{x:r},backend:e,attrs:{begin:u,size:d}});return u[i]+=h,p})}},YW=or(n=>Math.sqrt(n)),QW=ct(Ha,n=>Math.sqrt(n)),JW={kernelName:Ha,backendName:"cpu",kernelFunc:QW},e4={kernelName:ih,backendName:"cpu",kernelFunc:({inputs:n,backend:t})=>{const{x:e}=n,s=t;Se(e,"square");const r=s.data.get(e.dataId).values,o=new Float32Array(r.length);for(let i=0;i<r.length;++i){const l=r[i];o[i]=l*l}return{dataId:s.write(o,e.shape,e.dtype),shape:e.shape,dtype:e.dtype}}},t4=Vt((n,t)=>{const e=n-t;return e*e}),n4=nn(ja,t4),s4={kernelName:ja,backendName:"cpu",kernelFunc:n4},oI=or((n,t)=>{const{pattern:e,replaceGlobal:s,rewrite:r}=t;return n.replace(new RegExp(e,s?"g":""),r)}),r4=so(Ul,oI),o4={kernelName:Ul,backendName:"cpu",kernelFunc:r4},a4=ct(Ya,(n,t)=>{const e=t;return isNaN(n)?NaN:n>0?1:e.alpha}),i4={kernelName:Ya,backendName:"cpu",kernelFunc:a4};function aI(n,t,e,s){const r=Me(n,t.dtype);for(let o=0;o<r.size;o++){const a=r.indexToLoc(o),i=new Array(a.length);for(let l=0;l<i.length;l++)i[l]=a[l]*e[l]+s[l];r.set(t.get(...i),...a)}return r}const u4={kernelName:lh,backendName:"cpu",kernelFunc:function l4(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{begin:o,end:a,strides:i,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:d}=s;Se(r,"stridedSlice");const{finalShapeSparse:p,finalShape:f,isIdentity:g,sliceDim0:m,isSimpleSlice:y,begin:b,end:w,strides:x}=Wf(r.shape,o,a,i,l,u,c,h,d);let S;if(g)S=xt({inputs:{x:r},backend:e,attrs:{shape:f}});else if(m||y){C(r.shape.length>=1,()=>`Input must have rank at least 1, got: ${r.shape.length}`);const I=zf(b,w,x),k=Ko({inputs:{x:r},backend:e,attrs:{begin:b,size:I}});S=xt({inputs:{x:k},backend:e,attrs:{shape:f}}),e.disposeIntermediateTensorInfo(k)}else{const k=aI(p,e.bufferSync(r),x,b);S=e.makeTensorInfo(f,k.dtype,k.values)}return S}};class c4{constructor(t,e,s,r,o,a){this.separator=Vs(t),this.nGramWidths=e,this.leftPad=Vs(s),this.rightPad=Vs(r),this.padWidth=o,this.preserveShort=a}getPadWidth(t){return Math.min(this.padWidth<0?t-1:this.padWidth,t-1)}getNumNGrams(t,e){const s=this.getPadWidth(e);return Math.max(0,t+2*s-e+1)}createNGrams(t,e,s,r,o,a){for(let i=0;i<o;++i){const l=this.getPadWidth(a),u=Math.max(0,l-i),c=Math.max(0,l-(o-(i+1))),h=a-(u+c),d=e+(u>0?0:i-l);let p=0;p+=u*this.leftPad.length;for(let b=0;b<h;++b)p+=t[d+b].length;p+=c*this.rightPad.length,p+=(u+c+h-1)*this.separator.length,s[r+i]=new Uint8Array(p);const g=s[r+i];let m=0;const y=b=>b.forEach(w=>g[m++]=w);for(let b=0;b<u;++b)y(this.leftPad),y(this.separator);for(let b=0;b<h-1;++b)y(t[d+b]),y(this.separator);if(h>0){y(t[d+h-1]);for(let b=0;b<c;++b)y(this.separator),y(this.rightPad)}else{for(let b=0;b<c-1;++b)y(this.rightPad),y(this.separator);y(this.rightPad)}}}compute(t,e){const s=t.length,r=e.length;if(r>0){let l=e[0];if(0!==l)throw new Error(`First split value must be 0, got ${l}`);for(let u=1;u<r;++u){let c=e[u]>=l;if(c=c&&e[u]<=s,!c)throw new Error(`Invalid split value ${e[u]}, must be in [${l}, ${s}]`);l=e[u]}if(l!==s)throw new Error(`Last split value must be data size. Expected ${s}, got ${l}`)}const o=r-1,a=Ft("int32",r);if(0===s||0===r){const l=new Array(s);for(let u=0;u<=o;++u)a[u]=0;return[l,a]}a[0]=0;for(let l=1;l<=o;++l){const u=e[l]-e[l-1];let c=0;this.nGramWidths.forEach(h=>{c+=this.getNumNGrams(u,h)}),this.preserveShort&&u>0&&0===c&&(c=1),a[l]=a[l-1]+c}const i=new Array(a[o]);for(let l=0;l<o;++l){const u=e[l];let c=a[l];if(this.nGramWidths.forEach(h=>{const p=this.getNumNGrams(e[l+1]-e[l],h);this.createNGrams(t,u,i,c,p,h),c+=p}),this.preserveShort&&c===a[l]){const h=e[l+1]-e[l];if(0===h)continue;this.createNGrams(t,u,i,c,1,h+2*this.padWidth)}}return[i,a]}}function iI(n,t,e,s,r,o,a,i){return new c4(e,s,r,o,a,i).compute(n,t)}const d4={kernelName:uh,backendName:"cpu",kernelFunc:function h4(n){const{inputs:t,backend:e,attrs:s}=n,{separator:r,nGramWidths:o,leftPad:a,rightPad:i,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,d=e.data.get(c.dataId).values,p=e.data.get(h.dataId).values,[f,g]=iI(d,p,r,o,a,i,l,u);return[e.makeTensorInfo([f.length],"string",f),e.makeTensorInfo(h.shape,"int32",g)]}};function p4(n,t,e,s){if(!n.length)return;if(0===t.length){for(let o=0;o<n.length;++o)s.push(n.subarray(o,o+1));return}if(1===t.length){const o=t[0];let a=n.indexOf(o);for(;-1!==a;){const i=n.subarray(0,a);(!e||0!==i.length)&&s.push(i),a=(n=n.subarray(a+1)).indexOf(o)}return void((!e||0!==n.length)&&s.push(n))}let r=0;for(let o=0;o<n.length+1;o++)if(o===n.length||-1!==t.indexOf(n[o])){const a=n.subarray(r,o);(!e||0!==a.length)&&s.push(a),r=o+1}}function lI(n,t,e){const s=n.length,r=[];let o=0,a=0;const i=new Array(s);for(let d=0;d<s;++d){const p=r.length;p4(n[d],t,e,r);const f=r.length-p;i[d]=f,o+=f,a=Math.max(a,f)}const l=Ft("int32",2*o),u=new Array(o),c=[s,a];let h=0;for(let d=0;d<s;++d)for(let p=0;p<i[d];++p)l[2*h]=d,l[2*h+1]=p,u[h]=r[h],++h;return[l,u,c]}const m4={kernelName:ch,backendName:"cpu",kernelFunc:function f4(n){const{inputs:t,backend:e,attrs:s}=n,{skipEmpty:r}=s,{input:o,delimiter:a}=t;if("string"!==o.dtype)throw new Error("Input must be of datatype string");if(1!==o.shape.length)throw new Error(`Input must be a vector, got shape: ${o.shape}`);if(0!==a.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${a.shape}`);const i=e.data.get(o.dataId).values,l=e.data.get(a.dataId).values[0],[u,c,h]=lI(i,l,r),d=c.length;return[e.makeTensorInfo([d,2],"int32",u),e.makeTensorInfo([d],"string",c),e.makeTensorInfo([2],"int32",new Int32Array(h))]}};function uI(n,t){const e=Ft("int32",n.length);for(let s=0;s<n.length;++s)e[s]=Bb(n[s]).modulo(t).getLowBitsUnsigned();return e}const y4={kernelName:hh,backendName:"cpu",kernelFunc:function g4(n){const{inputs:t,backend:e,attrs:s}=n,{numBuckets:r}=s,{input:o}=t;if("string"!==o.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const i=uI(e.data.get(o.dataId).values,r);return e.makeTensorInfo(o.shape,"int32",i)}},b4=ct(Ka,n=>Math.tan(n)),x4={kernelName:Ka,backendName:"cpu",kernelFunc:b4},w4=ct(Xa,n=>Math.tanh(n));function cI(n,t){const e=new Array(n.rank);for(let r=0;r<e.length;r++)e[r]=n.shape[r]*t[r];const s=Me(e,n.dtype);for(let r=0;r<s.values.length;++r){const o=s.indexToLoc(r),a=new Array(n.rank);for(let l=0;l<a.length;l++)a[l]=o[l]%n.shape[l];const i=n.locToIndex(a);s.values[r]=n.values[i]}return s}const ju=(n,t)=>{const e=t.value-n.value;return 0===e?n.index-t.index:e};function hI(n,t,e=0,s=n.length-1){for(;s>e;){if(s-e>600){const i=s-e+1,l=t-e+1,u=Math.log(i),c=.5*Math.exp(2*u/3),h=.5*Math.sqrt(u*c*(i-c)/i)*Math.sign(l-i/2);hI(n,t,Math.max(e,Math.floor(t-l*c/i+h)),Math.min(s,Math.floor(t+(i-l)*c/i+h)))}const r=n[t];let o=e,a=s;for(ur(n,e,t),ju(n[s],r)>0&&ur(n,e,s);o<a;){for(ur(n,o,a),o++,a--;ju(n[o],r)<0;)o+=1;for(;ju(n[a],r)>0;)a-=1}0===ju(n[e],r)?ur(n,e,a):(a+=1,ur(n,a,s)),a<=t&&(e=a+1),t<=a&&(s=a-1)}}function dI(n,t,e,s,r){const o=t[t.length-1],[a,i]=[n.length/o,o],l=sn(e,a*s),u=sn("int32",a*s);for(let h=0;h<a;h++){const d=h*i,p=n.subarray(d,d+i);let f=new Array(p.length);p.forEach((b,w)=>f[w]={value:b,index:w}),s<f.length&&(hI(f,s),f=f.slice(0,s)),r&&f.sort(ju);const g=h*s,m=l.subarray(g,g+s),y=u.subarray(g,g+s);for(let b=0;b<s;b++)m[b]=f[b].value,y[b]=f[b].index}const c=t.slice();return c[c.length-1]=s,[Me(c,e,l),Me(c,"int32",u)]}function pI(n,t,e){switch(e){case"reflect":return function $4(n,t){let e=n;if(e<0)if(t<=1)e=0;else{const s=2*t;e<s&&(e=s*Math.trunc(-e/s)+e),e=e<-t?e+s:-e-1}else if(e>t-1)if(t<=1)e=0;else{const s=2*t;e-=s*Math.trunc(e/s),e>=t&&(e=s-e-1)}return Fr(0,e,t-1)}(n,t);case"wrap":return function A4(n,t){let e=n;return e<0?t<=1?e=0:e+=t*(Math.trunc(-e/(t-1))+1):e>t-1&&(t<=1?e=0:e-=t*Math.trunc(e/(t-1))),Fr(0,e,t-1)}(n,t);case"nearest":return function D4(n,t){return Fr(0,n,t-1)}(n,t);default:return function R4(n,t){return n}(n)}}function qu(n,t,e,s,r,o,a,i,l,u,c){return 0<=i&&i<t&&0<=l&&l<e?n[a*s+i*r+l*o+u]:c}function F4(n,t,e,s,r,o,a,i,l,u,c){return qu(n,t,e,s,r,o,a,Math.round(i),Math.round(l),u,c)}function O4(n,t,e,s,r,o,a,i,l,u,c){const h=Math.floor(i),d=Math.floor(l),p=h+1,f=d+1;return(p-i)*((f-l)*qu(n,t,e,s,r,o,a,h,d,u,c)+(l-d)*qu(n,t,e,s,r,o,a,h,f,u,c))+(i-h)*((f-l)*qu(n,t,e,s,r,o,a,p,d,u,c)+(l-d)*qu(n,t,e,s,r,o,a,p,f,u,c))}function fI(n,t,e,s){const r=Ue(t,e)[0],o=[1,e[0],1];for(let f=0;f<r;f++)o[0]*=e[f];o[1]=e[r];for(let f=r+1;f<e.length;f++)o[2]*=e[f];const a=new Map,i=new Int32Array(e[r]),l=new Gt(o,s,n),u=[],c=1===o[0]&&1===o[2];for(let f=0;f<e[r];f++){let g;if(c)g=n[f].toString();else{const y=[];for(let b=0;b<o[0];b++)for(let w=0;w<o[2];w++)y.push(l.get(b,f,w));g=y.join(",")}const m=a.get(g);if(null!=m)i[f]=m;else{const y=a.size;a.set(g,y),i[f]=y,u.push(f)}}const h=o.slice();h[1]=a.size;const d=new Gt(h,s);u.forEach((f,g)=>{for(let m=0;m<o[0];m++)for(let y=0;y<o[2];y++)d.set(l.get(m,f,y),m,g,y)});const p=e.slice();return p[r]=h[1],{outputValues:d.values,outputShape:p,indices:i}}const W4=[F3,O3,P3,z3,$3,V3,G3,j3,K3,Z3,Q3,eM,nM,oM,iM,cM,dM,fM,gM,R3,bM,vM,IM,NM,TM,_3,EM,AM,k3,RM,FM,OM,PM,zM,VM,UM,HM,qM,XM,YM,JM,tz,sz,oz,az,lz,cz,dz,pz,fz,mz,yz,Sz,y3,Cz,Nz,Dz,Fz,Oz,Pz,Hz,jz,Kz,Zz,Jz,tB,sB,oB,iB,uB,hB,b3,pB,DM,mB,yB,xB,x3,vB,IB,NB,TB,EB,RB,FB,PB,zB,VB,WB,GB,jB,KB,ZB,QB,eV,nV,rV,aV,lV,hV,fV,xz,gV,xV,SV,NV,TV,EV,AV,RV,HS,LV,v3,MV,jV,KV,ZV,QV,T3,Xy,eW,S3,I3,A3,nW,rW,aW,lW,cW,hW,pW,mW,yW,SW,CW,_W,N3,$W,RW,FW,xM,dV,LW,MW,BW,WW,GW,jW,KW,ZW,JW,e4,s4,o4,i4,u4,d4,m4,y4,Bz,wz,x4,{kernelName:Xa,backendName:"cpu",kernelFunc:w4},{kernelName:eh,backendName:"cpu",kernelFunc:function S4(n){const{inputs:t,backend:e}=n,{tensor:s,indices:r,updates:o}=t,{sliceRank:a,numUpdates:i,sliceSize:l,strides:u,outputSize:c}=Vr(0,r,s.shape),d=e.bufferSync(r),p=e.bufferSync(o),f=e.bufferSync(s),g=Xo(d,p,s.shape,c,l,i,a,u,f,!1);return e.makeTensorInfo(s.shape,g.dtype,g.values)}},{kernelName:Za,backendName:"cpu",kernelFunc:function C4(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{reps:o}=s;Se(r,"tile");const a=cI(e.bufferSync(r),o);return e.makeTensorInfo(a.shape,a.dtype,a.values)}},{kernelName:dh,backendName:"cpu",kernelFunc:function k4(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{k:o,sorted:a}=s;Se(r,"topk");const i=e.data.get(r.dataId).values,[l,u]=dI(i,r.shape,r.dtype,o,a);return[e.makeTensorInfo(l.shape,l.dtype,l.values),e.makeTensorInfo(u.shape,u.dtype,u.values)]}},{kernelName:ph,backendName:"cpu",kernelFunc:function _4(n){const{inputs:t,attrs:e,backend:s}=n,{image:r,transforms:o}=t,{interpolation:a,fillMode:i,fillValue:l,outputShape:u}=e,[c,h,d,p]=r.shape,[f,g]=null!=u?u:[h,d],m=[c,f,g,p],y=Te(r.shape),b=y[0],w=y[1],x=y[2],S=Te(m),I=S[0],k=S[1],T=S[2],_=sn(r.dtype,j(m));_.fill(l);const E=s.data.get(r.dataId).values,L=s.data.get(o.dataId).values;for(let W=0;W<c;++W){const U=1===o.shape[0]?L:L.subarray(8*W,8*W+8);for(let G=0;G<f;++G)for(let K=0;K<g;++K)for(let X=0;X<p;++X){let H;const Z=U[6]*K+U[7]*G+1;if(0===Z)continue;const oe=(U[3]*K+U[4]*G+U[5])/Z,ce=pI((U[0]*K+U[1]*G+U[2])/Z,d,i),ie=pI(oe,h,i);switch(a){case"nearest":H=F4(E,h,d,b,w,x,W,ie,ce,X,l);break;case"bilinear":H=O4(E,h,d,b,w,x,W,ie,ce,X,l);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${a}`)}_[W*I+G*k+K*T+X]=H}return s.makeTensorInfo(m,r.dtype,_)}return{dataId:s.write(_,m,r.dtype),shape:r.shape,dtype:r.dtype}}},W3,{kernelName:fh,backendName:"cpu",kernelFunc:function L4(n){const{inputs:t,attrs:e,backend:s}=n,{axis:r}=e,{x:o}=t;Se(o,"unique");const a=s.data.get(o.dataId).values,{outputValues:i,outputShape:l,indices:u}=fI(a,r,o.shape,o.dtype);return[s.makeTensorInfo(l,o.dtype,i),s.makeTensorInfo([u.length],"int32",u)]}},{kernelName:Gl,backendName:"cpu",kernelFunc:function M4(n){const{inputs:t,backend:e,attrs:s}=n,{value:r}=t;let{axis:o}=s;o<0&&(o+=r.shape.length);const a=r.shape.length,i=r.shape[o],l=new Array(a-1);let u=0;for(let p=0;p<a;p++)p!==o&&(l[u++]=r.shape[p]);const c=new Array(a).fill(0),h=r.shape.slice();h[o]=1;const d=new Array(i);for(let p=0;p<d.length;p++){c[o]=p;const f=Ko({inputs:{x:r},backend:e,attrs:{begin:c,size:h}});d[p]=xt({inputs:{x:f},backend:e,attrs:{shape:l}}),e.disposeIntermediateTensorInfo(f)}return d}},{kernelName:Hl,backendName:"cpu",kernelFunc:function B4(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,segmentIds:o}=t,{numSegments:a}=s;Se(r,"unsortedSegmentSum");const u=[],c=[],h=r.shape.length-o.shape.length;let d=o;for(let f=0;f<h;++f){const g=up({inputs:{input:d},backend:e,attrs:{dim:f+1}});d=g,c.push(g)}for(let f=0;f<a;++f){const g=hr(f,"int32"),m=e.makeTensorInfo([],"int32",g),y=vS({inputs:{a:m,b:d},backend:e}),b=ro({inputs:{x:y},backend:e,attrs:{dtype:"float32"}}),w=lp({inputs:{a:b,b:r},backend:e}),x=Hu({inputs:{x:w},backend:e,attrs:{axis:0,keepDims:!1}});u.push(x),c.push(m),c.push(y),c.push(b),c.push(w),c.push(x)}const p=GS({inputs:u,backend:e,attrs:{axis:0}});return c.forEach(f=>e.disposeIntermediateTensorInfo(f)),p}},$V];for(const n of W4)bh(n);const oo={},dp={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function Ms(n,t){if(!(n in oo)||null!=t){const s=function H4(n,t){if(1!==n&&2!==n)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const e=null==t?function G4(n){if(!z().getBool("IS_SAFARI")&&typeof OffscreenCanvas<"u"&&2===n)return new OffscreenCanvas(300,150);if(typeof document<"u")return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(n):t;return e.addEventListener("webglcontextlost",s=>{s.preventDefault(),delete oo[n]},!1),z().getBool("SOFTWARE_WEBGL_ENABLED")&&(dp.failIfMajorPerformanceCaveat=!1),1===n?e.getContext("webgl",dp)||e.getContext("experimental-webgl",dp):e.getContext("webgl2",dp)}(n,t);if(null===s)return console.log("Could not get context for WebGL version",n),null;oo[n]=s}const e=oo[n];return null==e||e.isContextLost()?(delete oo[n],Ms(n)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),oo[n])}var pp=function(n){return n[n.DENSE=0]="DENSE",n[n.SHARED_BATCH=1]="SHARED_BATCH",n}(pp||{}),Ss=function(n){return n[n.RENDER=0]="RENDER",n[n.UPLOAD=1]="UPLOAD",n[n.PIXELS=2]="PIXELS",n[n.DOWNLOAD=3]="DOWNLOAD",n}(Ss||{}),vn=function(n){return n[n.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",n[n.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",n[n.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",n[n.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",n[n.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16",n}(vn||{});function Ku(n,t){return[t,n]}function fp(n){const t=j(n);return oc(Math.ceil(t/4))}function Ri(n,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(n/2))]}function eb(n,t){const e=n;let s,r,o,a,i,l,u,c,h,d;return 2===z().getNumber("WEBGL_VERSION")?(s=e.R32F,r=e.R16F,o=e.RGBA16F,a=e.RGBA32F,i=e.RED,u=4,c=1,h=e.HALF_FLOAT,d=e.FLOAT,l=e.RGBA8):(s=n.RGBA,r=n.RGBA,o=n.RGBA,a=e.RGBA,i=n.RGBA,u=4,c=4,h=null!=t?t.HALF_FLOAT_OES:null,d=n.FLOAT,l=n.RGBA),{internalFormatFloat:s,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:o,internalFormatPackedFloat:a,textureFormatFloat:i,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:d}}function fe(n,t){const e=t();return z().getBool("DEBUG")&&function K4(n){const t=n.getError();if(t!==n.NO_ERROR)throw new Error("WebGL Error: "+function Q4(n,t){switch(t){case n.NO_ERROR:return"NO_ERROR";case n.INVALID_ENUM:return"INVALID_ENUM";case n.INVALID_VALUE:return"INVALID_VALUE";case n.INVALID_OPERATION:return"INVALID_OPERATION";case n.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case n.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case n.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(n,t))}(n),e}function Y4(n){return!!(z().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===n||5.96e-8<Math.abs(n)&&Math.abs(n)<65504)}function mp(n,t){return $r(n,()=>n.getExtension(t),'Extension "'+t+'" not supported on this browser.')}const tU=/ERROR: [0-9]+:([0-9]+):/g;function mI(n,t){const e=tU.exec(t);if(null==e)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(n);const s=+e[1],r=n.split("\n"),o=r.length.toString().length+2,a=r.map((h,d)=>yo((d+1).toString(),o)+h);let i=0;for(let h=0;h<a.length;h++)i=Math.max(a[h].length,i);const l=a.slice(0,s-1),u=a.slice(s-1,s),c=a.slice(s);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${yo(u[0],i)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}function tb(n,t){if(fe(n,()=>n.validateProgram(t)),!1===n.getProgramParameter(t,n.VALIDATE_STATUS))throw console.log(n.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function gI(n,t,e,s,r,o,a){const i=n.getAttribLocation(t,e);return-1!==i&&(fe(n,()=>n.bindBuffer(n.ARRAY_BUFFER,s)),fe(n,()=>n.vertexAttribPointer(i,r,n.FLOAT,!1,o,a)),fe(n,()=>n.enableVertexAttribArray(i)),!0)}function dU(n,t,e,s){fe(n,()=>function uU(n,t,e){(function bI(n,t){const e=n.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,s=t+n.TEXTURE0;if(s<n.TEXTURE0||s>e)throw new Error(`textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${e}].`)})(n,e),fe(n,()=>n.activeTexture(n.TEXTURE0+e)),fe(n,()=>n.bindTexture(n.TEXTURE_2D,t))}(n,t,s)),fe(n,()=>n.uniform1i(e,s))}function nb(n,t,e){fe(n,()=>n.bindFramebuffer(n.FRAMEBUFFER,e)),fe(n,()=>n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,t,0))}function yI(n,t){fe(n,()=>n.bindFramebuffer(n.FRAMEBUFFER,t)),fe(n,()=>n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,null,0))}function gp(n){const t=n.checkFramebufferStatus(n.FRAMEBUFFER);if(t!==n.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function pU(n,t){switch(t){case n.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case n.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case n.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case n.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(n,t))}function $r(n,t,e){const s=fe(n,()=>t());if(null==s)throw new Error(e);return s}function Di(n,t=2){return j(n.slice(0,n.length-t))}function Fi(n){if(0===n.length)throw Error("Cannot get rows and columns of an empty shape array.");return[n.length>1?n[n.length-2]:1,n[n.length-1]]}function yp(n){let t=[1,1,1];return 0===n.length||1===n.length&&1===n[0]||(t=[Di(n),...Fi(n)]),t}function bp(n){return n%2==0}function xp(n,t){if(Xe(n=n.slice(-2),t=t.slice(-2))||!n.length||!t.length||0===n[0]||0===n[1]||0===t[0]||0===t[1])return!0;if(n.length!==t.length){const e=n[n.length-1],s=t[t.length-1];if(e===s||bp(e)&&bp(s)&&(1===n[0]||1===t[0]))return!0}return n[1]===t[1]&&bp(n[0])&&bp(t[0])}let wp,vp;function Is(n,t){return null!=n.getExtension(t)}function xI(n){try{if(null!=Ms(n))return!0}catch(t){return console.log("Error when getting WebGL context: ",t),!1}return!1}function sb(n){const t=eb(n),e=n.createTexture();n.bindTexture(n.TEXTURE_2D,e),n.texImage2D(n.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const o=n.createFramebuffer();n.bindFramebuffer(n.FRAMEBUFFER,o),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,e,0);const a=n.checkFramebufferStatus(n.FRAMEBUFFER)===n.FRAMEBUFFER_COMPLETE;return n.bindTexture(n.TEXTURE_2D,null),n.bindFramebuffer(n.FRAMEBUFFER,null),n.deleteTexture(e),n.deleteFramebuffer(o),a}function Xu(n,t){Array.isArray(n)||(n=[n]),n.forEach(e=>{null!=e&&C("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors in the WebGL backend.`)})}const Ie=z();function En(){let n,t,e,s,r,o,a,i,l,u;return 2===z().getNumber("WEBGL_VERSION")?(n="#version 300 es",t="in",e="out",s="in",r="texture",o="outputColor",a="out vec4 outputColor;",i=z().getBool("WEBGL2_ISNAN_CUSTOM")?"\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ":"",l="",u="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(n="",t="attribute",e="varying",s="varying",r="texture2D",o="gl_FragColor",a="",i="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",u="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:n,attribute:t,varyingVs:e,varyingFs:s,texture2D:r,output:o,defineOutput:a,defineSpecialNaN:i,defineSpecialInf:l,defineRound:u}}function Zo(n,t,e="index"){const s=Te(t);return s.map((r,o)=>`int ${n[o]} = ${e} / ${r}; ${o===s.length-1?`int ${n[o+1]} = ${e} - ${n[o]} * ${r}`:`index -= ${n[o]} * ${r}`};`).join("")}function Sp(n,t,e="index"){const s=Te(t);return s.map((r,o)=>`int ${n[o]} = ${e} / outShapeStrides[${o}]; ${o===s.length-1?`int ${n[o+1]} = ${e} - ${n[o]} * outShapeStrides[${o}]`:`index -= ${n[o]} * outShapeStrides[${o}]`};`).join("")}function rb(n){const t=Te(n).map(e=>e.toString());return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}Ie.registerFlag("HAS_WEBGL",()=>Ie.getNumber("WEBGL_VERSION")>0),Ie.registerFlag("WEBGL_VERSION",()=>xI(2)?2:xI(1)?1:0),Ie.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1),Ie.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>2===Ie.get("WEBGL_VERSION")),Ie.registerFlag("WEBGL_CPU_FORWARD",()=>!0),Ie.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),Ie.registerFlag("WEBGL_PACK",()=>Ie.getBool("HAS_WEBGL")),Ie.registerFlag("WEBGL_PACK_NORMALIZATION",()=>Ie.getBool("WEBGL_PACK")),Ie.registerFlag("WEBGL_PACK_CLIP",()=>Ie.getBool("WEBGL_PACK")),Ie.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>Ie.getBool("WEBGL_PACK")),Ie.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>Ie.getBool("WEBGL_PACK")),Ie.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>Ie.getBool("WEBGL_PACK")),Ie.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>Ie.getBool("WEBGL_PACK")),Ie.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>Ie.getBool("WEBGL_PACK")),Ie.registerFlag("WEBGL_PACK_REDUCE",()=>Ie.getBool("WEBGL_PACK")),Ie.registerFlag("WEBGL_LAZILY_UNPACK",()=>Ie.getBool("WEBGL_PACK")),Ie.registerFlag("WEBGL_CONV_IM2COL",()=>Ie.getBool("WEBGL_PACK")),Ie.registerFlag("WEBGL_PACK_CONV2DTRANSPOSE",()=>Ie.getBool("WEBGL_PACK")),Ie.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>function mU(n){if(null==wp){const t=Ms(n);wp=t.getParameter(t.MAX_TEXTURE_SIZE)}return wp}(Ie.getNumber("WEBGL_VERSION"))),Ie.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>function gU(n){if(null==vp){const t=Ms(n);vp=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,vp)}(Ie.getNumber("WEBGL_VERSION"))),Ie.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{const n=Ie.getNumber("WEBGL_VERSION");return 0===n?0:function yU(n){if(0===n)return 0;let t;const e=Ms(n);return t=Is(e,"EXT_disjoint_timer_query_webgl2")&&2===n?2:Is(e,"EXT_disjoint_timer_query")?1:0,t}(n)}),Ie.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>Ie.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!Yp()),Ie.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>function bU(n){if(0===n)return!1;const t=Ms(n);if(1===n){if(!Is(t,"OES_texture_float"))return!1}else if(!Is(t,"EXT_color_buffer_float"))return!1;return sb(t)}(Ie.getNumber("WEBGL_VERSION"))),Ie.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>!Ie.getBool("WEBGL_FORCE_F16_TEXTURES")&&Ie.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),Ie.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>function xU(n){if(0===n)return!1;const t=Ms(n);if(1!==n){if(Is(t,"EXT_color_buffer_float"))return sb(t);const s="EXT_color_buffer_half_float";if(Is(t,s)){const r=t.getExtension(s);return function wU(n,t){const e=eb(n,t),s=n.createTexture();n.bindTexture(n.TEXTURE_2D,s),n.texImage2D(n.TEXTURE_2D,0,e.internalFormatHalfFloat,1,1,0,e.textureFormatFloat,e.textureTypeHalfFloat,null);const a=n.createFramebuffer();n.bindFramebuffer(n.FRAMEBUFFER,a),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,s,0);const i=n.checkFramebufferStatus(n.FRAMEBUFFER)===n.FRAMEBUFFER_COMPLETE;return n.bindTexture(n.TEXTURE_2D,null),n.bindFramebuffer(n.FRAMEBUFFER,null),n.deleteTexture(s),n.deleteFramebuffer(a),i}(t,r)}return!1}return!(!Is(t,"OES_texture_float")||!Is(t,"WEBGL_color_buffer_float"))&&sb(t)}(Ie.getNumber("WEBGL_VERSION"))),Ie.registerFlag("WEBGL_FENCE_API_ENABLED",()=>function vU(n){return 2===n&&null!=Ms(n).fenceSync}(Ie.getNumber("WEBGL_VERSION"))),Ie.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>Ie.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0),Ie.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,n=>{if("number"!=typeof n)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be a number but got ${n}.`);if(n<0&&-1!==n)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${n}.`)}),Ie.registerFlag("WEBGL_FLUSH_THRESHOLD",()=>Yp()?1:-1,n=>{if("number"!=typeof n)throw new Error(`WEBGL_FLUSH_THRESHOLD must be a number but got ${n}.`);if(n<0&&-1!==n)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${n}.`)}),Ie.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",()=>128),Ie.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",()=>!1),Ie.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e5),Ie.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",()=>128),Ie.registerFlag("WEBGL_EXP_CONV",()=>!1),Ie.registerFlag("SOFTWARE_WEBGL_ENABLED",()=>Ie.getBool("IS_TEST")),Ie.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",()=>1/0),Ie.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",()=>!1),Ie.registerFlag("WEBGL2_ISNAN_CUSTOM",()=>!1),Ie.registerFlag("ENGINE_COMPILE_ONLY",()=>!1);const wI="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:vI}=Ne;function CU(n,t,e){const s=[];if(n.forEach(p=>{const f=j(p.shapeInfo.logicalShape);if(p.shapeInfo.isUniform?s.push(`uniform float ${p.name}${f>1?`[${f}]`:""};`):(s.push(`uniform sampler2D ${p.name};`),s.push(`uniform int offset${p.name};`)),e.enableShapeUniforms){const{uniformShape:g}=ab(e.packedInputs,p.shapeInfo.logicalShape,p.shapeInfo.texShape);switch(g.length){case 1:s.push(`uniform int ${p.name}Shape;`);break;case 2:s.push(`uniform ivec2 ${p.name}Shape;`);break;case 3:s.push(`uniform ivec3 ${p.name}Shape;`);break;case 4:s.push(`uniform ivec4 ${p.name}Shape;`)}s.push(`uniform ivec2 ${p.name}TexShape;`)}}),e.enableShapeUniforms){switch(t.logicalShape.length){case 1:s.push("uniform int outShape;");break;case 2:s.push("uniform ivec2 outShape;"),s.push("uniform int outShapeStrides;");break;case 3:s.push("uniform ivec3 outShape;"),s.push("uniform ivec2 outShapeStrides;");break;case 4:s.push("uniform ivec4 outShape;"),s.push("uniform ivec3 outShapeStrides;")}s.push("uniform ivec2 outTexShape;")}e.customUniforms&&e.customUniforms.forEach(p=>{s.push(`uniform ${p.type} ${p.name}${p.arrayIndex?`[${p.arrayIndex}]`:""};`)});const r=s.join("\n"),o=n.map(p=>function NU(n,t,e=!1,s){let r="";r+=e?SI(n,s):Oi(n,s);return n.shapeInfo.logicalShape.length<=t.logicalShape.length&&(r+=e?function rG(n,t){const e=n.name,s=e.charAt(0).toUpperCase()+e.slice(1),r="get"+s+"AtOutCoords",o=n.shapeInfo.logicalShape.length,a=t.logicalShape.length,i=vI(n.shapeInfo.logicalShape,t.logicalShape),l=ft(a),u=a-o;let c;const h=["x","y","z","w","u","v"];c=0===o?"":a<2&&i.length>=1?"coords = 0;":i.map(b=>`coords.${h[b+u]} = 0;`).join("\n");let d="";d=a<2&&o>0?"coords":n.shapeInfo.logicalShape.map((b,w)=>`coords.${h[w+u]}`).join(", ");let p="return outputValue;";const g=1===j(n.shapeInfo.logicalShape),y=1===j(t.logicalShape);if(1!==o||g||y){if(g&&!y)p=1===a?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(i.length){const b=o-2,w=o-1;i.indexOf(b)>-1&&i.indexOf(w)>-1?p="return vec4(outputValue.x);":i.indexOf(b)>-1?p="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":i.indexOf(w)>-1&&(p="return vec4(outputValue.xx, outputValue.zz);")}}else p="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${r}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${s}(${d});\n      ${p}\n    }\n  `}(n,t):function oG(n,t){const e=n.name,s=e.charAt(0).toUpperCase()+e.slice(1),r="get"+s+"AtOutCoords",i=n.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!n.shapeInfo.isUniform&&i===l&&null==n.shapeInfo.flatOffset&&Xe(n.shapeInfo.texShape,t.texShape))return`\n      float ${r}() {\n        return sampleTexture(${e}, resultUV);\n      }\n    `;const u=ft(l),c=vI(n.shapeInfo.logicalShape,t.logicalShape),h=l-i;let d;const p=["x","y","z","w","u","v"];d=0===i?"":l<2&&c.length>=1?"coords = 0;":c.map(g=>`coords.${p[g+h]} = 0;`).join("\n");let f="";return f=l<2&&i>0?"coords":n.shapeInfo.logicalShape.map((g,m)=>`coords.${p[m+h]}`).join(", "),`\n    float ${r}() {\n      ${u} coords = getOutputCoords();\n      ${d}\n      return get${s}(${f});\n    }\n  `}(n,t)),r}(p,t,e.packedInputs,e.enableShapeUniforms)).join("\n"),a=t.texShape,i=En(),l=function _U(n){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${n.texture2D}(textureSampler, uv).r;\n    }\n  `}(i);let u,c,h=function AU(n){return`${n.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${n.varyingFs} vec2 resultUV;\n    ${n.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${n.defineSpecialNaN}\n    ${n.defineSpecialInf}\n    ${n.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${RU}\n    ${DU}\n    ${FU}\n  `}(i);return t.isPacked?(u=function kU(n,t,e){switch(n.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function LU(n,t,e){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return 1===s[0]?e?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${s[1]}.0);\n      }\n    `:1===s[1]?e?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${s[0]}.0);\n      }\n    `:e?"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      return 2 * (resTexRC.x * ${s[1]} + resTexRC.y);\n    }\n  `}(0,t,e);case 2:return function GU(n,t,e){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(Xe(n,t))return e?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${s[0]}, ${s[1]}));\n      }\n    `;const r=Math.ceil(n[1]/2);return e?"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(n,t,e);case 3:return function MU(n,t,e){if(e)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(n[2]/2),o=r*Math.ceil(n[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      int b = index / ${o};\n      index -= b * ${o};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(n,t,e);default:return function BU(n,t,e){if(e)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(n[n.length-1]/2),o=r*Math.ceil(n[n.length-2]/2);let a=o,i="",l="b, r, c";for(let u=2;u<n.length-1;u++)a*=n[n.length-u-1],i=`\n      int b${u} = index / ${a};\n      index -= b${u} * ${a};\n    `+i,l=`b${u}, `+l;return`\n    ivec${n.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${o};\n      index -= b * ${o};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${n.length}(${l});\n    }\n  `}(n,t,e)}}(t.logicalShape,a,e.enableShapeUniforms),c=function $U(n){return`\n    void setOutput(vec4 val) {\n      ${n.output} = val;\n    }\n  `}(i)):(u=function TU(n,t,e){switch(n.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function PU(n,t,e){return 1===t[0]?e?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `:1===t[1]?e?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `:e?"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t,e);case 2:return function HU(n,t,e){return Xe(n,t)?e?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `:1===n[1]?e?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `:1===n[0]?e?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `:e?"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${n[1]};\n      int c = index - r * ${n[1]};\n      return ivec2(r, c);\n    }\n  `}(n,t,e);case 3:return function zU(n,t,e){if(e)return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${Sp(["r","c","d"],n)}\n    return ivec3(r, c, d);\n  }\n`;const s=Zo(["r","c","d"],n);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec3(r, c, d);\n    }\n  `}(n,t,e);case 4:return function VU(n,t,e){if(e)return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${Sp(["r","c","d","d2"],n)}\n      return ivec4(r, c, d, d2);\n    }\n  `;const s=Zo(["r","c","d","d2"],n);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec4(r, c, d, d2);\n    }\n  `}(n,t,e);case 5:return function WU(n,t){const e=Zo(["r","c","d","d2","d3"],n);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${e}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(n,t);case 6:return function UU(n,t){const e=Zo(["r","c","d","d2","d3","d4"],n);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${e}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(n,t);default:throw new Error(`${n.length}-D output sampling is not yet supported`)}}(t.logicalShape,a,e.enableShapeUniforms),c=function EU(n){return`\n    void setOutput(float val) {\n      ${n.output} = vec4(val, 0, 0, 0);\n    }\n  `}(i)),e.packedInputs&&(h+=OU),[h,l,c,r,u,o,e.userCode].join("\n")}function Oi(n,t=!1){const e=n.shapeInfo.logicalShape;switch(e.length){case 0:return function qU(n,t){const e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1);if(n.shapeInfo.isUniform)return`float ${s}() {return ${e};}`;const[r,o]=n.shapeInfo.texShape;if(1===r&&1===o)return`\n      float ${s}() {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const a=Yo(e);if(t)return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], ${a});\n      return sampleTexture(${e}, uv);\n    }\n  `;const[i,l]=n.shapeInfo.texShape;return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${i}, ${l}, ${a});\n      return sampleTexture(${e}, uv);\n    }\n  `}(n,t);case 1:return function XU(n,t){const e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1);if(n.shapeInfo.isUniform)return`\n      float ${s}(int index) {\n        ${Li(n)}\n      }\n    `;const r=n.shapeInfo.texShape,o=r[0],a=r[1];if(1===a&&1===o)return`\n      float ${s}(int index) {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const i=Yo(e);return 1===a?t?`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / float(${e}TexShape[0]));\n        return sampleTexture(${e}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${o}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `:1===o?t?`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / float(${e}TexShape[1]), 0.5);\n        return sampleTexture(${e}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${a}.0, 0.5);\n        return sampleTexture(${e}, uv);\n      }\n    `:t?`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], index + ${i});\n      return sampleTexture(${e}, uv);\n    }\n  `:`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${o}, ${a}, index + ${i});\n      return sampleTexture(${e}, uv);\n    }\n  `}(n,t);case 2:return function YU(n,t){const e=n.shapeInfo.logicalShape,s=n.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),o=n.shapeInfo.texShape;if(null!=o&&Xe(e,o))return t?`\n      float ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${o[1]}.0, ${o[0]}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;const{newShape:a,keptDims:i}=cr(e);if(a.length<e.length){const p=["row","col"];return`\n      ${Oi(Pi(n,a),t)}\n      float ${r}(int row, int col) {\n        return ${r}(${Mi(p,i)});\n      }\n    `}if(n.shapeInfo.isUniform)return`\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${e[1]}, 1)));\n        ${Li(n)}\n      }\n    `;const u=o[0],c=o[1],h=Yo(s);return 1===c?t?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${s}TexShape[0]));\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `:1===u?t?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${s}TexShape[1]), 0.5);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\n      return sampleTexture(${s}, uv);\n    }\n  `:t?`\n      float ${r}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${s}Shape[1] + col + ${h};\n        vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${e[1]} + col + ${h};\n    vec2 uv = uvFromFlat(${u}, ${c}, index);\n    return sampleTexture(${s}, uv);\n  }\n`}(n,t);case 3:return function JU(n,t){const e=n.shapeInfo.logicalShape,s=n.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),o=e[1]*e[2],a=e[2],{newShape:i,keptDims:l}=cr(e);if(i.length<e.length){const m=["row","col","depth"];return`\n        ${Oi(Pi(n,i),t)}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${Mi(m,l)});\n        }\n      `}if(n.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${o}, ${a}, 1)));\n        ${Li(n)}\n      }\n    `;const c=n.shapeInfo.texShape,h=c[0],d=c[1],p=n.shapeInfo.flatOffset;if(d===o&&null==p)return t?`\n      float ${r}(int row, int col, int depth) {\n        int stride1 = ${s}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${a}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${d}.0, ${h}.0);\n          return sampleTexture(${s}, uv);\n        }\n      `;if(d===a&&null==p)return t?`\n      float ${r}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${s}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${e[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${d}.0, ${h}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;const f=Yo(s);return t?`\n    float ${r}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${s}Shape[1] * ${s}Shape[2];\n      int stride1 = ${s}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${f};\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n      return sampleTexture(${s}, uv);\n    }\n    `:`\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${o} + col * ${a} + depth + ${f};\n        vec2 uv = uvFromFlat(${h}, ${d}, index);\n        return sampleTexture(${s}, uv);\n      }\n  `}(n,t);case 4:return function tG(n,t){const e=n.shapeInfo.logicalShape,s=n.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),o=e[3],a=e[2]*o,i=e[1]*a,{newShape:l,keptDims:u}=cr(e);if(l.length<e.length){const w=["row","col","depth","depth2"];return`\n      ${Oi(Pi(n,l),t)}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${Mi(w,u)});\n      }\n    `}if(n.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${i}, ${a}, ${o}, 1)));\n        ${Li(n)}\n      }\n    `;const c=n.shapeInfo.flatOffset,h=n.shapeInfo.texShape,d=h[0],p=h[1],f=`int stride2 = ${s}Shape[3];`,g=`int stride1 = ${s}Shape[2] * stride2;`,m=`int stride0 = ${s}Shape[1] * stride1;`;if(p===i&&null==c)return t?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        ${f}\n        ${g}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${a}, ${o}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${d}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;if(p===o&&null==c)return t?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${s}Shape[1] * ${s}Shape[2], ${s}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${e[1]*e[2]}, ${e[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${d}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;const y=Yo(s);return t?`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${f}\n      ${g}\n      ${m}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index + ${y});\n      return sampleTexture(${s}, uv);\n    }\n  `:`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${a} +\n          depth * ${o} + depth2;\n      vec2 uv = uvFromFlat(${d}, ${p}, index + ${y});\n      return sampleTexture(${s}, uv);\n    }\n  `}(n,t);case 5:return function nG(n){const t=n.shapeInfo.logicalShape,e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),r=t[4],o=t[3]*r,a=t[2]*o,i=t[1]*a,{newShape:l,keptDims:u}=cr(t);if(l.length<t.length){const m=["row","col","depth","depth2","depth3"];return`\n      ${Oi(Pi(n,l))}\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        return ${s}(${Mi(m,u)});\n      }\n    `}if(n.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${i}, ${a}, ${o}, ${r})) +\n          depth3;\n        ${Li(n)}\n      }\n    `;const c=n.shapeInfo.flatOffset,h=n.shapeInfo.texShape,d=h[0],p=h[1];if(p===i&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${a}, ${o}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${d}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;if(p===r&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${d}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${a} + depth * ${o} +\n          depth2 * ${r} + depth3 + ${Yo(e)};\n      vec2 uv = uvFromFlat(${d}, ${p}, index);\n      return sampleTexture(${e}, uv);\n    }\n  `}(n);case 6:return function sG(n){const t=n.shapeInfo.logicalShape,e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),{newShape:r,keptDims:o}=cr(t);if(r.length<t.length){const y=["row","col","depth","depth2","depth3","depth4"];return`\n      ${Oi(Pi(n,r))}\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${s}(${Mi(y,o)});\n      }\n    `}const a=t[5],i=t[4]*a,l=t[3]*i,u=t[2]*l,c=t[1]*u;if(n.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${i})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${a}, 1)));\n        ${Li(n)}\n      }\n    `;const h=n.shapeInfo.flatOffset,d=n.shapeInfo.texShape,p=d[0],f=d[1];if(f===c&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${i}, ${a})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${p}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;if(f===a&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${p}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${i} + depth3 * ${a} + depth4 + ${Yo(e)};\n      vec2 uv = uvFromFlat(${p}, ${f}, index);\n      return sampleTexture(${e}, uv);\n    }\n  `}(n);default:throw new Error(`${e.length}-D input sampling is not yet supported`)}}function SI(n,t){switch(n.shapeInfo.logicalShape.length){case 0:return function jU(n){const t=n.name;return`\n    vec4 ${"get"+t.charAt(0).toUpperCase()+t.slice(1)}() {\n      return ${En().texture2D}(${t}, halfCR);\n    }\n  `}(n);case 1:return function KU(n,t){const e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),r=n.shapeInfo.texShape,o=En();if(t)return`\n    vec4 ${s}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${o.texture2D}(${e}, uv);\n    }\n  `;const a=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];return`\n    vec4 ${s}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${a[0]}, ${a[1]}, index);\n      return ${o.texture2D}(${e}, uv);\n    }\n  `}(n,t);case 2:return function ZU(n,t){const e=n.shapeInfo.logicalShape,s=n.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),o=n.shapeInfo.texShape,a=o[0],i=o[1],l=En();if(null!=o&&Xe(e,o))return t?`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `:`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${a}.0);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `;if(t)return`\n    vec4 ${r}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `;const u=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)];return`\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${Math.ceil(e[1]/2)}, ${u[0]}, ${u[1]}, row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `}(n,t);case 3:return function QU(n,t){const e=n.shapeInfo.logicalShape,s=n.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),o=n.shapeInfo.texShape,a=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)];if(1===e[0]){const p=[1,2],g=["b","row","col"];return`\n        ${SI(Pi(n,e.slice(1)),t)}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${Mi(g,p)});\n        }\n      `}const i=En();if(t)return`\n    vec4 ${r}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${i.texture2D}(${s}, uv);\n    }\n  `;const l=a[0],u=a[1],c=Math.ceil(e[2]/2);return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${l}, ${u}, ${c*Math.ceil(e[1]/2)}, ${c}, b, row, col);\n      return ${i.texture2D}(${s}, uv);\n    }\n  `}(n,t);default:return function eG(n,t){const e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),r=En();if(t)return`\n    vec4 ${s}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${e}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${e}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${e}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${r.texture2D}(${e}, uv);\n    }\n  `;const o=n.shapeInfo.logicalShape,a=o.length,i=n.shapeInfo.texShape,l=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],u=l[0],c=l[1],h=Math.ceil(o[a-1]/2);let d=h*Math.ceil(o[a-2]/2),p="int b, int row, int col",f=`b * ${d} + (row / 2) * ${h} + (col / 2)`;for(let g=2;g<a-1;g++)p=`int b${g}, `+p,d*=o[a-g-1],f=`b${g} * ${d} + `+f;return`\n    vec4 ${s}(${p}) {\n      int index = ${f};\n      int texR = index / ${c};\n      int texC = index - texR * ${c};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${u});\n      return ${r.texture2D}(${e}, uv);\n    }\n  `}(n,t)}}const RU="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",DU="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",FU="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",OU="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function Yo(n){return`offset${n}`}function Li(n){const t=n.name,e=j(n.shapeInfo.logicalShape);return e<2?`return ${t};`:`\n    for (int i = 0; i < ${e}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function ft(n){if(n<=1)return"int";if(2===n)return"ivec2";if(3===n)return"ivec3";if(4===n)return"ivec4";if(5===n)return"ivec5";if(6===n)return"ivec6";throw Error(`GPU for rank ${n} is not yet supported`)}function ab(n,t,e){const{newShape:s,keptDims:r}=cr(t),o=t.length,a=n&&3===o&&1===t[0],i=a?t.slice(1):s,l=!n&&o>1&&!Xe(t,e)&&s.length<o||a;return{useSqueezeShape:l,uniformShape:l?i:t,keptDims:r}}function Pi(n,t){const e=JSON.parse(JSON.stringify(n));return e.shapeInfo.logicalShape=t,e}function Mi(n,t){return t.map(e=>n[e]).join(", ")}function CI(n,t,e){const s=[],r=[];let o,a,i,l=null,u=null;u=n.getUniformLocation(e,"NAN",!1),1===z().getNumber("WEBGL_VERSION")&&(l=n.getUniformLocation(e,"INFINITY",!1));const c=!1;for(const h of t.variableNames){const d={name:h,uniform:n.getUniformLocation(e,h,c),offset:n.getUniformLocation(e,`offset${h}`,c)};t.enableShapeUniforms&&(d.shape=n.getUniformLocation(e,`${h}Shape`,c),d.texShape=n.getUniformLocation(e,`${h}TexShape`,c)),s.push(d)}if(t.enableShapeUniforms&&(o=n.getUniformLocation(e,"outShape",c),i=n.getUniformLocation(e,"outShapeStrides",c),a=n.getUniformLocation(e,"outTexShape",c)),t.customUniforms)for(const h of t.customUniforms)r.push(n.getUniformLocation(e,h.name,c));return{variablesLocations:s,customUniformLocations:r,infLoc:l,nanLoc:u,outShapeLocation:o,outShapeStridesLocation:i,outTexShapeLocation:a}}function NI(n,t){if(n.length!==t.length)throw Error(`Binary was compiled with ${n.length} inputs, but was executed with ${t.length} inputs`);n.forEach((e,s)=>{const r=e.logicalShape,o=t[s],a=o.shape;if(!Xe(r,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${a} must match`);if(e.isUniform&&o.isUniform)return;const i=e.texShape,l=o.isUniform?null:o.texData.texShape;if(!Xe(i,l))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${l} must match`)})}function Sn(n){return z().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&n<=4}class uG{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=pp.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const e=En();this.outputShape=t,this.enableShapeUniforms=Sn(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?Sp(["r","c","d"],t):Zo(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${e.output} = result;\n      }\n    `}}class cG{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=pp.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const e=En();this.outputShape=t,this.enableShapeUniforms=Sn(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?Sp(["r","c","d"],t):Zo(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${e.output} = result;\n      }\n    `}}class hG{constructor(t){this.variableNames=["A"],this.outTexUsage=Ss.DOWNLOAD;const e=En();this.outputShape=t,this.userCode=`\n      ${wI}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${e.output} = encode_float(x);\n      }\n    `}}class dG{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=Ss.DOWNLOAD;const e=En();this.outputShape=t,this.userCode=`\n      ${wI}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${e.output} = encode_float(x);\n      }\n    `}}const pG={R:0,G:1,B:2,A:3};class kI{constructor(t,e=!1,s="RGBA"){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const r=En();this.outputShape=t,this.enableShapeUniforms=Sn(this.outputShape.length);let o="result";e&&(o="floor(result * 255. + 0.5)");let a="";for(let i=0;i<s.length;i++)a+=`\n          if(offset == ${i}) {\n            result = values[${pG[s[i]]}];\n          }`;this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":rb(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int flatIndex = getFlatIndex(coords);\n        float result = 0.;\n        int offset = imod(flatIndex, ${s.length});\n\n        flatIndex = idiv(flatIndex, ${s.length}, 1.);\n\n        int r = flatIndex / texShape[1];\n        if (r < texShape[0]) {\n          int c = imod(flatIndex, texShape[1]);\n          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n          vec4 values = ${r.texture2D}(A, uv);\n          ${a}\n        }\n        ${r.output} = vec4(${o}, 0., 0., 0.);\n      }\n    `}}class fG{constructor(t,e=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const s=En();this.outputShape=t,this.enableShapeUniforms=Sn(this.outputShape.length);let r="",o="result";e&&(o="floor(result * 255. + 0.5)");for(let a=0;a<=1;a++)for(let i=0;i<=1;i++){const l=2*a+i;r+=`\n          localCoords = coords;\n          if(localCoords[2] + ${i} < ${this.enableShapeUniforms?"outShape[2]":`${t[2]}`}) {\n          localCoords[2] += ${i};\n          if (localCoords[1] + ${a} < ${this.enableShapeUniforms?"outShape[1]":`${t[1]}`}) {\n            localCoords[1] += ${a};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${s.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${l}] = values[0];\n            } else if (offset == 1) {\n              result[${l}] = values[1];\n            } else if (offset == 2) {\n              result[${l}] = values[2];\n            } else {\n              result[${l}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":rb(t)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${r}\n\n          ${s.output} = ${o};\n        }\n    `}}function Zu(n,t,e,s,r,o){!function iU(n,t){const e=z().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(n<=0||t<=0)throw new Error(`Requested texture size [${n}x${t}] is invalid.`);if(n>e||t>e)throw new Error(`Requested texture size [${n}x${t}] greater than WebGL maximum on this browser / GPU [${e}x${e}].`)}(t,e);const a=function aU(n){return $r(n,()=>n.createTexture(),"Unable to create WebGLTexture.")}(n),i=n.TEXTURE_2D;return fe(n,()=>n.bindTexture(i,a)),fe(n,()=>n.texParameteri(i,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE)),fe(n,()=>n.texParameteri(i,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE)),fe(n,()=>n.texParameteri(i,n.TEXTURE_MIN_FILTER,n.NEAREST)),fe(n,()=>n.texParameteri(i,n.TEXTURE_MAG_FILTER,n.NEAREST)),1===z().getNumber("WEBGL_VERSION")?fe(n,()=>n.texImage2D(i,0,s,t,e,0,r,o,null)):fe(n,()=>n.texStorage2D(i,1,s,t,e)),fe(n,()=>n.bindTexture(n.TEXTURE_2D,null)),{texture:a,texShape:[e,t]}}function TI(n){return n.internalFormatFloat}function _I(n){return n.internalFormatHalfFloat}function EI(n){return n.downloadTextureFormat}function $I(n){return n.internalFormatPackedFloat}function AI(n){return n.internalFormatPackedHalfFloat}class ib{constructor(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.itemsToPoll=[];const e=z().getNumber("WEBGL_VERSION");if(null!=t?(this.gl=t,function U4(n,t){oo[n]=t}(e,t)):this.gl=Ms(e),t=this.gl,2===z().getNumber("WEBGL_VERSION")){const o=t;this.createVertexArray=()=>fe(o,()=>o.createVertexArray()),this.bindVertexArray=a=>fe(o,()=>o.bindVertexArray(a)),this.deleteVertexArray=a=>fe(o,()=>o.deleteVertexArray(a)),this.getVertexArray=()=>fe(o,()=>o.getParameter(o.VERTEX_ARRAY_BINDING))}else if(null!=t){const o=t.getExtension("OES_vertex_array_object");if(null==o)throw new Error("All WebGL1 implementations are expected to offer OES_vertex_array_object.");this.createVertexArray=()=>fe(t,()=>o.createVertexArrayOES()),this.bindVertexArray=a=>fe(t,()=>o.bindVertexArrayOES(a)),this.deleteVertexArray=a=>fe(t,()=>o.deleteVertexArrayOES(a)),this.getVertexArray=()=>fe(t,()=>t.getParameter(o.VERTEX_ARRAY_BINDING_OES))}let s="WEBGL_color_buffer_float";const r="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===z().getNumber("WEBGL_VERSION")){const a="OES_texture_half_float";if(this.textureFloatExtension=mp(this.gl,"OES_texture_float"),Is(this.gl,a))this.textureHalfFloatExtension=mp(this.gl,a);else if(z().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(s),Is(this.gl,r))this.colorBufferHalfFloatExtension=mp(this.gl,r);else if(z().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(s="EXT_color_buffer_float",Is(this.gl,s))this.colorBufferFloatExtension=this.gl.getExtension(s);else{if(!Is(this.gl,r))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(r)}this.vertexBuffer=function gG(n){return function rU(n,t){const e=$r(n,()=>n.createBuffer(),"Unable to create WebGLBuffer");return fe(n,()=>n.bindBuffer(n.ARRAY_BUFFER,e)),fe(n,()=>n.bufferData(n.ARRAY_BUFFER,t,n.STATIC_DRAW)),e}(n,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}(this.gl),this.indexBuffer=function yG(n){return function oU(n,t){const e=$r(n,()=>n.createBuffer(),"Unable to create WebGLBuffer");return fe(n,()=>n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,e)),fe(n,()=>n.bufferData(n.ELEMENT_ARRAY_BUFFER,t,n.STATIC_DRAW)),e}(n,new Uint16Array([0,1,2,2,1,3]))}(this.gl),this.framebuffer=function lU(n){return $r(n,()=>n.createFramebuffer(),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=eb(this.gl,this.textureHalfFloatExtension)}get debug(){return z().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const t=this.gl;fe(t,()=>t.finish()),fe(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,null)),fe(t,()=>t.deleteFramebuffer(this.framebuffer)),fe(t,()=>t.bindBuffer(t.ARRAY_BUFFER,null)),fe(t,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)),fe(t,()=>t.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(t,e){return this.throwIfDisposed(),function bG(n,t,e,s){const[r,o]=Ku(t,e);return Zu(n,r,o,TI(s),s.textureFormatFloat,n.FLOAT)}(this.gl,t,e,this.textureConfig)}createFloat16MatrixTexture(t,e){return this.throwIfDisposed(),function xG(n,t,e,s){const[r,o]=Ku(t,e);return Zu(n,r,o,_I(s),s.textureFormatFloat,s.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createUnsignedBytesMatrixTexture(t,e){return this.throwIfDisposed(),function wG(n,t,e,s){const[r,o]=Ku(t,e);return Zu(n,r,o,EI(s),n.RGBA,n.UNSIGNED_BYTE)}(this.gl,t,e,this.textureConfig)}uploadPixelDataToTexture(t,e){this.throwIfDisposed(),function NG(n,t,e){fe(n,()=>n.bindTexture(n.TEXTURE_2D,t)),e.data instanceof Uint8Array?2===z().getNumber("WEBGL_VERSION")?fe(n,()=>n.texSubImage2D(n.TEXTURE_2D,0,0,0,e.width,e.height,n.RGBA,n.UNSIGNED_BYTE,e.data)):fe(n,()=>n.texImage2D(n.TEXTURE_2D,0,n.RGBA,e.width,e.height,0,n.RGBA,n.UNSIGNED_BYTE,e.data)):2===z().getNumber("WEBGL_VERSION")?fe(n,()=>n.texSubImage2D(n.TEXTURE_2D,0,0,0,n.RGBA,n.UNSIGNED_BYTE,e)):fe(n,()=>n.texImage2D(n.TEXTURE_2D,0,n.RGBA,n.RGBA,n.UNSIGNED_BYTE,e)),fe(n,()=>n.bindTexture(n.TEXTURE_2D,null))}(this.gl,t,e)}uploadDenseMatrixToTexture(t,e,s,r){this.throwIfDisposed(),function CG(n,t,e,s,r,o){let a,i,l;fe(n,()=>n.bindTexture(n.TEXTURE_2D,t)),r instanceof Uint8Array?(a=new Uint8Array(e*s*4),i=n.UNSIGNED_BYTE,l=n.RGBA):(a=new Float32Array(e*s*4),i=n.FLOAT,l=o.internalFormatPackedFloat),a.set(r),2===z().getNumber("WEBGL_VERSION")?fe(n,()=>n.texSubImage2D(n.TEXTURE_2D,0,0,0,e,s,n.RGBA,i,a)):fe(n,()=>n.texImage2D(n.TEXTURE_2D,0,l,e,s,0,n.RGBA,i,a)),fe(n,()=>n.bindTexture(n.TEXTURE_2D,null))}(this.gl,t,e,s,r,this.textureConfig)}createFloat16PackedMatrixTexture(t,e){return this.throwIfDisposed(),function SG(n,t,e,s){const[r,o]=Ri(t,e);return Zu(n,r,o,AI(s),n.RGBA,s.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createPackedMatrixTexture(t,e){return this.throwIfDisposed(),function vG(n,t,e,s){const[r,o]=Ri(t,e);return Zu(n,r,o,$I(s),n.RGBA,n.FLOAT)}(this.gl,t,e,this.textureConfig)}deleteMatrixTexture(t){this.throwIfDisposed(),this.outputTexture===t&&(yI(this.gl,this.framebuffer),this.outputTexture=null),fe(this.gl,()=>this.gl.deleteTexture(t))}downloadByteEncodedFloatMatrixFromOutputTexture(t,e,s){return this.downloadMatrixDriver(t,()=>function _G(n,t,e,s){const[r,o]=Ku(t,e),i=new Uint8Array(function j4(n,t){return n*t}(t*e,4));return fe(n,()=>n.readPixels(0,0,r,o,s.downloadTextureFormat,n.UNSIGNED_BYTE,i)),new Float32Array(i.buffer)}(this.gl,e,s,this.textureConfig))}downloadPackedMatrixFromBuffer(t,e,s,r,o,a){return function EG(n,t,e,s,r,o,a,i){const l=n,u=new Float32Array(function q4(n,t){const[e,s]=Ri(n,t);return e*s*4}(o,a));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}(this.gl,t,0,0,0,o,a)}downloadFloat32MatrixFromBuffer(t,e){return function TG(n,t,e){const s=n,r=new Float32Array(e);return s.bindBuffer(s.PIXEL_PACK_BUFFER,t),s.getBufferSubData(s.PIXEL_PACK_BUFFER,0,r),s.bindBuffer(s.PIXEL_PACK_BUFFER,null),r}(this.gl,t,e)}createBufferFromTexture(t,e,s){this.bindTextureToFrameBuffer(t);const r=function kG(n,t,e,s){const r=n.createBuffer();fe(n,()=>n.bindBuffer(n.PIXEL_PACK_BUFFER,r));const i=16*t*e;return fe(n,()=>n.bufferData(n.PIXEL_PACK_BUFFER,i,n.STREAM_READ)),fe(n,()=>n.readPixels(0,0,e,t,n.RGBA,n.FLOAT,0)),fe(n,()=>n.bindBuffer(n.PIXEL_PACK_BUFFER,null)),r}(this.gl,e,s);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const t=this.createFence(this.gl);return this.pollFence(t)}createFence(t){let e,s;if(z().getBool("WEBGL_FENCE_API_ENABLED")){const r=t,o=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),s=()=>{const a=r.clientWaitSync(o,0,0);return a===r.ALREADY_SIGNALED||a===r.CONDITION_SATISFIED},e=o}else z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(e=this.beginQuery(),this.endQuery(),s=()=>this.isQueryAvailable(e,z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):s=()=>!0;return{query:e,isFencePassed:s}}downloadMatrixFromPackedTexture(t,e,s){return this.downloadMatrixDriver(t,()=>function $G(n,t,e){const s=new Float32Array(t*e*4);return fe(n,()=>n.readPixels(0,0,e,t,n.RGBA,n.FLOAT,s)),s}(this.gl,e,s))}createProgram(t){this.throwIfDisposed();const e=this.gl;null==this.vertexShader&&(this.vertexShader=function mG(n){const t=En();return function J4(n,t){const e=$r(n,()=>n.createShader(n.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(fe(n,()=>n.shaderSource(e,t)),fe(n,()=>n.compileShader(e)),!1===n.getShaderParameter(e,n.COMPILE_STATUS))throw console.log(n.getShaderInfoLog(e)),new Error("Failed to compile vertex shader.");return e}(n,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}(e));const s=function nU(n){return $r(n,()=>n.createProgram(),"Unable to create WebGLProgram.")}(e);fe(e,()=>e.attachShader(s,this.vertexShader)),fe(e,()=>e.attachShader(s,t)),function sU(n,t){if(fe(n,()=>n.linkProgram(t)),!z().get("ENGINE_COMPILE_ONLY")&&!1===n.getProgramParameter(t,n.LINK_STATUS))throw console.log(n.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(e,s);const r=Object.assign(s,{vao:this.createVertexArray()});return this.debug&&tb(e,r),r}buildVao(t){this.setProgram(t),this.bindVertexArray(t.vao);const e=this.gl;fe(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,this.indexBuffer)),function IG(n,t,e){fe(n,()=>n.bindBuffer(n.ARRAY_BUFFER,e)),gI(n,t,"clipSpacePos",e,3,20,0)&&gI(n,t,"uv",e,2,20,12)}(e,t,this.vertexBuffer)}deleteProgram(t){this.throwIfDisposed(),t===this.program&&(this.program=null),null!=t&&(fe(this.gl,()=>this.gl.deleteProgram(t)),this.deleteVertexArray(t.vao))}setProgram(t){this.throwIfDisposed(),this.program=t,null!=this.program&&this.debug&&tb(this.gl,this.program),fe(this.gl,()=>this.gl.useProgram(t))}getUniformLocation(t,e,s=!0){return this.throwIfDisposed(),s?function cU(n,t,e){return $r(n,()=>n.getUniformLocation(t,e),'uniform "'+e+'" not present in program.')}(this.gl,t,e):function hU(n,t,e){return n.getUniformLocation(t,e)}(this.gl,t,e)}getAttributeLocation(t,e){return this.throwIfDisposed(),fe(this.gl,()=>this.gl.getAttribLocation(t,e))}getUniformLocationNoThrow(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)}setInputMatrixTexture(t,e,s){this.throwIfDisposed(),this.throwIfNoProgram(),dU(this.gl,t,e,s)}setOutputMatrixTexture(t,e,s){this.setOutputMatrixTextureDriver(t,s,e)}setOutputPackedMatrixTexture(t,e,s){this.throwIfDisposed();const[r,o]=Ri(e,s);this.setOutputMatrixTextureDriver(t,r,o)}setOutputMatrixWriteRegion(t,e,s,r){this.setOutputMatrixWriteRegionDriver(s,t,r,e)}setOutputPackedMatrixWriteRegion(t,e,s,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&tb(this.gl,this.program),gp(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const t=this.gl;if(this.debug){const e=this.getVertexArray();console.assert(e===this.program.vao,"VAO changed between setProgram and executeProgram!"),this.debugValidate()}fe(t,()=>t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),fe(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=mp(this.gl,2===z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const s=this.gl,r=this.getQueryTimerExtensionWebGL2(),o=s.createQuery();return s.beginQuery(r.TIME_ELAPSED_EXT,o),o}const t=this.getQueryTimerExtensionWebGL1(),e=t.createQueryEXT();return t.beginQueryEXT(t.TIME_ELAPSED_EXT,e),e}endQuery(){if(2===z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,s=this.getQueryTimerExtensionWebGL2();return void e.endQuery(s.TIME_ELAPSED_EXT)}const t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}waitForQueryAndGetTime(t){var e=this;return(0,Y.Z)(function*(){return yield Pp(()=>e.disposed||e.isQueryAvailable(t,z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),e.getQueryTime(t,z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))})()}getQueryTime(t,e){if(0===e)return null;if(2===e){const s=this.gl;return s.getQueryParameter(t,s.QUERY_RESULT)/1e6}{const s=this.getQueryTimerExtensionWebGL1();return s.getQueryObjectEXT(t,s.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(t,e){if(0===e)return!0;if(2===e){const s=this.gl,r=this.getQueryTimerExtensionWebGL2(),o=s.getQueryParameter(t,s.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(r.GPU_DISJOINT_EXT)),o&&!this.disjoint}{const s=this.getQueryTimerExtensionWebGL1(),r=s.getQueryObjectEXT(t,s.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(s.GPU_DISJOINT_EXT)),r&&!this.disjoint}}pollFence(t){return new Promise(e=>{this.addItemToPoll(()=>t.isFencePassed(),()=>e())})}pollItems(){const t=function AG(n){let t=0;for(;t<n.length&&n[t]();++t);return t-1}(this.itemsToPoll.map(e=>e.isDoneFn));for(let e=0;e<=t;++e){const{resolveFn:s}=this.itemsToPoll[e];s()}this.itemsToPoll=this.itemsToPoll.slice(t+1)}addItemToPoll(t,e){if(this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),this.itemsToPoll.length>1)return;let s;"setTimeoutCustom"in z().platform&&(s=z().platform.setTimeoutCustom.bind(z().platform)),Pp(()=>(this.pollItems(),0===this.itemsToPoll.length),()=>0,null,s)}bindTextureToFrameBuffer(t){this.throwIfDisposed(),nb(this.gl,t,this.framebuffer),this.debug&&gp(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(nb(this.gl,this.outputTexture,this.framebuffer),this.debug&&gp(this.gl)):yI(this.gl,this.framebuffer)}downloadMatrixDriver(t,e){this.bindTextureToFrameBuffer(t);const s=e();return this.unbindTextureToFrameBuffer(),s}setOutputMatrixTextureDriver(t,e,s){this.throwIfDisposed();const r=this.gl;nb(r,t,this.framebuffer),this.debug&&gp(r),this.outputTexture=t,fe(r,()=>r.viewport(0,0,e,s)),fe(r,()=>r.scissor(0,0,e,s))}setOutputMatrixWriteRegionDriver(t,e,s,r){this.throwIfDisposed(),fe(this.gl,()=>this.gl.scissor(t,e,s,r))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{addImpl:RG,bincountImpl:RI,bincountReduceImpl:DG,bitwiseAndImpl:FG,castImpl:OG,ceilImpl:LG,concatImpl:PG,equalImpl:MG,expImpl:zG,expm1Impl:BG,floorImpl:VG,gatherNdImpl:WG,gatherV2Impl:UG,greaterImpl:GG,greaterEqualImpl:HG,lessImpl:jG,lessEqualImpl:qG,linSpaceImpl:KG,logImpl:XG,maxImpl:ZG,maximumImpl:YG,minimumImpl:QG,multiplyImpl:JG,negImpl:eH,notEqualImpl:tH,prodImpl:nH,raggedGatherImpl:sH,raggedRangeImpl:rH,raggedTensorToTensorImpl:oH,rangeImpl:aH,rsqrtImpl:iH,scatterImpl:lH,sigmoidImpl:uH,simpleAbsImpl:DI,sliceImpl:cH,sparseFillEmptyRowsImpl:hH,sparseReshapeImpl:dH,sparseSegmentReductionImpl:FI,sqrtImpl:pH,staticRegexReplaceImpl:fH,stridedSliceImpl:mH,stringNGramsImpl:gH,stringSplitImpl:yH,stringToHashBucketFastImpl:bH,subImpl:xH,tileImpl:wH,topKImpl:vH,transposeImpl:lb,uniqueImpl:SH}=xn;function OI(n,t){return["x","y","z","w","u","v"].slice(0,t).map(e=>`${n}.${e}`)}function $n(n,t){return 1===t?[n]:OI(n,t)}class CH{constructor(t){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t,this.rank=t.length,this.enableShapeUniforms=Sn(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const e=$n("rc",this.rank),s=ft(this.rank),r=this.getOutOfBoundsCondition(e),o=this.getSetup(e),a=this.getOutput(e);this.userCode=`\n        void main() {\n          ${s} rc = getOutputCoords();\n\n          if(${r}) {\n            setOutput(vec4(0));\n          } else {\n            ${o}\n\n            setOutput(vec4(${a}));\n          }\n        }\n      `}}getSourceCoordsArr(t){const e=[];for(let s=0;s<=1;s++)for(let r=0;r<=1;r++){let o=`${0===s?"r":"rp1"}, ${0===r?"c":"cp1"}`;for(let a=2;a<this.rank;a++)o=`${t[t.length-1-a]},`+o;e.push(o)}return e}getOutOfBoundsCondition(t){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let e="";for(let s=this.rank-2;s<this.rank;s++)e+=`${t[s]} >= ${this.enableShapeUniforms?`outShape[${s}]`:this.outputShape[s]}`,s<this.rank-1&&(e+="||");return e}getSetup(t){if(1===this.rank)return"";const e=t.slice(-2);return`\n      int r = ${e[0]};\n      int c = ${e[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1]};\n      bool rEdge = rp1 >= ${this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2]};\n    `}getOutput(t){const e=this.getSourceCoordsArr(t);return 1===this.rank?`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`:`getA(${e[0]}),\n            cEdge ? 0. : getA(${e[1]}),\n            rEdge ? 0. : getA(${e[2]}),\n            rEdge || cEdge ? 0. : getA(${e[3]})`}}class LI{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=t,this.enableShapeUniforms=Sn(this.outputShape.length);let s="";for(let r=0;r<4;r++){let o="thisRC = rc;";r%2==1&&(o+="thisRC.z += 1;"),r>1&&(o+="thisRC.y += 1;"),s+=`\n        ${o}\n        ${r>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${r}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${r>0?"}":""}\n      `}this.userCode=`\n      ${function NH(n,t){return`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${t?function IU(n,t,e="index"){const r=function SU(n,t){const e=n.length,s=n.map(o=>`${t}[${o}]`),r=new Array(e-1);r[e-2]=s[e-1];for(let o=e-3;o>=0;--o)r[o]=`(${r[o+1]} * ${s[o+1]})`;return r}(n.map((o,a)=>a),t);return r.map((o,a)=>`int ${n[a]} = ${e} / ${r[a]}; ${a===r.length-1?`int ${n[a+1]} = ${e} - ${n[a]} * ${r[a]}`:`index -= ${n[a]} * ${r[a]}`};`).join("")}(["r","c","d"],"inputShape"):Zo(["r","c","d"],n)}\n      return ivec3(r, c, d);\n    }\n  `}(e,this.enableShapeUniforms)}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":rb(t)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":t[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":t[2]};\n\n        ${s}\n\n        setOutput(result);\n      }\n    `}}class kH{constructor(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.usedTextures={},this.logEnabled=!1}acquireTexture(t,e,s){const r=MI(e,s),o=zI(t,r,s);o in this.freeTextures||(this.freeTextures[o]=[]),o in this.usedTextures||(this.usedTextures[o]=[]);const a=PI(t,r,this.gpgpu.gl,this.gpgpu.textureConfig,s);if(this.freeTextures[o].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const l=this.freeTextures[o].pop();return this.usedTextures[o].push(l),l}let i;return r===vn.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):r===vn.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):r===vn.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):r===vn.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):r===vn.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[o].push(i),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),i}releaseTexture(t,e,s,r){if(null==this.freeTextures)return;const o=MI(s,r),a=zI(e,o,r);a in this.freeTextures||(this.freeTextures[a]=[]);const i=PI(e,o,this.gpgpu.gl,this.gpgpu.textureConfig,r),l=z().getNumber("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==l&&this._numBytesAllocated>l?(this.gpgpu.deleteMatrixTexture(t.texture),this._numBytesAllocated-=i):(this.freeTextures[a].push(t),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const u=this.usedTextures[a],c=u&&u.indexOf(t);if(null==c||c<0)throw new Error("Cannot release a texture that was never provided by this texture manager");u[c]=u[u.length-1],u.pop(),this.log()}log(){if(!this.logEnabled)return;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${this.numFreeTextures+this.numUsedTextures})`);const e=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*e)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const t in this.freeTextures)this.freeTextures[t].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});for(const t in this.usedTextures)this.usedTextures[t].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function PI(n,t,e,s,r){const o=function _H(n,t){switch(n){case vn.PACKED_2X2_FLOAT32:return $I(t);case vn.PACKED_2X2_FLOAT16:return AI(t);case vn.UNPACKED_FLOAT32:return TI(t);case vn.UNPACKED_FLOAT16:return _I(t);case vn.PACKED_4X1_UNSIGNED_BYTE:return EI(t);default:throw new Error(`Unknown physical texture type ${n}`)}}(t,s);let a;if(r){const[l,u]=Ri(n[0],n[1]);a=l*u}else{const[l,u]=Ku(n[0],n[1]);a=l*u}const i=function TH(n,t){if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===n.RGBA)return 16;if(t===n.RGBA16F)return 8;if(t===n.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}(e,o);return a*i}function MI(n,t){if(n===Ss.UPLOAD)return vn.PACKED_2X2_FLOAT32;if(n===Ss.RENDER||null==n)return function EH(n){return z().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?n?vn.PACKED_2X2_FLOAT32:vn.UNPACKED_FLOAT32:n?vn.PACKED_2X2_FLOAT16:vn.UNPACKED_FLOAT16}(t);if(n===Ss.DOWNLOAD||n===Ss.PIXELS)return vn.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${n}`)}function zI(n,t,e){return`${n[0]}_${n[1]}_${t}_${e}`}class ir{constructor(t,e){this.variableNames=["A"],this.outputShape=t,this.enableShapeUniforms=Sn(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${e}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const ps="if (isnan(x)) return x;",$H="return x;",BI="return abs(x);",AH="return (x >= 0.0) ? x : (exp(x) - 1.0);",RH=ps+"\n  return (x < 0.0) ? 0.0 : x;\n",DH=ps+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",ao="return x;",FH="return 1.0 / (1.0 + exp(-1.0 * x));",OH="return x;",LH="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n",PH="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",MH="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",zH="return 1.0 / (1.0 + exp(-1.0 * x));";class lo{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.enableShapeUniforms=Sn(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${e}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class BH{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t,this.enableShapeUniforms=Sn(this.outputShape.length);const e=t.length,s=$n("rc",e),r=ft(e),o=function IH(n,t){if(1===n)return"rc";let e="";for(let s=0;s<n;s++)e+=t[s],s<n-1&&(e+=",");return e}(e,s),a=s.slice(-2),i=e<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${o});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const VH=sd,Cp={},HH=z().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");let KH=(()=>{class n extends sc{nextDataId(){return n.nextDataId++}constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!z().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let s;if(null!=e){if(e instanceof ib)s=e;else{const r=Ms(z().getNumber("WEBGL_VERSION"),e);s=new ib(r)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const r=Ms(z().getNumber("WEBGL_VERSION"));s=new ib(r),this.binaryCache=function GH(n){return n in Cp||(Cp[n]={}),Cp[n]}(z().getNumber("WEBGL_VERSION")),this.gpgpuCreatedLocally=!0}this.gpgpu=s,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new kH(this.gpgpu),this.numMBBeforeWarning=function qH(){return null==z().global.screen?1024:z().global.screen.height*z().global.screen.width*window.devicePixelRatio*600/1024/1024}(),this.texData=new Op(this,ss())}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}writeTexture(e,s,r,o,a,i){const l=this.makeTensorInfo(s,r),u=this.texData.get(l.dataId);u.isPacked=!1,u.texture={texture:e,texShape:[o,a]},u.texShape=[o,a];const c=yp(s),h=new kI(c,!1,i),d=this.runWebGLProgram(h,[l],r,[[o,a]]);return d.shape=s,u.texture=null,this.disposeIntermediateTensorInfo(l),d.dataId}write(e,s,r){if((z().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||z().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===r&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const o={id:this.nextDataId()};return this.texData.set(o,{shape:s,dtype:r,values:e,usage:Ss.UPLOAD,refCount:1}),o}refCount(e){return this.texData.has(e)?this.texData.get(e).refCount:0}incRef(e){this.texData.get(e).refCount++}decRef(e){this.texData.has(e)&&this.texData.get(e).refCount--}move(e,s,r,o,a){if(z().getBool("DEBUG")&&this.checkNumericalProblems(s),"complex64"===o)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:r,dtype:o,values:s,usage:Ss.UPLOAD,refCount:a})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const s=this.texData.get(e),{values:r,dtype:o,complexTensorInfos:a,slice:i,shape:l,isPacked:u}=s;if(null!=i){let p;p=u?new lo(l,ao):new ir(l,ao);const f=this.runWebGLProgram(p,[{dataId:e,shape:l,dtype:o}],o),g=this.readSync(f.dataId);return this.disposeIntermediateTensorInfo(f),g}if(null!=r)return this.convertAndCacheOnCPU(e);if("string"===o)return r;const c=null!=this.activeTimers;let h,d;return c&&(h=Nn()),d="complex64"===o?Ir(this.readSync(a.real.dataId),this.readSync(a.imag.dataId)):this.getValuesFromTexture(e),c&&(this.downloadWaitMs+=Nn()-h),this.convertAndCacheOnCPU(e,d)}read(e){var s=this;return(0,Y.Z)(function*(){if(s.pendingRead.has(e)){const m=s.pendingRead.get(e);return new Promise(y=>m.push(y))}const r=s.texData.get(e),{values:o,shape:a,slice:i,dtype:l,complexTensorInfos:u,isPacked:c}=r;if(null!=i){let m;m=c?new lo(a,ao):new ir(a,ao);const y=s.runWebGLProgram(m,[{dataId:e,shape:a,dtype:l}],l),b=s.read(y.dataId);return s.disposeIntermediateTensorInfo(y),b}if(null!=o)return s.convertAndCacheOnCPU(e);if(z().getBool("DEBUG")&&!z().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===z().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let d,p,h=null;if("complex64"!==l&&z().get("WEBGL_BUFFER_SUPPORTED")){d=s.decode(e);const m=s.texData.get(d.dataId);h=s.gpgpu.createBufferFromTexture(m.texture.texture,...fp(a))}if(s.pendingRead.set(e,[]),"complex64"!==l&&(yield s.gpgpu.createAndWaitForFence()),"complex64"===l){const m=yield Promise.all([s.read(u.real.dataId),s.read(u.imag.dataId)]);p=Ir(m[0],m[1])}else if(null==h)p=s.getValuesFromTexture(e);else{const m=j(a);p=s.gpgpu.downloadFloat32MatrixFromBuffer(h,m)}if(null!=d&&s.disposeIntermediateTensorInfo(d),null!=h){const m=s.gpgpu.gl;fe(m,()=>m.deleteBuffer(h))}const f=s.convertAndCacheOnCPU(e,p),g=s.pendingRead.get(e);return s.pendingRead.delete(e),g.forEach(m=>m(f)),s.pendingDisposal.has(e)&&(s.pendingDisposal.delete(e),s.disposeData(e)&&ss().removeDataId(e,s),s.pendingDeletes--),f})()}readToGPU(e,s={}){const r=this.texData.get(e),{values:o,shape:a,slice:i,dtype:l,isPacked:u,texture:c}=r;if("complex64"===l)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=i){let f;f=u?new lo(a,ao):new ir(a,ao);const g=this.runWebGLProgram(f,[{dataId:e,shape:a,dtype:l}],l),m=this.readToGPU(g,s);return this.disposeIntermediateTensorInfo(g),m}if(null==c)throw null!=o?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const h=this.decode(e,s.customTexShape),d=ss().makeTensorFromTensorInfo(h),p=this.texData.get(h.dataId);return Object.assign({tensorRef:d},p.texture)}bufferSync(e){const s=this.readSync(e.dataId);if("string"===e.dtype)try{const r=s.map(o=>dr(o));return Me(e.shape,e.dtype,r)}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return Me(e.shape,e.dtype,s)}checkNumericalProblems(e){if(null!=e)for(let s=0;s<e.length;s++){const r=e[s];if(!Y4(r))throw z().getBool("WEBGL_RENDER_FLOAT32_CAPABLE")?Error(`The value ${r} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`):Error(`The value ${r} cannot be represented on this device.`)}}getValuesFromTexture(e){const{shape:s,dtype:r,isPacked:o}=this.texData.get(e),a=j(s);if(z().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const p=this.decode(e),f=this.texData.get(p.dataId),g=this.gpgpu.downloadMatrixFromPackedTexture(f.texture.texture,...fp(s)).subarray(0,a);return this.disposeIntermediateTensorInfo(p),g}const i=z().getBool("WEBGL_PACK")&&!0===o,l=i?yp(s):s,u=i?new dG(l):new hG(l),c=this.runWebGLProgram(u,[{shape:l,dtype:r,dataId:e}],"float32"),h=this.texData.get(c.dataId),d=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(h.texture.texture,h.texShape[0],h.texShape[1]).subarray(0,a);return this.disposeIntermediateTensorInfo(c),d}timerAvailable(){return z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){var s=this;const r=this.activeTimers,o=[];let a=!1;null==this.programTimersStack?(this.programTimersStack=o,a=!0):this.activeTimers.push(o),this.activeTimers=o,e();const i=Ws(this.activeTimers.map(c=>c.query)).filter(c=>null!=c),l=Ws(this.activeTimers.map(c=>c.name)).filter(c=>null!=c);this.activeTimers=r,a&&(this.programTimersStack=null);const u={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(0,Y.Z)(function*(){if(z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const c=yield Promise.all(i);u.kernelMs=vb(c),u.getExtraProfileInfo=()=>c.map((h,d)=>({name:l[d],ms:h})).map(h=>`${h.name}: ${h.ms}`).join(", ")}else u.kernelMs={error:"WebGL query timers are not supported in this environment."};return s.uploadWaitMs=0,s.downloadWaitMs=0,u})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:Nn(),endMs:null}}endTimer(e){return z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=Nn(),e)}getQueryTime(e){var s=this;return(0,Y.Z)(function*(){return z().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?s.gpgpu.waitForQueryAndGetTime(e):e.endMs-e.startMs})()}disposeData(e,s=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(s?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!s&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:r}=this.texData.get(e);return null!=r&&(this.disposeData(r.real.dataId,s),this.disposeData(r.imag.dataId,s)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:s,dtype:r,texShape:o,usage:a,isPacked:i,slice:l}=this.texData.get(e),u=l&&l.origDataId||e,c=this.dataRefCount.get(u);c>1?this.dataRefCount.set(u,c-1):(this.dataRefCount.delete(u),null!=s&&(this.numBytesInGPU-=this.computeBytes(o,r),this.textureManager.releaseTexture(s,o,a,i)));const h=this.texData.get(e);h.texture=null,h.texShape=null,h.isPacked=!1,h.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,s=HH){return z().getBool("WEBGL_CPU_FORWARD")&&e.every(r=>null==this.texData.get(r.dataId).texture&&j(r.shape)<s)}getGPGPUContext(){return this.gpgpu}where(e){ts("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const s=e.dataSync();return VH(e.shape,s)}packedUnaryOp(e,s,r){const o=new lo(e.shape,s),a=this.compileAndRun(o,[e],r);return ss().makeTensorFromTensorInfo(a)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const o=DI(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,o)}if(z().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,BI,e.dtype);const s=new ir(e.shape,BI),r=this.compileAndRun(s,[e]);return ss().makeTensorFromTensorInfo(r)}makeTensorInfo(e,s,r){let o;if("string"===s&&null!=r&&r.length>0&&Bs(r[0])){const a=r.map(i=>Vs(i));o=this.write(a,e,s)}else o=this.write(r,e,s);return this.texData.get(o).usage=null,{dataId:o,shape:e,dtype:s}}makeOutput(e,s,r){return ss().makeTensorFromTensorInfo(this.makeTensorInfo(e,s,r),this)}unpackTensor(e){const s=new BH(e.shape);return this.runWebGLProgram(s,[e],e.dtype)}packTensor(e){const s=new CH(e.shape);return this.runWebGLProgram(s,[e],e.dtype,null,!0)}packedReshape(e,s){const r=[Di(e.shape),...Fi(e.shape)],o={dtype:e.dtype,shape:r,dataId:e.dataId},a=[Di(s),...Fi(s)],i=new LI(a,r),c=this.runWebGLProgram(i,[o],e.dtype,[r],!0);return{dataId:c.dataId,shape:s,dtype:c.dtype}}decode(e,s){const r=this.texData.get(e),{isPacked:o,shape:a,dtype:i}=r;null!=s&&C(j(a)<=s[0]*s[1]*4,()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.");const l=yp(a);let u;u=o?new cG(l):new uG(l);const h=[null!=s?s:fp(l)];return{dtype:i,shape:a,dataId:this.runWebGLProgram(u,[{shape:l,dtype:i,dataId:e}],i,h,!0,s).dataId}}runWebGLProgram(e,s,r,o,a=!1,i){const l=this.makeTensorInfo(e.outputShape,r),u=this.texData.get(l.dataId);if(e.packedOutput&&(u.isPacked=!0),e.outPackingScheme===pp.DENSE){const b=null!=i?i:fp(e.outputShape);u.texShape=b.map(w=>2*w)}if(null!=e.outTexUsage&&(u.usage=e.outTexUsage),0===j(l.shape))return u.values=sn(l.dtype,0),l;const c=[],h=s.map(b=>{if("complex64"===b.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let w=this.texData.get(b.dataId);if(null==w.texture){if(!e.packedInputs&&j(b.shape)<=z().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:b.shape,texData:null,isUniform:!0,uniformValues:w.values};e.packedInputs&&(w.isPacked=!0,w.shape=b.shape)}if(this.uploadToGPU(b.dataId),!!w.isPacked!=!!e.packedInputs)b=w.isPacked?this.unpackTensor(b):this.packTensor(b),c.push(b),w=this.texData.get(b.dataId);else if(w.isPacked&&!xp(w.shape,b.shape)){const x=b,S=b.shape;b.shape=w.shape,b=this.packedReshape(b,S),c.push(b),w=this.texData.get(b.dataId),x.shape=S}return{shape:b.shape,texData:w,isUniform:!1}});this.uploadToGPU(l.dataId);const d={shape:l.shape,texData:u,isUniform:!1},p=function lG(n,t,e){let s="";t.concat(e).forEach(a=>{const i=null!=a.texData&&null!=a.texData.slice&&a.texData.slice.flatOffset>0;if(n.enableShapeUniforms&&!a.isUniform){const l=a.texData.texShape,{useSqueezeShape:u,uniformShape:c,keptDims:h}=ab(n.packedInputs,a.shape,l);let d="",p="",f="";if(1===c.length&&n.packedInputs){const S=[Math.ceil(l[0]/2),Math.ceil(l[1]/2)];d=`${S[0]>1}_${S[1]>1}`}else if(2!==c.length||n.packedInputs){if(c.length>2&&!n.packedInputs){const S=Te(c);f=`${S[0]===l[1]}_${S[S.length-1]===l[1]}`}}else p=`${c[0]>1}_${c[1]>1}`;const g=a.shape.length,m=2===c.length&&Xe(a.shape,l),y=1===j(a.shape),b=_o(a.shape,e.shape),w=!n.packedInputs&&g===e.shape.length&&Xe(l,e.texData.texShape);s+=`${g}_${w}_${u?h:""}_${c.length}_${y}_${b}_${m}_${d}_${p}_${f}_${n.packedInputs||c.length>2?"":`${l[0]>1}_${l[1]>1}`}_${i}`}else s+=`${a.shape}_${a.isUniform?"uniform":a.texData.texShape}_${i}`});let o=n.constructor.name;return o+="_"+s+"_"+n.userCode+`${z().getNumber("WEBGL_VERSION")}`,o}(e,h,d),f=this.getAndSaveBinary(p,()=>function aG(n,t,e,s){const r=e.map((c,h)=>{const d={logicalShape:c.shape,texShape:c.isUniform?null:c.texData.texShape,isUniform:c.isUniform,isPacked:!c.isUniform&&c.texData.isPacked,flatOffset:null};return null!=c.texData&&null!=c.texData.slice&&c.texData.slice.flatOffset>0&&(d.flatOffset=c.texData.slice.flatOffset),{name:t.variableNames[h],shapeInfo:d}}),o=r.map(c=>c.shapeInfo),a={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},i=CU(r,a,t),l=function eU(n,t){const e=$r(n,()=>n.createShader(n.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(fe(n,()=>n.shaderSource(e,t)),fe(n,()=>n.compileShader(e)),z().get("ENGINE_COMPILE_ONLY"))return e;if(!1===n.getShaderParameter(e,n.COMPILE_STATUS))throw mI(t,n.getShaderInfoLog(e)),new Error("Failed to compile fragment shader.");return e}(n.gl,i),u=n.createProgram(l);return z().get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:l,source:i,webGLProgram:u,inShapeInfos:o,outShapeInfo:a,variablesLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:(n.buildVao(u),Object.assign({program:t,fragmentShader:l,source:i,webGLProgram:u,inShapeInfos:o,outShapeInfo:a},CI(n,t,u)))}(this.gpgpu,e,h,d)),g=null!=this.activeTimers;let m;g&&(m=this.startTimer()),z().get("ENGINE_COMPILE_ONLY")||function iG(n,t,e,s,r){t.program.enableShapeUniforms||(NI(t.inShapeInfos,e),NI([t.outShapeInfo],[s]));const o=s.texData.texture,a=s.texData.texShape;s.texData.isPacked?n.setOutputPackedMatrixTexture(o.texture,a[0],a[1]):n.setOutputMatrixTexture(o.texture,a[0],a[1]),n.setProgram(t.webGLProgram),n.bindVertexArray(t.webGLProgram.vao),1===z().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&n.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&n.gl.uniform1f(t.nanLoc,NaN);for(let l=0;l<e.length;++l){const u=e[l],{uniform:c,offset:h,shape:d,texShape:p}=t.variablesLocations[l];if(d){const{uniformShape:f}=ab(t.program.packedInputs,u.shape,u.texData.texShape);switch(f.length){case 1:n.gl.uniform1iv(d,new Int32Array(f));break;case 2:n.gl.uniform2iv(d,new Int32Array(f));break;case 3:n.gl.uniform3iv(d,new Int32Array(f));break;case 4:n.gl.uniform4iv(d,new Int32Array(f))}}if(p&&n.gl.uniform2i(p,u.texData.texShape[0],u.texData.texShape[1]),null!=c){if(u.isUniform){if(j(u.shape)<2)n.gl.uniform1f(c,u.uniformValues[0]);else{let f=u.uniformValues;f instanceof Float32Array||(f=new Float32Array(f)),n.gl.uniform1fv(c,f)}continue}null!=u.texData.slice&&null!=h&&n.gl.uniform1i(h,u.texData.slice.flatOffset),n.setInputMatrixTexture(u.texData.texture.texture,c,l)}}const i=t.outShapeLocation;if(i)switch(s.shape.length){case 1:n.gl.uniform1iv(i,new Int32Array(s.shape));break;case 2:n.gl.uniform2iv(i,new Int32Array(s.shape));break;case 3:n.gl.uniform3iv(i,new Int32Array(s.shape));break;case 4:n.gl.uniform4iv(i,new Int32Array(s.shape))}if(t.outShapeStridesLocation){const l=Te(s.shape);switch(s.shape.length){case 2:n.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(l));break;case 3:n.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(l));break;case 4:n.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(l))}}if(t.outTexShapeLocation&&n.gl.uniform2i(t.outTexShapeLocation,s.texData.texShape[0],s.texData.texShape[1]),t.program.customUniforms&&r)for(let l=0;l<t.program.customUniforms.length;++l){const u=t.program.customUniforms[l],c=t.customUniformLocations[l],h=r[l];if("float"===u.type)n.gl.uniform1fv(c,h);else if("vec2"===u.type)n.gl.uniform2fv(c,h);else if("vec3"===u.type)n.gl.uniform3fv(c,h);else if("vec4"===u.type)n.gl.uniform4fv(c,h);else if("int"===u.type)n.gl.uniform1iv(c,h);else if("ivec2"===u.type)n.gl.uniform2iv(c,h);else if("ivec3"===u.type)n.gl.uniform3iv(c,h);else{if("ivec4"!==u.type)throw Error(`uniform type ${u.type} is not supported yet.`);n.gl.uniform4iv(c,h)}}n.executeProgram()}(this.gpgpu,f,h,d,o),c.forEach(b=>this.disposeIntermediateTensorInfo(b)),g&&(m=this.endTimer(m),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(m)}));const y=z().getNumber("WEBGL_FLUSH_THRESHOLD");if(y>0){const b=Nn();b-this.lastGlFlushTime>y&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=b)}if(!z().getBool("WEBGL_LAZILY_UNPACK")&&u.isPacked&&!1===a){const b=this.unpackTensor(l);return this.disposeIntermediateTensorInfo(l),b}return l}compileAndRun(e,s,r,o,a=!1){return this.runWebGLProgram(e,s,r=r||s[0].dtype,o,a)}getAndSaveBinary(e,s){return e in this.binaryCache||(this.binaryCache[e]=s()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(z().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach(s=>{this.gpgpu.deleteProgram(this.binaryCache[s].webGLProgram),delete this.binaryCache[s]}),this.textureManager.dispose(),null!=this.canvas&&typeof HTMLCanvasElement<"u"&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=P(()=>{if(!z().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=z().getBool("DEBUG");z().set("DEBUG",!1);const s=this.abs(Ce(1e-8)).dataSync()[0];if(z().set("DEBUG",e),s>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const s=this.texData.get(e),{shape:r,dtype:o,values:a,texture:i,usage:l,isPacked:u}=s;if(null!=i)return;const c=null!=this.activeTimers;let h;c&&(h=Nn());let d=s.texShape;if(null==d&&(d=function fU(n,t=!1){let e=z().getNumber("WEBGL_MAX_TEXTURE_SIZE"),s=z().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");s===1/0&&z().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(s=e/2),t&&(e*=2,s*=2,1===(n=n.map((i,l)=>l>=n.length-2?rc(n[l]):n[l])).length&&(n=[2,n[0]])),2!==n.length&&(n=cr(n).newShape);let r=j(n),o=null;n.length<=1&&r<=e?o=[1,r]:2===n.length&&n[0]<=e&&n[1]<=e?o=n:3===n.length&&n[0]*n[1]<=e&&n[2]<=e?o=[n[0]*n[1],n[2]]:3===n.length&&n[0]<=e&&n[1]*n[2]<=e?o=[n[0],n[1]*n[2]]:4===n.length&&n[0]*n[1]*n[2]<=e&&n[3]<=e?o=[n[0]*n[1]*n[2],n[3]]:4===n.length&&n[0]<=e&&n[1]*n[2]*n[3]<=e&&(o=[n[0],n[1]*n[2]*n[3]]);const a=null!=o&&Math.max(...o)>s&&Math.min(...o)<=(t?2:1)&&Math.min(...o)>0;if(null==o||a)if(t){const i=Di(n);let l=2,u=2;n.length&&([l,u]=Fi(n)),r=i*(l/2)*(u/2),o=oc(r).map(c=>2*c)}else o=oc(r);return o}(r,u),s.texShape=d),null!=a){const p=yp(r);let f,g=d[1],m=d[0];const y=a instanceof Uint8Array||a instanceof Uint8ClampedArray;(u||!y)&&([g,m]=Ri(d[0],d[1])),f=u?new fG(p,y):new kI(p,y);const b=y?[m,g]:d,w=this.makeTensorInfo(b,o),x=this.texData.get(w.dataId);x.usage=y?Ss.PIXELS:Ss.UPLOAD,x.texShape=b,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(w.dataId),g,m,a);const k=this.runWebGLProgram(f,[w],o,[[m,g]],!0),T=this.texData.get(k.dataId);s.texShape=T.texShape,s.isPacked=T.isPacked,s.usage=T.usage,z().get("ENGINE_COMPILE_ONLY")?this.disposeData(k.dataId):(s.texture=T.texture,s.values=null,this.texData.delete(k.dataId)),this.disposeIntermediateTensorInfo(w),c&&(this.uploadWaitMs+=Nn()-h)}else{const p=this.acquireTexture(d,l,o,u);s.texture=p}}convertAndCacheOnCPU(e,s){const r=this.texData.get(e),{dtype:o}=r;return null!=s&&(r.values=function XH(n,t){if("float32"===t||"complex64"===t)return n;if("int32"===t||"bool"===t){const e="int32"===t?new Int32Array(n.length):new Uint8Array(n.length);for(let s=0;s<e.length;++s)e[s]=Math.round(n[s]);return e}throw new Error(`Unknown dtype ${t}`)}(s,o)),r.values}acquireTexture(e,s,r,o){if(this.numBytesInGPU+=this.computeBytes(e,r),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const a=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${a} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,s,o)}computeBytes(e,s){return e[0]*e[1]*Ui(s)}checkCompileCompletion(){for(const[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}checkCompileCompletionAsync(){var e=this;return(0,Y.Z)(function*(){const s=[];if(e.gpgpu.parallelCompilationExtension){for(const[,r]of Object.entries(e.binaryCache))s.push(e.checkCompletionAsync_(r));return Promise.all(s)}for(const[,r]of Object.entries(e.binaryCache)){const o=new Promise(a=>{try{e.checkCompletion_(r),a(!0)}catch(i){throw i}});s.push(o)}return Promise.all(s)})()}checkCompletionAsync_(e){var s=this;return(0,Y.Z)(function*(){return s.gpgpu.gl.getProgramParameter(e.webGLProgram,s.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?s.checkCompletion_(e):(yield og(),s.checkCompletionAsync_(e))})()}checkCompletion_(e){if(!1===this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS))throw console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),!1===this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS)?(mI(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),new Error("Failed to compile fragment shader.")):new Error("Failed to link vertex and fragment shaders.");return!0}getUniformLocations(){for(const e of Object.values(this.binaryCache)){this.gpgpu.buildVao(e.webGLProgram);const{variablesLocations:s,customUniformLocations:r,infLoc:o,nanLoc:a,outShapeLocation:i,outShapeStridesLocation:l,outTexShapeLocation:u}=CI(this.gpgpu,e.program,e.webGLProgram);e.variablesLocations=s,e.customUniformLocations=r,e.infLoc=o,e.nanLoc=a,e.outShapeLocation=i,e.outShapeStridesLocation=l,e.outTexShapeLocation=u}}createTensorFromGPUData(e,s,r){e.channels=e.channels||"RGBA";const{texture:o,height:a,width:i,channels:l}=e,u=ss().backend;if(!u.gpgpu.gl.isTexture(o))throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");const c=u.writeTexture(o,s,r,a,i,l);return ss().makeTensorFromDataId(c,s,r,u)}}return n.nextDataId=0,n})();Qp()&&bf("webgl",()=>new KH,2);const ub="\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n";class Qo{constructor(t,e,s){this.variableNames=["A","B"],this.outputShape=Le(e,s),this.enableShapeUniforms=Sn(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${t}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}const Jo="\n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n";class zi{constructor(t,e,s,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=Le(e,s);const o=this.outputShape.length;this.enableShapeUniforms=Sn(o);let a="";if(r)if(0===o||1===j(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(a=`\n          ${ft(o)} coords = getOutputCoords();\n        `,1===o)a+=this.enableShapeUniforms?"\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const l=$n("coords",o);a+=this.enableShapeUniforms?`\n            bool nextRowOutOfBounds =\n              (${l[o-2]} + 1) >= outShape[${o} - 2];\n            bool nextColOutOfBounds =\n              (${l[o-1]} + 1) >= outShape[${o} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:`\n            bool nextRowOutOfBounds =\n              (${l[o-2]} + 1) >= ${this.outputShape[o-2]};\n            bool nextColOutOfBounds =\n              (${l[o-1]} + 1) >= ${this.outputShape[o-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${t}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}function Qn(n){const{inputs:t,backend:e}=n,{x:s}=t;return e.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const QH={kernelName:Ia,backendName:"webgl",kernelFunc:Qn};function uo(n){const{inputs:t,backend:e}=n,{real:s,imag:r}=t,o=e.makeTensorInfo(s.shape,"complex64"),a=e.texData.get(o.dataId),i=Qn({inputs:{x:s},backend:e}),l=Qn({inputs:{x:r},backend:e});return a.complexTensorInfos={real:i,imag:l},o}const JH={kernelName:mc,backendName:"webgl",kernelFunc:uo},VI="return (a < 0.) ? b * a : a;",WI="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",tj={kernelName:dl,backendName:"webgl",kernelFunc:function ej(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{alpha:o}=s,a=e.makeTensorInfo([],"float32",hr(o,"float32")),i=z().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new zi(WI,r.shape,a.shape):new Qo(VI,r.shape,a.shape),l=e.runWebGLProgram(i,[r,a],"float32");return e.disposeIntermediateTensorInfo(a),l}},UI="return (a < 0.) ? b * a : a;",GI="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",sj={kernelName:Al,backendName:"webgl",kernelFunc:function nj(n){const{inputs:t,backend:e}=n,{x:s,alpha:r}=t,o=z().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new zi(GI,s.shape,r.shape):new Qo(UI,s.shape,r.shape);return e.runWebGLProgram(o,[s,r],"float32")}},Bi="if (isnan(x)) return x;";function nt({opSnippet:n,packedOpSnippet:t,cpuKernelImpl:e,dtype:s}){return({inputs:r,backend:o})=>{const{x:a}=r,i=o,l=s||a.dtype;if(i.shouldExecuteOnCPU([a])&&null!=e){const h=i.texData.get(a.dataId),d=e(h.values,l);return i.makeTensorInfo(a.shape,l,d)}let c;return c=z().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new lo(a.shape,t):new ir(a.shape,n),i.runWebGLProgram(c,[a],l)}}function yn({opSnippet:n,packedOpSnippet:t,checkOutOfBounds:e=!1,supportsComplex:s=!1,cpuKernelImpl:r,dtype:o}){return({inputs:a,backend:i})=>{const{a:l,b:u}=a,c=i;if(s&&"complex64"===l.dtype){const f=c.texData.get(l.dataId),g=c.texData.get(u.dataId),[m,y]=[[f.complexTensorInfos.real,g.complexTensorInfos.real],[f.complexTensorInfos.imag,g.complexTensorInfos.imag]].map(w=>{const[x,S]=w,I={dataId:x.dataId,dtype:x.dtype,shape:l.shape},k={dataId:S.dataId,dtype:S.dtype,shape:u.shape},T=new Qo(n,l.shape,u.shape);return c.runWebGLProgram(T,[I,k],Rn(x.dtype,S.dtype))}),b=uo({inputs:{real:m,imag:y},backend:c});return c.disposeIntermediateTensorInfo(m),c.disposeIntermediateTensorInfo(y),b}const h=o||Rn(l.dtype,u.dtype);if(("string"===l.dtype||"string"===u.dtype||c.shouldExecuteOnCPU([l,u]))&&null!=r){const f=c.texData.get(l.dataId).values,g=c.texData.get(u.dataId).values,m="string"===l.dtype?Cr(f):f,y="string"===l.dtype?Cr(g):g,[b,w]=r(l.shape,u.shape,m,y,h),x=c.makeTensorInfo(w,h);return c.texData.get(x.dataId).values=b,x}let p;return p=z().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new zi(t,l.shape,u.shape,e):new Qo(n,l.shape,u.shape),c.runWebGLProgram(p,[l,u],h)}}function Yu(n,t=!1){if("linear"===n)return t?OH:$H;if("relu"===n)return t?PH:RH;if("elu"===n)return t?LH:AH;if("relu6"===n)return t?MH:DH;if("prelu"===n)return t?GI:UI;if("leakyrelu"===n)return t?WI:VI;if("sigmoid"===n)return t?zH:FH;throw new Error(`Activation ${n} has not been implemented for the WebGL backend.`)}class HI{constructor(t,e,s,r=!1,o=!1,a=!1,i=null,l=!1,u=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=s,this.enableShapeUniforms=Sn(this.outputShape.length);const h=Math.ceil((r?t[1]:t[2])/2),d=r?"i * 2, rc.y":"rc.y, i * 2",p=o?"rc.z, i * 2":"i * 2, rc.z",f=r?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],g=o?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",y="";i&&(m=l?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:u?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,y="result = activation(result);");const b=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),l&&this.variableNames.push("preluActivationWeights"),u&&this.variableNames.push("leakyreluAlpha");let w="rc.x",x="rc.x";t[0]<e[0]?w=`imod(rc.x, ${t[0]})`:e[0]<t[0]&&(x=`imod(rc.x, ${e[0]})`),this.userCode=`\n      ${m}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${h}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        int batchA = ${w};\n        int batchB = ${x};\n        for (int i = 0; i < ${h}; i++) {\n          vec4 a = getMatrixA(batchA, ${d});\n          vec4 b = getMatrixB(batchB, ${p});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${f[0]} * ${g[0]});\n          result += (${f[1]} * ${g[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${b}\n\n        ${y}\n\n        setOutput(result);\n      }\n    `}}const jI={REAL:"return areal * breal - aimag * bimag;",IMAG:"return areal * bimag + aimag * breal;"};class qI{constructor(t,e,s){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=Le(e,s),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${t}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const KI="return a * b;";function cb(n){const{inputs:t,backend:e}=n,{a:s,b:r}=t,o=Rn(s.dtype,r.dtype);if("complex64"===s.dtype){const i=e.texData.get(s.dataId),l=e.texData.get(r.dataId),u=new qI(jI.REAL,s.shape,r.shape),c=new qI(jI.IMAG,s.shape,r.shape),h=[{dataId:i.complexTensorInfos.real.dataId,dtype:i.complexTensorInfos.real.dtype,shape:s.shape},{dataId:i.complexTensorInfos.imag.dataId,dtype:i.complexTensorInfos.imag.dtype,shape:s.shape},{dataId:l.complexTensorInfos.real.dataId,dtype:l.complexTensorInfos.real.dtype,shape:r.shape},{dataId:l.complexTensorInfos.imag.dataId,dtype:l.complexTensorInfos.imag.dtype,shape:r.shape}],d=e.runWebGLProgram(u,h,"float32"),p=e.runWebGLProgram(c,h,"float32"),f=uo({inputs:{real:d,imag:p},backend:e});return e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p),f}if(e.shouldExecuteOnCPU([s,r])){const i=e.texData.get(s.dataId),l=e.texData.get(r.dataId),[u,c]=JG(s.shape,r.shape,i.values,l.values,o),h=e.makeTensorInfo(c,o);return e.texData.get(h.dataId).values=u,h}let a;return a=z().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new zi(KI,s.shape,r.shape):new Qo(KI,s.shape,r.shape),e.runWebGLProgram(a,[s,r],o)}const rj={kernelName:Ra,backendName:"webgl",kernelFunc:cb};function de(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{shape:o}=s,a=e,i=j(r.shape),l=Mp(o,i),u=j(l);C(i===u,()=>`The new shape (${l}) has ${u} elements and the old shape (${r.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`);const c=a.texData.get(r.dataId);return!c.isPacked||xp(r.shape,l)||null!==c.texture&&xp(c.shape,l)?(a.incRef(r.dataId),{dataId:r.dataId,shape:l,dtype:r.dtype}):function oj(n,t,e){const s=[Di(n.shape),...Fi(n.shape)],r={dtype:n.dtype,shape:s,dataId:n.dataId},o=[Di(t),...Fi(t)],a=new LI(o,s),u=e.runWebGLProgram(a,[r],n.dtype,[s],!0);return{dataId:u.dataId,shape:t,dtype:u.dtype}}(r,l,a)}const aj={kernelName:Dl,backendName:"webgl",kernelFunc:de};class XI{constructor(t,e){this.variableNames=["x"];const{windowSize:s,batchSize:r,inSize:o,outSize:a}=t;this.outputShape=[r,a];const i=4*Math.floor(s/4),l=s%4;let u="sumValue += dot(values, ones);";if(null!=e){const h=1/e;u=`sumValue += dot(values * ${go(h)?h.toPrecision(2):h}, ones);`}let c="";o%s>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===l}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}class ij{constructor(t,e){this.variableNames=["x"];const{windowSize:s,batchSize:r,inSize:o,outSize:a}=t;this.outputShape=[r,a];let i="0.0",l="";"prod"===e?i="1.0":"min"===e?(i="1.0 / 1e-20",l="min"):"max"===e&&(i="-1.0 / 1e-20",l="max");let u=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===e?u="sumValue":"prod"===e?u="prodValue":"all"===e?u="allValue":"any"===e&&(u="anyValue");const c=4*Math.floor(s/4),h=s%4;let d=`\n      if (${"sum"===e}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===e}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${l}(values, minMaxValue);\n        if (${"min"===e} || ${"max"===e}) {\n          minMaxValue = ${l}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,p="vec4";"all"===e?(i="1.0",d="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===e&&(i="0.0",d="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let f="";o%s>0&&(f=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${f}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${c}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${d}\n        }\n\n        int inIdx = inOffset + ${c};\n        if (${1===h}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${d}\n        } else if (${2===h}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${d}\n        } else if (${3===h}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${d}\n        }\n        setOutput(${u});\n      }\n    `}}function ea(n,t,e,s){const r=function lj(n){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const e=t.length?t[t.length-1].outSize:n[1],s=dd(e);t.push({inSize:e,windowSize:s,outSize:Math.ceil(e/s)})}return t}(n.shape);let o=n;for(let a=0;a<r.length;a++){const{inSize:i,windowSize:l,outSize:u}=r[a];let c,h;c="mean"===e?0===a?new XI({windowSize:l,inSize:i,batchSize:n.shape[0],outSize:u},i):new XI({windowSize:l,inSize:i,batchSize:n.shape[0],outSize:u}):new ij({windowSize:l,inSize:i,batchSize:n.shape[0],outSize:u},e),h=o,o=s.runWebGLProgram(c,[o],t),h.dataId!==n.dataId&&s.disposeIntermediateTensorInfo(h)}return o}class uj{constructor(t,e){this.variableNames=["A"];const s=new Array(t.length);for(let a=0;a<s.length;a++)s[a]=t[e[a]];this.outputShape=s,this.rank=s.length;const r=ft(this.rank),o=function cj(n){const t=n.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const e=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],s=new Array(t);for(let r=0;r<n.length;r++)s[n[r]]=e[r];return s.join()}(e);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${o}));\n    }\n    `}}class hj{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const s=new Array(t.length);for(let c=0;c<s.length;c++)s[c]=t[e[c]];if(this.outputShape=s,this.rank=s.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=ft(this.rank),o=OI("rc",this.rank),a=new Array(this.rank);for(let c=0;c<e.length;c++)a[e[c]]=o[c];const i=`vec2(${a.slice(-2).join()})`,l=`++${o[this.rank-1]} < ${s[this.rank-1]}`,u=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${u};\n      if(${l}) {\n        result[1] = ${u};\n      }\n      --${o[this.rank-1]};\n      if(++${o[this.rank-2]} < ${s[this.rank-2]}) {\n        result[2] = ${u};\n        if(${l}) {\n          result[3] = ${u};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function Np(n,t,e){const s=z().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new hj(n.shape,t):new uj(n.shape,t);return e.runWebGLProgram(s,[n],n.dtype)}function kp(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s;return function dj(n,t,e,s){const o=n.shape.length,a=Ue(t,n.shape);let i=a;const l=Et(i,o),u=null!=l;let c=n;u&&(c=Np(n,l,s),i=zt(i.length,o)),mn("sum",i,o);const[h,d]=ln(c.shape,i);let p=h;e&&(p=Mt(h,a));const f=j(d),y=de({inputs:{x:c},attrs:{shape:[j(n.shape)/f,f]},backend:s}),w=ea(y,vh(n.dtype),"sum",s),x=de({inputs:{x:w},attrs:{shape:p},backend:s});return s.disposeIntermediateTensorInfo(y),s.disposeIntermediateTensorInfo(w),u&&s.disposeIntermediateTensorInfo(c),x}(r,o,a,e)}const pj={kernelName:zl,backendName:"webgl",kernelFunc:kp};function An(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{perm:o}=s,a=e,l=new Array(r.shape.length);for(let c=0;c<l.length;c++)l[c]=r.shape[o[c]];let u;if(a.shouldExecuteOnCPU([r])){const h=a.texData.get(r.dataId).values,d=lb(h,r.shape,r.dtype,o,l);u=a.makeTensorInfo(l,r.dtype),a.texData.get(u.dataId).values=d}else u=Np(r,o,a);return u}const fj={kernelName:vo,backendName:"webgl",kernelFunc:An},ZI=1e3;function Tp({a:n,b:t,transposeA:e,transposeB:s,backend:r,bias:o=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:l=null}){const u=n.shape.length,c=t.shape.length,h=e?n.shape[u-2]:n.shape[u-1],d=s?t.shape[c-1]:t.shape[c-2],p=e?n.shape[u-1]:n.shape[u-2],f=s?t.shape[c-2]:t.shape[c-1],g=n.shape.slice(0,-2),m=t.shape.slice(0,-2),y=j(g),b=j(m),x=Le(n.shape.slice(0,-2),t.shape.slice(0,-2)).concat([p,f]);C(h===d,()=>`Error in matMul: inner shapes (${h}) and (${d}) of Tensors with shapes ${n.shape} and ${t.shape} and transposeA=${e} and transposeB=${s} must match.`);const S=e?[y,h,p]:[y,p,h],I=s?[b,f,d]:[b,d,f],k=de({inputs:{x:n},backend:r,attrs:{shape:S}}),T=de({inputs:{x:t},backend:r,attrs:{shape:I}}),_=[k,T],E=Math.max(y,b),L=e?k.shape[1]:k.shape[2],B=null!=o,W=null!=a,U="leakyrelu"===l,G=null!=l?Yu(l,!0):null;let X;if((1===p||1===f)&&L>ZI&&!1===(B||W||U||null!=G)){let Z=k,se=T;e&&(Z=An({inputs:{x:k},backend:r,attrs:{perm:[0,2,1]}}),_.push(Z)),s&&(se=An({inputs:{x:T},backend:r,attrs:{perm:[0,2,1]}}),_.push(se));const ce=1===f;let ie=Z;1!==f&&(ie=de({inputs:{x:Z},backend:r,attrs:{shape:[E,L,1]}}),_.push(ie));const ge=1===f?2:1;let he=se;ce&&(he=de({inputs:{x:se},backend:r,attrs:{shape:[E,1,L]}}),_.push(he));const be=cb({inputs:{a:ie,b:he},backend:r});X=kp({inputs:{x:be},backend:r,attrs:{axis:ge,keepDims:!0}}),_.push(be)}else{const Z=Rn(n.dtype,t.dtype),se=new HI(S,I,[E,p,f],e,s,B,G,W,U),oe=[k,T];if(null!=o&&oe.push(o),W&&oe.push(a),U){const ce=r.makeTensorInfo([],"float32",hr(i,"float32"));oe.push(ce),_.push(ce)}X=r.runWebGLProgram(se,oe,Z)}const H=de({inputs:{x:X},backend:r,attrs:{shape:x}});_.push(X);for(const Z of _)r.disposeIntermediateTensorInfo(Z);return H}const gj={kernelName:ql,backendName:"webgl",kernelFunc:function mj(n){const{inputs:t,backend:e,attrs:s}=n,{a:r,b:o,bias:a,preluActivationWeights:i}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;return Tp({a:r,b:o,transposeA:l,transposeB:u,backend:e,bias:a,preluActivationWeights:i,leakyreluAlpha:h,activation:c})}},YI="return abs(x);",bj={kernelName:Gi,backendName:"webgl",kernelFunc:function yj(n){const{inputs:t,backend:e}=n,{x:s}=t;if(e.shouldExecuteOnCPU([s])&&"complex64"!==s.dtype){const o=e.texData.get(s.dataId),a=DI(o.values);return e.makeTensorInfo(s.shape,s.dtype,a)}let r;return r=z().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new lo(s.shape,YI):new ir(s.shape,YI),e.runWebGLProgram(r,[s],s.dtype)}},wj=nt({opSnippet:ps+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),vj={kernelName:sa,backendName:"webgl",kernelFunc:wj},Ij=nt({opSnippet:ps+"\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),Cj={kernelName:ra,backendName:"webgl",kernelFunc:Ij},QI="return a + b;",Nj=yn({opSnippet:QI,packedOpSnippet:QI,supportsComplex:!0,cpuKernelImpl:RG}),kj={kernelName:wo,backendName:"webgl",kernelFunc:Nj};class Tj{constructor(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map((o,a)=>`T${a}`);const s=[];this.variableNames.forEach(o=>{s.push(`float v${o} = get${o}AtOutCoords();`)});const r=this.variableNames.map(o=>`v${o}`).join(" + ");this.userCode=`\n      void main() {\n        ${s.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class _j{constructor(t,e){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=e.map((o,a)=>`T${a}`);const s=[];this.variableNames.forEach(o=>{s.push(`vec4 v${o} = get${o}AtOutCoords();`)});const r=this.variableNames.map(o=>`v${o}`).join(" + ");this.userCode=`\n      void main() {\n        ${s.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}const Ej={kernelName:Hi,backendName:"webgl",kernelFunc:function _p(n){const{inputs:t,backend:e}=n,s=t;if(1===s.length)return Qn({inputs:{x:s[0]},backend:e});if(s.length>z().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const l=Math.floor(s.length/2),u=_p({inputs:s.slice(0,l),backend:e}),c=_p({inputs:s.slice(l),backend:e});return _p({inputs:[u,c],backend:e})}const r=s.map(l=>l.dtype).reduce((l,u)=>Rn(l,u)),o=s.map(l=>l.shape),i=z().getBool("WEBGL_PACK")?new _j(s[0].shape,o):new Tj(s[0].shape,o);return e.runWebGLProgram(i,s,r)}},Aj={kernelName:uc,backendName:"webgl",kernelFunc:function $j(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s,i=r.shape.length,l=Ue(o,r.shape);let u=l;const c=Et(u,i);let h=r;null!=c&&(h=An({inputs:{x:r},backend:e,attrs:{perm:c}}),u=zt(u.length,i)),mn("all",u,i);const[d,p]=ln(h.shape,u),g=de({inputs:{x:h},backend:e,attrs:{shape:[-1,j(p)]}}),m=ea(g,g.dtype,"all",e);let y;return y=de(a?{inputs:{x:m},backend:e,attrs:{shape:Mt(d,l)}}:{inputs:{x:m},backend:e,attrs:{shape:d}}),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(m),null!=c&&e.disposeIntermediateTensorInfo(h),y}},Dj={kernelName:cc,backendName:"webgl",kernelFunc:function Rj(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s,i=r.shape.length,l=Ue(o,r.shape);let u=l;const c=Et(u,i);let h=r;null!=c&&(h=An({inputs:{x:r},backend:e,attrs:{perm:c}}),u=zt(u.length,i)),mn("any",u,i);const[d,p]=ln(h.shape,u),g=de({inputs:{x:h},backend:e,attrs:{shape:[-1,j(p)]}}),m=ea(g,g.dtype,"any",e);let y;return y=de(a?{inputs:{x:m},backend:e,attrs:{shape:Mt(d,l)}}:{inputs:{x:m},backend:e,attrs:{shape:d}}),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(m),null!=c&&e.disposeIntermediateTensorInfo(h),y}};class Fj{constructor(t,e,s){this.variableNames=["A"];const{windowSize:r,batchSize:o,outSize:a}=t;s||this.variableNames.push("bestIndicesA"),this.outputShape=[o,a],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${s?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));"};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${"max"===e?">":"<"} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class Oj{constructor(t,e,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,C(t.length>2,()=>`Packed arg${s.charAt(0).toUpperCase()+s.slice(1)} supports only inputs with rank above 2.`);const a=Math.ceil(t[t.length-1]/e);this.outputShape=t.slice(0,-1),a>1&&this.outputShape.push(a),r||this.variableNames.push("bestIndicesA");const i=this.outputShape,l=i.length,u=ft(l),c=$n("coords",l);let h,d;if(1===a){d=l+1;const T=ft(d);h=`\n        ${T} sourceLocR = ${T}(${c.join()}, 0);\n        ++${c[l-1]};\n        ${T} sourceLocG = ${T}(${c.join()}, 0);\n        ++${c[l-2]};\n        ${T} sourceLocA = ${T}(${c.join()}, 0);\n        --${c[l-1]};\n        ${T} sourceLocB = ${T}(${c.join()}, 0);\n        --${c[l-2]};`}else d=l,h=`\n        ${u} sourceLocR = coords;\n        ++${c[l-1]};\n        ${u} sourceLocG = coords;\n        ++${c[l-2]};\n        ${u} sourceLocA = coords;\n        --${c[l-1]};\n        ${u} sourceLocB = coords;\n        --${c[l-2]};`;const p=["x","y","z","w","u","v"].slice(0,d),f="."+p[d-1],g=p.map(T=>"int "+T),m=$n("sourceLocR",d-1).concat("inIdx.r"),y=$n("sourceLocG",d-1).concat("inIdx.g"),b=$n("sourceLocB",d-1).concat("inIdx.b"),w=$n("sourceLocA",d-1).concat("inIdx.a"),x="max"===s?"greaterThan":"lessThan",S=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()}),\n                             getBestIndicesAChannel(${w.join()})));`,I=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${y.join()}) : 0.,\n            hasNextRow ? getAChannel(${b.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${w.join()}) : 0.)`,k=r?"":`\n      float getBestIndicesAChannel(${g.join()}) {\n        return getChannel(getBestIndicesA(${p.join()}),\n                                          vec2(${p.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${g.join()}) {\n        return getChannel(getA(${p.join()}),\n                               vec2(${p.slice(-2).join()}));\n      }\n      ${k}\n      void main() {\n        ${u} coords = getOutputCoords();\n        bool hasNextCol = ${c[l-1]} < ${i[l-1]-1};\n        bool hasNextRow = ${c[l-2]} < ${i[l-2]-1};\n        ${h}\n        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},\n          sourceLocB${f}, sourceLocA${f}) * ${e};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${I};\n\n        for (int i = 0; i < ${e}; i++) {\n          inIdx = srcIdx;\n          ${S}\n          vec4 candidate = ${I};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function JI(n,t,e,s=null){let r=t.shape[0],o=t.shape[1];null!=s&&(r=s.shape[0],o=s.shape[1]);const a=dd(o),i={windowSize:a,inSize:o,batchSize:r,outSize:Math.ceil(o/a)},l=new Fj(i,e,null==s),u=[t];null!=s&&u.push(s);const c=n.runWebGLProgram(l,u,"int32");if(1===c.shape[1])return c;const h=JI(n,t,e,c);return n.disposeIntermediateTensorInfo(c),h}function eC(n,t,e,s=null){const r=null!=s?s.shape:t.shape,a=dd(r[r.length-1]),i=new Oj(r,a,e,null==s),u=n.runWebGLProgram(i,null==s?[t]:[t,s],"int32");if(u.shape.length===t.shape.length){const c=eC(n,t,e,u);return n.disposeIntermediateTensorInfo(u),c}return u}function tC(n,t,e,s){const r=[e];if(mn("arg"+s.charAt(0).toUpperCase()+s.slice(1),r,t.shape.length),!z().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const o=[],a=n.texData.get(t.dataId);let l=t;null!==a&&a.isPacked&&(l=n.unpackTensor(t),o.push(l));const[u,c]=ln(l.shape,r),h=j(c),d=de({inputs:{x:l},backend:n,attrs:{shape:[-1,h]}});o.push(d);const p=JI(n,d,s);o.push(p);const f=de({inputs:{x:p},backend:n,attrs:{shape:u}});return o.forEach(g=>n.disposeIntermediateTensorInfo(g)),f}return eC(n,t,s)}const Pj={kernelName:ji,backendName:"webgl",kernelFunc:function Lj(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o}=s;let a=Ue(o,r.shape);const i=Et(a,r.shape.length);let l=r;const u=[];null!=i&&(l=An({inputs:{x:r},backend:e,attrs:{perm:i}}),u.push(l),a=zt(a.length,l.shape.length)),mn("argMax",[a[0]],l.shape.length);const c=tC(e,l,a[0],"max");return u.forEach(h=>e.disposeIntermediateTensorInfo(h)),c}},zj={kernelName:qi,backendName:"webgl",kernelFunc:function Mj(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o}=s;let a=Ue(o,r.shape);const i=Et(a,r.shape.length);let l=r;const u=[];null!=i&&(l=An({inputs:{x:r},backend:e,attrs:{perm:i}}),u.push(l),a=zt(a.length,l.shape.length)),mn("argMin",[a[0]],l.shape.length);const c=tC(e,l,a[0],"min");return u.forEach(h=>e.disposeIntermediateTensorInfo(h)),c}},Vj=nt({opSnippet:ps+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),Wj={kernelName:oa,backendName:"webgl",kernelFunc:Vj},Gj=nt({opSnippet:ps+"return log(x + sqrt(x * x + 1.0));"}),Hj={kernelName:aa,backendName:"webgl",kernelFunc:Gj},qj=nt({opSnippet:ps+"\n  return atan(x);\n"}),Kj={kernelName:ia,backendName:"webgl",kernelFunc:qj},Yj=yn({opSnippet:ub+"\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+Jo+"\n  return result;\n"}),Qj={kernelName:ua,backendName:"webgl",kernelFunc:Yj},eq=nt({opSnippet:ps+"\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),tq={kernelName:la,backendName:"webgl",kernelFunc:eq};class Qu{constructor(t,e,s,r=!1,o=!1){if(this.variableNames=["x"],"avg"===e&&s)throw new Error("Cannot compute positions for average pool.");const a=t.filterWidth,i=t.strideHeight,l=t.strideWidth,u=t.dilationHeight,c=t.dilationWidth,h=t.effectiveFilterHeight,d=t.effectiveFilterWidth,p=t.padInfo.top,f=t.padInfo.left;this.outputShape=t.outShape;const g="avg"===e;let b="0.0";if(g||(b="-1.0 / 1e-20"),s)return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${l});\n        const ivec2 pads = ivec2(${p}, ${f});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${h};\n              wR += ${u}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${d};\n                wC += ${c}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value >= currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?o?`((batch  * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + d`:`(xR * ${t.inWidth} + xC) * ${t.inChannels} + d`:`wR * ${d} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `);let x=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(x="avgValue / max(count, 1.0)");const S=4*Math.floor(a/4),I=a%4,k=`\n      if (${g}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${l});\n      const ivec2 pads = ivec2(${p}, ${f});\n      const float initializationValue = ${b};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${b});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${h};\n            wR += ${u}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${S}; wC += 4) {\n            int xC = xCCorner + wC * ${c};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              getValue(batch, xR, xC + 2 * ${c}, d),\n              getValue(batch, xR, xC + 3 * ${c}, d)\n            );\n\n            ${k}\n          }\n\n          int xC = xCCorner + ${S};\n          if (${1===I}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${2===I}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${3===I}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              getValue(batch, xR, xC + 2 * ${c}, d),\n              initializationValue\n            );\n\n            ${k}\n          }\n        }\n        setOutput(${x});\n      }\n    `}}class hb{constructor(t,e,s,r=!1,o=!1){if(this.variableNames=["x"],"avg"===e&&s)throw new Error("Cannot compute positions for average pool.");const a=t.filterWidth,i=t.strideDepth,l=t.strideHeight,u=t.strideWidth,c=t.dilationDepth,h=t.dilationHeight,d=t.dilationWidth,p=t.effectiveFilterDepth,f=t.effectiveFilterHeight,g=t.effectiveFilterWidth,m=t.padInfo.front,y=t.padInfo.top,b=t.padInfo.left;this.outputShape=t.outShape;const w="avg"===e;let x="0.0";if(w||(x="-1.0 / 1e-20"),s)return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${l}, ${u});\n        const ivec3 pads = ivec3(${m}, ${y}, ${b});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${c}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${f};\n                wR += ${h}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${g};\n                  wC += ${d}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value >= currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?o?`(((batch * ${t.inDepth} + xD) * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`((xD * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`wD * ${f} * ${g} +\n                      wR * ${g} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `);let I=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(I="avgValue / max(count, 1.0)");const k=4*Math.floor(a/4),T=a%4,_=`\n      if (${w}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${l}, ${u});\n      const ivec3 pads = ivec3(${m}, ${y}, ${b});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${c}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${f};\n            wR += ${h}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${k}; wC += 4) {\n              int xC = xCCorner + wC * ${d};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${d}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${d}, ch)\n              );\n\n              ${_}\n            }\n\n            int xC = xCCorner + ${k};\n            if (${1===T}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${_}\n            } else if (${2===T}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${_}\n            } else if (${3===T}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${d}, ch),\n                initializationValue\n              );\n\n              ${_}\n            }\n          }\n        }\n        setOutput(${I});\n      }\n    `}}const sq={kernelName:Ki,backendName:"webgl",kernelFunc:function nq(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t;Xu(r,"avgPool");const{filterSize:o,strides:a,pad:i,dimRoundingMode:l}=s;C(pn(a,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${a} and dilations '1'`);const c=gs(r.shape,o,a,1,i,l);if(1===c.filterWidth&&1===c.filterHeight&&Xe(c.inShape,c.outShape))return Qn({inputs:{x:r},backend:e});const h=new Qu(c,"avg",!1);return e.runWebGLProgram(h,[r],"float32")}},oq={kernelName:Xi,backendName:"webgl",kernelFunc:function rq(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{filterSize:o,strides:a,pad:i,dimRoundingMode:l,dataFormat:u}=s,h=gr(r.shape,o,a,[1,1,1],i,l,u),d=new hb(h,"avg",!1);return e.runWebGLProgram(d,[r],"float32")}};class aq{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const l=t.effectiveFilterHeight,u=t.effectiveFilterWidth;this.userCode=`\n      const ivec2 pads = ivec2(${l-1-t.padInfo.top}, ${u-1-t.padInfo.left});\n      const float avgMultiplier = float(${1/(t.filterHeight*t.filterWidth)});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${l};\n            wR += ${t.dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${u};\n            wC+= ${t.dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class iq{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const h=t.effectiveFilterDepth,d=t.effectiveFilterHeight,p=t.effectiveFilterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${h-1-t.padInfo.front}, ${d-1-t.padInfo.top}, ${p-1-t.padInfo.left});\n      const float avgMultiplier = float(${1/(t.filterDepth*t.filterHeight*t.filterWidth)});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${h};\n            wD += ${t.dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${t.strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${d};\n              wR += ${t.dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${t.dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const uq={kernelName:dc,backendName:"webgl",kernelFunc:function lq(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o}=t,a=o,{filterSize:i,strides:l,pad:u,dimRoundingMode:c}=s,d=gr(a.shape,i,l,[1,1,1],u,c),p=new iq(d);return e.runWebGLProgram(p,[r],a.dtype)}},hq={kernelName:hc,backendName:"webgl",kernelFunc:function cq(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o}=t,a=o;Xu([r,o],"avgPoolGrad");const{filterSize:i,strides:l,pad:u}=s,c=gs(a.shape,i,l,1,u),h=new aq(c);return e.runWebGLProgram(h,[r],a.dtype)}},pq={kernelName:Zi,backendName:"webgl",kernelFunc:function dq(n){const{inputs:t,backend:e,attrs:s}=n,{a:r,b:o}=t,{transposeA:a,transposeB:i}=s;return Tp({a:r,b:o,transposeA:a,transposeB:i,backend:e})}};class fq{constructor(t,e,s,r,o,a){this.outputShape=[],this.variableNames=["x","mean","variance"],Le(t,e),Le(t,s);let i="0.0";null!=r&&(Le(t,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let l="1.0";null!=o&&(Le(t,o),this.variableNames.push("scale"),l="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${l};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class mq{constructor(t,e,s,r,o,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],Le(t,e),Le(t,s);let i="vec4(0.0)";null!=r&&(Le(t,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let l="vec4(1.0)";null!=o&&(Le(t,o),this.variableNames.push("scale"),l="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${l};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const gq={kernelName:ul,backendName:"webgl",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s,mean:r,variance:o,offset:a,scale:i}=n;C(r.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),C(null==a||r.shape.length===a.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),C(null==i||r.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:l}=e;null==l&&(l=.001);const u=[s,r,o];let c=null;null!=a&&(c=a.shape,u.push(a));let h=null;null!=i&&(h=i.shape,u.push(i));const d=z().getBool("WEBGL_PACK_NORMALIZATION")?new mq(s.shape,r.shape,o.shape,c,h,l):new fq(s.shape,r.shape,o.shape,c,h,l);return t.runWebGLProgram(d,u,u[0].dtype)}};class yq{constructor(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;const e=ft(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const s=function bq(n){if(1===n)return"sourceLoc";if(n<=6)return db.slice(0,n).map(t=>"sourceLoc."+t).join(",");throw Error(`Slicing for rank ${n} is not yet supported`)}(this.rank);let r;r=`\n        ${e} sourceLoc;\n        ${e} coords = getOutputCoords();\n        ${t.map((a,i)=>`sourceLoc.${db[i]} = start[${i}] + coords.${db[i]};`).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${r}\n        setOutput(getSource(${s}));\n      }\n    `}}const db=["x","y","z","w","u","v"];class xq{constructor(t){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const e=ft(this.rank),s=$n("coords",this.rank),r=$n("sourceLoc",this.rank),o=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,a=`getChannel(getSource(${r.join()}), ${o})`,i=`\n      result.x = ${a};\n      if (++${s[this.rank-1]} < ${t[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${a};\n        --${r[this.rank-1]};\n      }\n    `,l=1===this.rank?"":`\n      --${s[this.rank-1]};\n      if (++${s[this.rank-2]} < ${t[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${a};\n        if (++${s[this.rank-1]} < ${t[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,u=this.rank<=4?`sourceLoc = coords +\n            ${e}(${t.map((c,h)=>`start[${h}]`).join()});`:t.map((c,h)=>`${r[h]} = ${s[h]} + start[${h}];`).join("\n");this.userCode=`\n      void main() {\n        ${e} coords = getOutputCoords();\n        ${e} sourceLoc;\n        ${u}\n        vec4 result = vec4(0.);\n        ${i}\n        ${l}\n        setOutput(result);\n      }\n    `}}function Vi(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{begin:o,size:a}=s,[i,l]=Ah(r,o,a);if(Mf(r,i,l),0===j(l))return e.makeTensorInfo(l,r.dtype,[]);if(e.shouldExecuteOnCPU([r])||"string"===r.dtype){const h=e.texData.get(r.dataId),d=cH(h.values,i,l,r.shape,r.dtype);return e.makeTensorInfo(l,r.dtype,d)}const{isPacked:u}=e.texData.get(r.dataId),c=Bf(r.shape,i,l);if(u||!c){const h=z().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new xq(l):new yq(l);return e.runWebGLProgram(h,[r],r.dtype,[i])}return e.uploadToGPU(r.dataId),function wq(n,t,e,s){const r=s.texData.get(n.dataId),o=s.makeTensorInfo(e,n.dtype),a=s.texData.get(o.dataId);Object.assign(a,r),a.refCount=1,a.shape=e,a.dtype=n.dtype;let i=Vf(t,Te(n.shape));r.slice&&(i+=r.slice.flatOffset),a.slice={flatOffset:i,origDataId:r.slice&&r.slice.origDataId||n.dataId};const l=s.dataRefCount.get(a.slice.origDataId)||1;return s.dataRefCount.set(a.slice.origDataId,l+1),o}(r,i,l,e)}const vq={kernelName:Ml,backendName:"webgl",kernelFunc:Vi},Sq={kernelName:Yi,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockShape:o,crops:a}=s;C(r.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");const i=o.reduce((b,w)=>b*w),l=Tu(r.shape,o,i),u=_u(l.length,o.length),c=Eu(r.shape,o,i),h=ug(a,o.length),d=cg(c,a,o.length),p=[],f=de({inputs:{x:r},backend:e,attrs:{shape:l}}),g=An({inputs:{x:f},backend:e,attrs:{perm:u}}),m=de({inputs:{x:g},backend:e,attrs:{shape:c}}),y=Vi({inputs:{x:m},backend:e,attrs:{begin:h,size:d}});return p.push(f),p.push(g),p.push(m),p.forEach(b=>e.disposeIntermediateTensorInfo(b)),y}},Cq={kernelName:pc,backendName:"webgl",kernelFunc:function Iq(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,weights:o}=t,{size:a}=s,i=e.readSync(r.dataId),l=e.readSync(o.dataId),u=RI(i,l,o.dtype,o.shape,a);return e.makeTensorInfo([a],o.dtype,u)}},_q={kernelName:Qi,backendName:"webgl",kernelFunc:function Tq(n){const{inputs:t,backend:e}=n,{a:s,b:r}=t,o=z().getBool("WEBGL_PACK_BINARY_OPERATIONS"),a=z().getNumber("WEBGL_VERSION");if(e.shouldExecuteOnCPU([s,r])||1===a){const l=e.texData.get(s.dataId).values,u=e.texData.get(r.dataId).values,[c,h]=FG(s.shape,r.shape,l,u,s.dtype),d=e.makeTensorInfo(h,s.dtype);return e.texData.get(d.dataId).values=c,d}let i;return i=o?new zi("\n  int r = int(a.r) & int(b.r);\n  int g = int(a.g) & int(b.g);\n  int rb = int(a.b) & int(b.b);\n  int ra = int(a.a) & int(b.a);\n  return vec4(r, g, rb, ra);\n",s.shape,r.shape,!1):new Qo("\n  return float(int(a.r) & int(b.r));\n",s.shape,r.shape),e.runWebGLProgram(i,[s,r],s.dtype)}},$q={kernelName:fc,backendName:"webgl",kernelFunc:function Eq(n){const{inputs:t,backend:e}=n,{s0:s,s1:r}=t,o=e.readSync(s.dataId),a=e.readSync(r.dataId),i=Le(Array.from(o),Array.from(a));return e.makeTensorInfo([i.length],"int32",Int32Array.from(i))}},nC=yn({opSnippet:"return float(a != b);",cpuKernelImpl:tH,dtype:"bool"}),Aq={kernelName:kl,backendName:"webgl",kernelFunc:nC};function Ju(n){const{inputs:t,backend:e}=n,{input:s}=t;return Qn({inputs:{x:e.texData.get(s.dataId).complexTensorInfos.real},backend:e})}const Rq={kernelName:Zc,backendName:"webgl",kernelFunc:Ju},Oq={kernelName:ca,backendName:"webgl",kernelFunc:function pb(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{dtype:o}=s;if("complex64"===o){if("complex64"===r.dtype)return Qn({inputs:{x:r},backend:e});const a=Kt(r.shape),i=pb({inputs:{x:r},backend:e,attrs:{dtype:"float32"}}),l=uo({inputs:{real:i,imag:a},backend:e});return a.dispose(),e.disposeIntermediateTensorInfo(i),l}if("complex64"===r.dtype){const a=Ju({inputs:{input:r},backend:e}),i=pb({inputs:{x:a},backend:e,attrs:{dtype:o}});return e.disposeIntermediateTensorInfo(a),i}if(!zp(r.dtype,o)){const a=Qn({inputs:{x:r},backend:e});return{dataId:a.dataId,shape:a.shape,dtype:o}}if(e.shouldExecuteOnCPU([r])){const a=e.texData.get(r.dataId).values,[i,l,u]=OG(a,r.shape,r.dtype,o);return e.makeTensorInfo(i,l,u)}if("int32"===o)return function Fq(n,t){const e=new ir(n.shape,"return float(int(x));"),s=t.runWebGLProgram(e,[n],"int32");return{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}(r,e);if("bool"===o){const a=e.makeTensorInfo([],"bool",sn("bool",1)),l=nC({inputs:{a:r,b:a},backend:e});return e.disposeIntermediateTensorInfo(a),l}throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${o}`)}},sC="return ceil(x);",Lq=nt({opSnippet:sC,packedOpSnippet:sC,cpuKernelImpl:LG}),Pq={kernelName:ha,backendName:"webgl",kernelFunc:Lq};class Mq{constructor(t){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=t,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class zq{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=t,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const Vq={kernelName:da,backendName:"webgl",kernelFunc:function Bq(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{clipValueMin:o,clipValueMax:a}=s;let i;return i=z().getBool("WEBGL_PACK_CLIP")?new zq(r.shape):new Mq(r.shape),e.runWebGLProgram(i,[r],r.dtype,[[o],[a]])}};class Wq{constructor(t){this.variableNames=["real","imag"],this.outputShape=t,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function rC(n,t){return{dataId:t.dataId,dtype:t.dtype,shape:n.shape}}const Gq={kernelName:Ji,backendName:"webgl",kernelFunc:function Uq(n){const{inputs:t,backend:e}=n,{x:s}=t,r=e.texData.get(s.dataId),o=new Wq(s.shape),a=[rC(s,r.complexTensorInfos.real),rC(s,r.complexTensorInfos.imag)];return e.runWebGLProgram(o,a,a[0].dtype)}};class Hq{constructor(t){this.outputShape=[],this.outputShape=Ks(t,1),this.variableNames=t.map((a,i)=>`T${i}`);const e=new Array(t.length-1);e[0]=t[0][1];for(let a=1;a<e.length;a++)e[a]=e[a-1]+t[a][1];const s=[`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];for(let a=1;a<e.length;a++)s.push(`else if (yC < ${e[a]}) setOutput(getT${a}(yR, yC-${e[a-1]}));`);s.push(`else setOutput(getT${e.length}(yR, yC-${e[e.length-1]}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${s.join("\n        ")}\n      }\n    `}}class jq{constructor(t,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Ks(t,e);const s=this.outputShape,r=s.length,o=ft(r),a=$n("coords",r),i=["x","y","z","w","u","v"].slice(0,r);this.variableNames=t.map((g,m)=>`T${m}`);const l=new Array(t.length-1);l[0]=t[0][e];for(let g=1;g<l.length;g++)l[g]=l[g-1]+t[g][e];const u=i[e],c=i.slice(-2),h=i.join();let d=`if (${u} < ${l[0]}) {\n        return getChannel(\n            getT0(${h}), vec2(${c.join()}));\n        }`;for(let g=1;g<l.length;g++){const m=l[g-1];d+=`\n        if (${u} < ${l[g]}  && ${u} >= ${l[g-1]}) {\n          return getChannel(\n            getT${g}(${Ep(i,u,m)}),\n            vec2(${Ep(c,u,m)}));\n        }`}const f=l[l.length-1];d+=`\n        return getChannel(\n          getT${l.length}(${Ep(i,u,f)}),\n          vec2(${Ep(c,u,f)}));`,this.userCode=`\n      float getValue(${i.map(g=>"int "+g)}) {\n        ${d}\n      }\n\n      void main() {\n        ${o} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[r-1]} = ${a[r-1]} + 1;\n        if (${a[r-1]} < ${s[r-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[r-2]} = ${a[r-2]} + 1;\n        if (${a[r-2]} < ${s[r-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[r-1]} = ${a[r-1]} - 1;\n        if (${a[r-2]} < ${s[r-2]} &&\n            ${a[r-1]} < ${s[r-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function Ep(n,t,e){const s=n.indexOf(t);return n.map((o,a)=>a===s?`${o} - ${e}`:o).join()}function $p(n){const{inputs:t,backend:e}=n,{input:s}=t;return Qn({inputs:{x:e.texData.get(s.dataId).complexTensorInfos.imag},backend:e})}const qq={kernelName:Lc,backendName:"webgl",kernelFunc:$p};function ec(n,t,e){const s=n[0].dtype;if("complex64"===s){const p=n.map(b=>Ju({inputs:{input:b},backend:e})),f=n.map(b=>$p({inputs:{input:b},backend:e})),g=ec(p,t,e),m=ec(f,t,e),y=uo({inputs:{real:g,imag:m},backend:e});return p.forEach(b=>e.disposeIntermediateTensorInfo(b)),f.forEach(b=>e.disposeIntermediateTensorInfo(b)),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(m),y}let r=e.shouldExecuteOnCPU(n);if("string"===s&&(r=!0),r){const p=n.map(x=>{const I=[-1,j(x.shape.slice(t))];return de({inputs:{x},backend:e,attrs:{shape:I}})}),f=p.map(x=>({vals:e.readSync(x.dataId),shape:x.shape})),g=Ks(p.map(x=>x.shape),1),y=PG(f,g,s,1===p[0].shape[0]),b=Ks(n.map(x=>x.shape),t),w=e.makeTensorInfo(b,s,y);return p.forEach(x=>e.disposeIntermediateTensorInfo(x)),w}const o=n.filter(p=>j(p.shape)>0),a=z().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&o[0].shape.length>1;if(1===o.length){const p=a?new ir(n[0].shape,ao):new lo(n[0].shape,ao);return e.runWebGLProgram(p,n,s)}const i=z().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(o.length>i){const p=[];for(let g=0;g<o.length;g+=i){const m=o.slice(g,g+i);p.push(ec(m,t,e))}const f=ec(p,t,e);for(const g of p)e.disposeIntermediateTensorInfo(g);return f}if(a){const p=new jq(o.map(f=>f.shape),t);return e.runWebGLProgram(p,o,s)}const{tensors2D:l,outShape:u}=function Kq(n,t,e){const s=Ks(n.map(o=>o.shape),t);return{tensors2D:n.map(o=>de({inputs:{x:o},attrs:{shape:[-1,j(o.shape.slice(t))]},backend:e})),outShape:s}}(o,t,e),c=new Hq(l.map(p=>p.shape)),h=e.runWebGLProgram(c,l,s);l.forEach(p=>e.disposeIntermediateTensorInfo(p));const d=de({inputs:{x:h},attrs:{shape:u},backend:e});return e.disposeIntermediateTensorInfo(h),d}function oC(n){const{inputs:t,backend:e,attrs:s}=n,{axis:r}=s,o=Ue(r,t[0].shape)[0];ag(t.map(u=>u.shape),o);const i=Ks(t.map(u=>u.shape),o);if(0===j(i))return e.makeTensorInfo(i,t[0].dtype,[]);const l=t.filter(u=>j(u.shape)>0);return 1===l.length?Qn({inputs:{x:l[0]},backend:e}):ec(l,o,e)}const Xq={kernelName:el,backendName:"webgl",kernelFunc:oC};class aC{constructor(t,e=!1,s=null,r=!1,o=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const a=t.padInfo.top,i=t.padInfo.left,l=t.strideHeight,u=t.strideWidth,c=t.dilationHeight,h=t.dilationWidth,d=t.filterHeight,p=t.filterWidth,f=4*Math.floor(t.inChannels/4),g=t.inChannels%4,m="channelsLast"===t.dataFormat,y=m?1:2,b=m?2:3,w=m?3:1;let x="",S="";s&&(x=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${s}\n        }`:o?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${s}\n        }`:`\n          float activation(float x) {\n            ${s}\n          }\n        `,S="result = activation(result);");const I=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${l}, ${u});\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${w}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${y}], coords[${b}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${d}; wR++) {\n          int xR = xRCorner + wR * ${c};\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${h};\n\n            if (xC < 0 || xC >= ${t.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${f}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===g}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${f}) *\n                    getW(wR, wC, ${f}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${f}, xR, xC) *\n                    getW(wR, wC, ${f}, d2);\n              }\n\n            } else if (${2===g}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${f}, d2),\n                getW(wR, wC, ${f} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${f}),\n                  getX(batch, xR, xC, ${f} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${f}, xR, xC),\n                  getX(batch, ${f} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===g}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${f}, d2),\n                getW(wR, wC, ${f} + 1, d2),\n                getW(wR, wC, ${f} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${f}),\n                  getX(batch, xR, xC, ${f} + 1),\n                  getX(batch, xR, xC, ${f} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${f}, xR, xC),\n                  getX(batch, ${f} + 1, xR, xC),\n                  getX(batch, ${f} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${I}\n        ${S}\n        setOutput(result);\n      }\n    `}}class Zq{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;const e=t.padInfo.front,s=t.padInfo.top,r=t.padInfo.left,o=t.strideDepth,a=t.strideHeight,i=t.strideWidth,l=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,h=t.filterDepth,d=t.filterHeight,p=t.filterWidth,f=4*Math.floor(t.inChannels/4),g=t.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${o}, ${a}, ${i});\n      const ivec3 pads = ivec3(${e}, ${s}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${h}; wF++) {\n          int xF = xFCorner + wF * ${l};\n\n          if (xF < 0 || xF >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d}; wR++) {\n            int xR = xRCorner + wR * ${u};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${c};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${f}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===g}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${f}) *\n                  getW(wF, wR, wC, ${f}, d2);\n              } else if (${2===g}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${f}),\n                  getX(batch, xF, xR, xC, ${f} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${f}, d2),\n                  getW(wF, wR, wC, ${f} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===g}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${f}),\n                  getX(batch, xF, xR, xC, ${f} + 1),\n                  getX(batch, xF, xR, xC, ${f} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${f}, d2),\n                  getW(wF, wR, wC, ${f} + 1, d2),\n                  getW(wF, wR, wC, ${f} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class iC{constructor(t,e=!1,s=null,r=!1,o=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=Sn(this.outputShape.length);const a=t.padInfo.left,i=t.strideWidth,l=t.dilationWidth,u=t.filterHeight,c=t.filterWidth,h=c;let d="\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;";for(let m=0;m<c;m++)d+=`\n           vec4 xTexelC${2*m};\n           int xTexelC${2*m}Ready;\n           vec4 xTexelC${2*m+1};\n           int xTexelC${2*m+1}Ready;\n           vec4 xC${m};`;d+=`\n     for (int r = 0; r < ${u}; r++) {\n      for (int d1 = 0; d1 < ${t.inChannels}; d1 += 2) {\n       `;for(let m=0;m<c;m++)d+=`\n           xTexelC${2*m} = vec4(0.0);\n           xTexelC${2*m}Ready = 0;\n           xTexelC${2*m+1} = vec4(0.0);\n           xTexelC${2*m+1}Ready = 0;\n           xC${m} = vec4(0.0);`;d+="\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       ";for(let m=0;m<(h+1)/2;m++){const y=2*m;if(d+=`\n           xC = xCCorner + ${y*l};\n           `,1===i){if(y<c&&(a%2==1?(d+=`\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y}Ready == 0) {\n                   xTexelC${y} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${y}.zw = vec2(0.0);\n                   }\n                   xTexelC${y}Ready = 1;\n                 }\n               `,d+=1===l&&y>0?`\n                 xC${y} = vec4(xTexelC${y-2}.zw, xTexelC${y}.xy);\n                 `:`\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${y} = vec4(previous.zw, xTexelC${y}.xy);\n                   } else {\n                     xC${y} = vec4(0.0, 0.0, xTexelC${y}.xy);\n                   }\n                   `):d+=`\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${y}Ready == 0) {\n                   xTexelC${y} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${y}.zw = vec2(0.0);\n                   }\n                   xTexelC${y}Ready = 1;\n                 }\n\n                 xC${y} = xTexelC${y};\n                 `,y+1<c)){const b=a%2==0?rc(l):l;l%2==0&&a%2==1||l%2!=0&&a%2!=1?(d+=`\n                   xCOffset = xC + imod(pads[1], 2) + ${b};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y+1}Ready == 0) {\n                     xTexelC${y+1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${y+1}.zw = vec2(0.0);\n                     }\n                     xTexelC${y+1}Ready = 1;\n                   }\n                   `,d+=l>1?`\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${y+1} = vec4(previous.zw, xTexelC${y+1}.xy);\n                     } else {\n                      xC${y+1} = vec4(0.0, 0.0, xTexelC${y+1}.xy);\n                     }\n                     `:`\n                     xC${y+1} = vec4(xTexelC${y}.zw, xTexelC${y+1}.xy);\n                     `):d+=1===b?`\n                     xC${y+1} = xTexelC${y};\n                     `:`\n                     xCOffset = xC + ${b};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y+1}Ready == 0) {\n                       xTexelC${y+1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${y+1}.zw = vec2(0.0);\n                       }\n                       xTexelC${y+1}Ready = 1;\n                     }\n\n                     xC${y+1} = xTexelC${y+1};\n                     `}}else y<c&&(a%2==1?(d+=`\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y}Ready == 0) {\n                   xTexelC${y} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${y}.zw = vec2(0.0);\n                   }\n                   xTexelC${y}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${y+1}Ready == 0) {\n                   xTexelC${y+1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${y+1}.zw = vec2(0.0);\n                   }\n                   xTexelC${y+1}Ready = 1;\n                 }\n\n                 xC${y} = vec4(xTexelC${y}.zw, xTexelC${y+1}.zw);\n               `,y+1<c&&(d+=`\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${y+1} = vec4(xTexelC${y+1}.xy, final.xy);\n                 `)):(d+=`\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${y}Ready == 0) {\n                   xTexelC${y} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${y}.zw = vec2(0.0);\n                   }\n                   xTexelC${y}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y+1}Ready == 0) {\n                   xTexelC${y+1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${y+1}.zw = vec2(0.);\n                   }\n                   xTexelC${y+1}Ready = 1;\n                 }\n\n                 xC${y} = vec4(\n                   xTexelC${y}.xy, xTexelC${y+1}.xy);\n               `,y+1<c&&(d+=`\n                   xC${y+1} = vec4(xTexelC${y}.zw, xTexelC${y+1}.zw);\n                 `)));y<c&&(d+=`\n             wTexel = getW(r, ${y}, d1, d2);\n             dotProd += xC${y}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${t.inChannels}) {\n               dotProd += xC${y}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `,y+1<c&&(d+=`\n               wTexel = getW(r, ${y+1}, d1, d2);\n               dotProd += xC${y+1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${t.inChannels}) {\n                 dotProd += xC${y+1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `))}d+="\n     }\n   ",d+="\n     }\n   ",d+="\n     }\n   ";let p="",f="";s&&(p=r?`vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${s}\n         }`:o?`vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${s}\n         }`:`vec4 activation(vec4 x) {\n           ${s}\n         }`,f="result = activation(result);");const g=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n       ${p}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${d}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${g}\n         ${f}\n         setOutput(result);\n       }\n     `}}class Yq{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=t,this.enableShapeUniforms=Sn(this.outputShape.length);const{dataFormat:s}=e,r=En(),o="channelsLast"===s,a=o?1:2,i=o?2:3,l=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${t[2]} && pos < ${t[1]}) {`;let u="";for(let c=0;c<=1;c++)for(let h=0;h<=1;h++)u+=`\n          blockIndex = rc.z + ${h};\n          pos = rc.y + ${c};\n\n          ${l}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${a}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${i}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${o}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*c+h}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*c+h}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${u}\n\n        ${r.output} = result;\n      }\n    `}}function Ap(n,t){const e=n.length;return e>=3?t?[...n.slice(0,-3),n[e-3]*n[e-2],n[e-1]]:[...n.slice(0,-3),n[e-3],n[e-2]*n[e-1]]:!t&&1===e&&n[0]>1?[n[0],1]:null}function lC({x:n,filter:t,convInfo:e,backend:s,bias:r=null,preluActivationWeights:o=null,leakyreluAlpha:a=0,activation:i=null}){const l=n.shape,u=s.texData.get(n.dataId),c=e.inChannels,h=l[0]*l[1]*l[2],d=e.outChannels,p="channelsLast"===e.dataFormat;let m;const y=[];if(null!=o){const x=Ap(o.shape,p);null!=x&&(o=de({inputs:{x:o},backend:s,attrs:{shape:x}}),y.push(o))}if(null!=r){const x=Ap(r.shape,p);null!=x&&(r=de({inputs:{x:r},backend:s,attrs:{shape:x}}),y.push(r))}if((1!==h&&1!==d||!(c>ZI))&&u.isPacked&&p&&null!=u.texture&&l[2]%2!=0&&Xe(u.shape.slice(-3),l.slice(-3))){const S={dataId:n.dataId,shape:[1,l[0]*l[1]*(l[2]+1),e.inChannels],dtype:n.dtype},I=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,C(xp(u.shape,S.shape),()=>`packed reshape ${u.shape} to ${S.shape} isn't free`);const k=de({inputs:{x:t},backend:s,attrs:{shape:[1,e.inChannels,e.outChannels]}});y.push(k);const T=Tp({a:S,b:k,backend:s,transposeA:!1,transposeB:!1,bias:r,activation:i,preluActivationWeights:o,leakyreluAlpha:a}),_=s.texData.get(T.dataId);C(_.isPacked,()=>"batchMatMul result is expected to be packed"),u.shape=I,_.shape=e.outShape,m=Qn({inputs:{x:T},backend:s}),m.shape=e.outShape,y.push(T)}else{const x=e.outHeight*e.outWidth,S=de({inputs:{x:n},backend:s,attrs:{shape:p?[e.batchSize,x,e.inChannels]:[e.batchSize,e.inChannels,x]}}),I=de({inputs:{x:t},backend:s,attrs:{shape:[1,e.inChannels,e.outChannels]}}),k=Tp({a:p?S:I,b:p?I:S,transposeA:!p,transposeB:!1,backend:s,bias:r,activation:i,preluActivationWeights:o,leakyreluAlpha:a});m=de({inputs:{x:k},backend:s,attrs:{shape:e.outShape}}),y.push(S),y.push(I),y.push(k)}for(const x of y)s.disposeIntermediateTensorInfo(x);return m}function uC({x:n,filter:t,convInfo:e,backend:s,bias:r=null,preluActivationWeights:o=null,leakyreluAlpha:a=0,activation:i=null}){const{filterWidth:l,filterHeight:u,inChannels:c,outWidth:h,outHeight:d,dataFormat:p}=e,f="channelsLast"===p,g=l*u*c,m=d*h,y=[e.batchSize,g,m],x=[];if(null!=o){const H=Ap(o.shape,f);null!=H&&(o=de({inputs:{x:o},backend:s,attrs:{shape:H}}),x.push(o))}if(null!=r){const H=Ap(r.shape,f);null!=H&&(r=de({inputs:{x:r},backend:s,attrs:{shape:H}}),x.push(r))}const S=de({inputs:{x:t},backend:s,attrs:{shape:[1,g,j(t.shape)/g]}});x.push(S);const I=new Yq(y,e),T=s.runWebGLProgram(I,[n],"float32",[n.shape,[e.padInfo.top,e.padInfo.left],[e.strideHeight,e.strideWidth],[e.dilationHeight,e.dilationWidth],[e.inChannels],[e.filterWidth*e.inChannels],[e.outWidth]]),_=de({inputs:{x:T},backend:s,attrs:{shape:y}});x.push(T),x.push(_);const E=null!=r,L=null!=o,B="leakyrelu"===i,W=i?Yu(i,!0):null,U=new HI(f?_.shape:S.shape,f?S.shape:_.shape,f?[e.batchSize,m,e.outChannels]:[e.batchSize,e.outChannels,m],!0,!1,E,W,L,B),G=f?[_,S]:[S,_];if(r&&G.push(r),L&&G.push(o),B){const H=s.makeTensorInfo([],"float32",hr(a,"float32"));G.push(H),x.push(H)}const K=s.runWebGLProgram(U,G,"float32"),X=de({inputs:{x:K},backend:s,attrs:{shape:e.outShape}});x.push(K);for(const H of x)s.disposeIntermediateTensorInfo(H);return X}const Jq={kernelName:tl,backendName:"webgl",kernelFunc:function Qq(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:a,pad:i,dataFormat:l,dilations:u,dimRoundingMode:c}=s,h=yr(l),d=an(r.shape,o.shape,a,u,i,c,!1,h);let p;if(1!==d.filterHeight||1!==d.filterWidth||1!==d.dilationHeight||1!==d.dilationWidth||1!==d.strideHeight||1!==d.strideWidth||"SAME"!==d.padInfo.type&&"VALID"!==d.padInfo.type)if(d.strideWidth<=2&&"channelsLast"===h&&z().getBool("WEBGL_EXP_CONV")){const g=new iC(d);p=e.runWebGLProgram(g,[r,o],"float32",[[d.padInfo.top,d.padInfo.left],[d.strideHeight,d.strideWidth],[d.dilationHeight,d.dilationWidth],[d.inHeight,d.inWidth]])}else if(z().getBool("WEBGL_CONV_IM2COL"))p=uC({x:r,filter:o,convInfo:d,backend:e});else{const g=new aC(d);p=e.runWebGLProgram(g,[r,o],"float32")}else p=lC({x:r,filter:o,convInfo:d,backend:e});const f=de({inputs:{x:p},backend:e,attrs:{shape:d.outShape}});return e.disposeIntermediateTensorInfo(p),f}};class eK{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${t.strideHeight} - ${t.padInfo.top};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${t.strideWidth} - ${t.padInfo.left};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              ${"channelsLast"===t.dataFormat?"float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);":"float dyValue = getDy(b, d2, yR, yC);\n              float xValue = getX(b, d1, xR, xC);\n              dotProd += (xValue * dyValue);"}\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class tK{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,s=t.filterWidth,a="channelsLast"===t.dataFormat;this.userCode=`\n      const ivec2 pads = ivec2(${e-1-t.padInfo.top}, ${s-1-t.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${a?3:1}];\n\n        ivec2 dyCorner = ivec2(coords[${a?1:2}], coords[${a?2:3}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${s}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${s} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class nK{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape,this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yF = 0; yF < ${t.outDepth}; yF++) {\n            int xF = wF + yF * ${t.strideDepth} - ${t.padInfo.front};\n\n            if (xF < 0 || xF >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${t.outHeight}; yR++) {\n              int xR = wR + yR * ${t.strideHeight} - ${t.padInfo.top};\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${t.outWidth}; yC++) {\n                int xC = wC + yC * ${t.strideWidth} - ${t.padInfo.left};\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class sK{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterDepth,s=t.filterHeight,r=t.filterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${e-1-t.padInfo.front}, ${s-1-t.padInfo.top}, ${r-1-t.padInfo.left});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${e}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${t.strideDepth}.0;\n\n          if (dyF < 0.0 || dyF >= ${t.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${e} - 1 - wF;\n\n          for (int wR = 0; wR < ${s}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${s} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const oK={kernelName:gc,backendName:"webgl",kernelFunc:function rK(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:o}=t,{strides:a,pad:i,dataFormat:l,dimRoundingMode:u,filterShape:c}=s,h=yr(l),d=an(r.shape,c,a,1,i,u,!1,h),p=new eK(d);return e.runWebGLProgram(p,[r,o],"float32")}};class aK{constructor(t){this.variableNames=["dy","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"strides",type:"vec2"}],this.outputShape=t.inShape,this.enableShapeUniforms=Sn(this.outputShape.length);const e=t.filterHeight,s=t.filterWidth;this.userCode=`\n      const ivec2 pads = ivec2(${e-1-t.padInfo.top}, ${s-1-t.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n\n        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        vec4 result = vec4(0.);\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / strides[0];\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${s}; wC++) {\n            int wCPerm = ${s} - 1 - wC;\n\n            float dyC = float(dyCCorner + wC) / strides[1];\n            bool idyCVal = (dyC >= 0.0) && (dyC < ${t.outWidth}.0)\n              && (fract(dyC) == 0.0);\n            int idyC = int(dyC);\n\n            float dyC2 = float(dyCCorner + wC + 1) / strides[1];\n            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${t.outWidth}.0)\n              && (fract(dyC2) == 0.0);\n            int idyC2 = int(dyC2);\n\n            if (idyCVal && idyCVal2) {\n              for (int d2 = 0; d2 < ${t.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?\n                  dySample : getDy(batch, idyR, idyC2, d2);\n\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n\n                dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample2.xy : dySample2.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal) {\n              for (int d2 = 0; d2 < ${t.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal2) {\n              for (int d2 = 0; d2 < ${t.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC2, d2);\n                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            }\n          }\n        }\n        setOutput(result);\n      }\n    `}}const lK={kernelName:nl,backendName:"webgl",kernelFunc:function iK(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:o}=t,{inputShape:a,strides:i,pad:l,dataFormat:u,dimRoundingMode:c}=s,h=yr(u),d=an(a,o.shape,i,1,l,c,!1,h);if(z().getBool("WEBGL_PACK_CONV2DTRANSPOSE")&&"channelsLast"===h){const p=[[d.strideHeight,d.strideWidth]],f=new aK(d);return e.runWebGLProgram(f,[r,o],"float32",p)}{const p=new tK(d);return e.runWebGLProgram(p,[r,o],"float32")}}},cK={kernelName:sl,backendName:"webgl",kernelFunc:function uK(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:a,pad:i,dilations:l}=s,u=Ur(r.shape,o.shape,a,l,i),c=new Zq(u);return e.runWebGLProgram(c,[r,o],"float32")}},dK={kernelName:yc,backendName:"webgl",kernelFunc:function hK(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:o}=t,{strides:a,pad:i,filterShape:l}=s,u=Ur(r.shape,l,a,1,i),c=new nK(u);return e.runWebGLProgram(c,[r,o],"float32")}},fK={kernelName:bc,backendName:"webgl",kernelFunc:function pK(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:o}=t,{pad:a,strides:i,inputShape:l}=s,u=Ur(l,o.shape,i,1,a),c=new sK(u);return e.runWebGLProgram(c,[r,o],"float32")}},yK=nt({opSnippet:Bi+"\n  return cos(x);\n",packedOpSnippet:`\n  vec4 result = cos(x);\n  bvec4 isNaN = isnan(x);\n  ${Jo}\n  return result;\n`}),bK={kernelName:pa,backendName:"webgl",kernelFunc:yK},xK=nt({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),wK={kernelName:fa,backendName:"webgl",kernelFunc:xK};class vK{constructor(t,e,s,r,o){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,l,u]=t,[c]=e,[h,d]=s;this.outputShape=[c,h,d,u];const p="bilinear"===r?1:0,[f,g]=[i-1+".0",l-1+".0"],[m,y,b]=h>1?[""+(i-1)/(h-1),"(y2-y1) * height_ratio",`y1*${f} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${f}`],[w,x,S]=d>1?[""+(l-1)/(d-1),"(x2-x1) * width_ratio",`x1*${g} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${g}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${w});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${y};\n        float width_scale = ${x};\n\n        float in_y = ${b};\n        if( in_y < 0.0 || in_y > ${f} ) {\n          setOutput(float(${o}));\n          return;\n        }\n        float in_x = ${S};\n        if( in_x < 0.0 || in_x > ${g} ) {\n          setOutput(float(${o}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const SK={kernelName:wc,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{image:r,boxes:o,boxInd:a}=t,{cropSize:i,method:l,extrapolationValue:u}=s,c=new vK(r.shape,o.shape,i,l,u);return e.runWebGLProgram(c,[r,o,a],"float32")}};var Rp=function(n){return n.Prod="*",n.Sum="+",n}(Rp||{});class cC{constructor(t,e,s,r){this.op=t,this.outputShape=e,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];const o=this.outputShape.length,i=s?this.op===Rp.Prod?"1.0":"0.0":`getX(${hC(o,"coords",this.op)})`,l=this.outputShape[this.outputShape.length-1];let u="",c="";s?(u=r?"end != "+(l-1):"end != 0",c=r?"end + 1":"end - 1"):(u=r?`end + pow2 < ${l}`:"end >= pow2",c=r?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${ft(o)} coords = getOutputCoords();\n        int end = ${dC(o,"coords",this.op)};\n        float val = ${i};\n        int pow2 = int(pow(2.0, index));\n        if (${u}) {\n          int idx = ${c};\n          ${dC(o,"coords",this.op)} = idx;\n          val ${this.op}= getX(${hC(o,"coords",this.op)});\n        }\n        setOutput(val);\n      }\n    `}}function hC(n,t,e){if(1===n)return`${t}`;if(2===n)return`${t}.x, ${t}.y`;if(3===n)return`${t}.x, ${t}.y, ${t}.z`;if(4===n)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw new Error(`Cumulative ${e} for rank ${n} is not yet supported`)}function dC(n,t,e){if(1===n)return`${t}`;if(2===n)return`${t}.y`;if(3===n)return`${t}.z`;if(4===n)return`${t}.w`;throw new Error(`Cumulative ${e} for rank ${n} is not yet supported`)}function pC(n,t,e,s,r,o){const a=t.shape.length,i=Et([s],a);let l=t;null!=i&&(l=An({inputs:{x:t},backend:e,attrs:{perm:i}}));const u=zt(1,a)[0];if(u!==a-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${s}`);const c=l.shape[u];let h=Qn({inputs:{x:l},backend:e});for(let d=0;d<=Math.ceil(Math.log2(c))-1;d++){const p=new cC(n,l.shape,!1,o),g=h;h=e.runWebGLProgram(p,[h],h.dtype,[[d]]),e.disposeIntermediateTensorInfo(g)}if(r){const d=new cC(n,l.shape,r,o),p=h;h=e.runWebGLProgram(d,[h],h.dtype),e.disposeIntermediateTensorInfo(p)}if(null!=i){const p=An({inputs:{x:h},backend:e,attrs:{perm:Hr(i)}});return e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(l),p}return h}const CK={kernelName:xc,backendName:"webgl",kernelFunc:function IK(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,exclusive:a,reverse:i}=s;return pC(Rp.Prod,r,e,o,a,i)}},kK={kernelName:rl,backendName:"webgl",kernelFunc:function NK(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,exclusive:a,reverse:i}=s;return pC(Rp.Sum,r,e,o,a,i)}},_K={kernelName:vc,backendName:"webgl",kernelFunc:function TK(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,weights:o}=t,{size:a,binaryOutput:i}=s;if(1===r.shape.length){const l=e.readSync(r.dataId),u=e.readSync(o.dataId),c=RI(l,u,o.dtype,o.shape,a);return e.makeTensorInfo([a],o.dtype,c)}if(2===r.shape.length){const l=e.bufferSync(r),u=e.bufferSync(o),c=DG(l,u,a,i);return e.makeTensorInfo(c.shape,o.dtype,c.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}};class EK{constructor(t,e,s){this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=s,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${e};\n      int offset_h = imod(h, ${e});\n      int in_w = w / ${e};\n      int offset_w = imod(w, ${e});\n      int offset_d = (offset_h * ${e} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const AK={kernelName:Sc,backendName:"webgl",kernelFunc:function $K(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockSize:o,dataFormat:a}=s,i=r.shape[0],h=("NHWC"===a?r.shape[1]:r.shape[2])*o,d=("NHWC"===a?r.shape[2]:r.shape[3])*o,p=("NHWC"===a?r.shape[3]:r.shape[1])/(o*o),g=new EK("NHWC"===a?[i,h,d,p]:[i,p,h,d],o,a);return e.runWebGLProgram(g,[r],r.dtype)}};class fC{constructor(t,e=!1,s=null,r=!1,o=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=Sn(this.outputShape.length);const a=t.filterHeight,i=t.filterWidth,l=t.outChannels/t.inChannels;let u="",c="";s&&(u=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${s}\n        }`:o?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${s}\n        }`:`\n          float activation(float x) {\n            ${s}\n          }\n        `,c="result = activation(result);");const h=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${u}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${l};\n        int q = d2 - d1 * ${l};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${a}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${i}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${h}\n        ${c}\n        setOutput(result);\n      }\n    `}}class mC{constructor(t,e=!1,s=null,r=!1,o=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=Sn(this.outputShape.length);const a=t.outChannels/t.inChannels,i=t.padInfo.left,l=t.strideWidth,u=t.dilationWidth,c=t.filterHeight,h=t.filterWidth,d=h;let p="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let y=0;y<h;y++)p+=`\n          vec4 xTexelC${2*y};\n          int xTexelC${2*y}Ready;\n          vec4 xTexelC${2*y+1};\n          int xTexelC${2*y+1}Ready;\n          vec4 xC${y};`;p+=`\n    for (int r = 0; r < ${c}; r++) {\n      `;for(let y=0;y<h;y++)p+=`\n          xTexelC${2*y} = vec4(0.0);\n          xTexelC${2*y}Ready = 0;\n          xTexelC${2*y+1} = vec4(0.0);\n          xTexelC${2*y+1}Ready = 0;\n          xC${y} = vec4(0.0);`;p+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let y=0;y<(d+1)/2;y++){const b=2*y;if(p+=`\n          xC = xCCorner + ${b*u};\n          `,1===l){if(b<h&&(i%2==1?(p+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {\n                  xTexelC${b} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${b}.zw = vec2(0.0);\n                  }\n                  xTexelC${b}Ready = 1;\n                }\n              `,p+=1===u&&b>0?`\n                xC${b} = vec4(xTexelC${b-2}.zw, xTexelC${b}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${b} = vec4(previous.zw, xTexelC${b}.xy);\n                  } else {\n                    xC${b} = vec4(0.0, 0.0, xTexelC${b}.xy);\n                  }\n                  `):p+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {\n                  xTexelC${b} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${b}.zw = vec2(0.0);\n                  }\n                  xTexelC${b}Ready = 1;\n                }\n\n                xC${b} = xTexelC${b};\n                `,b+1<h)){const w=i%2==0?rc(u):u;u%2==0&&i%2==1||u%2!=0&&i%2!=1?(p+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${w};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b+1}Ready == 0) {\n                    xTexelC${b+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${b+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${b+1}Ready = 1;\n                  }\n                  `,p+=u>1?`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${b+1} = vec4(previous.zw, xTexelC${b+1}.xy);\n                    } else {\n                     xC${b+1} = vec4(0.0, 0.0, xTexelC${b+1}.xy);\n                    }\n                    `:`\n                    xC${b+1} = vec4(xTexelC${b}.zw, xTexelC${b+1}.xy);\n                    `):p+=1===w?`\n                    xC${b+1} = xTexelC${b};\n                    `:`\n                    xCOffset = xC + ${w};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b+1}Ready == 0) {\n                      xTexelC${b+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${b+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${b+1}Ready = 1;\n                    }\n\n                    xC${b+1} = xTexelC${b+1};\n                    `}}else b<h&&(i%2==1?(p+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {\n                  xTexelC${b} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${b}.zw = vec2(0.0);\n                  }\n                  xTexelC${b}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${b+1}Ready == 0) {\n                  xTexelC${b+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${b+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${b+1}Ready = 1;\n                }\n\n                xC${b} = vec4(xTexelC${b}.zw, xTexelC${b+1}.zw);\n              `,b+1<h&&(p+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${b+1} = vec4(xTexelC${b+1}.xy, final.xy);\n                `)):(p+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {\n                  xTexelC${b} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${b}.zw = vec2(0.0);\n                  }\n                  xTexelC${b}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b+1}Ready == 0) {\n                  xTexelC${b+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${b+1}.zw = vec2(0.);\n                  }\n                  xTexelC${b+1}Ready = 1;\n                }\n\n                xC${b} = vec4(\n                  xTexelC${b}.xy, xTexelC${b+1}.xy);\n              `,b+1<h&&(p+=`\n                  xC${b+1} = vec4(xTexelC${b}.zw, xTexelC${b+1}.zw);\n                `)));b<h&&(p+=`\n            wTexel = getW(r, ${b}, d1, q);\n            dotProd += xC${b} * vec4(wTexel.xz, wTexel.xz);\n          `,b+1<h&&(p+=`\n              wTexel = getW(r, ${b+1}, d1, q);\n              dotProd += xC${b+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}p+="\n    }\n  ",p+="\n      }\n    ";let f="",g="";s&&(f=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${s}\n        }`:o?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${s}\n        }`:`vec4 activation(vec4 x) {\n          ${s}\n        }`,g="result = activation(result);");const m=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${f}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${a};\n        int q = d2 - d1 * ${a};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${p}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${m}\n        ${g}\n        setOutput(result);\n      }\n    `}}const DK={kernelName:ol,backendName:"webgl",kernelFunc:function RK(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:a,pad:i,dilations:l,dimRoundingMode:u}=s;let c=l;null==c&&(c=[1,1]),C(pn(a,c),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${a} and dilations '${c}'`);const h=an(r.shape,o.shape,a,c,i,u,!0);let d;return d=z().getBool("WEBGL_PACK_DEPTHWISECONV")&&h.strideWidth<=2&&h.outChannels/h.inChannels==1?new mC(h):new fC(h),e.runWebGLProgram(d,[r,o],"float32",[[h.padInfo.top,h.padInfo.left],[h.strideHeight,h.strideWidth],[h.dilationHeight,h.dilationWidth],[h.inHeight,h.inWidth]])}};class FK{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${t.outChannels/t.inChannels} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${t.strideHeight} - ${t.padInfo.top};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${t.strideWidth} - ${t.padInfo.left};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class OK{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,s=t.filterWidth,l=t.outChannels/t.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${e-1-t.padInfo.top}, ${s-1-t.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${s}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${s} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${l}; dm++) {\n              int d2 = d1 * ${l} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const PK={kernelName:Ic,backendName:"webgl",kernelFunc:function LK(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:o}=t,{strides:a,dilations:i,pad:l,dimRoundingMode:u,filterShape:c}=s,h=an(r.shape,c,a,i,l,u,!0),d=new FK(h);return e.runWebGLProgram(d,[r,o],"float32")}},zK={kernelName:Cc,backendName:"webgl",kernelFunc:function MK(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:o}=t,{strides:a,dilations:i,pad:l,dimRoundingMode:u,inputShape:c}=s,h=an(c,o.shape,a,i,l,u,!0),d=new OK(h);return e.runWebGLProgram(d,[r,o],"float32")}};class BK{constructor(t){this.variableNames=["X"],this.outputShape=[t,t],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const WK={kernelName:Nc,backendName:"webgl",kernelFunc:function VK(n){const{inputs:t,backend:e}=n,{x:s}=t,r=[...s.shape,...s.shape],o=j(s.shape),a=de({inputs:{x:s},backend:e,attrs:{shape:[o]}}),i=new BK(o),l=e.runWebGLProgram(i,[a],a.dtype),u=de({inputs:{x:l},backend:e,attrs:{shape:r}});return e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(l),u}};class UK{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;const{inHeight:e,inWidth:s,padInfo:r,strideHeight:o,strideWidth:a,filterHeight:i,filterWidth:l,dilationHeight:u,dilationWidth:c}=t,{top:h,left:d}=r;this.userCode=`\n      const ivec2 strides = ivec2(${o}, ${a});\n      const ivec2 pads = ivec2(${h}, ${d});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${i}; h++) {\n          int hIn = hBeg + h * ${u};\n\n          if (hIn >= 0 && hIn < ${e}) {\n            for (int w = 0; w < ${l}; w++) {\n              int wIn = wBeg + w * ${c};\n\n              if (wIn >= 0 && wIn < ${s}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const HK={kernelName:al,backendName:"webgl",kernelFunc:function GK(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:a,pad:i,dilations:l}=s,u=iu(r.shape,o.shape,a,i,"NHWC",l);let c;const h=new UK(u);c=e.runWebGLProgram(h,[r,o],"float32");const d=de({inputs:{x:c},backend:e,attrs:{shape:u.outShape}});return e.disposeIntermediateTensorInfo(c),d}},qK={kernelName:Ec,backendName:"webgl",kernelFunc:function jK(n){const{inputs:t,backend:e,attrs:s}=n,{equation:r}=s,o=t,{allDims:a,summedDims:i,idDims:l}=xg(r,o.length);vg(a.length,l,o);const{path:u,steps:c}=Sg(i,l),h=c.length;let d=null,p=a.length;const f=[];for(let g=0;g<h;++g){for(const m of c[g]){const{permutationIndices:y,expandDims:b}=wg(p,l[m]);let w;Ig(y)?w=o[m]:(w=An({inputs:{x:o[m]},backend:e,attrs:{perm:y}}),f.push(w));const x=w.shape.slice();for(let S=0;S<b.length;++S)x.splice(b[S],0,1);Xe(w.shape,x)||(w=de({inputs:{x:w},backend:e,attrs:{shape:x}}),f.push(w)),null===d?d=w:(d=cb({inputs:{a:w,b:d},backend:e}),f.push(d))}g<h-1&&(u[g]>=0&&(d=kp({inputs:{x:d},backend:e,attrs:{axis:u[g]-(a.length-p),keepDims:!1}}),f.push(d)),p--)}for(const g of f)g!==d&&e.disposeIntermediateTensorInfo(g);return d}},KK=nt({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),XK={kernelName:ga,backendName:"webgl",kernelFunc:KK},QK={kernelName:$c,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e}=n,{dy:s,y:r}=t,o=z().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new zi("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",s.shape,r.shape):new Qo("return (b >= 0.0) ? a : a * (b + 1.0);",s.shape,r.shape);return e.runWebGLProgram(o,[s,r],s.dtype)}},JK=yn({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:MG}),e6={kernelName:il,backendName:"webgl",kernelFunc:JK},n6=nt({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${hg};\n  float a1 = ${dg};\n  float a2 = ${pg};\n  float a3 = ${fg};\n  float a4 = ${mg};\n  float a5 = ${gg};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),s6={kernelName:ya,backendName:"webgl",kernelFunc:n6},gC=nt({opSnippet:Bi+"\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:zG,dtype:"float32"}),o6={kernelName:ba,backendName:"webgl",kernelFunc:gC};function fb(n){const{inputs:t,attrs:e,backend:s}=n,{dim:r}=e,{input:o}=t,a=o.shape.length,i=o.shape.slice();let l=r;return r<0&&(C(-(a+1)<=r,()=>`Axis must be in the interval [${-(a+1)}, ${a}]`),l=a+r+1),i.splice(l,0,1),de({inputs:{x:o},backend:s,attrs:{shape:i}})}const a6={kernelName:ll,backendName:"webgl",kernelFunc:fb},yC="return exp(x) - 1.0;",i6=nt({opSnippet:yC,packedOpSnippet:yC,cpuKernelImpl:BG}),l6={kernelName:xa,backendName:"webgl",kernelFunc:i6};class bC{constructor(t,e,s){this.variableNames=["real","imag"];const r=e[1];this.outputShape=e;const o=s?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,a=s?`${r}.0`:"1.0";let i;if("real"===t)i="return real * expR - imag * expI;";else{if("imag"!==t)throw new Error(`FFT component must be either "real" or "imag", got ${t}.`);i="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${o};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function xC(n,t,e){const s=e.texData.get(n.dataId),r=j(n.shape),o=n.shape[n.shape.length-1],i=de({inputs:{x:n},backend:e,attrs:{shape:[r/o,o]}}),l=i.shape,u=new bC("real",l,t),c=new bC("imag",l,t),h=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:l},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:l}],d=e.runWebGLProgram(u,h,"float32"),p=e.runWebGLProgram(c,h,"float32"),f=uo({inputs:{real:d,imag:p},backend:e});e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p);const g=de({inputs:{x:f},backend:e,attrs:{shape:n.shape}});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(f),g}const c6={kernelName:Ac,backendName:"webgl",kernelFunc:function u6(n){const{inputs:t,backend:e}=n,{input:s}=t;return xC(s,!1,e)}};class h6{constructor(t,e){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=t,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function tc(n){const{backend:t,attrs:e}=n,{shape:s,value:r}=e;let{dtype:o}=e;if(o=o||bo(r),"string"===o){const a=Ft(o,j(s));return a.fill(r),t.makeTensorInfo(s,o,a)}{const a=new h6(s,r);return t.runWebGLProgram(a,[],o,[[r]])}}const d6={kernelName:Rc,backendName:"webgl",kernelFunc:tc};class p6{constructor(t){this.variableNames=["Image"],this.outputShape=[];const e=t[2];this.outputShape=t,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${e} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${e}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const f6={kernelName:Dc,backendName:"webgl",kernelFunc:({inputs:n,backend:t})=>{const{image:e}=n,s=t,r=new p6(e.shape);return s.runWebGLProgram(r,[e],e.dtype)}},wC="return floor(x);",m6=nt({opSnippet:wC,packedOpSnippet:wC,cpuKernelImpl:VG}),g6={kernelName:wa,backendName:"webgl",kernelFunc:m6},y6=yn({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),b6={kernelName:va,backendName:"webgl",kernelFunc:y6};class x6{constructor(t){this.variableNames=["A"];const e=En(),[s,r]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${s}.0);\n\n        vec4 values = ${e.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class w6{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const e=En(),[s,r]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${s}.0);\n            vec4 values = ${e.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${e.output} = result;\n      }\n    `}}const v6={kernelName:mh,backendName:"webgl",kernelFunc:function S6(n){const{inputs:t,backend:e,attrs:s}=n;let{pixels:r}=t;const{numChannels:o}=s,a=typeof HTMLVideoElement<"u"&&r instanceof HTMLVideoElement,i=typeof HTMLImageElement<"u"&&r instanceof HTMLImageElement,[l,u]=a?[r.videoWidth,r.videoHeight]:[r.width,r.height],c=[u,l],h=[u,l,o];if(i||a){const g=z().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");(null==Wi||g!==mb)&&(mb=g,Wi=document.createElement("canvas").getContext("2d",{willReadFrequently:mb})),Wi.canvas.width=l,Wi.canvas.height=u,Wi.drawImage(r,0,0,l,u),r=Wi.canvas}const d=e.makeTensorInfo(c,"int32");e.texData.get(d.dataId).usage=Ss.PIXELS,e.gpgpu.uploadPixelDataToTexture(e.getTexture(d.dataId),r);const p=z().getBool("WEBGL_PACK")?new w6(h):new x6(h),f=e.runWebGLProgram(p,[d],"int32");return e.disposeData(d.dataId),f}};let Wi,mb=z().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");const C6={kernelName:Kl,backendName:"webgl",kernelFunc:function I6(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o,bias:a,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s,g=yr(c),m=an(r.shape,o.shape,l,h,u,d,!1,g);let y;const b=[],w=null!=a,x=null!=i,S="leakyrelu"===p,I=()=>{const T=[r,o],_=(E,L)=>{if("NCHW"===L&&1===E.shape.length&&1!==E.shape[0]){const B=de({inputs:{x:E},backend:e,attrs:{shape:[E.shape[0],1,1]}});return b.push(B),B}return E};if(w&&T.push(_(a,c)),x&&T.push(_(i,c)),S){const E=e.makeTensorInfo([],"float32",hr(f,"float32"));T.push(E),b.push(E)}return T};if(1!==m.filterHeight||1!==m.filterWidth||1!==m.dilationHeight||1!==m.dilationWidth||1!==m.strideHeight||1!==m.strideWidth||"SAME"!==m.padInfo.type&&"VALID"!==m.padInfo.type)if(m.strideWidth<=2&&"channelsLast"===g&&z().getBool("WEBGL_EXP_CONV")){const T=p?Yu(p,!0):null,_=new iC(m,w,T,x,S),E=[[m.padInfo.top,m.padInfo.left],[m.strideHeight,m.strideWidth],[m.dilationHeight,m.dilationWidth],[m.inHeight,m.inWidth]],L=I();y=e.runWebGLProgram(_,L,"float32",E)}else if(z().getBool("WEBGL_CONV_IM2COL"))y=uC({x:r,filter:o,convInfo:m,backend:e,bias:a,activation:p,preluActivationWeights:i,leakyreluAlpha:f});else{const T=p?Yu(p,!1):null,_=new aC(m,w,T,x,S),E=I();y=e.runWebGLProgram(_,E,"float32")}else y=lC({x:r,filter:o,convInfo:m,backend:e,bias:a,activation:p,preluActivationWeights:i,leakyreluAlpha:f});const k=de({inputs:{x:y},backend:e,attrs:{shape:m.outShape}});return b.push(y),b.forEach(T=>e.disposeIntermediateTensorInfo(T)),k}},k6={kernelName:Xl,backendName:"webgl",kernelFunc:function N6(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o,bias:a,preluActivationWeights:i}=t,{strides:l,pad:u,dilations:c,dimRoundingMode:h,activation:d,leakyreluAlpha:p}=s,f=[];let g=c;null==g&&(g=[1,1]),C(pn(l,g),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${g}'`);const m=an(r.shape,o.shape,l,g,u,h,!0),y=z().getBool("WEBGL_PACK_DEPTHWISECONV")&&m.strideWidth<=2&&m.outChannels/m.inChannels==1,b=d?Yu(d,y):null,w=[r,o],x=null!=a,S=null!=i,I="leakyrelu"===d;if(x&&w.push(a),S&&w.push(i),I){const E=e.makeTensorInfo([],"float32",hr(p,"float32"));w.push(E),f.push(E)}let k;k=y?new mC(m,x,b,S,I):new fC(m,x,b,S,I);const _=e.runWebGLProgram(k,w,"float32",[[m.padInfo.top,m.padInfo.left],[m.strideHeight,m.strideWidth],[m.dilationHeight,m.dilationWidth],[m.inHeight,m.inWidth]]);return f.forEach(E=>e.disposeIntermediateTensorInfo(E)),_}};class T6{constructor(t,e,s,r){this.sliceDim=t,this.strides=e,this.paramsShape=r,this.variableNames=["x","indices"],this.outputShape=s;const o=ft(s.length);let a="\n    int index;";for(let i=0;i<this.sliceDim;i++)a+=`\n          index = round(getIndices(coords[0], ${i}));\n          out_of_bounds = out_of_bounds || index < 0;\n          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[i]};\n          flattenIndex += index * ${this.strides[i]};`;this.userCode=`\n         void main() {\n          ${o} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n\n          ${a}\n\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `}}const E6={kernelName:Fc,backendName:"webgl",kernelFunc:function _6(n){const{inputs:t,backend:e}=n,{params:s,indices:r}=t,o=r.shape,a=o[o.length-1],i=j(s.shape),[l,u,c,h]=Eh(s,r),d=de({inputs:{x:r},backend:e,attrs:{shape:[u,a]}}),p=de({inputs:{x:s},backend:e,attrs:{shape:[j(s.shape)/c,c]}});if(e.shouldExecuteOnCPU([s,r])||"string"===s.dtype){const y=e.readSync(r.dataId),b=e.bufferSync(s),w=WG(y,b,s.dtype,u,a,c,h,s.shape,i);return e.makeTensorInfo(l,s.dtype,w.values)}const f=new T6(a,h,[u,c],s.shape),g=e.runWebGLProgram(f,[p,d],p.dtype),m=de({inputs:{x:g},backend:e,attrs:{shape:l}});return e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(g),m}};class $6{constructor(t,e){this.variableNames=["A","indices"],this.outputShape=e,this.rank=e.length;const s=ft(this.rank),r=function A6(n,t){const e=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let r=0;r<n.length;r++)s.push(2===r?"index":`${e[r]}`);return s.join()}(t);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${t[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${r}));\n      }\n    `}}function vC(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,indices:o}=t,{axis:a,batchDims:i}=s,l=Ue(a,r.shape)[0];if(z().get("DEBUG")){const b=e.readSync(o.dataId),w=r.shape[l];for(let x=0;x<b.length;++x){const S=b[x];C(S<=w-1&&S>=0,()=>`GatherV2: the index value ${S} is not in [0, ${w-1}]`)}}const u=kg(r,o,l,i),c=j(o.shape),h=[],d=de({inputs:{x:r},backend:e,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),p=de({inputs:{x:o},backend:e,attrs:{shape:[u.batchSize,c/u.batchSize]}});h.push(d),h.push(p);const f=[u.batchSize,u.outerSize,c/u.batchSize,u.sliceSize];if(e.shouldExecuteOnCPU([r,o])||"string"===r.dtype){const b=e.bufferSync(p),w=e.bufferSync(d),x=UG(w,b,f);return h.forEach(S=>e.disposeIntermediateTensorInfo(S)),e.makeTensorInfo(u.outputShape,x.dtype,x.values)}const g=new $6(d.shape,f),m=e.runWebGLProgram(g,[d,p],d.dtype);h.push(m);const y=de({inputs:{x:m},backend:e,attrs:{shape:u.outputShape}});return h.forEach(b=>e.disposeIntermediateTensorInfo(b)),y}const R6={kernelName:cl,backendName:"webgl",kernelFunc:vC},D6=yn({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:GG,dtype:"bool"}),F6={kernelName:hl,backendName:"webgl",kernelFunc:D6},O6=yn({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:HG}),L6={kernelName:Sa,backendName:"webgl",kernelFunc:O6},M6={kernelName:Oc,backendName:"webgl",kernelFunc:function P6(n){const{inputs:t,backend:e}=n,{input:s}=t;return xC(s,!0,e)}},z6=nt({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),B6={kernelName:Ca,backendName:"webgl",kernelFunc:z6},V6=nt({opSnippet:"return float(isinf(x));",dtype:"bool"}),W6={kernelName:Na,backendName:"webgl",kernelFunc:V6},U6=nt({opSnippet:"return float(isnan(x));",dtype:"bool"}),G6={kernelName:ka,backendName:"webgl",kernelFunc:U6},H6=yn({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:jG,dtype:"bool"}),j6={kernelName:pl,backendName:"webgl",kernelFunc:H6},q6=yn({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:qG,dtype:"bool"}),K6={kernelName:fl,backendName:"webgl",kernelFunc:q6},Z6={kernelName:Pc,backendName:"webgl",kernelFunc:function X6(n){const{backend:t,attrs:e}=n,{start:s,stop:r,num:o}=e,a=KG(s,r,o);return t.makeTensorInfo([a.length],"float32",a)}},Q6=nt({opSnippet:Bi+"\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:XG}),J6={kernelName:Ta,backendName:"webgl",kernelFunc:Q6},t5=nt({opSnippet:Bi+"\n  return log(1.0 + x);\n"}),n5={kernelName:_a,backendName:"webgl",kernelFunc:t5},s5=yn({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),r5={kernelName:ml,backendName:"webgl",kernelFunc:s5},o5=nt({opSnippet:"return float(!(x >= 1.0));"}),a5={kernelName:gl,backendName:"webgl",kernelFunc:o5},i5=yn({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),l5={kernelName:yl,backendName:"webgl",kernelFunc:i5};class u5{constructor(t,e,s,r,o){this.variableNames=["x"],this.outputShape=[];const a=e,i=t[3]-1;let l;this.outputShape=t;const u=`float(${s}) + float(${r}) * sum`;l=.5===o?`inversesqrt(${u})`:1===o?`1.0/(${u})`:`exp(log(${u}) * float(-${o}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${l};\n        setOutput(val);\n      }\n    `}}class c5{constructor(t,e,s,r,o){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=e,i=t[3]-1;let l;this.outputShape=t;const u=`float(${s}) + float(${r}) * sum`;l=.5===o?`inversesqrt(${u})`:1===o?`1.0/(${u})`:`exp(log(${u}) * float(-${o}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${l};\n        setOutput(result);\n      }\n    `}}const h5={kernelName:bl,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{depthRadius:o,bias:a,alpha:i,beta:l}=s,u=z().getBool("WEBGL_PACK_NORMALIZATION")?new c5(r.shape,o,a,i,l):new u5(r.shape,o,a,i,l);return e.runWebGLProgram(u,[r],r.dtype)}};class d5{constructor(t,e,s,r,o){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=s,this.alpha=r,this.beta=o,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${e})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${e} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${s});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${o})\n                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${o});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const p5={kernelName:Mc,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r,y:o,dy:a}=t,{depthRadius:i,bias:l,alpha:u,beta:c}=s,h=new d5(r.shape,i,l,u,c);return e.runWebGLProgram(h,[r,o,a],r.dtype)}};function SC(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{reductionIndices:o,keepDims:a}=s,i=r.shape.length,l=Ue(o,r.shape);let u=l;const c=Et(u,i),h=null!=c,d=e.shouldExecuteOnCPU([r]);let p=r;if(h){if(d){const w=e.texData.get(p.dataId).values,x=new Array(i);for(let k=0;k<x.length;k++)x[k]=r.shape[c[k]];const S=lb(w,r.shape,r.dtype,c,x);p=e.makeTensorInfo(x,r.dtype),e.texData.get(p.dataId).values=S}else p=Np(r,c,e);u=zt(u.length,i)}mn("max",u,i);const[f,g]=ln(p.shape,u);let y,m=f;if(a&&(m=Mt(f,l)),d){const w=e.texData.get(p.dataId).values,x=ZG(w,j(g),m,r.dtype);y=e.makeTensorInfo(m,r.dtype),e.texData.get(y.dataId).values=x}else y=function f5(n,t,e,s){const r=j(t),i=de({inputs:{x:n},attrs:{shape:[j(n.shape)/r,r]},backend:s}),l=ea(i,n.dtype,"max",s),u=de({inputs:{x:l},attrs:{shape:e},backend:s});return s.disposeIntermediateTensorInfo(i),s.disposeIntermediateTensorInfo(l),u}(p,g,m,e);return h&&e.disposeIntermediateTensorInfo(p),y}const m5={kernelName:xl,backendName:"webgl",kernelFunc:SC},b5=yn({opSnippet:ub+"\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+Jo+"\n  return result;\n",cpuKernelImpl:YG}),x5={kernelName:Ea,backendName:"webgl",kernelFunc:b5},v5={kernelName:wl,backendName:"webgl",kernelFunc:function w5(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t;Xu(r,"maxPool");const{filterSize:o,strides:a,pad:i,dimRoundingMode:l}=s;C(pn(a,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '1'`);const c=gs(r.shape,o,a,1,i,l);if(1===c.filterWidth&&1===c.filterHeight&&Xe(c.inShape,c.outShape))return Qn({inputs:{x:r},backend:e});const h=new Qu(c,"max",!1);return e.runWebGLProgram(h,[r],r.dtype)}},I5={kernelName:vl,backendName:"webgl",kernelFunc:function S5(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{filterSize:o,strides:a,pad:i,dataFormat:l,dimRoundingMode:u}=s,h=gr(r.shape,o,a,[1,1,1],i,u,l),d=new hb(h,"max",!1);return e.runWebGLProgram(d,[r],r.dtype)}};class C5{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const o=t.effectiveFilterHeight,a=t.effectiveFilterWidth;this.userCode=`\n      const ivec2 pads = ivec2(${o-1-t.padInfo.top}, ${a-1-t.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n          wR += ${t.dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${o*a-1} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class N5{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const l=t.effectiveFilterDepth,u=t.effectiveFilterHeight,c=t.effectiveFilterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${l-1-t.padInfo.front}, ${u-1-t.padInfo.top}, ${c-1-t.padInfo.left});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${l};\n           wD += ${t.dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${t.strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${u};\n              wR += ${t.dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${c};\n                wC += ${t.dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${l*u*c-1} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${u} * ${c} +\n                  wR * ${c} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const T5={kernelName:Bc,backendName:"webgl",kernelFunc:function k5(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o}=t,a=o,{filterSize:i,strides:l,pad:u,dimRoundingMode:c}=s,d=gr(a.shape,i,l,[1,1,1],u,c),p=new hb(d,"max",!0),f=e.runWebGLProgram(p,[a],a.dtype),g=new N5(d),m=e.runWebGLProgram(g,[r,f],a.dtype);return e.disposeIntermediateTensorInfo(f),m}},E5={kernelName:zc,backendName:"webgl",kernelFunc:function _5(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o,output:a}=t,i=o;Xu([o,a],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,d=gs(i.shape,l,u,1,c,h),f=new Qu(d,"max",!0),g=e.runWebGLProgram(f,[i],i.dtype),m=new C5(d),y=e.runWebGLProgram(m,[r,g],i.dtype);return e.disposeIntermediateTensorInfo(g),y}},A5={kernelName:Vc,backendName:"webgl",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{x:s}=n,{filterSize:r,strides:o,pad:a,includeBatchInIndex:i}=t,l=e;C(4===s.shape.length,()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`);const u=[1,1];C(pn(o,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '${u}'`);const c=gs(s.shape,r,o,u,a),[h,d]=function $5(n,t,e,s){let r=new Qu(e,"max",!1);const o=s.runWebGLProgram(r,[n],"float32");return r=new Qu(e,"max",!0,!0,t),[o,s.runWebGLProgram(r,[n],"float32")]}(s,i,c,l);return[h,d]}},D5={kernelName:Sl,backendName:"webgl",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{x:s}=n,{keepDims:r,axis:o}=t,a=e,i=s.shape.length,l=Ue(o,s.shape);let u=l;const c=Et(u,i),h=null!=c,d=a.shouldExecuteOnCPU([s]),p=[];let f=s;if(h){if(d){const x=a.texData.get(f.dataId).values,S=new Array(i);for(let T=0;T<S.length;T++)S[T]=s.shape[c[T]];const I=lb(x,s.shape,s.dtype,c,S);f=a.makeTensorInfo(S,s.dtype),a.texData.get(f.dataId).values=I}else f=Np(s,c,a);p.push(f),u=zt(u.length,i)}mn("sum",u,i);const[g,m]=ln(f.shape,u);let y=g;r&&(y=Mt(g,l));const b=function R5(n,t,e,s){const r=j(t),i=de({inputs:{x:n},attrs:{shape:[j(n.shape)/r,r]},backend:s}),l=ea(i,"float32","mean",s),u=de({inputs:{x:l},attrs:{shape:e},backend:s});return s.disposeIntermediateTensorInfo(i),s.disposeIntermediateTensorInfo(l),u}(f,m,y,a);for(const w of p)a.disposeIntermediateTensorInfo(w);return b}},O5={kernelName:Il,backendName:"webgl",kernelFunc:function F5(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s,i=r.shape.length,l=Ue(o,r.shape);let u=l;const c=Et(u,i);let h=r;null!=c&&(h=An({inputs:{x:r},backend:e,attrs:{perm:c}}),u=zt(u.length,r.shape.length)),mn("min",u,i);const[d,p]=ln(h.shape,u),g=de({inputs:{x:h},backend:e,attrs:{shape:[-1,j(p)]}}),m=ea(g,g.dtype,"min",e);let y;return y=de(a?{inputs:{x:m},backend:e,attrs:{shape:Mt(d,l)}}:{inputs:{x:m},backend:e,attrs:{shape:d}}),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(m),null!=c&&e.disposeIntermediateTensorInfo(h),y}},M5=yn({opSnippet:ub+"\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+Jo+"\n  return result;\n",cpuKernelImpl:QG}),z5={kernelName:$a,backendName:"webgl",kernelFunc:M5};class B5{constructor(t,e,s){this.variableNames=["x"],this.outputShape=e.map((c,h)=>c[0]+t[h]+c[1]);const r=t.length,o=ft(r),a=e.map(c=>c[0]).join(","),i=e.map((c,h)=>c[0]+t[h]).join(","),l=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r),u="reflect"===s?0:1;this.userCode=1!==r?`\n      ${o} start = ${o}(${a});\n      ${o} end = ${o}(${i});\n\n      void main() {\n        ${o} outC = getOutputCoords();\n        for (int i = 0; i < ${r}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${u};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};\n          }\n        }\n        ${o} coords = outC - start;\n        setOutput(getX(${l}));\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${u};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${u};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class V5{constructor(t,e,s){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map((f,g)=>f[0]+t[g]+f[1]);const r=t.length,o=ft(r),a=e.map(f=>f[0]).join(","),i=e.map((f,g)=>f[0]+t[g]).join(","),l=$n("rc",r),u=$n("source",r),c=`${l[r-1]} < ${this.outputShape[r-1]}`,h=1===r?"source":`vec2(${u.slice(-2).join()})`,d="reflect"===s?0:1;let p="";if(1===r){const f=`\n        ${o} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${d};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${d};\n        }\n        source -= start;\n      `;p=`\n        ${o} rc = outputLoc;\n        ${f}\n        result[0] = getChannel(getX(${u.join()}), ${h});\n        ${l[r-1]} += 1;\n        if(${c}) {\n          ${f}\n          result[1] = getChannel(getX(${u.join()}), ${h});\n        }\n      `}else{const f=`\n        ${o} source = rc;\n        ${o} lt = ${o}(lessThan(source, start));\n        ${o} gte = ${o}(greaterThanEqual(source, end));\n        ${o} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${d}) +\n                gte * ((end - 1) * 2 - source + ${d});\n        source -= start;\n      `;p=`\n        ${o} rc = outputLoc;\n        ${f}\n        result[0] = getChannel(getX(${u.join()}), ${h});\n        ${l[r-1]} += 1;\n        if(${c}) {\n          ${f}\n          result[1] = getChannel(getX(${u.join()}), ${h});\n        }\n        rc = outputLoc;\n        ${l[r-2]} += 1;\n        if(${l[r-2]} < ${this.outputShape[r-2]}) {\n          ${f}\n          result[2] = getChannel(getX(${u.join()}), ${h});\n          ${l[r-1]} += 1;\n          if(${c}) {\n            ${f}\n            result[3] = getChannel(getX(${u.join()}), ${h});\n          }\n        }\n      `}this.userCode=`\n      const ${o} start = ${o}(${a});\n      const ${o} end = ${o}(${i});\n\n      void main() {\n        ${o} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const W5={kernelName:Cl,backendName:"webgl",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s}=n,{paddings:r,mode:o}=e,a=z().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new V5(s.shape,r,o):new B5(s.shape,r,o);return t.runWebGLProgram(a,[s],s.dtype)}},H5=yn({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  bvec4 isNaN = equal(b, vec4(0.0));\n  "+Jo+"\n  return result;\n"}),j5={kernelName:Aa,backendName:"webgl",kernelFunc:H5};class q5{constructor(t,e,s){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[t,s],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${e-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${e-1}));\n      }\n    `}}const IC=yn({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),K5={kernelName:ma,backendName:"webgl",kernelFunc:IC},CC="return a - b;",NC=yn({opSnippet:CC,packedOpSnippet:CC,supportsComplex:!0,cpuKernelImpl:xH}),X5={kernelName:qa,backendName:"webgl",kernelFunc:NC};function kC(n){const{inputs:t,backend:e,attrs:s}=n,{logits:r}=t,{dim:o}=s,a=Ue([o],r.shape),i=SC({inputs:{x:r},backend:e,attrs:{reductionIndices:a,keepDims:!1}}),l=Mt(i.shape,a),u=de({inputs:{x:i},backend:e,attrs:{shape:l}}),c=NC({inputs:{a:r,b:u},backend:e}),h=gC({inputs:{x:c},backend:e}),d=kp({inputs:{x:h},backend:e,attrs:{axis:a,keepDims:!1}}),p=de({inputs:{x:d},backend:e,attrs:{shape:l}}),f=IC({inputs:{a:h,b:p},backend:e});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p),f}const Z5={kernelName:Wl,backendName:"webgl",kernelFunc:kC},Q5={kernelName:Wc,backendName:"webgl",kernelFunc:function Y5(n){const{inputs:t,backend:e,attrs:s}=n,{logits:r}=t,{numSamples:o,seed:a,normalized:i}=s,l=i?r:kC({inputs:{logits:r},backend:e,attrs:{dim:r.shape.length-1}}),h=new q5(l.shape[0],l.shape[1],o),p=e.runWebGLProgram(h,[l],"int32",[[a]]);return i||e.disposeIntermediateTensorInfo(l),p}},J5=ps+"\n  return -x;\n",nX={kernelName:Nl,backendName:"webgl",kernelFunc:function tX(n){const{inputs:t,backend:e}=n,{x:s}=t;if(e.shouldExecuteOnCPU([s])){const o=e.texData.get(s.dataId),[a,i]=eH(o.values,s.shape,s.dtype);return e.makeTensorInfo(i,s.dtype,a)}let r;return r=z().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new lo(s.shape,"\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"):new ir(s.shape,J5),e.runWebGLProgram(r,[s],s.dtype)}},sX=ud,oX={kernelName:Uc,backendName:"webgl",kernelFunc:function rX(n){ts("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:o}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:l}=s,u=e.readSync(r.dataId),c=e.readSync(o.dataId),{selectedIndices:h}=sX(u,c,a,i,l);return e.makeTensorInfo([h.length],"int32",new Int32Array(h))}},aX=cd,lX={kernelName:Gc,backendName:"webgl",kernelFunc:function iX(n){ts("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:o}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:l,padToMaxOutputSize:u}=s,c=e.readSync(r.dataId),h=e.readSync(o.dataId),{selectedIndices:d,validOutputs:p}=aX(c,h,a,i,l,u);return[e.makeTensorInfo([d.length],"int32",new Int32Array(d)),e.makeTensorInfo([],"int32",new Int32Array([p]))]}},uX=hd,hX={kernelName:Hc,backendName:"webgl",kernelFunc:function cX(n){ts("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:o}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:l,softNmsSigma:u}=s,c=e.readSync(r.dataId),h=e.readSync(o.dataId),d=a,p=i,f=l,g=u,{selectedIndices:m,selectedScores:y}=uX(c,h,d,p,f,g);return[e.makeTensorInfo([m.length],"int32",new Int32Array(m)),e.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};class dX{constructor(t,e,s,r){this.variableNames=["indices"],this.outputShape=[t,e],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${s}),\n                      float(index == coords.y)));\n      }\n    `}}const pX={kernelName:_l,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{indices:r}=t,{dtype:o,depth:a,onValue:i,offValue:l}=s,u=j(r.shape),c=new dX(u,a,i,l),h=de({inputs:{x:r},backend:e,attrs:{shape:[u]}}),d=e.runWebGLProgram(c,[h],o);e.disposeIntermediateTensorInfo(h);const f=de({inputs:{x:d},backend:e,attrs:{shape:[...r.shape,a]}});return e.disposeIntermediateTensorInfo(d),f}};function Dp(n){const{inputs:t,backend:e}=n,{x:s}=t;if("complex64"===s.dtype){const r=Ju({inputs:{input:s},backend:e}),o=Dp({inputs:{x:r},backend:e}),a=$p({inputs:{input:s},backend:e}),i=Dp({inputs:{x:a},backend:e}),l=uo({inputs:{real:o,imag:i},backend:e});return e.disposeIntermediateTensorInfo(r),e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(i),l}return tc({attrs:{shape:s.shape,dtype:s.dtype,value:"string"===s.dtype?"":0},backend:e})}const fX={kernelName:jl,backendName:"webgl",kernelFunc:Dp},mX={kernelName:Tl,backendName:"webgl",kernelFunc:function TC(n){const{inputs:t,backend:e}=n,{x:s}=t;if("string"===s.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===s.dtype){const r=Ju({inputs:{input:s},backend:e}),o=TC({inputs:{x:r},backend:e}),a=$p({inputs:{input:s},backend:e}),i=Dp({inputs:{x:a},backend:e}),l=uo({inputs:{real:o,imag:i},backend:e});return e.disposeIntermediateTensorInfo(r),e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(i),l}return tc({attrs:{shape:s.shape,dtype:s.dtype,value:1},backend:e})}},yX={kernelName:El,backendName:"webgl",kernelFunc:function gX(n){const{inputs:t,backend:e,attrs:s}=n,{axis:r}=s;if(1===t.length)return fb({inputs:{input:t[0]},backend:e,attrs:{dim:r}});const o=t[0].shape,a=t[0].dtype;t.forEach(c=>{cn(o,c.shape,"All tensors passed to stack must have matching shapes"),C(a===c.dtype,()=>"All tensors passed to stack must have matching dtypes")});const i=[],u=oC({inputs:t.map(c=>{const h=fb({inputs:{input:c},backend:e,attrs:{dim:r}});return i.push(h),h}),backend:e,attrs:{axis:r}});return i.forEach(c=>e.disposeIntermediateTensorInfo(c)),u}};class bX{constructor(t,e,s){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=e.map((u,c)=>u[0]+t[c]+u[1]);const r=t.length,o=ft(r),a=e.map(u=>u[0]).join(","),i=e.map((u,c)=>u[0]+t[c]).join(","),l=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${o} start = ${o}(${a});\n      ${o} end = ${o}(${i});\n\n      void main() {\n        ${o} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${o} coords = outC - start;\n          setOutput(getX(${l}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class xX{constructor(t,e,s){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=e.map((g,m)=>g[0]+t[m]+g[1]);const r=t.length,o=ft(r),a=e.map(g=>g[0]).join(","),i=e.map((g,m)=>g[0]+t[m]).join(","),l=$n("rc",r),u=$n("source",r),c=`${l[r-1]} < ${this.outputShape[r-1]}`,h=1===r?"source":`vec2(${u.slice(-2).join()})`,d=[`${o} rc = outputLoc;`,`${l[r-1]} += 1;\n       if(${c}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${l[r-2]} += 1;\n       if(${l[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${l[r-1]} += 1;\n         if(${c}) {`],p=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let f="";for(let g=0,m=1===r?2:4;g<m;g++)f+=`\n        ${d[g]}\n        if (${p}) {\n          result[${g}] = float(value);\n        } else {\n          ${o} source = rc - start;\n          result[${g}] = getChannel(getX(${u.join()}), ${h});\n        }\n      `;f+=1===r?"} ":"}}",this.userCode=`\n      const ${o} start = ${o}(${a});\n      const ${o} end = ${o}(${i});\n\n      void main() {\n        ${o} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${f}\n        setOutput(result);\n      }\n    `}}const _C=n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{paddings:o,constantValue:a}=s;if(0===j(r.shape))return tc({backend:e,attrs:{shape:o.map((c,h)=>c[0]+r.shape[h]+c[1]),value:a,dtype:r.dtype}});const i=z().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new xX(r.shape,o,a):new bX(r.shape,o,a);return e.runWebGLProgram(i,[r],r.dtype,[[a]])},wX={kernelName:$l,backendName:"webgl",kernelFunc:_C},IX=yn({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  bvec4 isNaN1 = lessThan(a, vec4(0.0));\n  bvec4 isNaN2 = lessThan(floor(b), b);\n  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);\n  "+Jo+"\n  return result;\n"}),CX={kernelName:Da,backendName:"webgl",kernelFunc:IX},kX={kernelName:Rl,backendName:"webgl",kernelFunc:function NX(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s,i=r.shape.length,l=[],u=Ue(o,r.shape);let c=u;const h=Et(c,i);let p,d=r;if(null!=h&&(d=An({inputs:{x:r},backend:e,attrs:{perm:h}}),c=zt(c.length,i),l.push(d)),mn("prod",c,i),e.shouldExecuteOnCPU([d])){const f=e.texData.get(d.dataId).values,{outVals:g,outShape:m,outDtype:y}=nH(d.shape,d.dtype,f,c);p=e.makeTensorInfo(m,y,g)}else{const[f,g]=ln(d.shape,c),m=j(g),y=de({inputs:{x:d},backend:e,attrs:{shape:[-1,m]}}),w=ea(y,vh(r.dtype),"prod",e);p=de({inputs:{x:w},backend:e,attrs:{shape:f}}),l.push(y),l.push(w)}if(a){l.push(p);const f=Mt(p.shape,u);p=de({inputs:{x:p},backend:e,attrs:{shape:f}})}return l.forEach(f=>e.disposeIntermediateTensorInfo(f)),p}},_X={kernelName:jc,backendName:"webgl",kernelFunc:function TX(n){const{inputs:t,backend:e,attrs:s}=n,{paramsNestedSplits:r,paramsDenseValues:o,indices:a}=t,{outputRaggedRank:i}=s,l=r.map(y=>e.readSync(y.dataId)),u=r.map(y=>y.shape),c=e.readSync(o.dataId),h=e.readSync(a.dataId),[d,p,f]=sH(l,u,c,o.shape,o.dtype,h,a.shape,i),g=d.map(y=>e.makeTensorInfo([y.length],"int32",y)),m=e.makeTensorInfo(f,o.dtype,p);return g.concat([m])}},$X={kernelName:qc,backendName:"webgl",kernelFunc:function EX(n){const{inputs:t,backend:e}=n,{starts:s,limits:r,deltas:o}=t,a=e.readSync(s.dataId),i=e.readSync(r.dataId),l=e.readSync(o.dataId),[u,c]=rH(a,s.shape,s.dtype,i,r.shape,l,o.shape);return[e.makeTensorInfo([u.length],"int32",u),e.makeTensorInfo([c.length],s.dtype,c)]}},RX={kernelName:Kc,backendName:"webgl",kernelFunc:function AX(n){const{inputs:t,backend:e,attrs:s}=n,{shape:r,values:o,defaultValue:a,rowPartitionTensors:i}=t,{rowPartitionTypes:l}=s,u=e.readSync(r.dataId),c=e.readSync(o.dataId),h=e.readSync(a.dataId),d=i.map(m=>e.readSync(m.dataId)),p=i.map(m=>m.shape),[f,g]=oH(u,r.shape,c,o.shape,o.dtype,h,a.shape,d,p,l);return e.makeTensorInfo(f,o.dtype,g)}},EC=n=>{const{backend:t,attrs:e}=n,{start:s,stop:r,step:o,dtype:a}=e,i=aH(s,r,o,a);return t.makeTensorInfo([i.length],a,i)},DX={kernelName:Xc,backendName:"webgl",kernelFunc:EC},FX=nt({opSnippet:"return 1.0 / x;"}),OX={kernelName:Fa,backendName:"webgl",kernelFunc:FX},PX=nt({opSnippet:ps+"\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),MX={kernelName:Oa,backendName:"webgl",kernelFunc:PX},BX=nt({opSnippet:ps+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),VX={kernelName:La,backendName:"webgl",kernelFunc:BX};class WX{constructor(t,e,s,r,o){this.variableNames=["A"],this.outputShape=[];const[a,i,l,u]=t;this.outputShape=[a,e,s,u];const c=[r&&e>1?i-1:i,r&&s>1?l-1:l],h=[r&&e>1?e-1:e,r&&s>1?s-1:s];let d;d=o?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${c[0]/h[0]},\n          ${c[1]/h[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${l}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${d};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class UX{constructor(t,e,s,r,o){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,l,u]=t;this.outputShape=[a,e,s,u];const c=[r&&e>1?i-1:i,r&&s>1?l-1:l],h=[r&&e>1?e-1:e,r&&s>1?s-1:s];let d;d=o?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${c[0]/h[0]},\n          ${c[1]/h[1]},\n          ${c[1]/h[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${l}.0,\n                                     ${l}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${d};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${s-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const HX={kernelName:Ol,backendName:"webgl",kernelFunc:function GX(n){const{inputs:t,backend:e,attrs:s}=n,{images:r}=t,{alignCorners:o,halfPixelCenters:a,size:i}=s,[l,u]=i,c=z().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new UX(r.shape,l,u,o,a):new WX(r.shape,l,u,o,a);return e.runWebGLProgram(c,[r],"float32")}};class jX{constructor(t,e,s){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e;const[,r,o]=e,[,a,i]=t,l=[s&&a>1?r-1:r,s&&i>1?o-1:o],u=[s&&a>1?a-1:a,s&&i>1?i-1:i],c=l[0]/u[0],h=l[1]/u[1],d=1/c,p=1/h,f=2*Math.ceil(d)+2,g=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${c});\n        const float widthScale = float(${h});\n\n        const float invHeightScale = float(${d});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${f});\n        const int winWidth = int(${g});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${o-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const KX={kernelName:Qc,backendName:"webgl",kernelFunc:function qX(n){const{inputs:t,backend:e,attrs:s}=n,{images:r,dy:o}=t,{alignCorners:a}=s,i=new jX(o.shape,r.shape,a);return e.runWebGLProgram(i,[o],o.dtype)}};class XX{constructor(t,e,s,r,o){this.variableNames=["A"],this.outputShape=[];const[a,i,l,u]=t;this.outputShape=[a,e,s,u];const c=[r&&e>1?i-1:i,r&&s>1?l-1:l],h=[r&&e>1?e-1:e,r&&s>1?s-1:s];let p;p=o?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${c[0]/h[0]},\n          ${c[1]/h[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${l}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${r?"0.5":"0.0"})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class ZX{constructor(t,e,s,r,o){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,l,u]=t;this.outputShape=[a,e,s,u];const c=[r&&e>1?i-1:i,r&&s>1?l-1:l],h=[r&&e>1?e-1:e,r&&s>1?s-1:s];let p;p=o?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${c[0]/h[0]},\n          ${c[1]/h[1]},\n          ${c[1]/h[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${l}.0,\n                                     ${l}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${r?"0.5":"0.0"})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${s-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const QX={kernelName:Fl,backendName:"webgl",kernelFunc:function YX(n){const{inputs:t,backend:e,attrs:s}=n,{images:r}=t,{alignCorners:o,halfPixelCenters:a,size:i}=s,[l,u]=i,c=z().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new ZX(r.shape,l,u,o,a):new XX(r.shape,l,u,o,a);return e.runWebGLProgram(c,[r],r.dtype)}};class JX{constructor(t,e,s){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e;const[,r,o]=e,[,a,i]=t,l=[s&&a>1?r-1:r,s&&i>1?o-1:o],u=[s&&a>1?a-1:a,s&&i>1?i-1:i],c=l[0]/u[0],h=l[1]/u[1],d=1/c,p=1/h,f=2*Math.ceil(d)+2,g=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${c});\n        const float widthScale = float(${h});\n\n        const float invHeightScale = float(${d});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${f});\n        const int winWidth = int(${g});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${l[0]}) *\n                (float(dyR) / float(${u[0]}));\n\n            float sourceFracCol =\n                float(${l[1]}) *\n                  (float(dyC) / float(${u[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${s} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${o}) - 1),\n                ${s} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const t8={kernelName:Yc,backendName:"webgl",kernelFunc:function e8(n){const{inputs:t,backend:e,attrs:s}=n,{images:r,dy:o}=t,{alignCorners:a}=s,i=new JX(o.shape,r.shape,a);return e.runWebGLProgram(i,[o],o.dtype)}};class n8{constructor(t,e){this.variableNames=["x"];const s=t.length;if(s>4)throw new Error(`WebGL backend: Reverse of rank-${s} tensor is not yet supported`);if(this.outputShape=t,1===s)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${t[0]} - coord - 1));\n        }\n      `);const o=t.map((i,l)=>(i=>-1!==e.indexOf(i)&&1!==t[i]?`${t[i]} - coords[${i}] - 1`:`coords[${i}]`)(l)).join(","),a=ft(s);this.userCode=`\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${o}));\n      }\n    `}}class s8{constructor(t,e){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const s=t.length;if(s>4)throw new Error(`WebGL backend: Reverse of rank-${s} tensor is not yet supported`);this.outputShape=t;const r=$n("rc",s),o=`${r[s-1]} + 1 < ${this.outputShape[s-1]}`,a=`${r[s-2]} + 1 < ${this.outputShape[s-2]}`,i=ft(s);function d(f){const g=t.map((b,w)=>function p(f,g){return-1!==e.indexOf(f)&&1!==t[f]?`${t[f]} - ${g[f]} - 1`:`${g[f]}`}(w,f));return`getChannel(getX(${g.join(",")}), vec2(${g.slice(-2).join(",")}))`}this.userCode=1===s?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${t[0]} - rc - 1),\n            ${t[0]} - rc - 1);\n          if(${o}){\n              result.g = getChannel(getX(${t[0]} - (rc  + 1) - 1),\n                ${t[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function l(f){return d(f)}(r.slice())};\n          if(${o}){\n            result.g = ${function u(f){return f[s-1]="("+f[s-1]+" + 1)",d(f)}(r.slice())};\n          }\n          if(${a}) {\n            result.b = ${function c(f){return f[s-2]="("+f[s-2]+" + 1)",d(f)}(r.slice())};\n            if(${o}) {\n              result.a = ${function h(f){return f[s-1]="("+f[s-1]+" + 1)",f[s-2]="("+f[s-2]+" + 1)",d(f)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const o8={kernelName:Ll,backendName:"webgl",kernelFunc:function r8(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{dims:o}=s,a=r.shape.length,i=Ue(o,r.shape);if(0===a)return Qn({inputs:{x:r},backend:e});const l=z().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new s8(r.shape,i):new n8(r.shape,i);return e.runWebGLProgram(l,[r],r.dtype)}};class a8{constructor(t,e){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const s=t[1],r=t[2];this.outputShape=t;let o="";o="number"==typeof e?`float outputValue = ${e.toFixed(2)};`:`\n        vec3 fill = vec3(${e.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${o}\n          if(coordX >= 0 && coordX < ${r} && coordY >= 0 && coordY < ${s}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const i8={kernelName:gh,backendName:"webgl",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{image:s}=n,{radians:r,fillValue:o,center:a}=t,i=e,l=new a8(s.shape,o),[u,c]=lg(a,s.shape[1],s.shape[2]),h=[[u,c,Math.sin(r),Math.cos(r)]];return i.runWebGLProgram(l,[s],s.dtype,h)}},l8=nt({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),u8={kernelName:Pa,backendName:"webgl",kernelFunc:l8},c8=nt({opSnippet:"return inversesqrt(x);",cpuKernelImpl:iH}),h8={kernelName:Ma,backendName:"webgl",kernelFunc:c8};class gb{constructor(t,e,s,r,o,a,i=!0,l=!1){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const u=ft(o.length),c=ft(a.length);let h="";1===s?h="i":2===s&&(h="i, j");let p="";1===r?p="i":2===r&&(p="i, coords[1]");let g="";l&&(g="coords[0], coords[1]"),this.userCode=`\n        ${u} strides = ${u}(${o});\n\n        void main() {\n          ${c} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${t}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${e}; j++) {\n              int index = round(getIndices(${h}));\n              flattenedIndex += index * ${e>1?"strides[j]":"strides"};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += getUpdates(${p});\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(${g}), sum, float(found)));\n        }\n      `}}class d8{constructor(t,e,s,r,o,a,i=!0,l=!1){this.variableNames=["updates","indices","defaultValue"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=a;const u=ft(o.length),c=ft(a.length);let h="";1===s?h="i":2===s&&(h="i, j");let p="";1===r?p="i":2===r&&(p="i, coords[1]");let g="";l&&(g="coords[0], coords[1]"),this.userCode=`\n        ${u} strides = ${u}(${o});\n\n        void main() {\n          ${c} coords = getOutputCoords();\n          vec4 sum = vec4(0.);\n          vec4 found = vec4(0.);\n          for (int i = 0; i < ${t}; i+=2) {\n            ivec2 flattenedIndex = ivec2(0);\n            for (int j = 0; j < ${e}; j+=2) {\n              ivec4 index = round(getIndices(${h}));\n              flattenedIndex += index.xz * ${e>1?"strides[j]":"strides"};\n              if (j + 1 < ${e}) {\n                flattenedIndex += index.yw * ${e>1?"strides[j + 1]":"strides"};\n              }\n            }\n            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||\n                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {\n              vec4 updVals = getUpdates(${p});\n              if (flattenedIndex[0] == coords[0]) {\n                sum.xy += updVals.xy;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[0] == coords[0] + 1) {\n                sum.zw += updVals.xy;\n                found.zw = vec2(1.);\n              }\n              if (flattenedIndex[1] == coords[0]) {\n                sum.xy += updVals.zw;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[1] == coords[0] + 1) {\n                sum.zw += updVals.zw;\n                found.zw = vec2(1.);\n              }\n            }\n          }\n          setOutput(mix(getDefaultValue(${g}), sum, found));\n        }\n      `}}const f8={kernelName:Jc,backendName:"webgl",kernelFunc:function p8(n){const{inputs:t,backend:e,attrs:s}=n,{indices:r,updates:o}=t,{shape:a}=s,{sliceRank:i,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=Vr(0,r,a),d=[h/u,u];if(0===h)return e.makeTensorInfo(a,r.dtype);const p=de({inputs:{x:r},backend:e,attrs:{shape:[l,i]}}),f=de({inputs:{x:o},backend:e,attrs:{shape:[l,u]}}),g=e.makeTensorInfo([],"float32",new Float32Array([0]));let m;m=z().getBool("WEBGL_PACK")?new d8(l,i,p.shape.length,f.shape.length,c,d):new gb(l,i,p.shape.length,f.shape.length,c,d);const y=e.runWebGLProgram(m,[f,p,g],f.dtype),b=de({inputs:{x:y},backend:e,attrs:{shape:a}});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(y),e.disposeIntermediateTensorInfo(g),b}};class m8{constructor(t,e,s,r){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[t,s];const a=`for (int i = 0; i < ${Math.ceil(Math.log2(e+1))}; ++i) { if (left >= right) break;`,i=2===z().getNumber("WEBGL_VERSION")?"while (left < right) {":a;this.userCode=`\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${i}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${"left"===r?"<":"<="} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `}}const y8={kernelName:th,backendName:"webgl",kernelFunc:function g8(n){const{inputs:t,backend:e,attrs:s}=n,{sortedSequence:r,values:o}=t,{side:a}=s,i=new m8(r.shape[0],r.shape[1],o.shape[1],a);return e.runWebGLProgram(i,[r,o],"int32",[[r.shape[1]]])}};class b8{constructor(t,e,s){let r,o;if(this.variableNames=["c","a","b"],this.outputShape=e,s>4)throw Error(`Where for rank ${s} is not yet supported`);if(1===s)o="resRC",r="resRC";else{const i=["resRC.x","resRC.y","resRC.z","resRC.w"],l=[],u=[];for(let c=0;c<e.length;c++)u.push(`${i[c]}`),c<t&&l.push(`${i[c]}`);r=l.join(),o=u.join()}const a=ft(s);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${o}));\n        } else {\n          setOutput(getB(${o}));\n        }\n      }\n    `}}const w8={kernelName:Pl,backendName:"webgl",kernelFunc:function x8(n){const{inputs:t,backend:e}=n,{condition:s,t:r,e:o}=t,a=new b8(s.shape.length,r.shape,r.shape.length);return e.runWebGLProgram(a,[s,r,o],Rn(r.dtype,o.dtype))}},S8=nt({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${pd};\n  float scale = ${fd};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),I8={kernelName:za,backendName:"webgl",kernelFunc:S8},N8=nt({opSnippet:Bi+"\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:uH}),k8={kernelName:Ua,backendName:"webgl",kernelFunc:N8},T8=nt({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),_8={kernelName:Wa,backendName:"webgl",kernelFunc:T8},A8=nt({opSnippet:Bi+"\n  return sin(x);\n",packedOpSnippet:`\n  vec4 result = sin(x);\n  bvec4 isNaN = isnan(x);\n  ${Jo}\n  return result;\n`}),R8={kernelName:Ba,backendName:"webgl",kernelFunc:A8},D8=nt({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),F8={kernelName:Va,backendName:"webgl",kernelFunc:D8},O8=nt({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),L8={kernelName:Ga,backendName:"webgl",kernelFunc:O8},P8={kernelName:Bl,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockShape:o,paddings:a}=s;C(r.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");const i=o.reduce((y,b)=>y*b),l=[[0,0]];l.push(...a);for(let y=1+o.length;y<r.shape.length;++y)l.push([0,0]);const u=[],c=_C({inputs:{x:r},backend:e,attrs:{paddings:l,constantValue:0}}),h=Tu(c.shape,o,i,!1),d=_u(h.length,o.length,!1),p=Eu(c.shape,o,i,!1),f=de({inputs:{x:c},backend:e,attrs:{shape:h}}),g=An({inputs:{x:f},backend:e,attrs:{perm:d}}),m=de({inputs:{x:g},backend:e,attrs:{shape:p}});return u.push(c),u.push(f),u.push(g),u.forEach(y=>e.disposeIntermediateTensorInfo(y)),m}},z8={kernelName:nh,backendName:"webgl",kernelFunc:function M8(n){const{inputs:t,backend:e}=n,{indices:s,values:r,denseShape:o,defaultValue:a}=t;if(1!==o.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${o.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n         ${r.shape}`);if(0!==a.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${a.shape}`);const i=e.readSync(s.dataId),l=e.readSync(r.dataId),u=e.readSync(o.dataId),c=e.readSync(a.dataId)[0],[h,d,p,f,g]=hH(i,s.shape,s.dtype,l,r.dtype,u,c);return[e.makeTensorInfo(d,s.dtype,h),e.makeTensorInfo([d[0]],r.dtype,p),e.makeTensorInfo([f.length],"bool",new Uint8Array(f.map(m=>Number(m)))),e.makeTensorInfo([g.length],s.dtype,new Int32Array(g))]}},V8={kernelName:sh,backendName:"webgl",kernelFunc:function B8(n){const{inputs:t,backend:e}=n,{inputIndices:s,inputShape:r,newShape:o}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape ${r.shape}`);if(1!==o.shape.length)throw new Error(`Target shape should be a vector but received shape ${o.shape}`);const a=Array.from(e.readSync(r.dataId)),i=e.readSync(s.dataId),l=Array.from(e.readSync(o.dataId)),[u,c,h]=dH(i,s.shape,s.dtype,a,l);return[e.makeTensorInfo(c,s.dtype,u),e.makeTensorInfo([h.length],o.dtype,new Int32Array(h))]}},U8={kernelName:rh,backendName:"webgl",kernelFunc:function W8(n){const{inputs:t,backend:e}=n,{data:s,indices:r,segmentIds:o}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${r.shape}`);if(1!==o.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${o.shape}`);const a=e.readSync(s.dataId),i=e.readSync(r.dataId),l=e.readSync(o.dataId),[u,c]=FI(a,s.shape,s.dtype,i,l,!0);return e.makeTensorInfo(c,s.dtype,u)}},H8={kernelName:oh,backendName:"webgl",kernelFunc:function G8(n){const{inputs:t,backend:e}=n,{data:s,indices:r,segmentIds:o}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${r.shape}`);if(1!==o.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${o.shape}`);const a=e.readSync(s.dataId),i=e.readSync(r.dataId),l=e.readSync(o.dataId),[u,c]=FI(a,s.shape,s.dtype,i,l);return e.makeTensorInfo(c,s.dtype,u)}},q8={kernelName:ah,backendName:"webgl",kernelFunc:function j8(n){const{inputs:t,backend:e,attrs:s}=n,{sparseIndices:r,sparseValues:o,defaultValue:a}=t,{outputShape:i}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:d}=Vr(0,r,i);if("string"===o.dtype){const y=e.bufferSync(r),b=e.bufferSync(o),w=dr(e.readSync(a.dataId)[0]),x=lH(y,b,i,d,c,u,l,h,w,!1);return e.makeTensorInfo(i,x.dtype,x.values)}const f=new gb(u,l,r.shape.length,o.shape.length,h,[d,1],!1),g=e.runWebGLProgram(f,[o,r,a],o.dtype),m=de({inputs:{x:g},backend:e,attrs:{shape:i}});return e.disposeIntermediateTensorInfo(g),m}},X8={kernelName:Vl,backendName:"webgl",kernelFunc:function K8(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{numOrSizeSplits:o,axis:a}=s,i=Ue(a,r.shape)[0],l=Cg(r,o,i),c=new Array(r.shape.length).fill(0),h=r.shape.slice();return l.map(d=>{const p=[...h];p[i]=d;const f=Vi({inputs:{x:r},backend:e,attrs:{begin:c,size:p}});return c[i]+=d,f})}},$C="return sqrt(x);",Z8=nt({opSnippet:$C,packedOpSnippet:$C,cpuKernelImpl:pH}),Y8={kernelName:Ha,backendName:"webgl",kernelFunc:Z8},Q8=nt({opSnippet:"return x * x;"}),J8={kernelName:ih,backendName:"webgl",kernelFunc:Q8},AC="return (a - b) * (a - b);",eZ=yn({opSnippet:AC,packedOpSnippet:AC}),tZ={kernelName:ja,backendName:"webgl",kernelFunc:eZ},sZ={kernelName:Ul,backendName:"webgl",kernelFunc:function nZ(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t;if("string"!==r.dtype)throw new Error("Input must be of datatype string");const a=Cr(e.readSync(r.dataId)),i=fH(a,"string",s);return e.makeTensorInfo(r.shape,"string",i)}},oZ={kernelName:Ya,backendName:"webgl",kernelFunc:function rZ({inputs:n,attrs:t,backend:e}){const{x:s}=n,o=new ir(s.shape,ps+`\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `);return e.runWebGLProgram(o,[s],s.dtype)}};class aZ{constructor(t,e,s){this.variableNames=["x"],this.outputShape=s;const r=s.length,o=ft(s.length),a=ft(s.length);let i="";if(1===r)i="coords * strides + begin";else{let l=0;i=s.map((u,c)=>(l++,1===s.length?`coords * strides[${c}] + begin[${c}]`:`coords[${l-1}] * strides[${c}] + begin[${c}]`)).join(",")}this.userCode=`\n      ${o} begin = ${o}(${t});\n      ${o} strides = ${o}(${e});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}const lZ={kernelName:lh,backendName:"webgl",kernelFunc:function iZ(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{begin:o,end:a,strides:i,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:d}=s,{finalShapeSparse:p,finalShape:f,isIdentity:g,sliceDim0:m,isSimpleSlice:y,begin:b,end:w,strides:x}=Wf(r.shape,o,a,i,l,u,c,h,d);let S;if(g)S=de({inputs:{x:r},backend:e,attrs:{shape:f}});else if(m||y){C(r.shape.length>=1,()=>`Input must have rank at least 1, got: ${r.shape.length}`);const k=zf(b,w,x),T=Vi({inputs:{x:r},backend:e,attrs:{begin:b,size:k}});S=de({inputs:{x:T},backend:e,attrs:{shape:f}}),e.disposeIntermediateTensorInfo(T)}else if(e.shouldExecuteOnCPU([r])){const T=e.readSync(r.dataId),_=Me(r.shape,r.dtype,T),E=mH(p,_,x,b);S=e.makeTensorInfo(f,r.dtype,E.values)}else{const T=new aZ(b,x,p);S=e.runWebGLProgram(T,[r],r.dtype)}const I=de({inputs:{x:S},backend:e,attrs:{shape:f}});return e.disposeIntermediateTensorInfo(S),I}},cZ={kernelName:uh,backendName:"webgl",kernelFunc:function uZ(n){const{inputs:t,backend:e,attrs:s}=n,{separator:r,nGramWidths:o,leftPad:a,rightPad:i,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,d=e.readSync(c.dataId),p=e.readSync(h.dataId),[f,g]=gH(d,p,r,o,a,i,l,u);return[e.makeTensorInfo([f.length],"string",f),e.makeTensorInfo(h.shape,"int32",g)]}},dZ={kernelName:ch,backendName:"webgl",kernelFunc:function hZ(n){const{inputs:t,backend:e,attrs:s}=n,{skipEmpty:r}=s,{input:o,delimiter:a}=t;if("string"!==o.dtype)throw new Error("Input must be of datatype string");if(1!==o.shape.length)throw new Error(`Input must be a vector, got shape: ${o.shape}`);if(0!==a.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${a.shape}`);const i=e.readSync(o.dataId),l=e.readSync(a.dataId)[0],[u,c,h]=yH(i,l,r),d=c.length;return[e.makeTensorInfo([d,2],"int32",u),e.makeTensorInfo([d],"string",c),e.makeTensorInfo([2],"int32",new Int32Array(h))]}},fZ={kernelName:hh,backendName:"webgl",kernelFunc:function pZ(n){const{inputs:t,backend:e,attrs:s}=n,{numBuckets:r}=s,{input:o}=t;if("string"!==o.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const a=e.readSync(o.dataId),i=bH(a,r);return e.makeTensorInfo(o.shape,"int32",i)}},mZ=nt({opSnippet:"return tan(x);"}),gZ={kernelName:Ka,backendName:"webgl",kernelFunc:mZ},yZ=nt({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),bZ={kernelName:Xa,backendName:"webgl",kernelFunc:yZ},wZ={kernelName:eh,backendName:"webgl",kernelFunc:function xZ(n){const{inputs:t,backend:e}=n,{tensor:r,indices:o,updates:a}=t,{sliceRank:i,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=Vr(0,o,r.shape),d=[h/u,u];if(0===h)return e.makeTensorInfo(r.shape,o.dtype);const p=de({inputs:{x:o},backend:e,attrs:{shape:[l,i]}}),f=de({inputs:{x:a},backend:e,attrs:{shape:[l,u]}}),g=de({inputs:{x:r},backend:e,attrs:{shape:d}}),m=new gb(l,i,p.shape.length,f.shape.length,c,d,!1,!0),y=e.runWebGLProgram(m,[f,p,g],g.dtype),b=de({inputs:{x:y},backend:e,attrs:{shape:r.shape}});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(y),b}};class vZ{constructor(t,e){this.variableNames=["A"];const s=new Array(t.length);for(let a=0;a<s.length;a++)s[a]=t[a]*e[a];this.outputShape=s,this.rank=s.length;const r=ft(this.rank),o=function SZ(n){const t=n.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${n[0]})`;const e=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],s=[];for(let r=0;r<n.length;r++)s.push(`imod(${e[r]}, ${n[r]})`);return s.join()}(t);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${o}));\n      }\n    `}}function RC(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{reps:o}=s;if("string"===r.dtype||r.shape.length>5){const l=e.readSync(r.dataId),u="string"===r.dtype?l.map(d=>dr(d)):l,c=Me(r.shape,r.dtype,u),h=wH(c,o);return e.makeTensorInfo(h.shape,h.dtype,h.values)}const a=new vZ(r.shape,o);return e.runWebGLProgram(a,[r],r.dtype)}const IZ={kernelName:Za,backendName:"webgl",kernelFunc:RC};class CZ{constructor(t){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=t,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class NZ{constructor(t){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=t,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function ta(n,t){null!==t&&n.disposeIntermediateTensorInfo(t)}function DC(n){let t=1;for(;t<n;)t*=2;return t}const TZ={kernelName:dh,backendName:"webgl",kernelFunc:function kZ(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{k:o,sorted:a}=s,i=z().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=z().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),u=r.shape,c=u[u.length-1];if(e.shouldExecuteOnCPU([r])||c<i||o>l){const E=e.readSync(r.dataId),[L,B]=vH(E,u,r.dtype,o,a);return[e.makeTensorInfo(L.shape,L.dtype,L.values),e.makeTensorInfo(B.shape,B.dtype,B.values)]}if(0===o)return u[u.length-1]=0,[e.makeTensorInfo(u,r.dtype,[]),e.makeTensorInfo(u,"int32",[])];if(1===c)return[r,tc({attrs:{shape:u,dtype:"int32",value:0},backend:e})];const h=e.texData.get(r.dataId),d=null!==h&&h.isPacked,p=d?e.unpackTensor(r):r,g=j(u)/c,m=de({inputs:{x:p},attrs:{shape:[g,c]},backend:e});d&&ta(e,p);const y=DC(o),b=DC(c);let w=null;const x=()=>null===w?[m,m]:[m,w],S=(E,L,B)=>{const W=x(),U=new CZ(B),X=w;w=e.runWebGLProgram(U,W,"int32",[[c],[null===w?1:0],[Number.NEGATIVE_INFINITY],[E],[L]]),ta(e,X)};for(let E=1;E<y;E*=2){const L=2*E;for(let B=E;B>=1;B/=2)S(L,B,[g,b])}for(let E=b;E>y;E/=2){const L=x(),B=new NZ([g,E/2]),G=w;w=e.runWebGLProgram(B,L,"int32",[[c],[null===w?1:0],[y]]),ta(e,G);const K=y/2,X=2*K;for(let H=K;H>=1;H/=2)S(X,H,w.shape)}let I=w;w=Vi({inputs:{x:w},backend:e,attrs:{begin:0,size:[g,o]}}),ta(e,I);let k=vC({inputs:{x:m,indices:w},backend:e,attrs:{axis:1,batchDims:1}});ta(e,m);const T=u.slice(0,-1);T.push(o),I=w,w=de({inputs:{x:w},attrs:{shape:T},backend:e}),ta(e,I);const _=k;return k=de({inputs:{x:k},attrs:{shape:T},backend:e}),ta(e,_),[k,w]}};class _Z{constructor(t,e,s,r,o,a){this.variableNames=["Image","Transforms"],this.outputShape=a;const i="nearest"===s?1:2;let l;switch(r){case"constant":default:l=1;break;case"reflect":l=2;break;case"wrap":l=3;break;case"nearest":l=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${l} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${l} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${l} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${t} && 0 <= coordX && coordX < ${e}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${o});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${o});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${e}));\n                float mapY = mapCoord(inY, float(${t}));\n\n                if (${i} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const $Z={kernelName:ph,backendName:"webgl",kernelFunc:function EZ(n){const{inputs:t,backend:e,attrs:s}=n,{image:r,transforms:o}=t,{interpolation:a,fillMode:i,fillValue:l,outputShape:u}=s,[c,h,d,p]=r.shape,[f,g]=null!=u?u:[h,d],y=new _Z(h,d,a,i,l,[c,f,g,p]);return e.runWebGLProgram(y,[r,o],"float32")}},RZ={kernelName:fh,backendName:"webgl",kernelFunc:function AZ(n){const{inputs:t,attrs:e,backend:s}=n,{axis:r}=e,{x:o}=t;Xu(o,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const a=s.readSync(o.dataId),{outputValues:i,outputShape:l,indices:u}=SH(a,r,o.shape,o.dtype);return[s.makeTensorInfo(l,o.dtype,i),s.makeTensorInfo([u.length],"int32",u)]}},FZ={kernelName:Gl,backendName:"webgl",kernelFunc:function DZ(n){const{inputs:t,backend:e,attrs:s}=n,{value:r}=t;let{axis:o}=s;o<0&&(o+=r.shape.length);const a=r,i=a.shape.length,l=r.shape[o],u=new Array(i-1);let c=0;for(let g=0;g<i;g++)g!==o&&(u[c++]=a.shape[g]);const h=[],d=new Array(i).fill(0),p=a.shape.slice();p[o]=1;const f=new Array(l);for(let g=0;g<f.length;g++){d[o]=g;const m=Vi({inputs:{x:a},backend:e,attrs:{begin:d,size:p}}),y=de({inputs:{x:m},backend:e,attrs:{shape:u}});f[g]=y,h.push(m)}return h.forEach(g=>e.disposeIntermediateTensorInfo(g)),f}};class OZ{constructor(t,e){this.variableNames=["x","segmentIds"];const s=t.windowSize,r=t.batchSize,o=t.inSize,a=t.numSegments,i=a*Math.ceil(o/s);this.outputShape=[r,i];const c=4*Math.floor(s/4),h=s%4,d="\n        sumValue += dot(values, segFilter);\n    ";let p="";o%s>0&&(p=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return initializationValue;\n        }\n      `);let f="";o%s>0&&(f=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${p}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${f}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${s}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${c}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${d}\n        }\n\n        int inIdx = inOffset + ${c};\n        if (${1===h}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${d}\n        } else if (${2===h}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${d}\n        } else if (${3===h}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${d}\n        }\n        setOutput(sumValue);\n      }\n    `}}const MZ=[gj,bj,vj,Cj,kj,Ej,Aj,Dj,Pj,zj,Wj,Hj,Kj,Qj,tq,sq,oq,uq,hq,pq,gq,Sq,Cq,_q,$q,Oq,Pq,Vq,JH,Gq,Xq,Jq,oK,lK,cK,dK,fK,bK,wK,SK,CK,kK,_K,AK,DK,PK,zK,WK,HK,qK,XK,QK,e6,s6,o6,a6,l6,c6,d6,f6,g6,b6,v6,C6,k6,E6,R6,F6,L6,QH,M6,qq,B6,W6,G6,tj,j6,K6,Z6,J6,n5,r5,a5,l5,h5,p5,m5,x5,v5,I5,T5,E5,A5,D5,O5,z5,W5,j5,Q5,rj,nX,oX,lX,hX,Aq,pX,mX,yX,wX,CX,sj,kX,_X,$X,RX,DX,Rq,K5,OX,MX,VX,aj,HX,KX,QX,t8,o8,i8,u8,h8,f8,y8,w8,I8,k8,_8,R8,F8,vq,Z5,L8,P8,z8,V8,U8,H8,q8,X8,Y8,J8,tZ,sZ,oZ,lZ,cZ,dZ,fZ,X5,pj,gZ,bZ,wZ,IZ,TZ,$Z,fj,RZ,FZ,{kernelName:Hl,backendName:"webgl",kernelFunc:function LZ(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,segmentIds:o}=t,{numSegments:a}=s,i=r.shape.length,l=[];let u=0;const c=Et([u],i);let h=r;null!=c&&(h=An({inputs:{x:r},backend:e,attrs:{perm:c}}),l.push(h),u=zt(1,i)[0]);const d=xw(h.shape,u,a),p=j([h.shape[u]]),f=de({inputs:{x:h},backend:e,attrs:{shape:[-1,p]}});l.push(f);const g=vh(r.dtype),m=(x,S,I,k,T)=>{const _=x.shape[0],E=x.shape[1],L=bw(E,T),W=new OZ({windowSize:L,inSize:E,batchSize:_,numSegments:T},S),U=e.compileAndRun(W,[x,I],k);if(l.push(U),U.shape[1]===T)return U;const G=EC({backend:e,attrs:{start:0,stop:T,step:1,dtype:"float32"}}),K=RC({inputs:{x:G},backend:e,attrs:{reps:[E/L]}});return l.push(G),l.push(K),m(U,S,K,k,T)},b=de({inputs:{x:m(f,"unsortedSegmentSum",o,g,a)},backend:e,attrs:{shape:d}});let w=b;if(null!=c){l.push(b);const x=Hr(c);w=An({inputs:{x:w},backend:e,attrs:{perm:x}})}return l.forEach(x=>e.disposeIntermediateTensorInfo(x)),w}},fX];for(const n of MZ)bh(n);var FC=M(5619);const BZ={architecture:"MobileNetV1",outputStride:16,multiplier:.75,quantBytes:4},VZ={flipHorizontal:!1,internalResolution:"high",segmentationThreshold:.9};let WZ=(()=>{var n;class t{constructor(){this._readyState=new FC.X(!1),this.isReady$=this._readyState.asObservable(),this._segmentationState=new FC.X({}),this.segmentation$=this._segmentationState.asObservable(),xx("webgl"),function ND(n){return void 0===n&&(n=tv),Ys(this,void 0,void 0,function(){return Qs(this,function(t){return"ResNet50"===(n=function SD(n){if(null==(n=n||tv).architecture&&(n.architecture="MobileNetV1"),nv.indexOf(n.architecture)<0)throw new Error("Invalid architecture ".concat(n.architecture,". ")+"Should be one of ".concat(nv));if(null==n.outputStride&&(n.outputStride=16),sv[n.architecture].indexOf(n.outputStride)<0)throw new Error("Invalid outputStride ".concat(n.outputStride,". ")+"Should be one of ".concat(sv[n.architecture]," ")+"for architecture ".concat(n.architecture,"."));if(null==n.multiplier&&(n.multiplier=1),rv[n.architecture].indexOf(n.multiplier)<0)throw new Error("Invalid multiplier ".concat(n.multiplier,". ")+"Should be one of ".concat(rv[n.architecture]," ")+"for architecture ".concat(n.architecture,"."));if(null==n.quantBytes&&(n.quantBytes=4),ov.indexOf(n.quantBytes)<0)throw new Error("Invalid quantBytes ".concat(n.quantBytes,". ")+"Should be one of ".concat(ov," ")+"for architecture ".concat(n.architecture,"."));return n}(n)).architecture?[2,CD(n)]:"MobileNetV1"===n.architecture?[2,ID(n)]:[2,null]})})}(BZ).then(s=>{this.model=s,this._readyState.next(!0)})}segmentPersonParts(s){this.model.segmentPersonParts(s,VZ).then(r=>{this._segmentationState.next(r)})}}return(n=t).\u0275fac=function(s){return new(s||n)},n.\u0275prov=te.Yz7({token:n,factory:n.\u0275fac,providedIn:"root"}),t})();const UZ=["webcam"],GZ=["webcamCanvas"],HZ=["imageCanvas"];function jZ(n,t){1&n&&(te.TgZ(0,"span",12),te._uU(1,"Webcam is not supported by your browser"),te.qZA())}function qZ(n,t){if(1&n){const e=te.EpF();te.TgZ(0,"button",13),te.NdJ("click",function(){te.CHM(e);const r=te.oxw();return te.KtG(r.enableCam())}),te._uU(1,"Enable Webcam"),te.qZA()}}function KZ(n,t){1&n&&(te.TgZ(0,"ion-button",14),te._uU(1,"Measure"),te.qZA())}function XZ(n,t){1&n&&(te.TgZ(0,"div",15),te._uU(1,"Loading the Machine Learning model..."),te.qZA())}let ZZ=(()=>{var n;class t{constructor(s,r){this.renderer=s,this.bodySegmentationService=r,this.viewMode="image",this.sampleImages=["https://cdn.glitch.com/ff4f00ae-20e2-4bdc-8771-2642ee05ae93%2Fjj.jpg?v=1581963497215","https://cdn.glitch.com/ff4f00ae-20e2-4bdc-8771-2642ee05ae93%2Fwalk.jpg?v=1581963497392"],this.previousSegmentationComplete=!0,this.segmentations=this.sampleImages.map(o=>{})}ngOnInit(){this.setViewMode("webcam"),this.enableCam()}setViewMode(s){this.viewMode=s,this.subscription&&(this.subscription.unsubscribe(),this.subscription=void 0)}onImageClick(s,r){this.segmentations[r]||(this.subscription&&(this.subscription.unsubscribe(),this.subscription=void 0),this.subscription=this.bodySegmentationService.segmentation$.subscribe(o=>{if(!o)return;this.segmentations[r]=o;const a=this.imageCanvases.toArray()[r].nativeElement;a.width=o.width,a.height=o.height,this.processSegmentation(a,o)}),this.bodySegmentationService.segmentPersonParts(s.target))}processSegmentation(s,r){const o=function DD(n,t){if(void 0===t&&(t=RD),Array.isArray(n)&&0===n.length)return null;for(var e,s=(e=Array.isArray(n)?n:[n])[0],r=s.width,o=s.height,a=new Uint8ClampedArray(r*o*4),i=0;i<o*r;++i){var l=4*i;a[l+0]=255,a[l+1]=255,a[l+2]=255,a[l+3]=255;for(var u=0;u<e.length;u++){var c=e[u].data[i];if(-1!==c){var h=t[c];if(!h)throw new Error("No color could be found for part id ".concat(c));a[l+0]=h[0],a[l+1]=h[1],a[l+2]=h[2],a[l+3]=255}}}return new ImageData(a,r,o)}(r);(function FD(n,t,e,s,r,o){void 0===s&&(s=.7),void 0===r&&(r=0),void 0===o&&(o=!1);var a=Tr(t),i=a[0],l=a[1];n.width=l,n.height=i;var u=n.getContext("2d");if(u.save(),o&&function $d(n){var t=n.getContext("2d");t.scale(-1,1),t.translate(-n.width,0)}(n),u.drawImage(t,0,0),u.globalAlpha=s,e){!function uv(n,t,e,s){var r=n.width,o=n.height,a=t.width,i=t.height;if(r!==a||o!==i)throw new Error("error: dimensions must match. ".concat(e," has dimensions ").concat(r,"x").concat(o,", ").concat(s," has dimensions ").concat(a,"x").concat(i))}({width:l,height:i},e,"image","mask");var h=vi(function Rd(n,t){var e=Kg(t);return function AD(n,t){t.width=n.width,t.height=n.height,t.getContext("2d").putImageData(n,0,0)}(n,e),e}(e,As_mask),r,As_blurredMask);u.drawImage(h,0,0,l,i)}u.restore()})(s,s,o,.7,0,!1),this.drawSegmentLines(s,o)}hasGetUserMedia(){return!(!navigator.mediaDevices||!navigator.mediaDevices.getUserMedia)}enableCam(){this.videoRenderCanvas=document.createElement("canvas"),this.videoRenderCanvasCtx=this.videoRenderCanvas.getContext("2d"),navigator.mediaDevices.getUserMedia({video:{width:{ideal:640},height:{ideal:480},facingMode:{ideal:"environment"}}}).then(r=>{const o=this.webcamElement.nativeElement;this.renderer.setProperty(o,"srcObject",r),this.renderer.listen(o,"loadedmetadata",()=>{this.renderer.setProperty(this.webcamCanvasElement.nativeElement,"width",o.videoWidth),this.renderer.setProperty(this.webcamCanvasElement.nativeElement,"height",o.videoHeight),this.videoRenderCanvas.width=o.videoWidth,this.videoRenderCanvas.height=o.videoHeight}),this.subscription=this.bodySegmentationService.segmentation$.subscribe(a=>{a.width>0&&this.webcamCanvasElement.nativeElement.width>0&&(this.processSegmentation(this.webcamCanvasElement.nativeElement,a),this.drawRedDot(this.webcamCanvasElement.nativeElement,a.allPoses[0].keypoints[0].position.x,a.allPoses[0].keypoints[0].position.y),this.drawRedDot(this.webcamCanvasElement.nativeElement,a.allPoses[0].keypoints[1].position.x,a.allPoses[0].keypoints[1].position.y),this.drawRedDot(this.webcamCanvasElement.nativeElement,a.allPoses[0].keypoints[2].position.x,a.allPoses[0].keypoints[2].position.y)),this.previousSegmentationComplete=!0}),this.renderer.listen(o,"loadeddata",()=>this.predictWebcam())})}predictWebcam(){this.previousSegmentationComplete&&this.webcamCanvasElement&&(this.previousSegmentationComplete=!1,this.videoRenderCanvasCtx.drawImage(this.webcamElement.nativeElement,0,0),this.bodySegmentationService.segmentPersonParts(this.videoRenderCanvas)),window.requestAnimationFrame(this.predictWebcam.bind(this))}handleInitError(s){s.mediaStreamError&&"NotAllowedError"===s.mediaStreamError.name&&console.warn("Camera access was not allowed by user!")}drawRedDot(s,r,o){const a=s.getContext("2d");a.beginPath(),a.arc(r,o,5,0,2*Math.PI),a.fillStyle="red",a.fill()}getPixelMeasurementBetweenPoints(s,r){const o=s.x-r.x,a=s.y-r.y;return Math.sqrt(o*o+a*a)}drawSegmentLines(s,r){const o=s.getContext("2d");o.lineWidth=2,o.strokeStyle="red";for(let a=0;a<r.length;a++){const i=r[a];o.beginPath(),o.moveTo(i.top[0],i.top[1]),o.lineTo(i.bottom[0],i.bottom[1]),o.stroke()}for(let a=0;a<r.length;a++){const i=r[a];o.beginPath(),o.moveTo(i.left[0],i.left[1]),o.lineTo(i.right[0],i.right[1]),o.stroke()}}}return(n=t).\u0275fac=function(s){return new(s||n)(te.Y36(te.Qsj),te.Y36(WZ))},n.\u0275cmp=te.Xpm({type:n,selectors:[["app-body-segmentation"]],viewQuery:function(s,r){if(1&s&&(te.Gf(UZ,5,te.SBq),te.Gf(GZ,5,te.SBq),te.Gf(HZ,5,te.SBq)),2&s){let o;te.iGM(o=te.CRH())&&(r.webcamElement=o.first),te.iGM(o=te.CRH())&&(r.webcamCanvasElement=o.first),te.iGM(o=te.CRH())&&(r.imageCanvases=o)}},decls:14,vars:3,consts:[[1,"w-full","h-full","flex","flex-col","items-center"],["class","text-center text-3xl",4,"ngIf"],["class","btn",3,"click",4,"ngIf"],[1,"webcam","relative","pb-2/3","flex-1"],["autoplay","",1,"object-contain","h-96"],["webcam",""],[1,"overlay","object-contain","h-96"],["webcamCanvas",""],[1,"flex","justify-center"],["class","btn",4,"ngIf"],["placeholder","PD Measurement (mm)","type","number"],["loading",""],[1,"text-center","text-3xl"],[1,"btn",3,"click"],[1,"btn"],[1,"my-8","text-center","text-3xl"]],template:function(s,r){1&s&&(te.TgZ(0,"div",0),te.YNc(1,jZ,2,0,"span",1),te.YNc(2,qZ,2,0,"button",2),te.TgZ(3,"div",3),te._UZ(4,"video",4,5)(6,"canvas",6,7),te.qZA()(),te.TgZ(8,"div",8),te.YNc(9,KZ,2,0,"ion-button",9),te.qZA(),te.TgZ(10,"div"),te._UZ(11,"ion-input",10),te.qZA(),te.YNc(12,XZ,2,0,"ng-template",null,11,te.W1O)),2&s&&(te.xp6(1),te.Q6J("ngIf",!r.hasGetUserMedia()),te.xp6(1),te.Q6J("ngIf",r.hasGetUserMedia()&&!r.videoRenderCanvas),te.xp6(7),te.Q6J("ngIf",r.videoRenderCanvas))},dependencies:[lr.O5,Dr.YG,Dr.pK,Dr.as],styles:["[_nghost-%COMP%]{display:flex;flex-direction:column;justify-content:center}.sample-image[_ngcontent-%COMP%]{z-index:0}.sample-image[_ngcontent-%COMP%]:hover   img[_ngcontent-%COMP%]{opacity:.3}.sample-image[_ngcontent-%COMP%]   span[_ngcontent-%COMP%], .webcam[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{transition:.5s ease;opacity:0;position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%);pointer-events:none}.sample-image[_ngcontent-%COMP%]:hover   span[_ngcontent-%COMP%]{opacity:1}.sample-image[_ngcontent-%COMP%]   canvas[_ngcontent-%COMP%], .webcam[_ngcontent-%COMP%]   canvas.overlay[_ngcontent-%COMP%]{opacity:.66;position:absolute;top:0;left:0;z-index:2;width:640px;height:480px}.webcam[_ngcontent-%COMP%]{cursor:pointer}.webcam[_ngcontent-%COMP%]   video[_ngcontent-%COMP%]{clear:both;display:block;width:640px;height:480px}"]}),t})();const YZ=[{path:"",component:(()=>{var n;class t{constructor(){}ngOnInit(){}}return(n=t).\u0275fac=function(s){return new(s||n)},n.\u0275cmp=te.Xpm({type:n,selectors:[["app-scan-page"]],decls:10,vars:2,consts:[[3,"translucent"],[3,"fullscreen"],["collapse","condense"],["size","large"]],template:function(s,r){1&s&&(te.TgZ(0,"ion-header",0)(1,"ion-toolbar")(2,"ion-title"),te._uU(3,"scan-page"),te.qZA()()(),te.TgZ(4,"ion-content",1)(5,"ion-header",2)(6,"ion-toolbar")(7,"ion-title",3),te._uU(8,"scan-page"),te.qZA()()(),te._UZ(9,"app-body-segmentation"),te.qZA()),2&s&&(te.Q6J("translucent",!0),te.xp6(4),te.Q6J("fullscreen",!0))},dependencies:[Dr.W2,Dr.Gu,Dr.wd,Dr.sr,ZZ]}),t})()}];let QZ=(()=>{var n;class t{}return(n=t).\u0275fac=function(s){return new(s||n)},n.\u0275mod=te.oAB({type:n}),n.\u0275inj=te.cJS({imports:[wb.Bz.forChild(YZ),wb.Bz]}),t})(),sY=(()=>{class n{}return n.\u0275fac=function(e){return new(e||n)},n.\u0275mod=te.oAB({type:n}),n.\u0275inj=te.cJS({imports:[[lr.ez]]}),n})(),rY=(()=>{var n;class t{}return(n=t).\u0275fac=function(s){return new(s||n)},n.\u0275mod=te.oAB({type:n}),n.\u0275inj=te.cJS({imports:[lr.ez,OC.u5,Dr.Pc,QZ,sY]}),t})()},186:ot=>{ot.exports=M;var Ye=null;try{Ye=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch{}function M(Q,A,me){this.low=0|Q,this.high=0|A,this.unsigned=!!me}function Oe(Q){return!0===(Q&&Q.__isLong__)}Object.defineProperty(M.prototype,"__isLong__",{value:!0}),M.isLong=Oe;var Xt={},Fe={};function St(Q,A){var me,Re,tt;return A?(tt=0<=(Q>>>=0)&&Q<256)&&(Re=Fe[Q])?Re:(me=Ee(Q,(0|Q)<0?-1:0,!0),tt&&(Fe[Q]=me),me):(tt=-128<=(Q|=0)&&Q<128)&&(Re=Xt[Q])?Re:(me=Ee(Q,Q<0?-1:0,!1),tt&&(Xt[Q]=me),me)}function We(Q,A){if(isNaN(Q))return A?Wt:ut;if(A){if(Q<0)return Wt;if(Q>=ae)return at}else{if(Q<=-ve)return it;if(Q+1>=ve)return et}return Q<0?We(-Q,A).neg():Ee(Q%J|0,Q/J|0,A)}function Ee(Q,A,me){return new M(Q,A,me)}M.fromInt=St,M.fromNumber=We,M.fromBits=Ee;var Be=Math.pow;function xe(Q,A,me){if(0===Q.length)throw Error("empty string");if("NaN"===Q||"Infinity"===Q||"+Infinity"===Q||"-Infinity"===Q)return ut;if("number"==typeof A?(me=A,A=!1):A=!!A,(me=me||10)<2||36<me)throw RangeError("radix");var Re;if((Re=Q.indexOf("-"))>0)throw Error("interior hyphen");if(0===Re)return xe(Q.substring(1),A,me).neg();for(var tt=We(Be(me,8)),je=ut,lt=0;lt<Q.length;lt+=8){var Dt=Math.min(8,Q.length-lt),Lt=parseInt(Q.substring(lt,lt+Dt),me);if(Dt<8){var Zt=We(Be(me,Dt));je=je.mul(Zt).add(We(Lt))}else je=(je=je.mul(tt)).add(We(Lt))}return je.unsigned=A,je}function V(Q,A){return"number"==typeof Q?We(Q,A):"string"==typeof Q?xe(Q,A):Ee(Q.low,Q.high,"boolean"==typeof A?A:Q.unsigned)}M.fromString=xe,M.fromValue=V;var J=4294967296,ae=J*J,ve=ae/2,Ne=St(1<<24),ut=St(0);M.ZERO=ut;var Wt=St(0,!0);M.UZERO=Wt;var Ut=St(1);M.ONE=Ut;var ms=St(1,!0);M.UONE=ms;var Jn=St(-1);M.NEG_ONE=Jn;var et=Ee(-1,2147483647,!1);M.MAX_VALUE=et;var at=Ee(-1,-1,!0);M.MAX_UNSIGNED_VALUE=at;var it=Ee(0,-2147483648,!1);M.MIN_VALUE=it;var re=M.prototype;re.toInt=function(){return this.unsigned?this.low>>>0:this.low},re.toNumber=function(){return this.unsigned?(this.high>>>0)*J+(this.low>>>0):this.high*J+(this.low>>>0)},re.toString=function(A){if((A=A||10)<2||36<A)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(it)){var me=We(A),Re=this.div(me),tt=Re.mul(me).sub(this);return Re.toString(A)+tt.toInt().toString(A)}return"-"+this.neg().toString(A)}for(var je=We(Be(A,6),this.unsigned),lt=this,Dt="";;){var Lt=lt.div(je),kt=(lt.sub(Lt.mul(je)).toInt()>>>0).toString(A);if((lt=Lt).isZero())return kt+Dt;for(;kt.length<6;)kt="0"+kt;Dt=""+kt+Dt}},re.getHighBits=function(){return this.high},re.getHighBitsUnsigned=function(){return this.high>>>0},re.getLowBits=function(){return this.low},re.getLowBitsUnsigned=function(){return this.low>>>0},re.getNumBitsAbs=function(){if(this.isNegative())return this.eq(it)?64:this.neg().getNumBitsAbs();for(var A=0!=this.high?this.high:this.low,me=31;me>0&&!(A&1<<me);me--);return 0!=this.high?me+33:me+1},re.isZero=function(){return 0===this.high&&0===this.low},re.eqz=re.isZero,re.isNegative=function(){return!this.unsigned&&this.high<0},re.isPositive=function(){return this.unsigned||this.high>=0},re.isOdd=function(){return 1==(1&this.low)},re.isEven=function(){return 0==(1&this.low)},re.equals=function(A){return Oe(A)||(A=V(A)),(this.unsigned===A.unsigned||this.high>>>31!=1||A.high>>>31!=1)&&this.high===A.high&&this.low===A.low},re.eq=re.equals,re.notEquals=function(A){return!this.eq(A)},re.neq=re.notEquals,re.ne=re.notEquals,re.lessThan=function(A){return this.comp(A)<0},re.lt=re.lessThan,re.lessThanOrEqual=function(A){return this.comp(A)<=0},re.lte=re.lessThanOrEqual,re.le=re.lessThanOrEqual,re.greaterThan=function(A){return this.comp(A)>0},re.gt=re.greaterThan,re.greaterThanOrEqual=function(A){return this.comp(A)>=0},re.gte=re.greaterThanOrEqual,re.ge=re.greaterThanOrEqual,re.compare=function(A){if(Oe(A)||(A=V(A)),this.eq(A))return 0;var me=this.isNegative(),Re=A.isNegative();return me&&!Re?-1:!me&&Re?1:this.unsigned?A.high>>>0>this.high>>>0||A.high===this.high&&A.low>>>0>this.low>>>0?-1:1:this.sub(A).isNegative()?-1:1},re.comp=re.compare,re.negate=function(){return!this.unsigned&&this.eq(it)?it:this.not().add(Ut)},re.neg=re.negate,re.add=function(A){Oe(A)||(A=V(A));var kt=0,In=0,Ke=0,xn=0;return Ke+=(xn+=(65535&this.low)+(65535&A.low))>>>16,In+=(Ke+=(this.low>>>16)+(A.low>>>16))>>>16,kt+=(In+=(65535&this.high)+(65535&A.high))>>>16,kt+=(this.high>>>16)+(A.high>>>16),Ee((Ke&=65535)<<16|(xn&=65535),(kt&=65535)<<16|(In&=65535),this.unsigned)},re.subtract=function(A){return Oe(A)||(A=V(A)),this.add(A.neg())},re.sub=re.subtract,re.multiply=function(A){if(this.isZero())return ut;if(Oe(A)||(A=V(A)),Ye)return Ee(Ye.mul(this.low,this.high,A.low,A.high),Ye.get_high(),this.unsigned);if(A.isZero())return ut;if(this.eq(it))return A.isOdd()?it:ut;if(A.eq(it))return this.isOdd()?it:ut;if(this.isNegative())return A.isNegative()?this.neg().mul(A.neg()):this.neg().mul(A).neg();if(A.isNegative())return this.mul(A.neg()).neg();if(this.lt(Ne)&&A.lt(Ne))return We(this.toNumber()*A.toNumber(),this.unsigned);var tt=65535&this.high,je=this.low>>>16,lt=65535&this.low,Lt=65535&A.high,Zt=A.low>>>16,kt=65535&A.low,In=0,Ke=0,xn=0,lr=0;return xn+=(lr+=lt*kt)>>>16,Ke+=(xn+=je*kt)>>>16,xn&=65535,Ke+=(xn+=lt*Zt)>>>16,In+=(Ke+=tt*kt)>>>16,Ke&=65535,In+=(Ke+=je*Zt)>>>16,Ke&=65535,In+=(Ke+=lt*Lt)>>>16,In+=(this.high>>>16)*kt+tt*Zt+je*Lt+lt*(A.high>>>16),Ee((xn&=65535)<<16|(lr&=65535),(In&=65535)<<16|(Ke&=65535),this.unsigned)},re.mul=re.multiply,re.divide=function(A){if(Oe(A)||(A=V(A)),A.isZero())throw Error("division by zero");var Re,tt,je;if(Ye)return this.unsigned||-2147483648!==this.high||-1!==A.low||-1!==A.high?Ee((this.unsigned?Ye.div_u:Ye.div_s)(this.low,this.high,A.low,A.high),Ye.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?Wt:ut;if(this.unsigned){if(A.unsigned||(A=A.toUnsigned()),A.gt(this))return Wt;if(A.gt(this.shru(1)))return ms;je=Wt}else{if(this.eq(it))return A.eq(Ut)||A.eq(Jn)?it:A.eq(it)?Ut:(Re=this.shr(1).div(A).shl(1)).eq(ut)?A.isNegative()?Ut:Jn:(tt=this.sub(A.mul(Re)),je=Re.add(tt.div(A)));if(A.eq(it))return this.unsigned?Wt:ut;if(this.isNegative())return A.isNegative()?this.neg().div(A.neg()):this.neg().div(A).neg();if(A.isNegative())return this.div(A.neg()).neg();je=ut}for(tt=this;tt.gte(A);){Re=Math.max(1,Math.floor(tt.toNumber()/A.toNumber()));for(var Dt=Math.ceil(Math.log(Re)/Math.LN2),Lt=Dt<=48?1:Be(2,Dt-48),Zt=We(Re),kt=Zt.mul(A);kt.isNegative()||kt.gt(tt);)kt=(Zt=We(Re-=Lt,this.unsigned)).mul(A);Zt.isZero()&&(Zt=Ut),je=je.add(Zt),tt=tt.sub(kt)}return je},re.div=re.divide,re.modulo=function(A){return Oe(A)||(A=V(A)),Ye?Ee((this.unsigned?Ye.rem_u:Ye.rem_s)(this.low,this.high,A.low,A.high),Ye.get_high(),this.unsigned):this.sub(this.div(A).mul(A))},re.mod=re.modulo,re.rem=re.modulo,re.not=function(){return Ee(~this.low,~this.high,this.unsigned)},re.and=function(A){return Oe(A)||(A=V(A)),Ee(this.low&A.low,this.high&A.high,this.unsigned)},re.or=function(A){return Oe(A)||(A=V(A)),Ee(this.low|A.low,this.high|A.high,this.unsigned)},re.xor=function(A){return Oe(A)||(A=V(A)),Ee(this.low^A.low,this.high^A.high,this.unsigned)},re.shiftLeft=function(A){return Oe(A)&&(A=A.toInt()),0==(A&=63)?this:A<32?Ee(this.low<<A,this.high<<A|this.low>>>32-A,this.unsigned):Ee(0,this.low<<A-32,this.unsigned)},re.shl=re.shiftLeft,re.shiftRight=function(A){return Oe(A)&&(A=A.toInt()),0==(A&=63)?this:A<32?Ee(this.low>>>A|this.high<<32-A,this.high>>A,this.unsigned):Ee(this.high>>A-32,this.high>=0?0:-1,this.unsigned)},re.shr=re.shiftRight,re.shiftRightUnsigned=function(A){if(Oe(A)&&(A=A.toInt()),0==(A&=63))return this;var me=this.high;return A<32?Ee(this.low>>>A|me<<32-A,me>>>A,this.unsigned):Ee(32===A?me:me>>>A-32,0,this.unsigned)},re.shru=re.shiftRightUnsigned,re.shr_u=re.shiftRightUnsigned,re.toSigned=function(){return this.unsigned?Ee(this.low,this.high,!1):this},re.toUnsigned=function(){return this.unsigned?this:Ee(this.low,this.high,!0)},re.toBytes=function(A){return A?this.toBytesLE():this.toBytesBE()},re.toBytesLE=function(){var A=this.high,me=this.low;return[255&me,me>>>8&255,me>>>16&255,me>>>24,255&A,A>>>8&255,A>>>16&255,A>>>24]},re.toBytesBE=function(){var A=this.high,me=this.low;return[A>>>24,A>>>16&255,A>>>8&255,255&A,me>>>24,me>>>16&255,me>>>8&255,255&me]},M.fromBytes=function(A,me,Re){return Re?M.fromBytesLE(A,me):M.fromBytesBE(A,me)},M.fromBytesLE=function(A,me){return new M(A[0]|A[1]<<8|A[2]<<16|A[3]<<24,A[4]|A[5]<<8|A[6]<<16|A[7]<<24,me)},M.fromBytesBE=function(A,me){return new M(A[4]<<24|A[5]<<16|A[6]<<8|A[7],A[0]<<24|A[1]<<16|A[2]<<8|A[3],me)}},9128:(ot,Ye,M)=>{var Oe=M(9864),Xt=M(3919),Fe=M(3263),St=M(5353),We=M(3358),Ee=M(3789),Be=M(2508);Be.alea=Oe,Be.xor128=Xt,Be.xorwow=Fe,Be.xorshift7=St,Be.xor4096=We,Be.tychei=Ee,ot.exports=Be},9864:function(ot,Ye,M){var Oe;!function(Xt,Fe,St){function We(V){var le=this,pe=function xe(){var V=4022871197;return function(pe){pe=String(pe);for(var J=0;J<pe.length;J++){var ae=.02519603282416938*(V+=pe.charCodeAt(J));ae-=V=ae>>>0,V=(ae*=V)>>>0,V+=4294967296*(ae-=V)}return 2.3283064365386963e-10*(V>>>0)}}();le.next=function(){var J=2091639*le.s0+2.3283064365386963e-10*le.c;return le.s0=le.s1,le.s1=le.s2,le.s2=J-(le.c=0|J)},le.c=1,le.s0=pe(" "),le.s1=pe(" "),le.s2=pe(" "),le.s0-=pe(V),le.s0<0&&(le.s0+=1),le.s1-=pe(V),le.s1<0&&(le.s1+=1),le.s2-=pe(V),le.s2<0&&(le.s2+=1),pe=null}function Ee(V,le){return le.c=V.c,le.s0=V.s0,le.s1=V.s1,le.s2=V.s2,le}function Be(V,le){var pe=new We(V),J=le&&le.state,ae=pe.next;return ae.int32=function(){return 4294967296*pe.next()|0},ae.double=function(){return ae()+11102230246251565e-32*(2097152*ae()|0)},ae.quick=ae,J&&("object"==typeof J&&Ee(J,pe),ae.state=function(){return Ee(pe,{})}),ae}Fe&&Fe.exports?Fe.exports=Be:M.amdD&&M.amdO?void 0!==(Oe=function(){return Be}.call(Ye,M,Ye,Fe))&&(Fe.exports=Oe):this.alea=Be}(0,ot=M.nmd(ot))},3789:function(ot,Ye,M){var Oe;!function(Xt,Fe,St){function We(xe){var V=this,le="";V.next=function(){var J=V.b,ae=V.c,ve=V.d,Ne=V.a;return J=J<<25^J>>>7^ae,ae=ae-ve|0,ve=ve<<24^ve>>>8^Ne,Ne=Ne-J|0,V.b=J=J<<20^J>>>12^ae,V.c=ae=ae-ve|0,V.d=ve<<16^ae>>>16^Ne,V.a=Ne-J|0},V.a=0,V.b=0,V.c=-1640531527,V.d=1367130551,xe===Math.floor(xe)?(V.a=xe/4294967296|0,V.b=0|xe):le+=xe;for(var pe=0;pe<le.length+20;pe++)V.b^=0|le.charCodeAt(pe),V.next()}function Ee(xe,V){return V.a=xe.a,V.b=xe.b,V.c=xe.c,V.d=xe.d,V}function Be(xe,V){var le=new We(xe),pe=V&&V.state,J=function(){return(le.next()>>>0)/4294967296};return J.double=function(){do{var Ne=((le.next()>>>11)+(le.next()>>>0)/4294967296)/(1<<21)}while(0===Ne);return Ne},J.int32=le.next,J.quick=J,pe&&("object"==typeof pe&&Ee(pe,le),J.state=function(){return Ee(le,{})}),J}Fe&&Fe.exports?Fe.exports=Be:M.amdD&&M.amdO?void 0!==(Oe=function(){return Be}.call(Ye,M,Ye,Fe))&&(Fe.exports=Oe):this.tychei=Be}(0,ot=M.nmd(ot))},3919:function(ot,Ye,M){var Oe;!function(Xt,Fe,St){function We(xe){var V=this,le="";V.x=0,V.y=0,V.z=0,V.w=0,V.next=function(){var J=V.x^V.x<<11;return V.x=V.y,V.y=V.z,V.z=V.w,V.w^=V.w>>>19^J^J>>>8},xe===(0|xe)?V.x=xe:le+=xe;for(var pe=0;pe<le.length+64;pe++)V.x^=0|le.charCodeAt(pe),V.next()}function Ee(xe,V){return V.x=xe.x,V.y=xe.y,V.z=xe.z,V.w=xe.w,V}function Be(xe,V){var le=new We(xe),pe=V&&V.state,J=function(){return(le.next()>>>0)/4294967296};return J.double=function(){do{var Ne=((le.next()>>>11)+(le.next()>>>0)/4294967296)/(1<<21)}while(0===Ne);return Ne},J.int32=le.next,J.quick=J,pe&&("object"==typeof pe&&Ee(pe,le),J.state=function(){return Ee(le,{})}),J}Fe&&Fe.exports?Fe.exports=Be:M.amdD&&M.amdO?void 0!==(Oe=function(){return Be}.call(Ye,M,Ye,Fe))&&(Fe.exports=Oe):this.xor128=Be}(0,ot=M.nmd(ot))},3358:function(ot,Ye,M){var Oe;!function(Xt,Fe,St){function We(xe){var V=this;V.next=function(){var ve,Ne,pe=V.w,J=V.X,ae=V.i;return V.w=pe=pe+1640531527|0,Ne=J[ae+34&127],ve=J[ae=ae+1&127],Ne^=Ne<<13,ve^=ve<<17,Ne=J[ae]=(Ne^=Ne>>>15)^(ve^=ve>>>12),V.i=ae,Ne+(pe^pe>>>16)|0},function le(pe,J){var ae,ve,Ne,ut,Wt,Ut=[],ms=128;for(J===(0|J)?(ve=J,J=null):(J+="\0",ve=0,ms=Math.max(ms,J.length)),Ne=0,ut=-32;ut<ms;++ut)J&&(ve^=J.charCodeAt((ut+32)%J.length)),0===ut&&(Wt=ve),ve^=ve<<10,ve^=ve>>>15,ve^=ve<<4,ve^=ve>>>13,ut>=0&&(Ne=0==(ae=Ut[127&ut]^=ve+(Wt=Wt+1640531527|0))?Ne+1:0);for(Ne>=128&&(Ut[127&(J&&J.length||0)]=-1),Ne=127,ut=512;ut>0;--ut)ve=Ut[Ne+34&127],ae=Ut[Ne=Ne+1&127],ve^=ve<<13,ae^=ae<<17,Ut[Ne]=(ve^=ve>>>15)^(ae^=ae>>>12);pe.w=Wt,pe.X=Ut,pe.i=Ne}(V,xe)}function Ee(xe,V){return V.i=xe.i,V.w=xe.w,V.X=xe.X.slice(),V}function Be(xe,V){null==xe&&(xe=+new Date);var le=new We(xe),pe=V&&V.state,J=function(){return(le.next()>>>0)/4294967296};return J.double=function(){do{var Ne=((le.next()>>>11)+(le.next()>>>0)/4294967296)/(1<<21)}while(0===Ne);return Ne},J.int32=le.next,J.quick=J,pe&&(pe.X&&Ee(pe,le),J.state=function(){return Ee(le,{})}),J}Fe&&Fe.exports?Fe.exports=Be:M.amdD&&M.amdO?void 0!==(Oe=function(){return Be}.call(Ye,M,Ye,Fe))&&(Fe.exports=Oe):this.xor4096=Be}(0,ot=M.nmd(ot))},5353:function(ot,Ye,M){var Oe;!function(Xt,Fe,St){function We(xe){var V=this;V.next=function(){var ae,ve,pe=V.x,J=V.i;return ae=pe[J],ve=(ae^=ae>>>7)^ae<<24,ve^=(ae=pe[J+1&7])^ae>>>10,ve^=(ae=pe[J+3&7])^ae>>>3,ve^=(ae=pe[J+4&7])^ae<<7,ae=pe[J+7&7],pe[J]=ve^=(ae^=ae<<13)^ae<<9,V.i=J+1&7,ve},function le(pe,J){var ae,Ne=[];if(J===(0|J))Ne[0]=J;else for(J=""+J,ae=0;ae<J.length;++ae)Ne[7&ae]=Ne[7&ae]<<15^J.charCodeAt(ae)+Ne[ae+1&7]<<13;for(;Ne.length<8;)Ne.push(0);for(ae=0;ae<8&&0===Ne[ae];++ae);for(8==ae&&(Ne[7]=-1),pe.x=Ne,pe.i=0,ae=256;ae>0;--ae)pe.next()}(V,xe)}function Ee(xe,V){return V.x=xe.x.slice(),V.i=xe.i,V}function Be(xe,V){null==xe&&(xe=+new Date);var le=new We(xe),pe=V&&V.state,J=function(){return(le.next()>>>0)/4294967296};return J.double=function(){do{var Ne=((le.next()>>>11)+(le.next()>>>0)/4294967296)/(1<<21)}while(0===Ne);return Ne},J.int32=le.next,J.quick=J,pe&&(pe.x&&Ee(pe,le),J.state=function(){return Ee(le,{})}),J}Fe&&Fe.exports?Fe.exports=Be:M.amdD&&M.amdO?void 0!==(Oe=function(){return Be}.call(Ye,M,Ye,Fe))&&(Fe.exports=Oe):this.xorshift7=Be}(0,ot=M.nmd(ot))},3263:function(ot,Ye,M){var Oe;!function(Xt,Fe,St){function We(xe){var V=this,le="";V.next=function(){var J=V.x^V.x>>>2;return V.x=V.y,V.y=V.z,V.z=V.w,V.w=V.v,(V.d=V.d+362437|0)+(V.v=V.v^V.v<<4^J^J<<1)|0},V.x=0,V.y=0,V.z=0,V.w=0,V.v=0,xe===(0|xe)?V.x=xe:le+=xe;for(var pe=0;pe<le.length+64;pe++)V.x^=0|le.charCodeAt(pe),pe==le.length&&(V.d=V.x<<10^V.x>>>4),V.next()}function Ee(xe,V){return V.x=xe.x,V.y=xe.y,V.z=xe.z,V.w=xe.w,V.v=xe.v,V.d=xe.d,V}function Be(xe,V){var le=new We(xe),pe=V&&V.state,J=function(){return(le.next()>>>0)/4294967296};return J.double=function(){do{var Ne=((le.next()>>>11)+(le.next()>>>0)/4294967296)/(1<<21)}while(0===Ne);return Ne},J.int32=le.next,J.quick=J,pe&&("object"==typeof pe&&Ee(pe,le),J.state=function(){return Ee(le,{})}),J}Fe&&Fe.exports?Fe.exports=Be:M.amdD&&M.amdO?void 0!==(Oe=function(){return Be}.call(Ye,M,Ye,Fe))&&(Fe.exports=Oe):this.xorwow=Be}(0,ot=M.nmd(ot))},2508:function(ot,Ye,M){var Oe;!function(Xt,Fe,St){var ae,We=256,V=St.pow(We,6),le=St.pow(2,52),pe=2*le,J=We-1;function ve(et,at,it){var re=[],Q=Ut(Wt((at=1==at?{entropy:!0}:at||{}).entropy?[et,Jn(Fe)]:null==et?function ms(){try{var et;return ae&&(et=ae.randomBytes)?et=et(We):(et=new Uint8Array(We),(Xt.crypto||Xt.msCrypto).getRandomValues(et)),Jn(et)}catch{var at=Xt.navigator,it=at&&at.plugins;return[+new Date,Xt,it,Xt.screen,Jn(Fe)]}}():et,3),re),A=new Ne(re),me=function(){for(var Re=A.g(6),tt=V,je=0;Re<le;)Re=(Re+je)*We,tt*=We,je=A.g(1);for(;Re>=pe;)Re/=2,tt/=2,je>>>=1;return(Re+je)/tt};return me.int32=function(){return 0|A.g(4)},me.quick=function(){return A.g(4)/4294967296},me.double=me,Ut(Jn(A.S),Fe),(at.pass||it||function(Re,tt,je,lt){return lt&&(lt.S&&ut(lt,A),Re.state=function(){return ut(A,{})}),je?(St.random=Re,tt):Re})(me,Q,"global"in at?at.global:this==St,at.state)}function Ne(et){var at,it=et.length,re=this,Q=0,A=re.i=re.j=0,me=re.S=[];for(it||(et=[it++]);Q<We;)me[Q]=Q++;for(Q=0;Q<We;Q++)me[Q]=me[A=J&A+et[Q%it]+(at=me[Q])],me[A]=at;(re.g=function(Re){for(var tt,je=0,lt=re.i,Dt=re.j,Lt=re.S;Re--;)tt=Lt[lt=J&lt+1],je=je*We+Lt[J&(Lt[lt]=Lt[Dt=J&Dt+tt])+(Lt[Dt]=tt)];return re.i=lt,re.j=Dt,je})(We)}function ut(et,at){return at.i=et.i,at.j=et.j,at.S=et.S.slice(),at}function Wt(et,at){var Q,it=[],re=typeof et;if(at&&"object"==re)for(Q in et)try{it.push(Wt(et[Q],at-1))}catch{}return it.length?it:"string"==re?et:et+"\0"}function Ut(et,at){for(var re,it=et+"",Q=0;Q<it.length;)at[J&Q]=J&(re^=19*at[J&Q])+it.charCodeAt(Q++);return Jn(at)}function Jn(et){return String.fromCharCode.apply(0,et)}if(Ut(St.random(),Fe),ot.exports){ot.exports=ve;try{ae=M(5042)}catch{}}else void 0!==(Oe=function(){return ve}.call(Ye,M,Ye,ot))&&(ot.exports=Oe)}(typeof self<"u"?self:this,[],Math)},5410:()=>{},8628:()=>{},1601:()=>{},7792:()=>{},4977:()=>{},5042:()=>{}}]);
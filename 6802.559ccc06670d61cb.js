(self.webpackChunkapp=self.webpackChunkapp||[]).push([[6802],{6802:(JO,Ui,D)=>{"use strict";D.r(Ui),D.d(Ui,{ScanPagePageModule:()=>qO});var eo={};D.r(eo),D.d(eo,{addImpl:()=>Gu,bincountImpl:()=>mi,bincountReduceImpl:()=>Zu,bitwiseAndImpl:()=>Yu,castImpl:()=>Uu,ceilImpl:()=>Qu,concatImpl:()=>Ju,equalImpl:()=>nc,expImpl:()=>rc,expm1Impl:()=>ic,floorImpl:()=>uc,gatherNdImpl:()=>cc,gatherV2Impl:()=>dc,greaterEqualImpl:()=>pc,greaterImpl:()=>hc,lessEqualImpl:()=>mc,lessImpl:()=>fc,linSpaceImpl:()=>gc,logImpl:()=>xc,maxImpl:()=>yc,maximumImpl:()=>vc,minimumImpl:()=>Cc,multiplyImpl:()=>gi,negImpl:()=>Sc,notEqualImpl:()=>Ic,prodImpl:()=>Rc,raggedGatherImpl:()=>Dc,raggedRangeImpl:()=>Ec,raggedTensorToTensorImpl:()=>Oc,rangeImpl:()=>Pc,rsqrtImpl:()=>zc,scatterImpl:()=>kn,sigmoidImpl:()=>sv,simpleAbsImpl:()=>Xu,sliceImpl:()=>qu,sparseFillEmptyRowsImpl:()=>Mc,sparseReshapeImpl:()=>Bc,sparseSegmentReductionImpl:()=>wi,sqrtImpl:()=>Ek,staticRegexReplaceImpl:()=>Vc,stridedSliceImpl:()=>Wc,stringNGramsImpl:()=>Uc,stringSplitImpl:()=>Gc,stringToHashBucketFastImpl:()=>Hc,subImpl:()=>ac,tileImpl:()=>Xc,topKImpl:()=>Kc,transposeImpl:()=>pi,uniqueImpl:()=>Zc});var as=D(6814),to=D(95),Mt=D(6761),Gi=D(6958),L=D(6689),no=D(7926),a=D(9075),so=function(t,n){return(so=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,s){e.__proto__=s}||function(e,s){for(var r in s)s.hasOwnProperty(r)&&(e[r]=s[r])})(t,n)};function Hi(t,n){function e(){this.constructor=t}so(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}var Tt=function(){return Tt=Object.assign||function(n){for(var e,s=1,r=arguments.length;s<r;s++)for(var o in e=arguments[s])Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n},Tt.apply(this,arguments)};function Nt(t,n,e,s){return new(e||(e=Promise))(function(o,i){function l(d){try{c(s.next(d))}catch(h){i(h)}}function u(d){try{c(s.throw(d))}catch(h){i(h)}}function c(d){d.done?o(d.value):function r(o){return o instanceof e?o:new e(function(i){i(o)})}(d.value).then(l,u)}c((s=s.apply(t,n||[])).next())})}function Rt(t,n){var s,r,o,i,e={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(c){return function(d){return function u(c){if(s)throw new TypeError("Generator is already executing.");for(;e;)try{if(s=1,r&&(o=2&c[0]?r.return:c[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,c[1])).done)return o;switch(r=0,o&&(c=[2&c[0],o.value]),c[0]){case 0:case 1:o=c;break;case 4:return e.label++,{value:c[1],done:!1};case 5:e.label++,r=c[1],c=[0];continue;case 7:c=e.ops.pop(),e.trys.pop();continue;default:if(!(o=(o=e.trys).length>0&&o[o.length-1])&&(6===c[0]||2===c[0])){e=0;continue}if(3===c[0]&&(!o||c[1]>o[0]&&c[1]<o[3])){e.label=c[1];break}if(6===c[0]&&e.label<o[1]){e.label=o[1],o=c;break}if(o&&e.label<o[2]){e.label=o[2],e.ops.push(c);break}o[2]&&e.ops.pop(),e.trys.pop();continue}c=n.call(t,e)}catch(d){c=[6,d],r=0}finally{s=o=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,d])}}}function Xi(t){var n=t.shape[2],e=a.argMax(t,2),s=a.reshape(e,[-1]);return a.oneHot(s,n)}function Os(t,n){return a.tidy(function(){return a.cast(a.greater(t,a.scalar(n)),"int32")})}function yh(t,n){var e=n.shape,s=e[0],r=e[1],o=e[2];return a.tidy(function(){var i=Xi(n),l=a.expandDims(a.range(0,o,1,"int32"),1),u=a.cast(a.matMul(i,l),"int32"),c=a.reshape(u,[s,r]),d=a.add(c,a.scalar(1,"int32"));return a.sub(function xh(t,n){return a.mul(t,n)}(d,t),a.scalar(1,"int32"))})}var ji=function(){function t(n,e){this.model=n,this.outputStride=e;var s=this.model.inputs[0].shape;a.util.assert(-1===s[1]&&-1===s[2],function(){return"Input shape [".concat(s[1],", ").concat(s[2],"] ")+"must both be equal to or -1"})}return t.prototype.predict=function(n){var e=this;return a.tidy(function(){var s=e.preprocessInput(a.cast(n,"float32")),r=a.expandDims(s,0),i=e.model.predict(r).map(function(u){return a.squeeze(u,[0])}),l=e.nameOutputResults(i);return{heatmapScores:a.sigmoid(l.heatmap),offsets:l.offsets,displacementFwd:l.displacementFwd,displacementBwd:l.displacementBwd,segmentation:l.segmentation,partHeatmaps:l.partHeatmaps,longOffsets:l.longOffsets,partOffsets:l.partOffsets}})},t.prototype.dispose=function(){this.model.dispose()},t}(),vh=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return Hi(n,t),n.prototype.preprocessInput=function(e){return a.tidy(function(){return a.sub(a.div(e,127.5),1)})},n.prototype.nameOutputResults=function(e){return{offsets:e[0],segmentation:e[1],partHeatmaps:e[2],longOffsets:e[3],heatmap:e[4],displacementFwd:e[5],displacementBwd:e[6],partOffsets:e[7]}},n}(ji),Ps=["nose","leftEye","rightEye","leftEar","rightEar","leftShoulder","rightShoulder","leftElbow","rightElbow","leftWrist","rightWrist","leftHip","rightHip","leftKnee","rightKnee","leftAnkle","rightAnkle"],ft=Ps.length,zs=Ps.reduce(function(t,n,e){return t[n]=e,t},{});function ro(t,n,e){return[n[1]/(e.left+e.right+t[1]),n[0]/(e.top+e.bottom+t[0])]}function Ki(t,n,e,s){return{y:s.get(t,n,e),x:s.get(t,n,e+ft)}}function qi(t,n,e){var i=Ki(t.heatmapY,t.heatmapX,t.id,e);return{x:t.heatmapX*n+i.x,y:t.heatmapY*n+i.y}}function Zi(t,n,e){return t<n?n:t>e?e:t}function Yi(t,n){return{x:t.x+n.x,y:t.y+n.y}}function Ih(t,n,e){void 0===e&&(e=.3);for(var s=0,r=0,o=0;o<t.length;o++)n.keypoints[o].score>e&&(r+=1,s+=Math.pow(t[o].x-n.keypoints[o].position.x,2)+Math.pow(t[o].y-n.keypoints[o].position.y,2));return 0===r?s=1/0:s/=r,s}function Th(t,n,e,s,r,o,i){for(var l=i[0],u=i[1],c=e(t),d=c.y*s+c.x,h=r[ft*(2*d)+n],p=r[ft*(2*d+1)+n],f=t.y+h,m=t.x+p,x=0;x<o;x++){f=Math.min(f,l-1);var g=e({x:m=Math.min(m,u-1),y:f}),y=g.y*s+g.x;f+=h=r[ft*(2*y)+n],m+=p=r[ft*(2*y+1)+n]}return{x:m,y:f}}function Qi(t,n,e,s,r,o,i,l,u,c){for(var d=r[0],h=r[1],p=o[0],f=o[1],m=l[0],x=l[1],g=[],y=function(k){return function kh(t,n,e,s){var o=n[1],i=e[0],u=Math.round(((n[0]+t.y+1)*e[1]-1)/s);return{x:Math.round(((o+t.x+1)*i-1)/s),y:u}}(k,[d,h],[p,f],u)},b=0;b<s;b++){var C=Th(t,b,y,i,n,c,[m,x]);g.push(C)}for(var v=-1,w=1/0,S=0;S<e.length;S++){var I=Ih(g,e[S]);I<w&&(v=S,w=I)}return v}function Ji(t,n){var e=t[0];return[Math.round((t[1]-1)/n+1),Math.round((e-1)/n+1)]}function ea(t,n,e,s,r,o,i,l,u,c,d){for(var h=i[0],p=i[1],f=t.shape,m=f[0],x=f[1],g=n.shape.slice(0,2),C=a.reshape(n,[g[0],g[1],2,ft]),v=new Float32Array(d*ft*3).fill(0),w=0;w<e.length;w++)for(var S=w*ft*3,I=e[w],k=0;k<ft;k++){var N=I.keypoints[k],T=S+3*k;v[T]=N.score,v[T+1]=N.position.y,v[T+2]=N.position.x}var A=ro([s,r],[h,p],l),$=A[0],F=A[1],O=a.tensor(v,[d,ft,3]),P=l.top,z=l.left,M={variableNames:["segmentation","longOffsets","poses"],outputShape:[m,x],userCode:"\n    int convertToPositionInOutput(int pos, int pad, float scale, int stride) {\n      return round(((float(pos + pad) + 1.0) * scale - 1.0) / float(stride));\n    }\n\n    float convertToPositionInOutputFloat(\n        int pos, int pad, float scale, int stride) {\n      return ((float(pos + pad) + 1.0) * scale - 1.0) / float(stride);\n    }\n\n    float dist(float x1, float y1, float x2, float y2) {\n      return pow(x1 - x2, 2.0) + pow(y1 - y2, 2.0);\n    }\n\n    float sampleLongOffsets(float h, float w, int d, int k) {\n      float fh = fract(h);\n      float fw = fract(w);\n      int clH = int(ceil(h));\n      int clW = int(ceil(w));\n      int flH = int(floor(h));\n      int flW = int(floor(w));\n      float o11 = getLongOffsets(flH, flW, d, k);\n      float o12 = getLongOffsets(flH, clW, d, k);\n      float o21 = getLongOffsets(clH, flW, d, k);\n      float o22 = getLongOffsets(clH, clW, d, k);\n      float o1 = mix(o11, o12, fw);\n      float o2 = mix(o21, o22, fw);\n      return mix(o1, o2, fh);\n    }\n\n    int findNearestPose(int h, int w) {\n      float prob = getSegmentation(h, w);\n      if (prob < 1.0) {\n        return -1;\n      }\n\n      // Done(Tyler): convert from output space h/w to strided space.\n      float stridedH = convertToPositionInOutputFloat(\n        h, ".concat(P,", ").concat(F,", ").concat(o,");\n      float stridedW = convertToPositionInOutputFloat(\n        w, ").concat(z,", ").concat($,", ").concat(o,");\n\n      float minDist = 1000000.0;\n      int iMin = -1;\n      for (int i = 0; i < ").concat(d,"; i++) {\n        float curDistSum = 0.0;\n        int numKpt = 0;\n        for (int k = 0; k < ").concat(ft,"; k++) {\n          float dy = sampleLongOffsets(stridedH, stridedW, 0, k);\n          float dx = sampleLongOffsets(stridedH, stridedW, 1, k);\n\n          float y = float(h) + dy;\n          float x = float(w) + dx;\n\n          for (int s = 0; s < ").concat(u,"; s++) {\n            int yRounded = round(min(y, float(").concat(s-1,")));\n            int xRounded = round(min(x, float(").concat(r-1,")));\n\n            float yStrided = convertToPositionInOutputFloat(\n              yRounded, ").concat(P,", ").concat(F,", ").concat(o,");\n            float xStrided = convertToPositionInOutputFloat(\n              xRounded, ").concat(z,", ").concat($,", ").concat(o,");\n\n            float dy = sampleLongOffsets(yStrided, xStrided, 0, k);\n            float dx = sampleLongOffsets(yStrided, xStrided, 1, k);\n\n            y = y + dy;\n            x = x + dx;\n          }\n\n          float poseScore = getPoses(i, k, 0);\n          float poseY = getPoses(i, k, 1);\n          float poseX = getPoses(i, k, 2);\n          if (poseScore > ").concat(c,") {\n            numKpt = numKpt + 1;\n            curDistSum = curDistSum + dist(x, y, poseX, poseY);\n          }\n        }\n        if (numKpt > 0 && curDistSum / float(numKpt) < minDist) {\n          minDist = curDistSum / float(numKpt);\n          iMin = i;\n        }\n      }\n      return iMin;\n    }\n\n    void main() {\n        ivec2 coords = getOutputCoords();\n        int nearestPose = findNearestPose(coords[0], coords[1]);\n        setOutput(float(nearestPose));\n      }\n  ")};return a.backend().compileAndRun(M,[t,C,O])}function ta(){return"webgl"===(0,a.getBackend)()}function $h(t,n,e,s,r,o,i,l,u,c,d,h){var p=i[0],f=i[1];return void 0===u&&(u=.2),void 0===c&&(c=8),void 0===d&&(d=.3),void 0===h&&(h=10),Nt(this,void 0,void 0,function(){var m,x,g,y,b;return Rt(this,function(C){switch(C.label){case 0:return m=e.filter(function(v){return v.score>=u}),ta()?(g=a.tidy(function(){var v=ea(t,n,m,s,r,o,[p,f],l,c,d,h),w=a.engine().makeTensorFromDataId(v.dataId,v.shape,v.dtype);return m.map(function(S,I){return function Ah(t,n){return a.tidy(function(){return a.cast(a.equal(t,a.scalar(n)),"int32")})}(w,I)})}),[4,Promise.all(g.map(function(v){return v.data()}))]):[3,2];case 1:return x=C.sent(),g.forEach(function(v){return v.dispose()}),[3,5];case 2:return[4,t.data()];case 3:return y=C.sent(),[4,n.data()];case 4:b=C.sent(),x=function Nh(t,n,e,s,r,o,i,l,u,c){var d=i[0],h=i[1];void 0===c&&(c=5);for(var p=e.map(function(k){return new Uint8Array(s*r).fill(0)}),f=l.top,m=l.left,x=ro([s,r],[d,h],l),g=x[0],y=x[1],b=Ji([d,h],o)[0],C=0;C<s;C+=1)for(var v=0;v<r;v+=1){var w=C*r+v;if(1===t[w]){var I=Qi({x:v,y:C},n,e,c,[f,m],[g,y],b,[s,r],o,u);I>=0&&(p[I][w]=1)}}return p}(y,b,m,s,r,o,[p,f],l,c),C.label=5;case 5:return[2,x.map(function(v,w){return{data:v,pose:m[w],width:r,height:s}})]}})})}function Eh(t,n,e,s,r,o,i,l,u,c,d,h,p){var f=l[0],m=l[1];return void 0===c&&(c=.2),void 0===d&&(d=8),void 0===h&&(h=.3),void 0===p&&(p=10),Nt(this,void 0,void 0,function(){var x,g,y,b,C,v;return Rt(this,function(w){switch(w.label){case 0:return x=s.filter(function(S){return S.score>=c}),ta()?(y=a.tidy(function(){var S=ea(t,n,x,r,o,i,[f,m],u,d,h,p),I=a.engine().makeTensorFromDataId(S.dataId,S.shape,S.dtype);return x.map(function(k,N){return function Dh(t,n,e){return a.tidy(function(){return a.sub(a.mul(a.cast(a.equal(t,a.scalar(e)),"int32"),a.add(n,1)),1)})}(I,e,N)})}),[4,Promise.all(y.map(function(S){return S.data()}))]):[3,2];case 1:return g=w.sent(),y.forEach(function(S){return S.dispose()}),[3,6];case 2:return[4,t.data()];case 3:return b=w.sent(),[4,n.data()];case 4:return C=w.sent(),[4,e.data()];case 5:v=w.sent(),g=function Rh(t,n,e,s,r,o,i,l,u,c,d){var h=l[0],p=l[1];void 0===d&&(d=5);for(var f=s.map(function(N){return new Int32Array(r*o).fill(-1)}),m=u.top,x=u.left,g=ro([r,o],[h,p],u),y=g[0],b=g[1],C=Ji([h,p],i)[0],v=0;v<r;v+=1)for(var w=0;w<o;w+=1){var S=v*o+w;if(1===t[S]){var k=Qi({x:w,y:v},n,s,d,[m,x],[y,b],C,[r,o],i,c);k>=0&&(f[k][S]=e[S])}}return f}(b,C,v,x,r,o,i,[f,m],u,d),w.label=6;case 6:return[2,g.map(function(S,I){return{pose:x[I],data:S,height:r,width:o}})]}})})}function oo(t){return Math.floor(t/2)}[["leftHip","leftShoulder"],["leftElbow","leftShoulder"],["leftElbow","leftWrist"],["leftHip","leftKnee"],["leftKnee","leftAnkle"],["rightHip","rightShoulder"],["rightElbow","rightShoulder"],["rightElbow","rightWrist"],["rightHip","rightKnee"],["rightKnee","rightAnkle"],["leftShoulder","rightShoulder"],["leftHip","rightHip"]].map(function(t){return[zs[t[0]],zs[t[1]]]});var _h=function(){function t(n,e){this.priorityQueue=new Array(n),this.numberOfElements=-1,this.getElementValue=e}return t.prototype.enqueue=function(n){this.priorityQueue[++this.numberOfElements]=n,this.swim(this.numberOfElements)},t.prototype.dequeue=function(){var n=this.priorityQueue[0];return this.exchange(0,this.numberOfElements--),this.sink(0),this.priorityQueue[this.numberOfElements+1]=null,n},t.prototype.empty=function(){return-1===this.numberOfElements},t.prototype.size=function(){return this.numberOfElements+1},t.prototype.all=function(){return this.priorityQueue.slice(0,this.numberOfElements+1)},t.prototype.max=function(){return this.priorityQueue[0]},t.prototype.swim=function(n){for(;n>0&&this.less(oo(n),n);)this.exchange(n,oo(n)),n=oo(n)},t.prototype.sink=function(n){for(;2*n<=this.numberOfElements;){var e=2*n;if(e<this.numberOfElements&&this.less(e,e+1)&&e++,!this.less(n,e))break;this.exchange(n,e),n=e}},t.prototype.getValueAt=function(n){return this.getElementValue(this.priorityQueue[n])},t.prototype.less=function(n,e){return this.getValueAt(n)<this.getValueAt(e)},t.prototype.exchange=function(n,e){var s=this.priorityQueue[n];this.priorityQueue[n]=this.priorityQueue[e],this.priorityQueue[e]=s},t}();function Fh(t,n,e,s,r,o){for(var i=o.shape,l=i[0],u=i[1],c=!0,d=Math.max(e-r,0),h=Math.min(e+r+1,l),p=d;p<h;++p){for(var f=Math.max(s-r,0),m=Math.min(s+r+1,u),x=f;x<m;++x)if(o.get(p,x,t)>n){c=!1;break}if(!c)break}return c}var na=[["nose","leftEye"],["leftEye","leftEar"],["nose","rightEye"],["rightEye","rightEar"],["nose","leftShoulder"],["leftShoulder","leftElbow"],["leftElbow","leftWrist"],["leftShoulder","leftHip"],["leftHip","leftKnee"],["leftKnee","leftAnkle"],["nose","rightShoulder"],["rightShoulder","rightElbow"],["rightElbow","rightWrist"],["rightShoulder","rightHip"],["rightHip","rightKnee"],["rightKnee","rightAnkle"]].map(function(t){return[zs[t[0]],zs[t[1]]]}),ao=na.map(function(t){return t[1]}),sa=na.map(function(t){return t[0]});function lo(t,n,e,s){return{y:Zi(Math.round(t.y/n),0,e-1),x:Zi(Math.round(t.x/n),0,s-1)}}function ra(t,n,e,s,r,o,i,l){void 0===l&&(l=2);for(var u=s.shape,c=u[0],d=u[1],p=function Ph(t,n,e){var s=e.shape[2]/2;return{y:e.get(n.y,n.x,t),x:e.get(n.y,n.x,s+t)}}(t,lo(n.position,o,c,d),i),m=Yi(n.position,p),x=0;x<l;x++){var g=lo(m,o,c,d),y=Ki(g.y,g.x,e,r);m=Yi({x:g.x*o,y:g.y*o},{x:y.x,y:y.y})}var b=lo(m,o,c,d),C=s.get(b.y,b.x,e);return{position:m,part:Ps[e],score:C}}function zh(t,n,e,s,r,o){var l=ao.length,u=new Array(n.shape[2]),c=t.part,d=t.score,h=qi(c,s,e);u[c.id]={score:d,part:Ps[c.id],position:h};for(var p=l-1;p>=0;--p){var m=sa[p];u[f=ao[p]]&&!u[m]&&(u[m]=ra(p,u[f],m,n,e,s,o))}for(p=0;p<l;++p){var f;m=ao[p],u[f=sa[p]]&&!u[m]&&(u[m]=ra(p,u[f],m,n,e,s,r))}return u}function oa(t,n,e,s){var r=e.x,o=e.y;return t.some(function(i){var u=i.keypoints[s].position;return function Sh(t,n,e,s){var r=e-t,o=s-n;return r*r+o*o}(o,r,u.y,u.x)<=n})}function Lh(t,n,e){return e.reduce(function(r,o,i){var u=o.score;return oa(t,n,o.position,i)||(r+=u),r},0)/e.length}function Ls(t,n,e,s,r,o,i,l){void 0===i&&(i=.5),void 0===l&&(l=20);for(var u=[],c=function Oh(t,n,e){for(var s=e.shape,r=s[0],o=s[1],i=s[2],l=new _h(r*o*i,function(p){return p.score}),u=0;u<r;++u)for(var c=0;c<o;++c)for(var d=0;d<i;++d){var h=e.get(u,c,d);h<t||Fh(d,h,u,c,n,e)&&l.enqueue({score:h,part:{heatmapY:u,heatmapX:c,id:d}})}return l}(i,1,t),d=l*l;u.length<o&&!c.empty();){var h=c.dequeue();if(!oa(u,d,qi(h.part,r,n),h.part.id)){var f=zh(h,t,n,r,e,s),m=Lh(u,d,f);u.push({keypoints:f,score:m})}}return u}var _n,Bh=[-123.15,-115.9,-103.06],Vh=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return Hi(n,t),n.prototype.preprocessInput=function(e){return a.add(e,Bh)},n.prototype.nameOutputResults=function(e){return{offsets:e[4],segmentation:e[6],partHeatmaps:e[5],longOffsets:e[3],heatmap:e[2],displacementFwd:e[1],displacementBwd:e[0],partOffsets:e[7]}},n}(ji),ia="https://storage.googleapis.com/tfjs-models/savedmodel/bodypix/resnet50/",aa="https://storage.googleapis.com/tfjs-models/savedmodel/bodypix/mobilenet/";function Bt(t){if(typeof HTMLCanvasElement<"u"&&t instanceof HTMLCanvasElement||typeof OffscreenCanvas<"u"&&t instanceof OffscreenCanvas||typeof HTMLImageElement<"u"&&t instanceof HTMLImageElement)return function Gh(t){if("offsetHeight"in t&&0!==t.offsetHeight&&"offsetWidth"in t&&0!==t.offsetWidth)return[t.offsetHeight,t.offsetWidth];if(null!=t.height&&null!=t.width)return[t.height,t.width];throw new Error("HTMLImageElement must have height and width attributes set.")}(t);if(typeof ImageData<"u"&&t instanceof ImageData)return[t.height,t.width];if(typeof HTMLVideoElement<"u"&&t instanceof HTMLVideoElement)return function Hh(t){return t.hasAttribute("height")&&t.hasAttribute("width")?[t.height,t.width]:[t.videoHeight,t.videoWidth]}(t);if(t instanceof a.Tensor)return[t.shape[0],t.shape[1]];throw new Error("error: Unknown input type: ".concat(t,"."))}function la(t,n){return function Xh(t,n){return(t-1)%n==0}(t,n)?t:Math.floor(t/n)*n+1}var ls={low:"low",medium:"medium",high:"high",full:"full"},jh=((_n={})[ls.low]=.25,_n[ls.medium]=.5,_n[ls.high]=.75,_n[ls.full]=1,_n);function Ms(t,n,e){var s=e[0],r=e[1],o=function Kh(t){if("string"==typeof t){var n=jh[t];return a.util.assert("number"==typeof n,function(){return"string value of inputResolution must be one of ".concat(Object.values(ls).join(",")," but was ").concat(t,".")}),n}return a.util.assert("number"==typeof t&&t<=2&&t>=.1,function(){return"inputResolution must be a string or number between ".concat(.1," and ").concat(2,", but ")+"was ".concat(t)}),t}(t);return[la(s*o,n),la(r*o,n)]}function Fn(t,n,e,s,r){var o=n[0],i=n[1],l=e[0],u=e[1],c=s[0],d=c[0],h=c[1],p=s[1],f=p[0],m=p[1];return void 0===r&&(r=!1),a.tidy(function(){var x=a.image.resizeBilinear(t,[l,u],!0);return r&&(x=a.sigmoid(x)),function Zh(t,n,e){var s=n[0],r=n[1],o=e[0],i=o[0],l=o[1],u=e[1],c=u[0],d=u[1];return a.tidy(function(){var h=a.expandDims(t);return a.squeeze(a.image.cropAndResize(h,[[i/(s+i+l-1),c/(r+c+d-1),(i+s-1)/(s+i+l-1),(c+r-1)/(r+c+d-1)]],[0],[s,r]),[0])})}(x,[o,i],[[d,h],[f,m]])})}function Bs(t,n){var e=n[0],s=n[1],r=Bt(t),o=r[0],i=r[1],l=s/e,c=[0,0,0,0],d=c[0],h=c[1],p=c[2],f=c[3];i/o<l?(d=0,h=0,p=Math.round(.5*(l*o-i)),f=Math.round(.5*(l*o-i))):(d=Math.round(.5*(1/l*i-o)),h=Math.round(.5*(1/l*i-o)),p=0,f=0);var m=a.tidy(function(){var x=function qh(t){return t instanceof a.Tensor?t:a.browser.fromPixels(t)}(t);return x=a.pad3d(x,[[d,h],[p,f],[0,0]]),a.image.resizeBilinear(x,[e,s])});return{resized:m,padding:{top:d,left:p,right:f,bottom:h}}}function Vs(t){return Nt(this,void 0,void 0,function(){return Rt(this,function(n){return[2,Promise.all(t.map(function(e){return e.buffer()}))]})})}function Ws(t,n,e,s,r){var i=n[1],h=function Qh(t,n,e,s,r){return void 0===s&&(s=0),void 0===r&&(r=0),1===e&&1===n&&0===s&&0===r?t:t.map(function(o){return function Yh(t,n,e,s,r){return void 0===s&&(s=0),void 0===r&&(r=0),{score:t.score,keypoints:t.keypoints.map(function(o){var u=o.position;return{score:o.score,part:o.part,position:{x:u.x*e+r,y:u.y*n+s}}})}}(o,n,e,s,r)})}(t,(n[0]+s.top+s.bottom)/e[0],(i+s.left+s.right)/e[1],-s.top,-s.left);return r?function ep(t,n){return n<=0?t:t.map(function(e){return function Jh(t,n){return{score:t.score,keypoints:t.keypoints.map(function(e){var o=e.position;return{score:e.score,part:e.part,position:{x:n-1-o.x,y:o.y}}})}}(e,n)})}(h,i):h}var On=!0,Us=!1,da={architecture:"MobileNetV1",outputStride:16,quantBytes:4,multiplier:.75},ha=["MobileNetV1","ResNet50"],pa={MobileNetV1:[8,16,32],ResNet50:[32,16]},fa={MobileNetV1:[.5,.75,1],ResNet50:[1]},ma=[1,2,4],Gs={flipHorizontal:!1,internalResolution:"medium",segmentationThreshold:.7,maxDetections:10,scoreThreshold:.4,nmsRadius:20},Hs={flipHorizontal:!1,internalResolution:"medium",segmentationThreshold:.7,maxDetections:10,scoreThreshold:.4,nmsRadius:20,minKeypointScore:.3,refineSteps:10};function ga(t){var n=t.segmentationThreshold,e=t.maxDetections,s=t.scoreThreshold,r=t.nmsRadius;if(n<0||n>1)throw new Error("segmentationThreshold ".concat(n,". ")+"Should be in range [0.0, 1.0]");if(e<=0)throw new Error("Invalid maxDetections ".concat(e,". ")+"Should be > 0");if(s<0||s>1)throw new Error("Invalid scoreThreshold ".concat(s,". ")+"Should be in range [0.0, 1.0]");if(r<=0)throw new Error("Invalid nmsRadius ".concat(r,"."))}function xa(t){var n=t.segmentationThreshold,e=t.maxDetections,s=t.scoreThreshold,r=t.nmsRadius,o=t.minKeypointScore,i=t.refineSteps;if(n<0||n>1)throw new Error("segmentationThreshold ".concat(n,". ")+"Should be in range [0.0, 1.0]");if(e<=0)throw new Error("Invalid maxDetections ".concat(e,". ")+"Should be > 0");if(s<0||s>1)throw new Error("Invalid scoreThreshold ".concat(s,". ")+"Should be in range [0.0, 1.0]");if(r<=0)throw new Error("Invalid nmsRadius ".concat(r,"."));if(o<0||o>1)throw new Error("Invalid minKeypointScore ".concat(o,".")+"Should be in range [0.0, 1.0]");if(i<=0||i>20)throw new Error("Invalid refineSteps ".concat(i,".")+"Should be in range [1, 20]")}var ya=function(){function t(n){this.baseModel=n}return t.prototype.predictForPersonSegmentation=function(n){var e=this.baseModel.predict(n);return{segmentLogits:e.segmentation,heatmapScores:e.heatmapScores,offsets:e.offsets,displacementFwd:e.displacementFwd,displacementBwd:e.displacementBwd}},t.prototype.predictForPersonSegmentationAndPart=function(n){var e=this.baseModel.predict(n);return{segmentLogits:e.segmentation,partHeatmapLogits:e.partHeatmaps,heatmapScores:e.heatmapScores,offsets:e.offsets,displacementFwd:e.displacementFwd,displacementBwd:e.displacementBwd}},t.prototype.predictForMultiPersonInstanceSegmentationAndPart=function(n){var e=this.baseModel.predict(n);return{segmentLogits:e.segmentation,longOffsets:e.longOffsets,heatmapScores:e.heatmapScores,offsets:e.offsets,displacementFwd:e.displacementFwd,displacementBwd:e.displacementBwd,partHeatmaps:e.partHeatmaps}},t.prototype.segmentPersonActivation=function(n,e,s){var r=this;void 0===s&&(s=.5);var o=Bt(n),i=o[0],l=o[1],u=Ms(e,this.baseModel.outputStride,[i,l]),c=Bs(n,u),d=c.resized,h=c.padding,p=a.tidy(function(){var b=r.predictForPersonSegmentation(d),v=b.heatmapScores,w=b.offsets,S=b.displacementFwd,I=b.displacementBwd,k=d.shape,A=Fn(b.segmentLogits,[i,l],[k[0],k[1]],[[h.top,h.bottom],[h.left,h.right]],On);return{segmentation:Os(a.squeeze(A),s),heatmapScores:v,offsets:w,displacementFwd:S,displacementBwd:I}}),f=p.segmentation,m=p.heatmapScores,x=p.offsets,g=p.displacementFwd,y=p.displacementBwd;return d.dispose(),{segmentation:f,heatmapScores:m,offsets:x,displacementFwd:g,displacementBwd:y,padding:h,internalResolutionHeightAndWidth:u}},t.prototype.segmentPerson=function(n,e){return void 0===e&&(e=Gs),Nt(this,void 0,void 0,function(){var s,r,o,i,l,u,c,d,h,p,f,m,x,v;return Rt(this,function(w){switch(w.label){case 0:return ga(e=Tt(Tt({},Gs),e)),s=this.segmentPersonActivation(n,e.internalResolution,e.segmentationThreshold),o=s.heatmapScores,i=s.offsets,l=s.displacementFwd,u=s.displacementBwd,c=s.padding,d=s.internalResolutionHeightAndWidth,p=(h=(r=s.segmentation).shape)[0],f=h[1],[4,r.data()];case 1:return m=w.sent(),r.dispose(),[4,Vs([o,i,l,u])];case 2:return x=w.sent(),v=Ws(v=Ls(x[0],x[1],x[2],x[3],this.baseModel.outputStride,e.maxDetections,e.scoreThreshold,e.nmsRadius),[p,f],d,c,Us),o.dispose(),i.dispose(),l.dispose(),u.dispose(),[2,{height:p,width:f,data:m,allPoses:v}]}})})},t.prototype.segmentMultiPerson=function(n,e){return void 0===e&&(e=Hs),Nt(this,void 0,void 0,function(){var s,r,o,i,l,u,c,d,h,p,f,m,x,g,y,S,I,k=this;return Rt(this,function(N){switch(N.label){case 0:return xa(e=Tt(Tt({},Hs),e)),s=Bt(n),i=Ms(e.internalResolution,this.baseModel.outputStride,[r=s[0],o=s[1]]),l=Bs(n,i),u=l.resized,c=l.padding,d=a.tidy(function(){var E,T=k.predictForMultiPersonInstanceSegmentationAndPart(u),$=T.longOffsets,F=T.heatmapScores,O=T.offsets,P=T.displacementFwd,z=T.displacementBwd,M=Fn(T.segmentLogits,[r,o],i,[[c.top,c.bottom],[c.left,c.right]],On);return E=$,{segmentation:Os(a.squeeze(M),e.segmentationThreshold),longOffsets:E,heatmapScoresRaw:F,offsetsRaw:O,displacementFwdRaw:P,displacementBwdRaw:z}}),h=d.segmentation,p=d.longOffsets,[4,Vs([f=d.heatmapScoresRaw,m=d.offsetsRaw,x=d.displacementFwdRaw,g=d.displacementBwdRaw])];case 1:return y=N.sent(),S=Ws(S=Ls(y[0],y[1],y[2],y[3],this.baseModel.outputStride,e.maxDetections,e.scoreThreshold,e.nmsRadius),[r,o],i,c,Us),[4,$h(h,p,S,r,o,this.baseModel.outputStride,i,c,e.scoreThreshold,e.refineSteps,e.minKeypointScore,e.maxDetections)];case 2:return I=N.sent(),u.dispose(),h.dispose(),p.dispose(),f.dispose(),m.dispose(),x.dispose(),g.dispose(),[2,I]}})})},t.prototype.segmentPersonPartsActivation=function(n,e,s){var r=this;void 0===s&&(s=.5);var o=Bt(n),i=o[0],l=o[1],u=Ms(e,this.baseModel.outputStride,[i,l]),c=Bs(n,u),d=c.resized,h=c.padding,p=a.tidy(function(){var b=r.predictForPersonSegmentationAndPart(d),v=b.partHeatmapLogits,w=b.heatmapScores,S=b.offsets,I=b.displacementFwd,k=b.displacementBwd,N=d.shape,T=N[0],A=N[1],$=Fn(b.segmentLogits,[i,l],[T,A],[[h.top,h.bottom],[h.left,h.right]],On),F=Fn(v,[i,l],[T,A],[[h.top,h.bottom],[h.left,h.right]],On);return{partSegmentation:yh(Os(a.squeeze($),s),F),heatmapScores:w,offsets:S,displacementFwd:I,displacementBwd:k}}),f=p.partSegmentation,m=p.heatmapScores,x=p.offsets,g=p.displacementFwd,y=p.displacementBwd;return d.dispose(),{partSegmentation:f,heatmapScores:m,offsets:x,displacementFwd:g,displacementBwd:y,padding:h,internalResolutionHeightAndWidth:u}},t.prototype.segmentPersonParts=function(n,e){return void 0===e&&(e=Gs),Nt(this,void 0,void 0,function(){var s,r,o,i,l,u,c,d,h,p,f,m,x,v;return Rt(this,function(w){switch(w.label){case 0:return ga(e=Tt(Tt({},Gs),e)),s=this.segmentPersonPartsActivation(n,e.internalResolution,e.segmentationThreshold),o=s.heatmapScores,i=s.offsets,l=s.displacementFwd,u=s.displacementBwd,c=s.padding,d=s.internalResolutionHeightAndWidth,p=(h=(r=s.partSegmentation).shape)[0],f=h[1],[4,r.data()];case 1:return m=w.sent(),r.dispose(),[4,Vs([o,i,l,u])];case 2:return x=w.sent(),v=Ws(v=Ls(x[0],x[1],x[2],x[3],this.baseModel.outputStride,e.maxDetections,e.scoreThreshold,e.nmsRadius),[p,f],d,c,Us),o.dispose(),i.dispose(),l.dispose(),u.dispose(),[2,{height:p,width:f,data:m,allPoses:v}]}})})},t.prototype.segmentMultiPersonParts=function(n,e){return void 0===e&&(e=Hs),Nt(this,void 0,void 0,function(){var s,r,o,i,l,u,c,d,h,p,f,m,x,g,y,b,I,k,N=this;return Rt(this,function(T){switch(T.label){case 0:return xa(e=Tt(Tt({},Hs),e)),s=Bt(n),i=Ms(e.internalResolution,this.baseModel.outputStride,[r=s[0],o=s[1]]),l=Bs(n,i),u=l.resized,c=l.padding,d=a.tidy(function(){var A=N.predictForMultiPersonInstanceSegmentationAndPart(u),F=A.longOffsets,O=A.heatmapScores,P=A.offsets,z=A.displacementFwd,M=A.displacementBwd,E=A.partHeatmaps,B=Fn(A.segmentLogits,[r,o],i,[[c.top,c.bottom],[c.left,c.right]],On),W=Fn(E,[r,o],i,[[c.top,c.bottom],[c.left,c.right]],On),U=F,H=Os(a.squeeze(B),e.segmentationThreshold),G=function bh(t){var n=t.shape,e=n[0],s=n[1],r=n[2];return a.tidy(function(){var o=Xi(t),i=a.expandDims(a.range(0,r,1,"int32"),1),l=a.cast(a.matMul(o,i),"int32");return a.reshape(l,[e,s])})}(W);return{segmentation:H,longOffsets:U,heatmapScoresRaw:O,offsetsRaw:P,displacementFwdRaw:z,displacementBwdRaw:M,partSegmentation:G}}),h=d.segmentation,p=d.longOffsets,y=d.partSegmentation,[4,Vs([f=d.heatmapScoresRaw,m=d.offsetsRaw,x=d.displacementFwdRaw,g=d.displacementBwdRaw])];case 1:return b=T.sent(),I=Ws(I=Ls(b[0],b[1],b[2],b[3],this.baseModel.outputStride,e.maxDetections,e.scoreThreshold,e.nmsRadius),[r,o],i,c,Us),[4,Eh(h,p,y,I,r,o,this.baseModel.outputStride,i,c,e.scoreThreshold,e.refineSteps,e.minKeypointScore,e.maxDetections)];case 2:return k=T.sent(),u.dispose(),h.dispose(),p.dispose(),f.dispose(),m.dispose(),x.dispose(),g.dispose(),y.dispose(),[2,k]}})})},t.prototype.dispose=function(){this.baseModel.dispose()},t}();function np(t){return Nt(this,void 0,void 0,function(){var n,e,s,r,o,i;return Rt(this,function(l){switch(l.label){case 0:if(n=t.outputStride,e=t.quantBytes,s=t.multiplier,null==a)throw new Error("Cannot find TensorFlow.js. If you are using a <script> tag, please also include @tensorflow/tfjs on the page before using this\n        model.");return r=function Uh(t,n,e){var s={1:"100",.75:"075",.5:"050"},r="model-stride".concat(t,".json");return 4===e?aa+"float/".concat(s[n],"/")+r:aa+"quant".concat(e,"/").concat(s[n],"/")+r}(n,s,e),[4,no.YL(t.modelUrl||r)];case 1:return o=l.sent(),i=new vh(o,n),[2,new ya(i)]}})})}function sp(t){return Nt(this,void 0,void 0,function(){var n,e,s,r,o;return Rt(this,function(i){switch(i.label){case 0:if(n=t.outputStride,e=t.quantBytes,null==a)throw new Error("Cannot find TensorFlow.js. If you are using a <script> tag, please also include @tensorflow/tfjs on the page before using this\n        model.");return s=function Wh(t,n){var e="model-stride".concat(t,".json");return 4===n?ia+"float/"+e:ia+"quant".concat(n,"/")+e}(n,e),[4,no.YL(t.modelUrl||s)];case 1:return r=i.sent(),o=new Vh(r,n),[2,new ya(o)]}})})}var uo={};function co(t){return uo[t]||(uo[t]=function ap(){if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(0,0);throw new Error("Cannot create a canvas in this context")}()),uo[t]}function Pn(t,n,e){var s=co(e);return 0===n?function up(t,n){var e=t.width,s=t.height;n.width=e,n.height=s,n.getContext("2d").drawImage(t,0,0,e,s)}(t,s):function lp(t,n,e){var s=t.height,r=t.width,o=e.getContext("2d");e.width=r,e.height=s,o.clearRect(0,0,r,s),o.save(),function ip(){return/^((?!chrome|android).)*safari/i.test(navigator.userAgent)}()?function op(t,n,e){for(var s=t.getContext("2d"),r=0,i=1/(2*Math.PI*5*5),l=e<3?1:2,u=-e;u<=e;u+=l)for(var c=-e;c<=e;c+=l)r+=i*Math.exp(-(c*c+u*u)/50);for(u=-e;u<=e;u+=l)for(c=-e;c<=e;c+=l)s.globalAlpha=i*Math.exp(-(c*c+u*u)/50)/r*e,s.drawImage(n,c,u);s.globalAlpha=1}(e,t,n):(o.filter="blur(".concat(n,"px)"),o.drawImage(t,0,0,r,s)),o.restore()}(t,n,s),s}var dp=[[110,64,170],[143,61,178],[178,60,178],[210,62,167],[238,67,149],[255,78,125],[255,94,99],[255,115,75],[255,140,56],[239,167,47],[217,194,49],[194,219,64],[175,240,91],[135,245,87],[96,247,96],[64,243,115],[40,234,141],[28,219,169],[26,199,194],[33,176,213],[47,150,224],[65,125,224],[84,101,214],[99,81,195]],mt_blurredMask="blurred-mask",mt_mask="mask",V=D(4251),ue=D(3062),Z=D(8737),qs=D(6034);const Ca={kernelName:V.SYM,inputsToSave:["x"],gradFunc:(t,n)=>{const[e]=n;return{x:()=>(0,Z.d)(t,(0,qs.N)((0,ue.p)(e,"float32"),-1))}}};var Fe=D(3530),at=D(5048),Xe=D(8661),zn=D(930),Ue=D(7527),tt=D(1191);const gp={kernelName:V.VGw,inputsToSave:["x"],gradFunc:(t,n)=>{const[e]=n;return{x:()=>{const s=(0,Ue.h)((0,ue.p)(e,"float32")),r=(0,zn._)((0,tt.l)((0,Xe.i)(1),s));return(0,at.W)((0,Fe.h)(t,r))}}}},xp={kernelName:V.SpW,inputsToSave:["x"],gradFunc:(t,n)=>{const[e]=n;return{x:()=>{const s=(0,zn._)((0,tt.l)((0,Ue.h)((0,ue.p)(e,"float32")),1));return(0,Fe.h)(t,s)}}}};var Se=D(3239),te=D(5715),Ie=D(9929);const yp={kernelName:V.mm_,inputsToSave:["a","b"],gradFunc:(t,n)=>{const[e,s]=n,r=Se.assertAndGetBroadcastShape(e.shape,s.shape);return{a:()=>{let l=t;const u=Se.getReductionAxes(e.shape,r);return u.length>0&&(l=(0,Ie.S)(l,u)),(0,te.X)(l,e.shape)},b:()=>{let l=t;const u=Se.getReductionAxes(s.shape,r);return u.length>0&&(l=(0,Ie.S)(l,u)),(0,te.X)(l,s.shape)}}}},bp={kernelName:V.Xze,saveAllInputs:!0,gradFunc:(t,n)=>{const e={};return n.forEach((s,r)=>{e[r]=()=>t.clone()}),e}};var $e=D(3143);const vp={kernelName:V.sJF,inputsToSave:["x"],gradFunc:(t,n)=>{const[e]=n;return{x:()=>(0,$e.P)(e)}}},Cp={kernelName:V.aJk,inputsToSave:["x"],gradFunc:(t,n)=>{const[e]=n;return{x:()=>(0,$e.P)(e)}}},wp={kernelName:V.M2y,inputsToSave:["x"],gradFunc:(t,n)=>{const[e]=n;return{x:()=>(0,Fe.h)(t,(0,zn._)((0,tt.l)((0,Xe.i)(1),(0,Ue.h)((0,ue.p)(e,"float32")))))}}};var gt=D(7066);const Sp={kernelName:V.qw7,inputsToSave:["x"],gradFunc:(t,n)=>{const[e]=n;return{x:()=>{const s=(0,zn._)((0,gt.I)((0,Xe.i)(1),(0,Ue.h)((0,ue.p)(e,"float32"))));return(0,Fe.h)(t,s)}}}},Ip={kernelName:V.QCc,inputsToSave:["a","b"],gradFunc:(t,n)=>{const[e,s]=n,r=(0,Se.assertAndGetBroadcastShape)(e.shape,s.shape);return{a:()=>{const l=(0,gt.I)((0,Ue.h)(e),(0,Ue.h)(s));let u=(0,Z.d)(t,(0,Fe.h)(s,l));const c=(0,Se.getReductionAxes)(e.shape,r);return c.length>0&&(u=(0,Ie.S)(u,c)),(0,te.X)(u,e.shape)},b:()=>{const l=(0,gt.I)((0,Ue.h)(e),(0,Ue.h)(s));let u=(0,at.W)((0,Z.d)(t,(0,Fe.h)(e,l)));const c=(0,Se.getReductionAxes)(s.shape,r);return c.length>0&&(u=(0,Ie.S)(u,c)),(0,te.X)(u,s.shape)}}}},kp={kernelName:V.jMg,inputsToSave:["x"],gradFunc:(t,n)=>{const[e]=n;return{x:()=>(0,Fe.h)(t,(0,gt.I)((0,Ue.h)((0,ue.p)(e,"float32")),1))}}},Tp={kernelName:V.Oyi,inputsToSave:["x"],gradFunc:(t,n)=>{const[e]=n;return{x:()=>(0,Fe.h)(t,(0,tt.l)((0,Xe.i)(1),(0,Ue.h)((0,ue.p)(e,"float32"))))}}};var xt=D(687),At=D(1257),pe=D(5359),jt=D(5551),Ln=D(4195);const Rp=(0,Ln.op)({avgPool3dGrad_:function Np(t,n,e,s,r,o){const i=(0,At._1)(t,"dy","avgPool3dGrad"),l=(0,At._1)(n,"input","avgPool3dGrad");let u=i,c=l,d=!1;4===l.rank&&(d=!0,u=(0,te.X)(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),c=(0,te.X)(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]])),pe.hu(5===u.rank,()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${u.rank}.`),pe.hu(5===c.rank,()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${c.rank}.`),(0,jt.m)("avgPool3dGrad",r,o);const f=xt.BV.runKernel(V.IMb,{dy:u,input:c},{filterSize:e,strides:s,pad:r,dimRoundingMode:o});return d?(0,te.X)(f,[f.shape[1],f.shape[2],f.shape[3],f.shape[4]]):f}}),Ap={kernelName:V._k9,inputsToSave:["x"],gradFunc:(t,n,e)=>{const[s]=n,{filterSize:r,strides:o,pad:i,dimRoundingMode:l}=e;return{x:()=>Rp(t,s,r,o,i,l)}}},$p=(0,Ln.op)({avgPoolGrad_:function Dp(t,n,e,s,r){const o=(0,At._1)(t,"dy","avgPoolGrad"),i=(0,At._1)(n,"input","avgPoolGrad");pe.hu(i.rank===o.rank,()=>`Rank of input (${i.rank}) does not match rank of dy (${o.rank})`);let l=i,u=o,c=!1;3===i.rank&&(c=!0,l=(0,te.X)(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=(0,te.X)(o,[1,o.shape[0],o.shape[1],o.shape[2]])),pe.hu(4===u.rank,()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${u.rank}.`),pe.hu(4===l.rank,()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${l.rank}.`);const p=xt.BV.runKernel(V.ROF,{dy:u,input:l},{filterSize:e,strides:s,pad:r});return c?(0,te.X)(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),Ep={kernelName:V.JhU,inputsToSave:["x"],gradFunc:(t,n,e)=>{const[s]=n,{filterSize:r,strides:o,pad:i}=e;return{x:()=>$p(t,s,r,o,i)}}};var Vt=D(7648);const _p={kernelName:V.XLW,inputsToSave:["a","b"],gradFunc:(t,n,e)=>{const[s,r]=n,{transposeA:o,transposeB:i}=e;return o||i?!o&&i?{a:()=>(0,Vt.O)(t,r,!1,!1),b:()=>(0,Vt.O)(t,s,!0,!1)}:o&&!i?{a:()=>(0,Vt.O)(r,t,!1,!0),b:()=>(0,Vt.O)(s,t,!1,!1)}:{a:()=>(0,Vt.O)(r,t,!0,!0),b:()=>(0,Vt.O)(t,s,!0,!0)}:{a:()=>(0,Vt.O)(t,r,!1,!0),b:()=>(0,Vt.O)(s,t,!0,!1)}}};var wa=D(9619);const Fp={kernelName:V.zws,gradFunc:(t,n,e)=>{const{blockShape:s,crops:r}=e;return{x:()=>(0,wa.f)(t,s,r)}}},Op={kernelName:V.Ly9,gradFunc:(t,n,e)=>{const r=e.inputShape,o=e.shape,i=Array.from(o);for(let u=r.length-1;u>=0;u--)if(r[u]===o[u])i[u]=1;else if(1!==r[u])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${o}].`);const l=[];for(let u=0;u<i.length;u++)i[u]>1&&l.push(u);return{x:()=>(0,Ie.S)(t,l,!0)}}},Pp={kernelName:V.RFZ,gradFunc:t=>({x:()=>t.clone()})},zp={kernelName:V.gJX,gradFunc:t=>({x:()=>(0,$e.P)(t)})};var Zs=D(9886),Ys=D(2223),ho=D(3080),Kt=D(2190);const Lp={kernelName:V.xnO,inputsToSave:["x"],gradFunc:(t,n,e)=>{const[s]=n,{clipValueMin:r,clipValueMax:o}=e;return{x:()=>(0,Kt.a)((0,ho.H)((0,Zs.b)(s,r),(0,Ys.z)(s,o)),t,(0,$e.P)(t))}}},Mp={kernelName:V.yj2,inputsToSave:["x"],gradFunc:Ca.gradFunc};var Sa=D(8874);const Bp={kernelName:V.Eh3,saveAllInputs:!0,gradFunc:(t,n,e)=>{const s=n.map(u=>u.shape),{axis:r}=e,o=(0,pe.EC)(r,n[0].shape)[0],i=s.map(u=>u[o]);return(0,Sa.V)(t,i,o).map(u=>()=>u)}};var Ia=D(443),Vp=D(5743);const Wp={kernelName:V.mhS,inputsToSave:["x","filter"],gradFunc:(t,n,e)=>{const[s,r]=n,{dilations:o,strides:i,pad:l,dataFormat:u}=e;return pe.hu(jt.I0(o),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${o}'`),{x:()=>(0,Vp._)(s.shape,t,r,i,l,u),filter:()=>(0,Ia.p)(s,t,r.shape,i,l,u)}}};var ka=D(4451);const Up={kernelName:V.wm,inputsToSave:["dy","filter"],gradFunc:(t,n,e)=>{const[s,r]=n,{strides:o,pad:i,dataFormat:l,dimRoundingMode:u}=e;return{dy:()=>(0,ka.T)(t,r,o,i,l,1,u),filter:()=>(0,Ia.p)(t,s,r.shape,o,i,l,u)}}},Hp=(0,Ln.op)({conv3DBackpropFilter_:function Gp(t,n,e,s,r){let o=t;4===t.rank&&(o=(0,te.X)(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]));let i=n;return 4===i.rank&&(i=(0,te.X)(n,[1,n.shape[0],n.shape[1],n.shape[2],n.shape[3]])),pe.hu(5===o.rank,()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${o.shape}.`),pe.hu(5===i.rank,()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`),pe.hu(5===e.length,()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${e}.`),pe.hu(o.shape[4]===e[3],()=>`Error in conv3dDerFilter: depth of input ${o.shape[4]}) must match input depth in filter (${e[3]}.`),pe.hu(i.shape[4]===e[4],()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${e[4]}).`),xt.BV.runKernel(V.o2y,{x:o,dy:i},{strides:s,pad:r,filterShape:e})}});var Xp=D(7022);const jp={kernelName:V.x12,inputsToSave:["x","filter"],gradFunc:(t,n,e)=>{const{dilations:s,strides:r,pad:o}=e;pe.hu((0,jt.I0)(s),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);const[i,l]=n;return{x:()=>(0,Xp._)(i.shape,t,l,r,o),filter:()=>Hp(i,t,l.shape,r,o)}}};var Ta=D(2438);const Kp={kernelName:V.mc4,inputsToSave:["x"],gradFunc:(t,n)=>{const[e]=n;return{x:()=>(0,Z.d)((0,at.W)((0,Ta.O)((0,ue.p)(e,"float32"))),t)}}};var Na=D(319);const qp={kernelName:V.TR1,inputsToSave:["x"],gradFunc:(t,n)=>{const[e]=n;return{x:()=>(0,Z.d)((0,Na.R)((0,ue.p)(e,"float32")),t)}}};var qt=D(929),Ra=D(7157),mn=D(9194);const Zp={kernelName:V.iHb,inputsToSave:["x"],gradFunc:(t,n,e)=>{const[s]=n,{axis:r,exclusive:o,reverse:i}=e;return{x:()=>{const l=(0,qt.Q3)([r],s.rank);let u=(0,Ra.z)(t,r,o,!i);return null!=l&&(u=(0,mn.p)(u,l)),u}}}};var Yp=D(366),Qp=D(519);const Jp={kernelName:V.cie,inputsToSave:["x","filter"],gradFunc:(t,n,e)=>{const{dilations:s,strides:r,pad:o,dimRoundingMode:i}=e,l=null==s?[1,1]:s;pe.hu(jt.I0(l),()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${l}'`);const[u,c]=n;return pe.hu(4===u.rank,()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${u.rank}.`),pe.hu(4===c.rank,()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${c.rank}.`),pe.hu(u.shape[3]===c.shape[2],()=>`Error in gradient of depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${c.shape[2]}.`),pe.hu(jt.jT(r,l),()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${r} and dilations '${l}'.`),jt.m("depthwiseConv2d",o,i),{x:()=>(0,Qp.v)(u.shape,t,c,r,o,l,i),filter:()=>(0,Yp.z)(u,t,c.shape,r,o,l,i)}}},ef={kernelName:V.p4S,inputsToSave:["x","filter"],gradFunc:(t,n,e)=>{const[s,r]=n,o={x:s,filter:r,dy:t},i={x:s,filter:r,dy:t};return{x:()=>xt.BV.runKernel(V.ekb,o,e),filter:()=>xt.BV.runKernel(V.Vn9,i,e)}}},nf={kernelName:V.SX0,outputsToSave:[!0],gradFunc:(t,n)=>{const[e]=n,s={dy:t,y:e};return{x:()=>xt.BV.runKernel(V.HEU,s)}}};var us=D(5109);const sf={kernelName:V.Omj,inputsToSave:["x"],gradFunc:(t,n)=>{const[e]=n,s=(0,Z.d)((0,us.Q)((0,at.W)((0,Ue.h)(e))),2/Math.sqrt(Math.PI));return{x:()=>(0,Z.d)(t,s)}}},rf={kernelName:V.NEP,outputsToSave:[!0],gradFunc:(t,n)=>{const[e]=n;return{x:()=>(0,Z.d)(t,e)}}},of={kernelName:V.YFo,inputsToSave:["input"],gradFunc:(t,n)=>{const[e]=n;return{input:()=>(0,te.X)(t,e.shape)}}},af={kernelName:V.Y0y,inputsToSave:["x"],gradFunc:(t,n)=>{const[e]=n;return{x:()=>(0,Z.d)(t,(0,us.Q)(e))}}},lf={kernelName:V.OR,gradFunc:t=>({x:()=>(0,$e.P)(t)})},uf={kernelName:V.jeX,inputsToSave:["a","b"],gradFunc:(t,n)=>{const[e,s]=n,r=(0,Se.assertAndGetBroadcastShape)(e.shape,s.shape);return{a:()=>{const l=(0,Fe.h)(t,(0,ue.p)(s,"float32")),u=(0,Se.getReductionAxes)(e.shape,r);return u.length>0?(0,te.X)((0,Ie.S)(l,u),e.shape):l},b:()=>{let l=(0,Z.d)(t,(0,ue.p)(e,"float32"));const u=(0,Se.getReductionAxes)(s.shape,r);u.length>0&&(l=(0,te.X)((0,Ie.S)(l,u),s.shape));const c=(0,Ue.h)(s);return(0,at.W)((0,Fe.h)(l,(0,ue.p)(c,"float32")))}}}};var Aa=D(8893),Da=D(2005);const cf={kernelName:V.sHE,inputsToSave:["x","mean","variance","scale"],gradFunc:(t,n,e)=>{const{varianceEpsilon:s}=e,[r,o,i,l]=n,u=null==l?(0,Xe.i)(1):l,c=(0,Se.getReductionAxes)(o.shape,r.shape),d=[];if(1===o.rank){for(let v=0;v<r.shape.length-1;++v)d.push(r.shape[v]);d.push(1)}const h=(0,tt.l)(r,o),p=(0,Z.d)(t,u),f=(0,Aa.b)((0,gt.I)(i,(0,Xe.i)(s))),m=(0,Z.d)((0,Z.d)((0,Z.d)(f,f),f),(0,Xe.i)(-.5));return{x:()=>(0,te.X)((0,Z.d)((0,Z.d)(t,1===o.rank?(0,Da.G)((0,te.X)(f,[1,1,1,o.shape[0]]),d):f),u),r.shape),mean:()=>{let v=(0,Z.d)((0,Z.d)(f,(0,Xe.i)(-1)),p);return 1===o.rank&&(v=(0,Ie.S)(v,c)),(0,te.X)(v,o.shape)},variance:()=>{let v=(0,Z.d)((0,Z.d)(m,h),p);return 1===o.rank&&(v=(0,Ie.S)(v,c)),(0,te.X)(v,o.shape)},scale:()=>{const v=(0,Z.d)(h,f);let w=(0,Z.d)(t,v);return 1===o.rank&&(w=(0,Ie.S)(w,c)),(0,te.X)(w,o.shape)},offset:()=>{let v=t;return 1===o.rank&&(v=(0,Ie.S)(v,c)),(0,te.X)(v,o.shape)}}}};var po=D(7958),$a=D(9059);const df={kernelName:V.qi_,inputsToSave:["x","indices"],gradFunc:(t,n,e)=>{const[s,r]=n,{axis:o,batchDims:i}=e,l=(0,pe.EC)(o,s.shape)[0],u=(c,d,h)=>()=>{const p=c.shape,f=d.size,m=p.slice(0,l),x=m.length,g=p.slice(o,p.length).slice(1),y=g.length,b=Ea(0,x),C=Ea(x+1,x+1+y),v=_a([m,[f],g]),w=(0,te.X)(h,v),S=(0,te.X)(d,[f]),I=_a([[x],b,C]),k=(0,mn.p)(w,I);let N=(0,$a.p)(k,S,c.shape[l]);const T=(0,qt.LJ)(I);return N=(0,mn.p)(N,T),N};if(1===i){const d=s.split(s.shape[0],0);return{x:()=>(0,po.k)(d.map((f,m)=>u(f,r.slice(m,1),t.slice(m,1))())).reshape(s.shape),indices:()=>r}}return{x:u(s,r,t),indices:()=>r}}};function Ea(t,n){const e=[];for(let s=t;s<n;++s)e.push(s);return e}function _a(t){const n=[];for(let e=0;e<t.length;++e)for(let s=0;s<t[e].length;++s)n.push(t[e][s]);return n}const hf={kernelName:V.Acj,inputsToSave:["a","b"],gradFunc:(t,n)=>{const[e,s]=n;return{a:()=>(0,$e.P)(e),b:()=>(0,$e.P)(s)}}},pf={kernelName:V.iJz,gradFunc:t=>({x:()=>(0,ue.p)(t,"float32")})},ff={kernelName:V.avt,gradFunc:t=>({x:()=>(0,$e.P)(t)})},mf={kernelName:V.iWB,gradFunc:t=>({x:()=>(0,$e.P)(t)})},gf={kernelName:V.r7n,gradFunc:t=>({x:()=>(0,$e.P)(t)})};var Mn=D(4803);const xf={kernelName:V.J$2,inputsToSave:["x"],gradFunc:(t,n,e)=>{const[s]=n,{alpha:r}=e,o=(0,Mn.p)(s,0);return{x:()=>(0,Kt.a)(o,t,(0,Z.d)(t,r))}}},yf={kernelName:V.kU,inputsToSave:["x"],gradFunc:(t,n)=>{const[e]=n;return{x:()=>(0,Fe.h)(t,(0,gt.I)(e,1))}}},bf={kernelName:V.ZbH,inputsToSave:["x"],gradFunc:(t,n)=>{const[e]=n;return{x:()=>(0,Fe.h)(t,(0,ue.p)(e,"float32"))}}},vf={kernelName:V.qCd,inputsToSave:[],outputsToSave:[!0],gradFunc:(t,n,e)=>{const[s]=n,{axis:r}=e;return{logits:()=>{const i=(0,us.Q)(s);return(0,tt.l)(t,(0,Z.d)((0,Ie.S)(t,r,!0),i))}}}},wf=(0,Ln.op)({localResponseNormalizationBackprop_:function Cf(t,n,e,s=5,r=1,o=1,i=.5){return xt.BV.runKernel(V.Hhh,{x:t,y:n,dy:e},{depthRadius:s,bias:r,alpha:o,beta:i})}}),Sf={kernelName:V.eZ0,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,n,e)=>{const[s,r]=n,{depthRadius:o,bias:i,alpha:l,beta:u}=e;return{x:()=>wf(s,r,t,o,i,l,u)}}};var Fa=D(4456);function Oa(t,n,e,s){return n.rank<e.rank&&(n=(0,te.X)(n,qt.rv(n.shape,s))),t.rank<e.rank&&(t=(0,te.X)(t,qt.rv(t.shape,s))),{x:()=>(0,Z.d)(t,(0,ue.p)((0,Fa.D)(e,n),t.dtype))}}const Pa={kernelName:V.YoZ,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,n,e)=>{const s=e,{reductionIndices:r}=s,o=n[0],u=Oa(t,n[1],o,pe.EC(r,o.shape));return{x:()=>u.x()}}};var za=D(2761);const If={kernelName:V.BMI,inputsToSave:["a","b"],gradFunc:(t,n)=>{const[e,s]=n;return{a:()=>(0,Z.d)(t,(0,ue.p)((0,Zs.b)(e,s),"float32")),b:()=>(0,Z.d)(t,(0,ue.p)((0,za.d)(e,s),"float32"))}}},Tf=(0,Ln.op)({maxPool3dGrad_:function kf(t,n,e,s,r,o,i){const l=(0,At._1)(t,"dy","maxPool3dGrad"),u=(0,At._1)(n,"input","maxPool3dGrad"),c=(0,At._1)(e,"output","maxPool3dGrad");let d=l,h=u,p=c,f=!1;4===u.rank&&(f=!0,d=(0,te.X)(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),h=(0,te.X)(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),p=(0,te.X)(c,[1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]])),pe.hu(5===d.rank,()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${d.rank}.`),pe.hu(5===h.rank,()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${h.rank}.`),pe.hu(5===p.rank,()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${p.rank}.`),(0,jt.m)("maxPool3dGrad",o,i);const g=xt.BV.runKernel(V.OU7,{dy:d,input:h,output:p},{filterSize:s,strides:r,pad:o,dimRoundingMode:i});return f?(0,te.X)(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}}),Nf={kernelName:V.OAf,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,n,e)=>{const[s,r]=n,{filterSize:o,strides:i,pad:l,dimRoundingMode:u}=e;return{x:()=>Tf(t,s,r,o,i,l,u)}}},Af=(0,Ln.op)({maxPoolGrad_:function Rf(t,n,e,s,r,o,i){const l=(0,At._1)(t,"dy","maxPoolGrad"),u=(0,At._1)(n,"input","maxPoolGrad"),c=(0,At._1)(e,"output","maxPoolGrad");return pe.hu(u.rank===l.rank,()=>`Rank of input (${u.rank}) does not match rank of dy (${l.rank})`),pe.hu(4===l.rank,()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${l.rank}.`),pe.hu(4===u.rank,()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${u.rank}.`),jt.m("maxPoolGrad",o,i),xt.BV.runKernel(V.OV7,{dy:l,input:u,output:c},{filterSize:s,strides:r,pad:o,dimRoundingMode:i})}}),Df={kernelName:V.mTV,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,n,e)=>{const[s,r]=n,{filterSize:o,strides:i,pad:l}=e;return{x:()=>Af(t,s,r,o,i,l)}}};var fo=D(4968);const $f={kernelName:V.q2K,inputsToSave:["x"],gradFunc:(t,n,e)=>{const[s]=n,{axis:r}=e,o=pe.EC(r,s.shape),l=(0,qt.kz)(s.shape,o)[1],u=pe.NA(l);return{x:()=>{const d=s.shape.slice();o.forEach(f=>{d[f]=1});const h=(0,te.X)(t,d);return(0,Fe.h)((0,Z.d)(h,(0,fo.i)(s.shape,"float32")),u)}}}},Ef={kernelName:V.c17,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(t,n,e)=>{const s=e,{axis:r}=s,[o,i]=n,u=Oa(t,i,o,pe.EC(r,o.shape));return{x:()=>u.x()}}},_f={kernelName:V.q8u,inputsToSave:["a","b"],gradFunc:(t,n)=>{const[e,s]=n;return{a:()=>(0,Z.d)(t,(0,ue.p)((0,Ys.z)(e,s),"float32")),b:()=>(0,Z.d)(t,(0,ue.p)((0,Mn.p)(e,s),"float32"))}}};var gn=D(8317);const Ff={kernelName:V.jQs,inputsToSave:["x"],gradFunc:(t,n,e)=>{const s=n[0],{paddings:r}=e,o=r.map(i=>i[0]);return{x:()=>(0,gn.t)(t,o,s.shape)}}};var La=D(8208);const Of={kernelName:V.Vbg,inputsToSave:["a","b"],gradFunc:(t,n)=>{const[e,s]=n,r=(0,Se.assertAndGetBroadcastShape)(e.shape,s.shape);return{a:()=>{const l=(0,Se.getReductionAxes)(e.shape,r);return l.length>0?(0,te.X)((0,Ie.S)(t,l),e.shape):t},b:()=>{const l=(0,Z.d)(t,(0,at.W)((0,La.G)((0,Fe.h)(e,s)))),u=(0,Se.getReductionAxes)(s.shape,r);return u.length>0?(0,te.X)((0,Ie.S)(l,u),s.shape):l}}}},Pf={kernelName:V.wYn,inputsToSave:["a","b"],gradFunc:(t,n)=>{const[e,s]=n,r=(0,Se.assertAndGetBroadcastShape)(e.shape,s.shape);return{a:()=>{const l=(0,Z.d)(t,(0,ue.p)(s,"float32")),u=(0,Se.getReductionAxes)(e.shape,r);return u.length>0?(0,te.X)((0,Ie.S)(l,u),e.shape):l},b:()=>{const l=(0,Z.d)(t,(0,ue.p)(e,"float32")),u=(0,Se.getReductionAxes)(s.shape,r);return u.length>0?(0,te.X)((0,Ie.S)(l,u),s.shape):l}}}},zf={kernelName:V.kuV,gradFunc:t=>({x:()=>(0,at.W)(t)})};var Lf=D(6467);const Mf={kernelName:V.we_,inputsToSave:["indices"],gradFunc:(t,n)=>{const e=n[0];return{indices:()=>(0,Lf.l)(e.shape,"float32")}}},Bf={kernelName:V.qWM,gradFunc:t=>({x:()=>(0,$e.P)(t)})};var Ma=D(2219);const Vf={kernelName:V.QiL,saveAllInputs:!0,gradFunc:(t,n,e)=>{const{axis:s}=e;return(0,Ma.H)(t,s).map(o=>()=>o)}},Ba={kernelName:V.lyA,inputsToSave:["x"],gradFunc:(t,n,e)=>{const s=n[0],{paddings:r}=e,o=r.map(i=>i[0]);return{x:()=>(0,gn.t)(t,o,s.shape)}}};var Va=D(5919),mo=D(2962);const Wf={kernelName:V.pe_,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(t,n)=>{const[e,s,r]=n,o=e,i=s,l=Se.assertAndGetBroadcastShape(o.shape,i.shape);return{a:()=>{const d=(0,ue.p)(i,"float32");let h=(0,Z.d)(t,(0,Z.d)(d,(0,mo.s)(o,(0,tt.l)(d,(0,Xe.i)(1)))));const p=Se.getReductionAxes(o.shape,l);return p.length>0&&(h=(0,Ie.S)(h,p)),(0,te.X)(h,o.shape)},b:()=>{const d=(0,Mn.p)(o,0),h=(0,Kt.a)(d,(0,Va.c)(o),(0,$e.P)(o));let p=(0,Z.d)(t,(0,Z.d)(r,h));const f=Se.getReductionAxes(i.shape,l);return f.length>0&&(p=(0,Ie.S)(p,f)),(0,te.X)(p,i.shape)}}}},Uf={kernelName:V.o0g,inputsToSave:["x","alpha"],gradFunc:(t,n)=>{const[e,s]=n,r=(0,Mn.p)(e,0);return{x:()=>(0,Kt.a)(r,t,(0,Z.d)(t,s)),alpha:()=>{let o=(0,Kt.a)(r,(0,$e.P)(t),(0,Z.d)(t,e));const i=(0,Se.getReductionAxes)(s.shape,t.shape);return i.length>0&&(o=(0,Ie.S)(o,i)),(0,te.X)(o,s.shape)}}}};var go=D(9267);const Xf={kernelName:V.DlI,inputsToSave:["x"],gradFunc:(t,n,e)=>{const[s]=n,{axis:r}=e;let o=[];return o=null==r?s.shape.map((i,l)=>l):"number"==typeof r?[r]:r,{x:()=>function Hf(t,n,e){const s=t.shape.length,r=s-e.length,o=qt.Q3(e,s);let i=t;null!=o&&(i=(0,mn.p)(t,o));const l=i.shape.slice(),c=l.splice(s-e.length,e.length).reduce((p,f)=>p*f,1);l.push(c);let h=function Gf(t,n,e){const s=t.shape.slice();s[e]=1;const r=(0,te.X)(n,s),o=(0,go.$)(t,e,!0,!1),i=(0,go.$)(t,e,!0,!0),l=(0,Z.d)(o,i);return(0,Z.d)(r,l)}(i.reshape(l),n,r);if(h=h.reshape(i.shape),null!=o){const p=qt.LJ(o);h=(0,mn.p)(h,p)}return h}(s,t,o)}}},jf={kernelName:V.oHH,inputsToSave:["a","b"],gradFunc:(t,n)=>{const[e,s]=n,r=Se.assertAndGetBroadcastShape(e.shape,s.shape);return{a:()=>{const l=(0,Fe.h)(t,(0,ue.p)(s,"float32")),u=Se.getReductionAxes(e.shape,r);return u.length>0?(0,te.X)((0,Ie.S)(l,u),e.shape):l},b:()=>{let l=(0,Z.d)(t,(0,ue.p)(e,"float32"));const u=Se.getReductionAxes(s.shape,r);u.length>0&&(l=(0,te.X)((0,Ie.S)(l,u),s.shape));const c=(0,Ue.h)(s);return(0,at.W)((0,Fe.h)(l,(0,ue.p)(c,"float32")))}}}},Kf={kernelName:V.$HU,inputsToSave:["x"],gradFunc:(t,n)=>{const[e]=n;return{x:()=>(0,Fe.h)(t,(0,at.W)((0,Ue.h)(e)))}}},qf={kernelName:V.SbG,inputsToSave:["x"],gradFunc:(t,n)=>{const[e]=n,s=(0,Z.d)((0,Ys.z)(e,6),(0,qs.N)(e));return{x:()=>(0,Z.d)(t,(0,ue.p)(s,"float32"))}}},Zf={kernelName:V.qkr,inputsToSave:["x"],gradFunc:(t,n)=>{const[e]=n;return{x:()=>(0,Z.d)(t,(0,ue.p)((0,qs.N)(e),"float32"))}}},Yf={kernelName:V.HZH,inputsToSave:["x"],gradFunc:(t,n)=>{const[e]=n;return{x:()=>(0,te.X)(t,e.shape)}}},Qf={kernelName:V._Yw,inputsToSave:["images"],gradFunc:(t,n,e)=>{const[s]=n,r={dy:t,images:s};return{images:()=>xt.BV.runKernel(V.zbQ,r,e)}}},Jf={kernelName:V.dpD,inputsToSave:["images"],gradFunc:(t,n,e)=>{const[s]=n,r={dy:t,images:s};return{images:()=>xt.BV.runKernel(V.Hmb,r,e)}}};var Wa=D(6825);const em={kernelName:V.mKl,gradFunc:(t,n,e)=>{const{dims:s}=e,r=(0,pe.EC)(s,t.shape);return{x:()=>(0,Wa.G)(t,r)}}},tm={kernelName:V.e07,gradFunc:t=>({x:()=>(0,$e.P)(t)})},nm={kernelName:V.bV0,inputsToSave:["x"],gradFunc:(t,n)=>{const[e]=n;return{x:()=>(0,at.W)((0,Fe.h)(t,(0,Z.d)((0,mo.s)(e,1.5),2)))}}};var Ua=D(6399);const sm={kernelName:V.PhF,inputsToSave:["condition"],gradFunc:(t,n)=>{const[e]=n;return{condition:()=>(0,ue.p)((0,$e.P)(e),"float32"),t:()=>(0,Z.d)(t,(0,ue.p)(e,t.dtype)),e:()=>(0,Z.d)(t,(0,ue.p)((0,Ua.h)(e),t.dtype))}}};var Ga=D(2152);const rm={kernelName:V.oFR,inputsToSave:["x"],gradFunc:(t,n)=>{const[e]=n;return{x:()=>{const s=(0,Mn.p)(e,(0,Xe.i)(0)),r=(0,Xe.i)(Ga.y),o=(0,Xe.i)(Ga.$),i=(0,Z.d)(t,o),l=(0,Z.d)((0,Z.d)(t,r),(0,us.Q)((0,ue.p)(e,"float32")));return(0,Kt.a)(s,i,l)}}}},om={kernelName:V.a5O,outputsToSave:[!0],gradFunc:(t,n)=>{const[e]=n;return{x:()=>(0,Z.d)(t,(0,Z.d)(e,(0,tt.l)((0,Xe.i)(1),e)))}}},im={kernelName:V.i5y,gradFunc:t=>({x:()=>(0,$e.P)(t)})};var xo=D(9018);const am={kernelName:V.RQH,inputsToSave:["x"],gradFunc:(t,n)=>{const[e]=n;return{x:()=>(0,Z.d)((0,xo.m)((0,ue.p)(e,"float32")),t)}}};var Ha=D(3237);const lm={kernelName:V.wYB,inputsToSave:["x"],gradFunc:(t,n)=>{const[e]=n;return{x:()=>(0,Z.d)((0,Ha.f)((0,ue.p)(e,"float32")),t)}}};var Xa=D(404),um=D(2320);const cm={kernelName:V.p2w,inputsToSave:["x"],gradFunc:(t,n,e)=>{const[s]=n,{begin:r,size:o}=e,i=s.shape,[l,u]=(0,um.parseSliceParams)(s,r,o),c=[];for(let d=0;d<t.rank;d++)c.push([l[d],i[d]-l[d]-u[d]]);return{x:()=>(0,Xa.v)(t,c)}}},dm={kernelName:V.Gcp,outputsToSave:[!0],gradFunc:(t,n,e)=>{const[s]=n,{dim:r}=e,i=(0,Z.d)(t,s);return{logits:()=>(0,tt.l)(i,(0,Z.d)((0,Ie.S)(i,[r],!0),s))}}};var ja=D(6139);const hm={kernelName:V.MRv,inputsToSave:["x"],gradFunc:(t,n)=>{const[e]=n;return{x:()=>(0,Z.d)(t,(0,ja.X)(e))}}};var Ka=D(2782);const qa={kernelName:V.TQc,gradFunc:(t,n,e)=>{const{blockShape:s,paddings:r}=e;return{x:()=>(0,Ka.E)(t,s,r)}}};var Za=D(4111);const Ya={kernelName:V.L8s,gradFunc:(t,n,e)=>{const{axis:s}=e;return{x:()=>(0,Za.z)(t,s)}}},pm={kernelName:V.FKq,inputsToSave:["x"],gradFunc:(t,n)=>{const[e]=n;return{x:()=>(0,Fe.h)(t,(0,Z.d)((0,zn._)((0,ue.p)(e,"float32")),2))}}},fm={kernelName:V.bK0,inputsToSave:["x"],gradFunc:(t,n)=>{const[e]=n;return{x:()=>(0,Z.d)(t,(0,Z.d)((0,ue.p)(e,"float32"),2))}}},mm={kernelName:V._tC,inputsToSave:["a","b"],gradFunc:(t,n)=>{const[e,s]=n,r=(0,Xe.i)(2);return{a:()=>(0,Z.d)(t,(0,Z.d)(r,(0,tt.l)(e,s))),b:()=>(0,Z.d)(t,(0,Z.d)(r,(0,tt.l)(s,e)))}}},gm={kernelName:V.h8e,gradFunc:t=>({x:()=>(0,$e.P)(t)})},xm={kernelName:V.Tr8,inputsToSave:["a","b"],gradFunc:(t,n)=>{const[e,s]=n,r=Se.assertAndGetBroadcastShape(e.shape,s.shape);return{a:()=>{let l=t;const u=Se.getReductionAxes(e.shape,r);return u.length>0&&(l=(0,Ie.S)(l,u)),(0,te.X)(l,e.shape)},b:()=>{let l=t;const u=Se.getReductionAxes(s.shape,r);return u.length>0&&(l=(0,Ie.S)(l,u)),(0,te.X)((0,at.W)(l),s.shape)}}}},ym={kernelName:V.GBy,inputsToSave:["x"],gradFunc:(t,n,e)=>{const[s]=n,r=s.shape.slice(),{axis:o}=e;(0,pe.EC)(o,s.shape).forEach(c=>{r[c]=1});const l=(0,te.X)(t,r),u=(0,Z.d)(l,(0,fo.i)(s.shape,"float32"));return{x:()=>u}}},bm={kernelName:V.sEM,inputsToSave:["x"],gradFunc:(t,n)=>{const[e]=n;return{x:()=>(0,Fe.h)(t,(0,Ue.h)((0,xo.m)(e)))}}},vm={kernelName:V.MIZ,outputsToSave:[!0],gradFunc:(t,n)=>{const[e]=n;return{x:()=>(0,Z.d)((0,tt.l)((0,Xe.i)(1),(0,Ue.h)(e)),t)}}},Cm={kernelName:V.n9L,inputsToSave:["x"],gradFunc:(t,n,e)=>{const[s]=n,{reps:r}=e;return{x:()=>{let i=(0,$e.P)(s);if(1===s.rank)for(let l=0;l<r[0];++l)i=(0,gt.I)(i,(0,gn.t)(t,[l*s.shape[0]],[s.shape[0]]));else if(2===s.rank)for(let l=0;l<r[0];++l)for(let u=0;u<r[1];++u)i=(0,gt.I)(i,(0,gn.t)(t,[l*s.shape[0],u*s.shape[1]],[s.shape[0],s.shape[1]]));else if(3===s.rank)for(let l=0;l<r[0];++l)for(let u=0;u<r[1];++u)for(let c=0;c<r[2];++c)i=(0,gt.I)(i,(0,gn.t)(t,[l*s.shape[0],u*s.shape[1],c*s.shape[2]],[s.shape[0],s.shape[1],s.shape[2]]));else{if(4!==s.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);for(let l=0;l<r[0];++l)for(let u=0;u<r[1];++u)for(let c=0;c<r[2];++c)for(let d=0;d<r[3];++d)i=(0,gt.I)(i,(0,gn.t)(t,[l*s.shape[0],u*s.shape[1],c*s.shape[2],d*s.shape[3]],[s.shape[0],s.shape[1],s.shape[2],s.shape[3]]))}return i}}}},wm={kernelName:V.G3Y,gradFunc:(t,n,e)=>{const s=e,{perm:r}=s,o=qt.LJ(r);return{x:()=>(0,mn.p)(t,o)}}},Sm={kernelName:V.ToN,gradFunc:(t,n,e)=>{const s=e,{axis:r}=s;return{value:()=>(0,po.k)(t,r)}}};var Qa=D(7228),Ja=D(6117),el=D(765);const Im={kernelName:V.Qvg,inputsToSave:["segmentIds"],gradFunc:(t,n)=>{const[e]=n;return{x:()=>function km(t,n){const e=(0,el.g)(n,(0,$e.P)(n)),s=(0,Ja.I)(t,e);let r=(0,Zs.b)(n,(0,Xe.i)(0,"int32"));const o=s.rank-r.rank;for(let l=0;l<o;++l)r=(0,Qa.d)(r,l+1);r=(0,ho.H)(r,(0,fo.i)(s.shape,"bool"));const i=(0,$e.P)(s);return(0,Kt.a)(r,s,i)}(t,e)}}},Tm={kernelName:V.RuY,gradFunc:t=>({x:()=>(0,$e.P)(t)})};var Nm=D(8987);const Rm=[Ca,gp,xp,yp,bp,vp,Cp,wp,Sp,Ip,kp,Tp,Ap,Ep,_p,Fp,Op,Pp,zp,Lp,Mp,Bp,Up,Wp,jp,Kp,qp,Zp,Jp,ef,jf,nf,sf,rf,of,af,uf,lf,cf,df,hf,pf,ff,mf,gf,xf,yf,bf,vf,Sf,Pa,Pa,If,Nf,Df,$f,Ef,_f,Ff,Of,Pf,zf,Mf,Bf,Vf,Ba,Ba,Wf,Uf,Xf,Kf,qf,Zf,Yf,Qf,Jf,em,tm,nm,sm,rm,om,im,am,lm,cm,dm,hm,qa,qa,Ya,Ya,pm,mm,fm,gm,xm,ym,bm,vm,Cm,wm,Sm,Im,Tm];for(const t of Rm)(0,Nm.Li)(t);var Am=D(6989),_=D(4945);(0,_.t3)().prototype.abs=function(){return this.throwIfDisposed(),(0,Am.W)(this)};var Dm=D(1184);(0,_.t3)().prototype.acos=function(){return this.throwIfDisposed(),(0,Dm.K)(this)};var $m=D(5622);(0,_.t3)().prototype.acosh=function(){return this.throwIfDisposed(),(0,$m._)(this)},(0,_.t3)().prototype.add=function(t){return this.throwIfDisposed(),(0,gt.I)(this,t)};var Em=D(1862);(0,_.t3)().prototype.all=function(t,n){return this.throwIfDisposed(),(0,Em.$)(this,t,n)};var _m=D(876);(0,_.t3)().prototype.any=function(t,n){return this.throwIfDisposed(),(0,_m.Y)(this,t,n)};var Fm=D(5784);(0,_.t3)().prototype.argMax=function(t){return this.throwIfDisposed(),(0,Fm.N)(this,t)};var Om=D(8340);(0,_.t3)().prototype.argMin=function(t){return this.throwIfDisposed(),(0,Om.v)(this,t)},(0,_.t3)().prototype.asScalar=function(){return this.throwIfDisposed(),(0,pe.hu)(1===this.size,()=>"The array must have only 1 element."),(0,te.X)(this,[])},(0,_.t3)().prototype.asType=function(t){return this.throwIfDisposed(),(0,ue.p)(this,t)},(0,_.t3)().prototype.as1D=function(){return this.throwIfDisposed(),(0,te.X)(this,[this.size])},(0,_.t3)().prototype.as2D=function(t,n){return this.throwIfDisposed(),(0,te.X)(this,[t,n])},(0,_.t3)().prototype.as3D=function(t,n,e){return this.throwIfDisposed(),(0,te.X)(this,[t,n,e])},(0,_.t3)().prototype.as4D=function(t,n,e,s){return this.throwIfDisposed(),(0,te.X)(this,[t,n,e,s])},(0,_.t3)().prototype.as5D=function(t,n,e,s,r){return this.throwIfDisposed(),(0,te.X)(this,[t,n,e,s,r])};var Pm=D(586);(0,_.t3)().prototype.asin=function(){return this.throwIfDisposed(),(0,Pm.Z)(this)};var zm=D(8355);(0,_.t3)().prototype.asinh=function(){return this.throwIfDisposed(),(0,zm.V)(this)};var Lm=D(7881);(0,_.t3)().prototype.atan=function(){return this.throwIfDisposed(),(0,Lm.z)(this)};var Mm=D(5825);(0,_.t3)().prototype.atan2=function(t){return this.throwIfDisposed(),(0,Mm.f)(this,t)};var Bm=D(7932);(0,_.t3)().prototype.atanh=function(){return this.throwIfDisposed(),(0,Bm.C)(this)};var Vm=D(6903);(0,_.t3)().prototype.avgPool=function(t,n,e,s){return this.throwIfDisposed(),(0,Vm.w)(this,t,n,e,s)},(0,_.t3)().prototype.batchToSpaceND=function(t,n){return this.throwIfDisposed(),(0,Ka.E)(this,t,n)};var Wm=D(5307);(0,_.t3)().prototype.batchNorm=function(t,n,e,s,r){return this.throwIfDisposed(),(0,Wm.t)(this,t,n,e,s,r)};var Um=D(983);(0,_.t3)().prototype.broadcastTo=function(t){return this.throwIfDisposed(),(0,Um.U)(this,t)},(0,_.t3)().prototype.cast=function(t){return this.throwIfDisposed(),(0,ue.p)(this,t)};var Gm=D(9723);(0,_.t3)().prototype.ceil=function(){return this.throwIfDisposed(),(0,Gm.m)(this)};var Hm=D(6672);(0,_.t3)().prototype.clipByValue=function(t,n){return this.throwIfDisposed(),(0,Hm.i)(this,t,n)},(0,_.t3)().prototype.concat=function(t,n){return this.throwIfDisposed(),t instanceof _.es&&(t=[t]),(0,Za.z)([this,...t],n)};var Xm=D(8577);(0,_.t3)().prototype.conv1d=function(t,n,e,s,r,o){return this.throwIfDisposed(),(0,Xm.P)(this,t,n,e,s,r,o)};var jm=D(8554);(0,_.t3)().prototype.conv2dTranspose=function(t,n,e,s,r){return this.throwIfDisposed(),(0,jm.b)(this,t,n,e,s,r)},(0,_.t3)().prototype.conv2d=function(t,n,e,s,r,o){return this.throwIfDisposed(),(0,ka.T)(this,t,n,e,s,r,o)},(0,_.t3)().prototype.cos=function(){return this.throwIfDisposed(),(0,xo.m)(this)},(0,_.t3)().prototype.cosh=function(){return this.throwIfDisposed(),(0,Ha.f)(this)},(0,_.t3)().prototype.cumprod=function(t,n,e){return this.throwIfDisposed(),(0,go.$)(this,t,n,e)},(0,_.t3)().prototype.cumsum=function(t,n,e){return this.throwIfDisposed(),(0,Ra.z)(this,t,n,e)};var Km=D(3961);(0,_.t3)().prototype.depthToSpace=function(t,n){return this.throwIfDisposed(),(0,Km.n)(this,t,n)};var qm=D(1172);(0,_.t3)().prototype.depthwiseConv2d=function(t,n,e,s,r,o){return this.throwIfDisposed(),(0,qm.B)(this,t,n,e,s,r,o)};var Zm=D(2395);(0,_.t3)().prototype.dilation2d=function(t,n,e,s,r){return this.throwIfDisposed(),(0,Zm.W)(this,t,n,e,s,r)};var Ym=D(4373);(0,_.t3)().prototype.divNoNan=function(t){return this.throwIfDisposed(),(0,Ym.N)(this,t)},(0,_.t3)().prototype.div=function(t){return this.throwIfDisposed(),(0,Fe.h)(this,t)};var Qm=D(5106);(0,_.t3)().prototype.dot=function(t){return this.throwIfDisposed(),(0,Qm.A)(this,t)};var Jm=D(9529);(0,_.t3)().prototype.elu=function(){return this.throwIfDisposed(),(0,Jm.p)(this)},(0,_.t3)().prototype.equal=function(t){return this.throwIfDisposed(),(0,Fa.D)(this,t)};var eg=D(4634);(0,_.t3)().prototype.erf=function(){return this.throwIfDisposed(),(0,eg.q)(this)};var tg=D(4279);(0,_.t3)().prototype.euclideanNorm=function(t,n){return this.throwIfDisposed(),(0,tg.d)(this,t,n)},(0,_.t3)().prototype.exp=function(){return this.throwIfDisposed(),(0,us.Q)(this)},(0,_.t3)().prototype.expandDims=function(t){return this.throwIfDisposed(),(0,Qa.d)(this,t)};var ng=D(5748);(0,_.t3)().prototype.expm1=function(){return this.throwIfDisposed(),(0,ng.t)(this)};var sg=D(9738);(0,_.t3)().prototype.fft=function(){return this.throwIfDisposed(),(0,sg.k)(this)},(0,_.t3)().prototype.flatten=function(){return this.throwIfDisposed(),(0,te.X)(this,[this.size])},(0,_.t3)().prototype.floor=function(){return this.throwIfDisposed(),(0,La.G)(this)};var rg=D(1030);(0,_.t3)().prototype.floorDiv=function(t){return this.throwIfDisposed(),(0,rg.q)(this,t)},(0,_.t3)().prototype.gather=function(t,n,e){return this.throwIfDisposed(),(0,Ja.I)(this,t,n,e)},(0,_.t3)().prototype.greaterEqual=function(t){return this.throwIfDisposed(),(0,Zs.b)(this,t)},(0,_.t3)().prototype.greater=function(t){return this.throwIfDisposed(),(0,Mn.p)(this,t)};var og=D(527);(0,_.t3)().prototype.ifft=function(){return this.throwIfDisposed(),(0,og.S)(this)};var ig=D(6065);(0,_.t3)().prototype.irfft=function(){return this.throwIfDisposed(),(0,ig.w)(this)};var ag=D(8821);(0,_.t3)().prototype.isFinite=function(){return this.throwIfDisposed(),(0,ag.x)(this)};var lg=D(8381);(0,_.t3)().prototype.isInf=function(){return this.throwIfDisposed(),(0,lg.U)(this)};var ug=D(6483);(0,_.t3)().prototype.isNaN=function(){return this.throwIfDisposed(),(0,ug.i)(this)};var cg=D(9424);(0,_.t3)().prototype.leakyRelu=function(t){return this.throwIfDisposed(),(0,cg.h)(this,t)},(0,_.t3)().prototype.lessEqual=function(t){return this.throwIfDisposed(),(0,Ys.z)(this,t)},(0,_.t3)().prototype.less=function(t){return this.throwIfDisposed(),(0,za.d)(this,t)};var dg=D(1523);(0,_.t3)().prototype.localResponseNormalization=function(t,n,e,s){return this.throwIfDisposed(),(0,dg.G)(this,t,n,e,s)};var hg=D(4034);(0,_.t3)().prototype.logSigmoid=function(){return this.throwIfDisposed(),(0,hg.e)(this)};var pg=D(6455);(0,_.t3)().prototype.logSoftmax=function(t){return this.throwIfDisposed(),(0,pg.C)(this,t)};var fg=D(6735);(0,_.t3)().prototype.logSumExp=function(t,n){return this.throwIfDisposed(),(0,fg.l)(this,t,n)},(0,_.t3)().prototype.log=function(){return this.throwIfDisposed(),(0,Va.c)(this)};var mg=D(4088);(0,_.t3)().prototype.log1p=function(){return this.throwIfDisposed(),(0,mg.K)(this)},(0,_.t3)().prototype.logicalAnd=function(t){return this.throwIfDisposed(),(0,ho.H)(this,t)},(0,_.t3)().prototype.logicalNot=function(){return this.throwIfDisposed(),(0,Ua.h)(this)};var gg=D(2693);(0,_.t3)().prototype.logicalOr=function(t){return this.throwIfDisposed(),(0,gg.K)(this,t)};var xg=D(4574);(0,_.t3)().prototype.logicalXor=function(t){return this.throwIfDisposed(),(0,xg.e)(this,t)},(0,_.t3)().prototype.matMul=function(t,n,e){return this.throwIfDisposed(),(0,Vt.O)(this,t,n,e)};var yg=D(2444);(0,_.t3)().prototype.maxPool=function(t,n,e,s){return this.throwIfDisposed(),(0,yg._)(this,t,n,e,s)};var bg=D(3043);(0,_.t3)().prototype.max=function(t,n){return this.throwIfDisposed(),(0,bg.F)(this,t,n)},(0,_.t3)().prototype.maximum=function(t){return this.throwIfDisposed(),(0,el.g)(this,t)};var vg=D(9357);(0,_.t3)().prototype.mean=function(t,n){return this.throwIfDisposed(),(0,vg.J)(this,t,n)};var Cg=D(9602);(0,_.t3)().prototype.min=function(t,n){return this.throwIfDisposed(),(0,Cg.V)(this,t,n)};var wg=D(2684);(0,_.t3)().prototype.minimum=function(t){return this.throwIfDisposed(),(0,wg.L)(this,t)};var Sg=D(4639);(0,_.t3)().prototype.mirrorPad=function(t,n){return this.throwIfDisposed(),(0,Sg.V)(this,t,n)};var Ig=D(1612);(0,_.t3)().prototype.mod=function(t){return this.throwIfDisposed(),(0,Ig.w)(this,t)},(0,_.t3)().prototype.mul=function(t){return this.throwIfDisposed(),(0,Z.d)(this,t)},(0,_.t3)().prototype.neg=function(){return this.throwIfDisposed(),(0,at.W)(this)};var kg=D(3717);(0,_.t3)().prototype.norm=function(t,n,e){return this.throwIfDisposed(),(0,kg.K)(this,t,n,e)};var Tg=D(4015);(0,_.t3)().prototype.notEqual=function(t){return this.throwIfDisposed(),(0,Tg.Q)(this,t)};var Ng=D(5618);(0,_.t3)().prototype.oneHot=function(t,n=1,e=0){return this.throwIfDisposed(),(0,Ng.l)(this,t,n,e)};var Rg=D(5034);(0,_.t3)().prototype.onesLike=function(){return this.throwIfDisposed(),(0,Rg.J)(this)},(0,_.t3)().prototype.pad=function(t,n){return this.throwIfDisposed(),(0,Xa.v)(this,t,n)};var Ag=D(1640);(0,_.t3)().prototype.pool=function(t,n,e,s,r,o){return this.throwIfDisposed(),(0,Ag.d)(this,t,n,e,s,r,o)},(0,_.t3)().prototype.pow=function(t){return this.throwIfDisposed(),(0,mo.s)(this,t)};var Dg=D(1584);(0,_.t3)().prototype.prelu=function(t){return this.throwIfDisposed(),(0,Dg.A)(this,t)};var $g=D(794);(0,_.t3)().prototype.prod=function(t,n){return this.throwIfDisposed(),(0,$g.W)(this,t,n)};var Eg=D(4831);(0,_.t3)().prototype.reciprocal=function(){return this.throwIfDisposed(),(0,Eg.M)(this)};var _g=D(8586);(0,_.t3)().prototype.relu=function(){return this.throwIfDisposed(),(0,_g.U)(this)};var Fg=D(4917);(0,_.t3)().prototype.relu6=function(){return this.throwIfDisposed(),(0,Fg.b)(this)},(0,_.t3)().prototype.reshapeAs=function(t){return this.throwIfDisposed(),(0,te.X)(this,t.shape)},(0,_.t3)().prototype.reshape=function(t){return this.throwIfDisposed(),(0,te.X)(this,t)};var Og=D(1353);(0,_.t3)().prototype.resizeBilinear=function(t,n,e){return this.throwIfDisposed(),(0,Og.I)(this,t,n,e)};var Pg=D(7373);(0,_.t3)().prototype.resizeNearestNeighbor=function(t,n,e){return this.throwIfDisposed(),(0,Pg.j)(this,t,n,e)},(0,_.t3)().prototype.reverse=function(t){return this.throwIfDisposed(),(0,Wa.G)(this,t)};var zg=D(1638);(0,_.t3)().prototype.rfft=function(){return this.throwIfDisposed(),(0,zg.Q)(this)};var Lg=D(1974);(0,_.t3)().prototype.round=function(){return this.throwIfDisposed(),(0,Lg.N)(this)},(0,_.t3)().prototype.rsqrt=function(){return this.throwIfDisposed(),(0,Aa.b)(this)};var Mg=D(9614);(0,_.t3)().prototype.selu=function(){return this.throwIfDisposed(),(0,Mg.U)(this)};var Bg=D(6762);(0,_.t3)().prototype.separableConv2d=function(t,n,e,s,r,o){return this.throwIfDisposed(),(0,Bg.U)(this,t,n,e,s,r,o)},(0,_.t3)().prototype.sigmoid=function(){return this.throwIfDisposed(),(0,ja.X)(this)};var Vg=D(4058);(0,_.t3)().prototype.sign=function(){return this.throwIfDisposed(),(0,Vg.X)(this)},(0,_.t3)().prototype.sin=function(){return this.throwIfDisposed(),(0,Ta.O)(this)},(0,_.t3)().prototype.sinh=function(){return this.throwIfDisposed(),(0,Na.R)(this)},(0,_.t3)().prototype.slice=function(t,n){return this.throwIfDisposed(),(0,gn.t)(this,t,n)};var Wg=D(8683);(0,_.t3)().prototype.softmax=function(t){return this.throwIfDisposed(),(0,Wg.X)(this,t)};var Ug=D(4487);(0,_.t3)().prototype.softplus=function(){return this.throwIfDisposed(),(0,Ug.W)(this)},(0,_.t3)().prototype.spaceToBatchND=function(t,n){return this.throwIfDisposed(),(0,wa.f)(this,t,n)},(0,_.t3)().prototype.split=function(t,n){return this.throwIfDisposed(),(0,Sa.V)(this,t,n)},(0,_.t3)().prototype.sqrt=function(){return this.throwIfDisposed(),(0,zn._)(this)},(0,_.t3)().prototype.square=function(){return this.throwIfDisposed(),(0,Ue.h)(this)};var Gg=D(9539);(0,_.t3)().prototype.squaredDifference=function(t){return this.throwIfDisposed(),(0,Gg.$)(this,t)};var Hg=D(2494);(0,_.t3)().prototype.squeeze=function(t){return this.throwIfDisposed(),(0,Hg.L)(this,t)},(0,_.t3)().prototype.stack=function(t,n){this.throwIfDisposed();const e=t instanceof _.es?[this,t]:[this,...t];return(0,po.k)(e,n)},(0,_.t3)().prototype.step=function(t){return this.throwIfDisposed(),(0,qs.N)(this,t)};var Xg=D(5367);(0,_.t3)().prototype.stridedSlice=function(t,n,e,s,r,o,i,l){return this.throwIfDisposed(),(0,Xg.N)(this,t,n,e,s,r,o,i,l)},(0,_.t3)().prototype.sub=function(t){return this.throwIfDisposed(),(0,tt.l)(this,t)},(0,_.t3)().prototype.sum=function(t,n){return this.throwIfDisposed(),(0,Ie.S)(this,t,n)};var jg=D(2500);(0,_.t3)().prototype.tan=function(){return this.throwIfDisposed(),(0,jg.O)(this)};var Kg=D(5987);(0,_.t3)().prototype.tanh=function(){return this.throwIfDisposed(),(0,Kg.A)(this)},(0,_.t3)().prototype.tile=function(t){return this.throwIfDisposed(),(0,Da.G)(this,t)},(0,_.t3)().prototype.toBool=function(){return this.throwIfDisposed(),(0,ue.p)(this,"bool")},(0,_.t3)().prototype.toFloat=function(){return this.throwIfDisposed(),(0,ue.p)(this,"float32")},(0,_.t3)().prototype.toInt=function(){return this.throwIfDisposed(),(0,ue.p)(this,"int32")};var qg=D(4927);(0,_.t3)().prototype.topk=function(t,n){return this.throwIfDisposed(),(0,qg.h)(this,t,n)},(0,_.t3)().prototype.transpose=function(t){return this.throwIfDisposed(),(0,mn.p)(this,t)};var Zg=D(8130);(0,_.t3)().prototype.unique=function(t){return this.throwIfDisposed(),(0,Zg.T)(this,t)},(0,_.t3)().prototype.unsortedSegmentSum=function(t,n){return this.throwIfDisposed(),(0,$a.p)(this,t,n)},(0,_.t3)().prototype.unstack=function(t){return this.throwIfDisposed(),(0,Ma.H)(this,t)},(0,_.t3)().prototype.where=function(t,n){return this.throwIfDisposed(),(0,Kt.a)(t,this,n)},(0,_.t3)().prototype.zerosLike=function(){return this.throwIfDisposed(),(0,$e.P)(this)};class Dt extends Error{constructor(n){super(n),Object.setPrototypeOf(this,Dt.prototype)}}class lt extends Error{constructor(n){super(n),Object.setPrototypeOf(this,lt.prototype)}}class R extends Error{constructor(n){super(n),Object.setPrototypeOf(this,R.prototype)}}class ie extends Error{constructor(n){super(n),Object.setPrototypeOf(this,ie.prototype)}}class yo extends Error{constructor(n){super(n),Object.setPrototypeOf(this,yo.prototype)}}class nl{constructor(n){this.maxEntries=n||100,this.cache=new Map}get(n){let e;return this.cache.has(n)&&(e=this.cache.get(n),this.cache.delete(n),this.cache.set(n,e)),e}put(n,e){if(this.cache.has(n))this.cache.delete(n);else if(this.cache.size>=this.maxEntries){const s=this.cache.keys().next().value;this.cache.delete(s)}this.cache.set(n,e)}getMaxEntries(){return this.maxEntries}setMaxEntries(n){if(n<0)throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${n}.`);if(this.maxEntries>n)for(let e=0;e<this.maxEntries-n;e++){const s=this.cache.keys().next().value;this.cache.delete(s)}this.maxEntries=n}}function xn(t,n){if(Array.isArray(t)){let e=[];for(let s=0;s<n;s++)e=e.concat(t);return e}{const e=new Array(n);return e.fill(t),e}}function nt(t,n){if(!t)throw new yo(n)}function sl(t,n){let e=0;for(const s of t)s===n&&e++;return e}function Ze(t){return 1===t.length?t[0]:t}function ge(t){return Array.isArray(t)?t:[t]}function Wt(t){const e=t.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==e[0]?e:"private"+e}function yn(t){return t.length<=1||-1===t.indexOf("_")?t:t.replace(/[_]+(\w|$)/g,(n,e)=>e.toUpperCase())}let ut={};function bo(t){if(null==t)return null;const n={};return n.className=t.getClassName(),n.config=t.getConfig(),n}function vo(t){if(null!=t&&"object"==typeof t)if(Array.isArray(t))t.forEach(n=>vo(n));else{const n=Object.keys(t);for(const e of n){const s=t[e];null!=s&&"object"==typeof s&&(Array.isArray(s)||"ndarray"!==s.type||"number"!=typeof s.value?vo(s):t[e]=s.value)}}}function cs(t,n={},e={},s="object",r=!1){if("string"==typeof t){let i;if(t in e)i=e[t];else if(t in ut)i=ut[t];else if(i=n[t],null==i)throw new R(`Unknown ${s}: ${t}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return i}{const o=t;if(null==o.className||null==o.config)throw new R(`${s}: Improper config format: ${JSON.stringify(o)}.\n'className' and 'config' must set.`);const i=o.className;let l,u;if(i in e?[l,u]=e[i]:i in ut?[l,u]=ut.className:i in n&&([l,u]=n[i]),null==l)throw new R(`Unknown ${s}: ${i}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=u){const c={};for(const f of Object.keys(ut))c[f]=ut[f];for(const f of Object.keys(e))c[f]=e[f];o.config.customObjects=c;const h=Object.assign({},ut);for(const f of Object.keys(e))ut[f]=e[f];vo(o.config);const p=u(l,o.config,e,r);return ut=Object.assign({},h),p}{const c=Object.assign({},ut);for(const h of Object.keys(e))ut[h]=e[h];const d=new l(o.config);return ut=Object.assign({},c),d}}}function Qs(t,n){return-1*function Yg(t,n){return t<n?-1:t>n?1:0}(t,n)}function Zt(t){if(null==t)return t;const n=[];for(const e of t)-1===n.indexOf(e)&&n.push(e);return n}function Qg(t){if(null==t)throw new R(`Invalid value in obj: ${JSON.stringify(t)}`);for(const n in t)if(t.hasOwnProperty(n))return!1;return!0}function bn(t,n,e){if(null!=e&&t.indexOf(e)<0)throw new R(`${e} is not a valid ${n}.  Valid values are ${t} or null/undefined.`)}function Co(t,n,e=0,s=1/0){return nt(e>=0),nt(s>=e),Array.isArray(t)&&t.length>=e&&t.length<=s&&t.every(r=>typeof r===n)}function Be(t,n){Array.isArray(t)?(a.util.assert(t.length>0,()=>`${n} is unexpectedly an empty array.`),t.forEach((e,s)=>Be(e,`element ${s+1} of ${n}`))):a.util.assert(Number.isInteger(t)&&t>0,()=>`Expected ${n} to be a positive integer, but got ${rl(t)}.`)}function rl(t){return null===t?"null":Array.isArray(t)?"["+t.map(n=>rl(n)).join(",")+"]":"string"==typeof t?`"${t}"`:`${t}`}function ol(t){return"relu"===t?"relu":"linear"===t?"linear":"elu"===t?"elu":null}let ex=0;function il(){return ex++}const Js={};function er(t=""){return t in Js||(Js[t]=0),Js[t]+=1,t+Js[t].toString()}const tx=["channelsFirst","channelsLast"],nx=["nearest","bilinear"],sx=["valid","same","causal"],rx=["max","avg"],ox=["sum","mul","concat","ave"],Bn=new Map;function Ee(t){bn(tx,"DataFormat",t)}function st(t){bn(sx,"PaddingMode",t)}function al(t){bn(rx,"PoolMode",t)}const ds=[];function vn(t,n){ds.push(t);try{const e=n();return ds.pop(),e}catch(e){throw ds.pop(),e}}function ul(t){if(!dl(t))throw new Error("Not a valid tensor name: '"+t+"'");return function ax(){return 0===ds.length?"":ds.join("/")+"/"}()+t}function cl(t){if(!dl(t))throw new Error("Not a valid tensor name: '"+t+"'");Bn.has(t)||Bn.set(t,0);const n=Bn.get(t);if(Bn.set(t,Bn.get(t)+1),n>0){const e=`${t}_${n}`;return Bn.set(e,1),e}return t}const lx=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function dl(t){return!!t.match(lx)}function ux(t){return t===parseInt(t.toString(),10)}function Yt(t,n,e){null==n&&(n=0),null==e&&(e=t.length);let s=1;for(let r=n;r<e;++r)s*=t[r];return s}function Vn(t){if(0===t.length)return Number.NaN;let n=Number.POSITIVE_INFINITY;for(let e=0;e<t.length;e++){const s=t[e];s<n&&(n=s)}return n}function Qt(t){if(0===t.length)return Number.NaN;let n=Number.NEGATIVE_INFINITY;for(let e=0;e<t.length;e++){const s=t[e];s>n&&(n=s)}return n}function yt(t,n){if(n<t)throw new R(`end (${n}) < begin (${t}) is forbidden.`);const e=[];for(let s=t;s<n;++s)e.push(s);return e}let tr;function Oe(){return null==tr&&(tr=(0,a.backend)().epsilon()),tr}function $t(t,n){return a.cast(t,n)}function hs(t,n=-1){const e=t.shape.slice();return n<0&&(n=e.length+n+1),e.splice(n,0,1),a.reshape(t,e)}function Cn(t,n,e){return(0,a.tidy)(()=>{switch(t.rank){case 1:return a.slice1d(t,n,e);case 2:return a.slice2d(t,[n,0],[e,t.shape[1]]);case 3:return a.slice3d(t,[n,0,0],[e,t.shape[1],t.shape[2]]);case 4:return a.slice4d(t,[n,0,0,0],[e,t.shape[1],t.shape[2],t.shape[3]]);case 5:return a.slice(t,[n,0,0,0,0],[e,t.shape[1],t.shape[2],t.shape[3],t.shape[4]]);case 6:return a.slice(t,[n,0,0,0,0,0],[e,t.shape[1],t.shape[2],t.shape[3],t.shape[4],t.shape[5]]);default:throw new R(`sliceAlongFirstAxis() received an unsupported tensor rank: ${t.rank}`)}})}function wo(t,n,e){return(0,a.tidy)(()=>{switch(t.rank){case 1:return a.slice1d(t,n,e);case 2:return a.slice2d(t,[0,n],[t.shape[0],e]);case 3:return a.slice3d(t,[0,0,n],[t.shape[0],t.shape[1],e]);case 4:return a.slice4d(t,[0,0,0,n],[t.shape[0],t.shape[1],t.shape[2],e]);default:throw new R(`sliceAlongLastAxis() received an unsupported tensor rank: ${t.rank}`)}})}function nr(t,n,e,s){return(0,a.tidy)(()=>{switch(t.rank){case 1:return a.slice1d(t,n,e);case 2:switch(s){case 1:return Cn(t,n,e);case 2:return wo(t,n,e);default:throw new R(`The axis is not within the rank of the tensor ${s}`)}case 3:switch(s){case 1:return Cn(t,n,e);case 2:return a.slice3d(t,[0,n,0],[t.shape[0],e,t.shape[2]]);case 3:return wo(t,n,e);default:throw new R(`The axis is not within the rank of the tensor ${s}`)}case 4:switch(s){case 1:return Cn(t,n,e);case 2:return a.slice4d(t,[0,n,0,0],[t.shape[0],e,t.shape[2],t.shape[3]]);case 3:return a.slice4d(t,[0,0,n,0],[t.shape[0],t.shape[1],e,t.shape[3]]);case 4:return wo(t,n,e);default:throw new R(`The axis is not within the rank of the tensor ${s}`)}default:throw new R(`sliceAlongLastAxis() received an unsupported tensor rank: ${t.rank}`)}})}function So(t,n=-1){let e;return n<0&&(e=t[0].rank,n=0!==e?e:0),n===t[0].rank&&(n=-1),a.concat(t,n)}function pl(t,n){switch(t.rank){case 1:return a.concat1d([t,n]);case 2:return a.concat2d([t,n],0);case 3:return a.concat3d([t,n],0);case 4:return a.concat4d([t,n],0);default:throw new R(`concatAlongFirstAxis() received an unsupported tensor rank: ${t.rank}`)}}function Io(t,n){if(Array.isArray(n)||(n=[n]),t.rank!==n.length)throw new R(`The length of input n (${n.length}) does not match the number of dimensions in input x (${t.rank})`);return a.tile(t,n)}function sr(t,n=0,e=1,s,r){return a.randomNormal(t,n,e,s,r)}function Et(t,n,e,s){if(t.rank<2||n.rank<2)throw new ie(`dot requires both inputs to be rank >= 2 but got x shape = ${t.shape} and y shape = ${n.shape}`);if(n.rank>=3&&t.shape.slice(-1)[0]!==n.shape.slice(-2)[0])throw new ie(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${t.shape} and  y shape = ${n.shape}`);if(2===t.rank&&2===n.rank)return a.fused.matMul({a:t,b:n,transposeA:!1,transposeB:!1,bias:s?ko(t.rank,s,"channelsLast"):null,activation:e});{const r=t.shape.slice(),o=r.pop();t=a.reshape(t,[-1,o]);const i=n.shape.slice(),l=i.pop(),u=i.pop(),c=[...i,l],d=Array.from({length:n.rank},(m,x)=>0===x?n.rank-2:x<=n.rank-2?x-1:x);n=a.reshape(a.transpose(n,d),[u,-1]);const h=[...r,...c];return a.reshape(a.fused.matMul({a:t,b:n,transposeA:!1,transposeB:!1,bias:s?ko(t.rank,s,"channelsLast"):null,activation:e}),h)}}function fl(t,n,e){return(0,a.tidy)(()=>(n=Array.isArray(n)?(0,a.tensor1d)(n,"int32"):a.cast(n,"int32"),a.gather(t,n,e)))}function ps(t){return a.mul(t,t)}function ko(t,n,e){const s=n.shape;if(1!==n.rank&&n.rank!==t)throw new R(`Unexpected bias dimensions: ${n.rank}; expected it to be 1 or ${t}`);if(5===t){if("channelsFirst"===e)return a.reshape(n,1===s.length?[1,s[0],1,1,1]:[1,s[3],s[0],s[1],s[2]]);if("channelsLast"===e)return a.reshape(n,1===s.length?[1,1,1,1,s[0]]:[1].concat(s))}else if(4===t){if("channelsFirst"===e)return a.reshape(n,1===s.length?[1,s[0],1,1]:[1,s[2],s[0],s[1]]);if("channelsLast"===e)return a.reshape(n,1===s.length?[1,1,1,s[0]]:[1].concat(s))}else if(3===t){if("channelsFirst"===e)return a.reshape(n,1===s.length?[1,s[0],1]:[1,s[1],s[0]]);if("channelsLast"===e)return a.reshape(n,1===s.length?[1,1,s[0]]:[1].concat(s))}else if(t<3)return n;throw new R(`Unsupported input rank by biasAdd: ${n.rank}`)}function vt(t,n,e){return(0,a.tidy)(()=>(null==e&&(e="channelsLast"),Ee(e),a.add(t,ko(t.rank,n,e))))}function ml(t,n,e,s){return(0,a.tidy)(()=>a.dropout(t,n,e,s))}function fs(t,n,e=!1){return e?t():n()}const yx=["fanIn","fanOut","fanAvg"],bx=["normal","uniform","truncatedNormal"];class ct extends a.serialization.Serializable{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}a.serialization.registerClass((()=>{class t extends ct{apply(e,s){return(0,a.zeros)(e,s)}}return t.className="Zeros",t})());let gl=(()=>{class t extends ct{apply(e,s){return(0,a.ones)(e,s)}}return t.className="Ones",t})();a.serialization.registerClass(gl),a.serialization.registerClass((()=>{class t extends ct{constructor(e){if(super(),"object"!=typeof e)throw new R(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new R(`config must have value set but got ${e}`);this.value=e.value}apply(e,s){return(0,a.tidy)(()=>(0,a.mul)((0,a.scalar)(this.value),(0,a.ones)(e,s)))}getConfig(){return{value:this.value}}}return t.className="Constant",t})()),a.serialization.registerClass((()=>{class t extends ct{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,s){return(0,a.randomUniform)(e,this.minval,this.maxval,s,this.seed)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}return t.className="RandomUniform",t})()),a.serialization.registerClass((()=>{class t extends ct{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,s){if("float32"!==(s=s||"float32")&&"int32"!==s)throw new ie(`randomNormal does not support dType ${s}.`);return sr(e,this.mean,this.stddev,s,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}return t.className="RandomNormal",t})()),a.serialization.registerClass((()=>{class t extends ct{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,s){if("float32"!==(s=s||"float32")&&"int32"!==s)throw new ie(`truncatedNormal does not support dType ${s}.`);return(0,a.truncatedNormal)(e,this.mean,this.stddev,s,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}return t.className="TruncatedNormal",t})()),a.serialization.registerClass((()=>{class t extends ct{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,s){return(0,a.tidy)(()=>{if(2!==e.length||e[0]!==e[1])throw new R("Identity matrix initializer can only be used for 2D square matrices.");return(0,a.mul)(this.gain,(0,a.eye)(e[0]))})}getConfig(){return{gain:this.gain}}}return t.className="Identity",t})());let rt=(()=>{class t extends ct{constructor(e){if(super(),e.scale<0)throw new R(`scale must be a positive float. Got: ${e.scale}`);this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,function vx(t){bn(yx,"FanMode",t)}(this.mode),this.distribution=null==e.distribution?"normal":e.distribution,function Cx(t){bn(bx,"Distribution",t)}(this.distribution),this.seed=e.seed}apply(e,s){const r=function Rx(t,n="channelsLast"){let e,s;if(Ee(n),2===t.length)e=t[0],s=t[1];else if(-1!==[3,4,5].indexOf(t.length)){if("channelsFirst"===n){const r=Yt(t,2);e=t[1]*r,s=t[0]*r}else if("channelsLast"===n){const r=Yt(t,0,t.length-2);e=t[t.length-2]*r,s=t[t.length-1]*r}}else{const r=Yt(t);e=Math.sqrt(r),s=Math.sqrt(r)}return[e,s]}(e),o=r[0],i=r[1];let l=this.scale;if(l/="fanIn"===this.mode?Math.max(1,o):"fanOut"===this.mode?Math.max(1,i):Math.max(1,(o+i)/2),"normal"===this.distribution){const u=Math.sqrt(l);if("float32"!==(s=s||"float32")&&"int32"!==s)throw new ie(`${this.getClassName()} does not support dType ${s}.`);return(0,a.truncatedNormal)(e,0,u,s,this.seed)}{const u=Math.sqrt(3*l);return(0,a.randomUniform)(e,-u,u,s,this.seed)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}return t.className="VarianceScaling",t})();a.serialization.registerClass(rt);let xl=(()=>{class t extends rt{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return rt.className}}return t.className="GlorotUniform",t})();a.serialization.registerClass(xl);let yl=(()=>{class t extends rt{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return rt.className}}return t.className="GlorotNormal",t})();a.serialization.registerClass(yl);let bl=(()=>{class t extends rt{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return rt.className}}return t.className="HeNormal",t})();a.serialization.registerClass(bl);let vl=(()=>{class t extends rt{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return rt.className}}return t.className="HeUniform",t})();a.serialization.registerClass(vl);let Cl=(()=>{class t extends rt{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return rt.className}}return t.className="LeCunNormal",t})();a.serialization.registerClass(Cl);let wl=(()=>{class t extends rt{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return rt.className}}return t.className="LeCunUniform",t})();a.serialization.registerClass(wl);let Ax=(()=>{class t extends ct{constructor(e){super(),this.DEFAULT_GAIN=1,this.ELEMENTS_WARN_SLOW=2e3,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed}apply(e,s){return(0,a.tidy)(()=>{if(e.length<2)throw new ie("Shape must be at least 2D.");if("int32"!==s&&"float32"!==s&&void 0!==s)throw new TypeError(`Unsupported data type ${s}.`);const r=a.util.sizeFromShape(e.slice(0,-1)),o=e[e.length-1],i=r*o;i>this.ELEMENTS_WARN_SLOW&&console.warn(`Orthogonal initializer is being called on a matrix with more than ${this.ELEMENTS_WARN_SLOW} (${i}) elements: Slowness may result.`);const u=sr([Math.max(o,r),Math.min(o,r)],0,1,s,this.seed),c=a.linalg.qr(u,!1);let d=c[0];const p=c[1].flatten().stridedSlice([0],[Math.min(o,r)*Math.min(o,r)],[Math.min(o,r)+1]);return d=(0,a.mul)(d,p.sign()),r<o&&(d=d.transpose()),(0,a.mul)((0,a.scalar)(this.gain),d.reshape(e))})}getConfig(){return{gain:this.gain,seed:this.seed}}}return t.className="Orthogonal",t})();a.serialization.registerClass(Ax);const Sl={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function Il(t,n={}){return cs(t,a.serialization.SerializationMap.getMap().classNameMap,n,"initializer")}function Re(t){return bo(t)}function ke(t){if("string"==typeof t){const n=t in Sl?Sl[t]:t;if("GlorotNormal"===n)return new yl;if("GlorotUniform"===n)return new xl;if("HeNormal"===n)return new bl;if("HeUniform"===n)return new vl;if("LeCunNormal"===n)return new Cl;if("LeCunUniform"===n)return new wl;{const e={};return e.className=n,e.config={},Il(e)}}return t instanceof ct?t:Il(t)}function To(t){return Array.isArray(t)&&Array.isArray(t[0])}function rr(t){return 0===t.length?[]:Array.isArray(t[0])?t:[t]}function oe(t){let n;if(Array.isArray(t)){if(1!==t.length)throw new R(`Expected Tensor length to be 1; got ${t.length}`);n=t[0]}else n=t;return n}function he(t){if(Array.isArray(t)&&Array.isArray(t[0])){if(1===t.length)return t[0];throw new R(`Expected exactly 1 Shape; got ${t.length}`)}return t}function or(t){let n=0;for(const e of t)n+=0===e.shape.length?1:e.shape.reduce((s,r)=>s*r);return n}const kl="Variable";class _t{constructor(n,e="float32",s=kl,r=!0,o=null){this.dtype=null==e?"float32":e,this.shape=n.shape,this.id=il(),this.originalName=ul(s=null==s?kl:s),this.name=cl(this.originalName),this.trainable_=r,this.constraint=o,this.val=a.variable(n,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(n){return this.assertNotDisposed(),function Dx(t,n){if(t.shape.toString()!==n.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(t.shape)+" vs. "+JSON.stringify(n.shape))}(this.val,n),this.val.id!==n.id&&(this.val.assign(n),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(n){this.trainable_=n,this.val.trainable=n}}function No(t){return t.map(n=>n.read())}function Ro(t){t.forEach(n=>{n[0].write(n[1])})}class Pe{constructor(n){this.dtype=n.dtype,this.shape=n.shape,this.ndim=null!=n.shape?n.shape.length:n.ndim,this.maxNDim=n.maxNDim,this.minNDim=n.minNDim,this.axes=n.axes||{}}}class Ft{constructor(n,e,s,r,o,i,l){this.dtype=n,this.shape=e,this.sourceLayer=s,this.inputs=r,this.callArgs=o,this.outputTensorIndex=l,this.id=il(),null!=i&&(this.originalName=ul(i),this.name=cl(this.originalName)),this.rank=e.length}}let $x=0;class ir{constructor(n,e){this.callArgs=e,this.id=$x++,this.outboundLayer=n.outboundLayer,this.inboundLayers=n.inboundLayers,this.nodeIndices=n.nodeIndices,this.tensorIndices=n.tensorIndices,this.inputTensors=n.inputTensors,this.outputTensors=n.outputTensors,this.inputMasks=n.inputMasks,this.outputMasks=n.outputMasks,this.inputShapes=n.inputShapes,this.outputShapes=n.outputShapes;for(const s of n.inboundLayers)null!=s&&s.outboundNodes.push(this);n.outboundLayer.inboundNodes.push(this)}getConfig(){const n=[];for(const e of this.inboundLayers)n.push(null!=e?e.name:null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:n,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let Ex=0;class ce extends a.serialization.Serializable{constructor(n={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=Ex++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let e=n.name;if(!e){const s=this.getClassName();e=Wt(s)+"_"+er(s)}if(this.name=e,this.trainable_=null==n.trainable||n.trainable,null!=n.inputShape||null!=n.batchInputShape){let s;if(null!=n.batchInputShape)s=n.batchInputShape;else if(null!=n.inputShape){let o=null;null!=n.batchSize&&(o=n.batchSize),s=[o].concat(n.inputShape)}this.batchInputShape=s;let r=n.dtype;null==r&&(r=n.inputDType),null==r&&(r="float32"),this.dtype=r}this.initialWeights=null!=n.weights?n.weights:null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(n,e){return n.name+"_ib-"+e.toString()}getNodeAtIndex(n,e){if(0===this.inboundNodes.length)throw new lt(`The layer has never been called and thus has no defined ${e}.`);if(this.inboundNodes.length<=n)throw new R(`Asked to get ${e} at node ${n}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[n]}getInputAt(n){return Ze(this.getNodeAtIndex(n,"input").inputTensors)}getOutputAt(n){return Ze(this.getNodeAtIndex(n,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new Dt(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new Dt(`Layer ${this.name} is not connected, no input to return.`);return Ze(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new Dt(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new Dt(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return Ze(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map(n=>n())}get updates(){return this._updates}get built(){return this._built}set built(n){this._built=n}get trainable(){return this.trainable_}set trainable(n){this._trainableWeights.forEach(e=>e.trainable=n),this.trainable_=n}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(n=>n.trainable):[]}set trainableWeights(n){this._trainableWeights=n}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(n=>!n.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(n){this._nonTrainableWeights=n}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(n){const e=ge(n);if(null==this.inputSpec||0===this.inputSpec.length)return;const s=ge(this.inputSpec);if(e.length!==s.length)throw new R(`Layer ${this.name} expects ${s.length} inputs, but it received ${e.length} input tensors. Input received: ${n}`);for(let r=0;r<e.length;r++){const o=e[r],i=s[r];if(null==i)continue;const l=o.rank;if(null!=i.ndim&&l!==i.ndim)throw new R(`Input ${r} is incompatible with layer ${this.name}: expected ndim=${i.ndim}, found ndim=${l}`);if(null!=i.maxNDim&&l>i.maxNDim)throw new R(`Input ${r} is incompatible with layer ${this.name}: expected max_ndim=${i.maxNDim}, found ndim=${l}`);if(null!=i.minNDim&&l<i.minNDim)throw new R(`Input ${r} is incompatible with layer ${this.name}: expected min_ndim=${i.minNDim}, found ndim=${l}.`);if(null!=i.dtype&&o.dtype!==i.dtype)throw new R(`Input ${r} is incompatible with layer ${this.name} : expected dtype=${i.dtype}, found dtype=${o.dtype}.`);if(i.axes){const u=o.shape;for(const c in i.axes){const d=Number(c),h=i.axes[c];if(null!=h&&-1===[h,null].indexOf(d>=0?u[d]:u[u.length+d]))throw new R(`Input ${r} is incompatible with layer ${this.name}: expected axis ${d} of input shape to have value ${h} but got shape ${u}.`)}}if(null!=i.shape)for(let u=0;u<i.shape.length;++u){const c=i.shape[u],d=o.shape[u];if(null!=c&&null!=d&&c!==d)throw new R(`Input ${r} is incompatible with layer ${this.name}: expected shape=${i.shape}, found shape=${o.shape}.`)}}}call(n,e){return n}invokeCallHook(n,e){null!=this._callHook&&this._callHook(n,e)}setCallHook(n){this._callHook=n}clearCallHook(){this._callHook=null}apply(n,e){e=e||{},this.assertNotDisposed();const s=ge(n),r=function Ox(t){let n=!0;for(const e of ge(t))if(!(e instanceof Ft)){n=!1;break}return n}(n),o=function Px(t){let n=!0;for(const e of ge(t))if(e instanceof Ft){n=!1;break}return n}(n);if(r===o)throw new R("Arguments to apply() must be all SymbolicTensors or all Tensors");return vn(this.name,()=>{if(!this.built){this.assertInputCompatibility(n);const i=[];for(const l of ge(n))i.push(l.shape);this.build(Ze(i)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&o&&(this._refCount=1)}if(this.assertInputCompatibility(n),o){let i=this.call(n,e);this.supportsMasking&&this.setMaskMetadata(n,i);const l=ge(i),u=[];for(let c of l)-1!==s.indexOf(c)&&(c=c.clone()),u.push(c);if(i=Ze(u),null!=this.activityRegularizer)throw new ie("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return i}{const i=function _x(t){t=ge(t);const n=[];for(const e of t)n.push(e.shape);return Ze(n)}(n),l=this.computeOutputShape(i);let u;const c="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(n)?i[0]:i),u=null!=l&&l.length>0&&Array.isArray(l[0])?l.map((d,h)=>new Ft(c,d,this,ge(n),e,this.name,h)):new Ft(c,l,this,ge(n),e,this.name),this.addInboundNode(n,u,null,null,i,l,e),this._refCount++,null!=this.activityRegularizer)throw new ie("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return u}})}warnOnIncompatibleInputShape(n){if(null!=this.batchInputShape)if(n.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(n)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let e=!1;this.batchInputShape.forEach((s,r)=>{null!=s&&null!=n[r]&&n[r]!==s&&(e=!0)}),e&&console.warn(`The shape of the input tensor (${JSON.stringify(n)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new Dt(`The layer ${this.name} has never been called and thus has no defined output shape.`);const n=[];for(const e of this.inboundNodes){const s=JSON.stringify(e.outputShapes);-1===n.indexOf(s)&&n.push(s)}if(1===n.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new Dt(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new lt(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return or(this.weights)}build(n){this.built=!0}getWeights(n=!1){return No(n?this.trainableWeights:this.weights)}setWeights(n){(0,a.tidy)(()=>{const e=this.weights;if(e.length!==n.length)throw new R(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${n.length}, but the layer was expecting ${e.length} weights. Provided weights: ${n}...`);if(0===e.length)return;const s=[],r=No(e);for(let o=0;o<r.length;++o){const i=r[o],l=e[o],u=n[o];if(!a.util.arraysEqual(i.shape,u.shape))throw new R(`Layer weight shape ${i.shape} not compatible with provided weight shape ${u.shape}`);s.push([l,u])}Ro(s)})}addWeight(n,e,s,r,o,i,l,u){if(-1!==this._addedWeightNames.indexOf(n))throw new R(`Duplicate weight name ${n} for layer ${this.name}`);this._addedWeightNames.push(n),null==s&&(s="float32"),this.fastWeightInitDuringBuild&&(r=null!=u?u():ke("zeros"));const c=r.apply(e,s),d=new _t(c,s,n,i,l);return c.dispose(),null!=o&&this.addLoss(()=>o.apply(d.read())),null==i&&(i=!0),i?this._trainableWeights.push(d):this._nonTrainableWeights.push(d),d}setFastWeightInitDuringBuild(n){this.fastWeightInitDuringBuild=n}addLoss(n){null==n||Array.isArray(n)&&0===n.length||(n=ge(n),null!=this._losses&&this.losses.push(...n))}computeOutputShape(n){return n}computeMask(n,e){if(!this.supportsMasking){if(null!=e){if(!Array.isArray(e))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);e.forEach(s=>{if(null!=s)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)})}return null}return e}setMaskMetadata(n,e,s){if(!this.supportsMasking)return;const r=this.computeMask(n,s);if(e instanceof Array&&r instanceof Array){if(e.length!==r.length)throw new Error(`${this.name} outputs ${e.length} tensors but ${r.length} masks for those tensors`);for(let o=0;o<e.length;o++)e[o].kerasMask=r[o]}else{if(r instanceof Array)throw new Error(`{this.name} outputs a single tensor but ${r.length} masks`);if(e instanceof Array)throw new Error(`{this.name} outputs ${e.length} tensors but only one mask`);e.kerasMask=r}}addInboundNode(n,e,s,r,o,i,l=null){const u=ge(n);e=ge(e),s=ge(s),r=ge(r),o=rr(o),i=rr(i);const c=[],d=[],h=[];for(const p of u)c.push(p.sourceLayer),d.push(p.nodeIndex),h.push(p.tensorIndex);new ir({outboundLayer:this,inboundLayers:c,nodeIndices:d,tensorIndices:h,inputTensors:u,outputTensors:e,inputMasks:s,outputMasks:r,inputShapes:o,outputShapes:i},l);for(let p=0;p<e.length;p++)e[p].sourceLayer=this,e[p].nodeIndex=this.inboundNodes.length-1,e[p].tensorIndex=p}getConfig(){const n={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(n.batchInputShape=this.batchInputShape),null!=this.dtype&&(n.dtype=this.dtype),n}disposeWeights(){return this.weights.forEach(n=>n.dispose()),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let n=0;return 0==--this._refCount&&(n=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:n}}}function Tl(t,n,e){if((null==n||null!=e&&e>0)&&(n=t.sourceLayer,e=t.nodeIndex),0===n.inboundNodes.length)return[t];{const s=n.inboundNodes[e];if(0===s.inboundLayers.length)return s.inputTensors;{const r=[];for(let o=0;o<s.inboundLayers.length;o++){const c=Tl(s.inputTensors[o],s.inboundLayers[o],s.nodeIndices[o]);for(const d of c)-1===r.indexOf(d)&&r.push(d)}return r}}}let ar=(()=>{class t extends ce{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:er("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new R("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let s=e.batchInputShape;if(null==s){if(null==e.inputShape)throw new R("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");s=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new R("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const r=e.dtype||"float32";this.batchInputShape=s,this.dtype=r,this.inputSpec=[{shape:s}];const o=new Ft(this.dtype,this.batchInputShape,this,[],{},this.name);o.nodeIndex=0,o.tensorIndex=0,new ir({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[o],outputTensors:[o],inputMasks:[null],outputMasks:[null],inputShapes:[s],outputShapes:[s]})}apply(e,s){throw new R(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}return t.className="InputLayer",t})();a.serialization.registerClass(ar);class Jt{constructor(n){if(this.id2Value={},this.id2Mask={},this.name2Id={},n instanceof Jt)for(const e in n.id2Value)this.id2Value[e]=n.id2Value[e],e in n.id2Mask&&(this.id2Mask[e]=n.id2Mask[e]);else{if(null==n)return;for(const e of n)this.add(e.key,e.value)}}add(n,e,s){if(null!=this.id2Value[n.id])throw new R(`Duplicate key: name=${n.name}, id=${n.id}`);return this.id2Value[n.id]=function Lx(t,n){if(null==t.dtype||t.dtype===n.dtype)return n;try{return(0,a.cast)(n,t.dtype)}catch{throw new R(`The dtype of the feed (${n.dtype}) can not be cast to the dtype of the key '${t.name}' (${t.dtype}).`)}}(n,e),this.name2Id[n.name]=n.id,null!=s&&(this.id2Mask[n.id]=s),this}addFeed(n){this.add(n.key,n.value)}hasKey(n){return null!=this.id2Value[n.id]}names(){return Object.keys(this.name2Id)}getValue(n){if(n instanceof Ft){if(null==this.id2Value[n.id])throw new R(`Nonexistent key: ${n.name}`);return this.id2Value[n.id]}{const e=this.name2Id[n];if(null==e)throw new R(`Feed dict has no SymbolicTensor name: ${n}`);return this.id2Value[e]}}getMask(n){if(n instanceof Ft){if(null==this.id2Value[n.id])throw new R(`Nonexistent key: ${n.name}`);return this.id2Mask[n.id]}{const e=this.name2Id[n];if(null==e)throw new R(`Feed dict has no SymbolicTensor name: ${n}`);return this.id2Mask[e]}}disposeMasks(){null!=this.id2Mask&&(0,a.dispose)(this.id2Mask)}}const lr=new nl,ur=new nl;function ms(t,n,e,s){const r=null!=e&&e.training,o=Array.isArray(t),i=o?t:[t],l=i.map(m=>m.name),u=[],c=n.names();for(const m of l)-1!==c.indexOf(m)?u.push(n.getValue(m)):u.push(null);null!=s&&(s.maxNumTensors=-1/0,s.minNumTensors=1/0);const d=l.join(",")+"|"+n.names().sort().join(",");let p,h=lr.get(d);if(null==h){const m=function Bx(t,n){a.util.assert(null!=t&&t.length>0,()=>"Expected at least one fetch, got none");let e=[],s={};if(1===t.length){const r=Nl(t[0],n);e=r.sorted,s=r.recipientMap}else{const r=new Set;for(const o of t){const{sorted:i,recipientMap:l}=Nl(o,n);for(const u of i)r.has(u.name)||(e.push(u),r.add(u.name));for(const u in l)null==s[u]&&(s[u]=new Set),l[u].forEach(c=>s[u].add(c))}}return{sorted:e,recipientCounts:Vx(s)}}(i,n);h=m.sorted,p=m.recipientCounts,lr.put(d,h),ur.put(d,p)}p={},r||Object.assign(p,ur.get(d));const f=new Jt(n);for(let m=0;m<h.length;++m){if(null!=s){const N=(0,a.memory)().numTensors;N>s.maxNumTensors&&(s.maxNumTensors=N),N<s.minNumTensors&&(s.minNumTensors=N)}const x=h[m],g=x.sourceLayer;if(g instanceof ar)continue;const y=[],b=[],C=[];let v=!1;for(const N of x.inputs){const T=f.getValue(N),A=f.getMask(N);y.push(T),b.push(A),null!=A&&(v=!0),r||(p[N.name]--,0===p[N.name]&&!n.hasKey(N)&&-1===l.indexOf(N.name)&&!T.isDisposed&&!0!==N.sourceLayer.stateful&&C.push(T))}v&&((e=e||{}).mask=b[0]);const w=ge(g.apply(y,e));let S=null;g.supportsMasking&&(S=g.computeMask(y,b));const I=Wx(x),k=Array.isArray(I)?I:[I];for(let N=0;N<k.length;++N){f.hasKey(k[N])||f.add(k[N],w[N],Array.isArray(S)?S[0]:S);const T=l.indexOf(k[N].name);-1!==T&&(u[T]=w[N])}r||(0,a.dispose)(C)}return f.disposeMasks(),o?u:u[0]}function Vx(t){const n={};for(const e in t)n[e]=t[e].size;return n}function Nl(t,n){const e=new Set,s=[],r={};for(const l of n.names())e.add(l);const o=[],i=[];for(o.push(t);o.length>0;){const l=o[o.length-1];if(e.has(l.name)){o.pop();continue}const u=i[i.length-1]===o.length-1;if(0===l.inputs.length||u)o.pop(),s.push(l),e.add(l.name),u&&i.pop();else{i.push(o.length-1);for(const c of l.inputs)null==r[c.name]&&(r[c.name]=new Set),r[c.name].add(l.name),!e.has(c.name)&&o.push(c)}}return{sorted:s,recipientMap:r}}function Wx(t){let n;if(1===t.sourceLayer.inboundNodes.length)n=t.sourceLayer.output;else{let e=null;for(let s=0;s<t.sourceLayer.inboundNodes.length;++s)for(const r of t.sourceLayer.inboundNodes[s].outputTensors)if(r.id===t.id){e=s;break}n=t.sourceLayer.getOutputAt(e)}return n}function Ao(t,n){return(0,a.tidy)(()=>a.sqrt(a.sum(a.mul(t,t),n,!0)))}(0,a.env)().registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",()=>100,function Mx(t){null!=lr&&lr.setMaxEntries(t),null!=ur&&ur.setMaxEntries(t)});class gs extends a.serialization.Serializable{getConfig(){return{}}}let Ux=(()=>{class t extends gs{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return(0,a.tidy)(()=>{const s=Ao(e,this.axis),r=a.clipByValue(s,0,this.maxValue);return a.mul(e,a.div(r,a.add(Oe(),s)))})}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}return t.className="MaxNorm",t})();a.serialization.registerClass(Ux);let Gx=(()=>{class t extends gs{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return(0,a.tidy)(()=>a.div(e,a.add(Oe(),Ao(e,this.axis))))}getConfig(){return{axis:this.axis}}}return t.className="UnitNorm",t})();a.serialization.registerClass(Gx);let Hx=(()=>{class t extends gs{apply(e){return a.relu(e)}}return t.className="NonNeg",t})();a.serialization.registerClass(Hx);let Xx=(()=>{class t extends gs{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return(0,a.tidy)(()=>{const s=Ao(e,this.axis),r=a.add(a.mul(this.rate,a.clipByValue(s,this.minValue,this.maxValue)),a.mul(1-this.rate,s));return a.mul(e,a.div(r,a.add(Oe(),s)))})}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}return t.className="MinMaxNorm",t})();a.serialization.registerClass(Xx);const Rl={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function ze(t){return bo(t)}function Al(t,n={}){return cs(t,a.serialization.SerializationMap.getMap().classNameMap,n,"constraint")}function Le(t){return null==t?null:"string"==typeof t?Al({className:t in Rl?Rl[t]:t,config:{}}):t instanceof gs?t:Al(t)}var se=D(5861);function en(t){return Do.apply(this,arguments)}function Do(){return(Do=(0,se.Z)(function*(t){if(null==t)return;const n=[],e=[],s=[];for(const r in t){const o=t[r];if("number"!=typeof o){const i=o;n.push(i.data()),e.push(r),s.push(i)}}if(n.length>0){const r=yield Promise.all(n);for(let o=0;o<r.length;++o)t[e[o]]=r[o][0];(0,a.dispose)(s)}})).apply(this,arguments)}function Dl(t){if(null!=t)for(const n in t){const e=t[n];"number"!=typeof e&&e.dispose()}}class Wn{constructor(){this.validationData=null}setParams(n){this.params=n}onEpochBegin(n,e){return(0,se.Z)(function*(){})()}onEpochEnd(n,e){return(0,se.Z)(function*(){})()}onBatchBegin(n,e){return(0,se.Z)(function*(){})()}onBatchEnd(n,e){return(0,se.Z)(function*(){})()}onTrainBegin(n){return(0,se.Z)(function*(){})()}onTrainEnd(n){return(0,se.Z)(function*(){})()}setModel(n){}}class qx{constructor(n,e=10){null==n&&(n=[]),this.callbacks=n,this.queueLength=e}append(n){this.callbacks.push(n)}setParams(n){for(const e of this.callbacks)e.setParams(n)}setModel(n){for(const e of this.callbacks)e.setModel(n)}onEpochBegin(n,e){var s=this;return(0,se.Z)(function*(){null==e&&(e={});for(const r of s.callbacks)yield r.onEpochBegin(n,e)})()}onEpochEnd(n,e){var s=this;return(0,se.Z)(function*(){null==e&&(e={});for(const r of s.callbacks)yield r.onEpochEnd(n,e)})()}onBatchBegin(n,e){var s=this;return(0,se.Z)(function*(){null==e&&(e={});for(const r of s.callbacks)yield r.onBatchBegin(n,e)})()}onBatchEnd(n,e){var s=this;return(0,se.Z)(function*(){null==e&&(e={});for(const r of s.callbacks)yield r.onBatchEnd(n,e)})()}onTrainBegin(n){var e=this;return(0,se.Z)(function*(){null==n&&(n={});for(const s of e.callbacks)yield s.onTrainBegin(n)})()}onTrainEnd(n){var e=this;return(0,se.Z)(function*(){null==n&&(n={});for(const s of e.callbacks)yield s.onTrainEnd(n)})()}}class Zx extends Wn{constructor(){super()}onEpochBegin(n){var e=this;return(0,se.Z)(function*(){e.seen=0,e.totals={}})()}onBatchEnd(n,e){var s=this;return(0,se.Z)(function*(){null==e&&(e={});const r=null==e.size?0:e.size;s.seen+=r;for(const o in e){const i=e[o];if("number"==typeof i)s.totals.hasOwnProperty(o)||(s.totals[o]=0),s.totals[o]=s.totals[o]+i*r;else{let l;o in s.totals?l=s.totals[o]:s.totals[o]=0;const u=(0,a.tidy)(()=>(0,a.add)(s.totals[o],(0,a.mul)(i,r)));s.totals[o]=u,null!=l&&l.dispose()}}})()}onEpochEnd(n,e){var s=this;return(0,se.Z)(function*(){if(null!=e)for(const r of s.params.metrics)null!=s.totals[r]&&("number"==typeof s.totals[r]?e[r]=s.totals[r]/s.seen:(0,a.tidy)(()=>{const o=(0,a.mul)((0,a.div)(1,s.seen),s.totals[r]);e[r]=o,s.totals[r].dispose(),(0,a.keep)(e[r])}))})()}}class Yx extends Wn{onTrainBegin(n){var e=this;return(0,se.Z)(function*(){e.epoch=[],e.history={}})()}onEpochEnd(n,e){var s=this;return(0,se.Z)(function*(){null==e&&(e={}),s.epoch.push(n);for(const r in e)null==s.history[r]&&(s.history[r]=[]),s.history[r].push(e[r])})()}syncData(){var n=this;return(0,se.Z)(function*(){const e=[],s=[],r=[];for(const i in n.history){const l=n.history[i];for(let u=0;u<l.length;++u)"number"!=typeof l[u]&&(e.push(l[u].data()),s.push(i),r.push(u))}const o=yield Promise.all(e);for(let i=0;i<o.length;++i)n.history[s[i]][r[i]].dispose(),n.history[s[i]][r[i]]=o[i][0]})()}}class Qx extends Wn{constructor(n,e){if(super(),this.currentEpoch=0,this.nowFunc=n.nowFunc,this.nextFrameFunc=n.nextFrameFunc||a.nextFrame,this.yieldEvery=e||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=n.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");a.util.isNumber(this.yieldEvery)&&(this.maybeWait=function Jg(t,n,e){let r,s=null!=e?e():a.util.now();return(...i)=>{const l=null!=e?e():a.util.now();return l-s<n||(s=l,r=t(...i)),r}}(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=n.onTrainBegin,this.trainEnd=n.onTrainEnd,this.epochBegin=n.onEpochBegin,this.epochEnd=n.onEpochEnd,this.batchBegin=n.onBatchBegin,this.batchEnd=n.onBatchEnd,this.yield=n.onYield}maybeWait(n,e,s){var r=this;return(0,se.Z)(function*(){const o=[];null!=r.yield&&(yield en(s),o.push(r.yield(n,e,s))),o.push(r.nextFrameFunc()),yield Promise.all(o)})()}onEpochBegin(n,e){var s=this;return(0,se.Z)(function*(){s.currentEpoch=n,null!=s.epochBegin&&(yield en(e),yield s.epochBegin(n,e))})()}onEpochEnd(n,e){var s=this;return(0,se.Z)(function*(){const r=[];null!=s.epochEnd&&(yield en(e),r.push(s.epochEnd(n,e))),"epoch"===s.yieldEvery&&r.push(s.nextFrameFunc()),yield Promise.all(r)})()}onBatchBegin(n,e){var s=this;return(0,se.Z)(function*(){null!=s.batchBegin&&(yield en(e),yield s.batchBegin(n,e))})()}onBatchEnd(n,e){var s=this;return(0,se.Z)(function*(){const r=[];null!=s.batchEnd&&(yield en(e),r.push(s.batchEnd(n,e))),"batch"===s.yieldEvery?r.push(s.nextFrameFunc()):a.util.isNumber(s.yieldEvery)&&r.push(s.maybeWait(s.currentEpoch,n,e)),yield Promise.all(r)})()}onTrainBegin(n){var e=this;return(0,se.Z)(function*(){null!=e.trainBegin&&(yield en(n),yield e.trainBegin(n))})()}onTrainEnd(n){var e=this;return(0,se.Z)(function*(){null!=e.trainEnd&&(yield en(n),yield e.trainEnd(n))})()}}function $l(t,n){return null==t&&(t={}),t instanceof Wn?[t]:Array.isArray(t)&&t[0]instanceof Wn?t:ge(t).map(s=>new Qx(s,n))}let Jx=(()=>{class t{constructor(){}static registerCallbackConstructor(e,s){a.util.assert(e>=0&&Number.isInteger(e),()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`),t.checkForDuplicate(s),null==t.constructors[e]&&(t.constructors[e]=[]),t.constructors[e].push(s)}static checkForDuplicate(e){for(const s in t.constructors)t.constructors[+s].forEach(o=>{if(o===e)throw new R("Duplicate callback constructor.")})}static clear(){t.constructors={}}static createCallbacks(e){const s=[];for(const r in t.constructors){const o=+r;e>=o&&s.push(...t.constructors[o])}return s.map(r=>new r)}}return t.constructors={},t})();function El(t,n,e,s,r,o,i,l,u){const c=new Yx,d=[new Zx,...Jx.createCallbacks(n)];null!=t&&d.push(...t),d.push(c);const h=new qx(d);return h.setParams({epochs:e,initialEpoch:s,samples:r,steps:o,batchSize:i,verbose:n,doValidation:l,metrics:u}),{callbackList:h,history:c}}function Ut(t,n={},e=!1){return cs(t,a.serialization.SerializationMap.getMap().classNameMap,n,"layer",e)}function cr(t,n){return(0,a.tidy)(()=>{"float32"!==t.dtype&&(t=a.cast(t,"float32"));const e=a.sum(ps(t),n,!0),s=a.fill(e.shape,Oe()),r=a.sqrt(a.maximum(e,s));return a.div(t,r)})}function dr(t,n){return(0,a.tidy)(()=>a.mean(ps(a.sub(n,t)),-1))}function $o(t,n){return(0,a.tidy)(()=>a.mean(a.abs(a.sub(n,t)),-1))}function Eo(t,n){return(0,a.tidy)(()=>{const e=a.sub(t,n),s=a.clipByValue(a.abs(t),Oe(),Number.MAX_VALUE),r=a.abs(a.div(e,s));return a.mul(100,a.mean(r,-1))})}function xs(t,n,e=!1){return(0,a.tidy)(()=>{if(e)n=a.softmax(n);else{const s=a.sum(n,n.shape.length-1,!0);n=a.div(n,s)}return n=a.clipByValue(n,Oe(),1-Oe()),a.neg(a.sum(a.mul(a.cast(t,"float32"),a.log(n)),n.shape.length-1))})}function hr(t,n,e=!1){return(0,a.tidy)(()=>{const s=a.cast(a.floor(function px(t){const n=[Yt(t.shape)];return a.reshape(t,n)}(t)),"int32"),r=(n=a.clipByValue(n,Oe(),1-Oe())).shape;return xs(a.reshape(a.oneHot(s,r[r.length-1]),r),n,e)})}function pr(t,n){return(0,a.tidy)(()=>{let e;return e=a.clipByValue(n,Oe(),1-Oe()),e=a.log(a.div(e,a.sub(1,e))),a.mean(function o0(t,n){if(!a.util.arraysEqual(t.shape,n.shape))throw new R(`logits and labels must have the same shape, but got shapes ${JSON.stringify(t.shape)} and ${JSON.stringify(n.shape)}`);return(0,a.tidy)(()=>{const e=a.relu(n),s=a.neg(a.abs(n));return a.add(a.sub(e,a.mul(n,t)),a.log1p(a.exp(s)))})}(t,e),-1)})}function _l(t,n){return(0,a.tidy)(()=>{const e=cr(t,-1),s=cr(n,-1),r=a.mul(e,s);return a.neg(a.sum(r,-1))})}const fr={meanSquaredError:dr,meanAbsoluteError:$o,meanAbsolutePercentageError:Eo,meanSquaredLogarithmicError:function e0(t,n){return(0,a.tidy)(()=>{const e=a.clipByValue(n,Oe(),Number.MAX_VALUE),s=a.log(a.add(1,e)),r=a.clipByValue(t,Oe(),Number.MAX_VALUE),o=a.log(a.add(1,r));return a.mean(ps(a.sub(s,o)),-1)})},squaredHinge:function t0(t,n){return(0,a.tidy)(()=>{const e=a.maximum(0,a.sub(1,a.mul(t,n)));return a.mean(ps(e),-1)})},hinge:function n0(t,n){return(0,a.tidy)(()=>{const e=a.maximum(0,a.sub(1,a.mul(t,n)));return a.mean(e,-1)})},categoricalHinge:function s0(t,n){return(0,a.tidy)(()=>{const e=a.sum(a.mul(t,n),-1),s=a.max(a.mul(a.sub(1,t),n),-1);return a.maximum(0,a.add(1,a.sub(s,e)))})},logcosh:function r0(t,n){return(0,a.tidy)(()=>{const e=Math.log(2),s=a.sub(n,t),r=a.sub(a.add(s,a.softplus(a.mul(-2,s))),e);return a.mean(r,-1)})},categoricalCrossentropy:xs,sparseCategoricalCrossentropy:hr,binaryCrossentropy:pr,kullbackLeiblerDivergence:function i0(t,n){return(0,a.tidy)(()=>{const e=a.clipByValue(t,Oe(),1),s=a.clipByValue(n,Oe(),1);return a.sum(a.mul(t,a.log(a.div(e,s))),-1)})},poisson:function a0(t,n){return(0,a.tidy)(()=>{const e=a.log(a.add(Oe(),n));return a.mean(a.sub(n,a.mul(t,e)),-1)})},cosineProximity:_l};function _o(t){if("string"==typeof t){if(t in fr)return fr[t];let n=`Unknown loss ${t}`;throw t.toLowerCase().includes("softmaxcrossentropy")&&(n=`Unknown loss ${t}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new R(n)}return t}function Fl(t,n){return(0,a.tidy)(()=>{const e=a.mul(.5,a.onesLike(n)),s=$t(a.greater(n,e),t.dtype);return a.mean(a.equal(t,s),-1)})}function Ol(t,n){return(0,a.tidy)(()=>$t(a.equal(a.argMax(t,-1),a.argMax(n,-1)),"float32"))}function d0(t,n){return pr(t,n)}function h0(t,n){return t.rank===n.rank&&(t=a.squeeze(t,[t.rank-1])),(n=a.argMax(n,-1)).dtype!==t.dtype&&(n=a.cast(n,t.dtype)),a.cast(a.equal(t,n),"float32")}const zl=xs,Ll=hr,mr={binaryAccuracy:Fl,categoricalAccuracy:Ol,precision:function c0(t,n){return(0,a.tidy)(()=>{const e=function Pl(t,n){return(0,a.tidy)(()=>a.cast(a.sum(a.logicalAnd(a.equal(t,1),a.equal(n,1))),"float32"))}(t,n),s=function u0(t,n){return(0,a.tidy)(()=>a.cast(a.sum(a.logicalAnd(a.equal(t,0),a.equal(n,1))),"float32"))}(t,n),r=a.add(e,s);return a.cast(a.where(a.greater(r,0),a.div(e,r),0),"float32")})},categoricalCrossentropy:zl,sparseCategoricalCrossentropy:Ll,mse:dr,MSE:dr,mae:$o,MAE:$o,mape:Eo,MAPE:Eo,cosine:_l};function v0(t){if("string"==typeof t&&t in mr)return mr[t];if("string"!=typeof t&&null!=t)return t;throw new R(`Unknown metric ${t}`)}function gr(t){if(nt(null!==t,`Unknown LossOrMetricFn ${t}`),"string"==typeof t)return t;{let n;for(const e of Object.keys(fr))if(fr[e]===t){n=e;break}if(void 0!==n)return n;for(const e of Object.keys(mr))if(mr[e]===t){n=e;break}return void 0!==n?n:t.name}}function Bl(t,n,e=!1){if(null==t||"object"!=typeof t||Object.getPrototypeOf(t)!==Object.prototype||!Fo(t))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(e){const s=JSON.stringify(t);s.length>1048576&&console.warn(`User-defined metadata of model "${n}" is too large in size (length=${s.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function Fo(t){if(null===t)return!0;if("object"==typeof t){if(Object.getPrototypeOf(t)===Object.prototype){const n=Object.keys(t);for(const e of n)if("string"!=typeof e||!Fo(t[e]))return!1;return!0}if(Array.isArray(t)){for(const n of t)if(!Fo(n))return!1;return!0}return!1}{const n=typeof t;return"string"===n||"number"===n||"boolean"===n}}function xr(t,n,e=console.log){let s="";for(let r=0;r<t.length;++r)r>0&&(s=s.slice(0,s.length-1)+" "),s+=t[r],s=s.slice(0,n[r]),s+=" ".repeat(n[r]-s.length);e(s)}function k0(t,n,e){let s,r;try{r=t.inboundNodes.map(u=>JSON.stringify(u.inputShapes)).join(",")}catch{r="multiple"}try{s=JSON.stringify(t.outputShape)}catch{s="multiple"}xr([`${t.name} (${t.getClassName()})`,r,s,t.countParams().toString()],n,e)}function T0(t,n,e,s){let r,o;try{o=t.inboundNodes.map(h=>JSON.stringify(h.inputShapes)).join(",")}catch{o="multiple"}try{r=JSON.stringify(t.outputShape)}catch{r="multiple"}const i=[];for(const h of t.inboundNodes)if(!(null!=e&&e.length>0&&-1===e.indexOf(h)))for(let p=0;p<h.inboundLayers.length;++p)i.push(`${h.inboundLayers[p].name}[${h.nodeIndices[p]}][${h.tensorIndices[p]}]`);const l=t.name,u=t.getClassName(),c=0===i.length?"":i[0];xr([`${l} (${u})`,o,r,t.countParams().toString(),c],n,s);for(let h=1;h<i.length;++h)xr(["","","","",i[h]],n,s)}function Vl(t,n,e){return("inboundNodes"===t||"outputLayers"===t||"inputLayers"===t)&&0===n&&"string"==typeof e}function Oo(t,n){if(null===t)return null;if("string"==typeof t)return yn(t);if("number"==typeof t||"boolean"==typeof t)return t;if(t instanceof Array){const e=[],s=t.length;for(let r=0;r<s;++r){const o=t[r];Vl(n,r,o)?e.push(o):e.push(Oo(o,n))}return e}{const e={};for(const s of Object.keys(t)){const r=t[s];if("name"===s&&"string"==typeof r)e[s]=r;else{const o=yn(s);e[o]=Oo(r,o)}}return e}}function Po(t,n){if(null==t)return null;if("string"==typeof t)return Wt(t);if("number"==typeof t||"boolean"==typeof t)return t;if(t instanceof Array){const e=[],s=t.length;for(let r=0;r<s;++r){const o=t[r];Vl(n,r,o)?e.push(o):e.push(Po(o,n))}return e}{const e={};for(const s of Object.keys(t)){const r=t[s];e[Wt(s)]="name"!==s&&"className"!==s||"string"!=typeof r?Po(r,s):r}return e}}class Ct extends ce{constructor(n){if(super({}),this.containerNodes=new Set,this.name=n.name,null==this.name){const b=this.getClassName().toLowerCase();this.name=er(b)}if(this.supportsMasking=!1,this.trainable_=!0,this.inputs=Array.isArray(n.inputs)?n.inputs.slice():[n.inputs],this.outputs=Array.isArray(n.outputs)?n.outputs.slice():[n.outputs],Zt(this.inputs).length!==this.inputs.length)throw new R(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map(b=>b.name)}`);Zt(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map(b=>b.name)}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const b of this.outputs){const v=b.nodeIndex,w=b.tensorIndex;this.outputLayers.push(b.sourceLayer),this.outputLayersNodeIndices.push(v),this.outputLayersTensorIndices.push(w)}for(const b of this.inputs){const C=b.sourceLayer,v=b.nodeIndex,w=b.tensorIndex;nt(0===v,"input layer has >1 nodes"),nt(0===w,"input layer has >1 tensors"),this.inputLayers.push(C),this.inputLayersNodeIndices.push(v),this.inputLayersTensorIndices.push(w)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let b=0;b<this.inputLayers.length;b++){const C=this.inputLayers[b];if(!(C instanceof ar))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${n.inputs}. Input ${b} (0-based) originates from layer type ${C.getClassName()}.`);this.inputNames.push(C.name),this.feedInputShapes.push(C.batchInputShape),this.feedInputNames.push(C.name)}for(const b of this.outputLayers)this.outputNames.push(b.name);this.internalInputShapes=this.inputs.map(b=>b.shape),this.internalOutputShapes=this.outputs.map(b=>b.shape);const e={},s={},r={},o={},i={},l=[],u=(b,C,v,w,S,I)=>{(null==w||null==S||null==I)&&(w=b.sourceLayer,S=b.nodeIndex,I=b.tensorIndex);const k=w.inboundNodes[S];if(-1!==v.indexOf(k))throw new lt(`The tensor ${b.name} at layer "${w.name}" is part of a cycle.`);if(-1!==C.indexOf(k))return;this.containerNodes.add(Ct.nodeKey(w,S)),w.id in i||(i[w.id]=Object.keys(i).length),-1===v.indexOf(k)&&v.push(k);const N=k.inboundLayers.length;for(let T=0;T<N;T++)u(k.inputTensors[T],C,v,k.inboundLayers[T],k.nodeIndices[T],k.tensorIndices[T]);for(C.push(k);v.indexOf(k)>=0;)v.splice(v.indexOf(k),1);l.push(k)},c=[],d=[];for(const b of this.outputs)u(b,c,d);const h=l.slice().reverse();for(const b of h){s[b.id]=b,b.id in e||(e[b.id]=0);let C=e[b.id];C=Math.max(C,null==r[b.outboundLayer.id]?0:r[b.outboundLayer.id]),r[b.outboundLayer.id]=C,o[b.outboundLayer.id]=b.outboundLayer,e[b.id]=C;for(let w=0;w<b.inboundLayers.length;w++){const k=b.inboundLayers[w].inboundNodes[b.nodeIndices[w]];e[k.id]=Math.max(C+1,null==e[k.id]?0:e[k.id]),s[k.id]=k}}const p={};for(const b in e){const C=e[b];C in p||(p[C]=[]),p[C].push(s[b])}const f={};for(const b in r){const C=r[b];C in f||(f[C]=[]),f[C].push(o[b])}let m=Object.keys(f).map(b=>parseInt(b,10)).sort(Qs);this.layers=[];for(const b of m){const C=f[b];C.sort((v,w)=>{const S=i[v.id],I=i[w.id];return S<I?-1:S>I?1:0});for(const v of C)v instanceof Ct&&this.internalContainerRefs.push(v),this.layers.push(v)}this.layersByDepth=f,m=Object.keys(p).map(b=>parseInt(b,10)).sort(Qs);const x=this.inputs.slice(),g=[];for(const b of m)for(const C of p[b]){const v=C.outboundLayer;if(null!=v){for(const w of C.inputTensors)if(-1===x.indexOf(w))throw new lt(`Graph disconnected: cannot obtain value for tensor ${w} at layer "${v.name}". The following previous layers were accessed without issue: ${g}`);for(const w of C.outputTensors)x.push(w);g.push(v.name)}}this.nodesByDepth=p;const y=this.layers.map(b=>b.name);for(const b of y){const C=y.filter(v=>v===b).length;if(1!==C)throw new lt(`The name "${b}" is used ${C} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(y))}this.outboundNodes=[],this.inboundNodes=[],new ir({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map(b=>null),outputMasks:this.outputs.map(b=>null),inputShapes:this.inputs.map(b=>b.shape),outputShapes:this.outputs.map(b=>b.shape)}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const n={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const e of this.layers)n.numDisposedVariables+=e.dispose().numDisposedVariables;for(const e of this.internalContainerRefs)n.numDisposedVariables+=e.dispose().numDisposedVariables}return n.refCountAfterDispose=this._refCount,n}get trainable(){return this.trainable_}set trainable(n){this.layers.forEach(e=>{e._trainableWeights.forEach(s=>s.trainable=n)}),this.trainable_=n}get trainableWeights(){if(this._trainableWeights.length>0)throw new R("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let n=[];for(const e of this.layers)n=n.concat(e.trainableWeights);return n}get nonTrainableWeights(){const n=[];for(const e of this.layers)n.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const s of this.layers)e.push(...s.trainableWeights);return e.concat(n)}return n}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(n,e=!0){const s={};let r=0;const o=(t=>{const n=Object.keys(t);if(0===n.length)return!1;const e=n[0].split("/");return!isNaN(parseInt(e[e.length-1],10))})(n);o&&this.parseWeights(n);for(const l of this.layers)for(const[u,c]of l.weights.entries()){const d=o?`${c.name.split("/").slice(0,-1).join("/")+"/"}${u}`:c.originalName;if(null!=s[d])throw new R(`Duplicate weight name: ${d}`);s[d]=c,r++}const i=[];for(const l in n){let u=l;if(null==s[l]){const c=l.split("/");u=c.slice(0,-2).concat([c[c.length-1]]).join("/")}if(null!=s[u])i.push([s[u],n[l]]);else if(e)throw new R(`Provided weight data has no target variable: ${l}`);delete s[u]}if(e){const l=[];for(const u in s)l.push(u);if(l.length>0)throw new R(`${l.length} of ${r} weights are not set: ${l}`)}Ro(i)}parseWeights(n){for(const e in Object.keys(n)){const s=e.split("/"),r=["vars","layer_checkpoint_dependencies"],o=s.map(i=>i.startsWith("_")?i.slice(1):i).filter(i=>!r.includes(i)).join("/");o!==e&&(n[o]=n[e],delete n[e])}}updatedConfig(){const n=this.getConfig(),e={};return e.className=this.getClassName(),e.config=n,e.kerasVersion="tfjs-layers 4.11.0",e.backend="TensorFlow.js",e}toJSON(n,e=!0){const s=Po(this.updatedConfig());return e?JSON.stringify(s):s}call(n,e){return(0,a.tidy)(()=>{n=ge(n);const s=new Jt;for(let r=0;r<this.inputs.length;++r)s.add(this.inputs[r],n[r]);return ms(this.outputs,s,e)})}computeMask(n,e){return(0,a.tidy)(()=>{let s;return n=ge(n),s=null==e?xn(null,n.length):ge(e),this.runInternalGraph(n,s)[1]})}computeOutputShape(n){const e=rr(n);if(e.length!==this.inputLayers.length)throw new R(`Invalid inputShape argument ${n}: model has ${this.inputLayers.length} tensor inputs.`);const s={};for(let l=0;l<e.length;l++)s[this.inputLayers[l].name+"_0_0"]=e[l];const r=Object.keys(this.nodesByDepth).map(l=>parseInt(l,10)).sort(Qs);if(r.length>1)for(const l of r){const u=this.nodesByDepth[l];for(const c of u){const d=c.outboundLayer;if(-1!==this.inputLayers.map(x=>x.id).indexOf(d.id))continue;const h=[];for(let x=0;x<c.inboundLayers.length;x++)h.push(s[`${c.inboundLayers[x].name}_${c.nodeIndices[x]}_${c.tensorIndices[x]}`]);const f=rr(d.computeOutputShape(Ze(h))),m=d.inboundNodes.indexOf(c);for(let x=0;x<f.length;x++)s[`${d.name}_${m}_${x}`]=f[x]}}const o=[],i=[];for(let l=0;l<this.outputLayers.length;l++)i.push(`${this.outputLayers[l].name}_${this.outputLayersNodeIndices[l]}_${this.outputLayersTensorIndices[l]}`);for(let l=0;l<i.length;l++){const u=i[l];nt(u in s),o.push(s[u])}return Ze(o)}runInternalGraph(n,e){null==e&&(e=xn(null,n.length));const s={};for(let u=0;u<this.inputs.length;++u)s[this.inputs[u].id]=[n[u],e[u]];const r=Object.keys(this.nodesByDepth).map(u=>parseInt(u,10)).sort(Qs);for(const u of r){const c=this.nodesByDepth[u];for(const d of c){const h=d.outboundLayer,p=d.inputTensors,f=d.outputTensors,m=new Array;for(const x of p)x.id in s&&m.push(s[x.id]);if(m.length===p.length){let g,y,b,C,x={};if(null!=d.callArgs&&(x=d.callArgs),1===m.length){const[v,w]=m[0];null==x.mask&&(x.mask=w),b=ge(h.call(v,x)),C=ge(h.computeMask(v,w)),g=[v],y=[w]}else g=m.map(v=>v[0]),y=m.map(v=>v[1]),null==x.mask&&(x.mask=y),b=ge(h.call(g,x)),C=ge(h.computeMask(g,y));if(h.activityRegularizer)throw new ie("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let v=0;v<f.length;++v)s[f[v].id]=[b[v],C[v]]}}}const o=[],i=[],l=[];for(const u of this.outputs){nt(u.id in s,`Could not compute output ${u.name} : ${u.id}`);const[c,d]=s[u.id];l.push(c.shape),o.push(c),i.push(d)}return[o,i,l]}buildNodeConversionMap(n){const e={};let s;for(const r of this.layers){s=r instanceof Ct?1:0;for(let o=0;o<r.inboundNodes.length;o++){const i=Ct.nodeKey(r,o);this.containerNodes.has(i)&&(e[i]=s,s+=1)}}return e}getLayer(n,e){if(null!=e)return this.findLayer(e);if(null==n)throw new R("Provide either a layer name or layer index");if("number"==typeof n)return this.findLayer(n);for(const s of this.layers)if(s.name===n)return s;throw new R(`No such layer: ${n}`)}findLayer(n){if(this.layers.length<=n)throw new R(`Was asked to retrieve layer at index ${n}, but model only has ${this.layers.length} layer(s).`);return this.layers[n]}calculateLosses(){return(0,a.tidy)(()=>{const n=[];for(const e of this.layers)for(let s=0;s<e.inboundNodes.length;++s){const r=Ct.nodeKey(e,s);this.containerNodes.has(r)&&n.push(...e.calculateLosses())}return n})}getConfig(){const n={name:this.name},e=this.buildNodeConversionMap(this.layers),s=[];for(const i of this.layers){const l=i.getClassName(),u=i.getConfig(),c=[];for(let h=0;h<i.inboundNodes.length;h++){const p=i.inboundNodes[h],f=Ct.nodeKey(i,h);let m={};if(this.containerNodes.has(f)){if(p.callArgs)try{JSON.stringify(p.callArgs),m=p.callArgs}catch{console.warn(`Layer ${i.name} was passed non-serializable keyword arguments: ${p.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),m={}}if(p.inboundLayers.length>0){const x=[];for(let g=0;g<p.inboundLayers.length;g++){const y=p.inboundLayers[g],C=p.tensorIndices[g];let w=e[Ct.nodeKey(y,p.nodeIndices[g])];null==w&&(w=0),x.push([y.name,w,C,m])}c.push(x)}}}const d={};d.name=i.name,d.className=l,d.config=u,d.inboundNodes=c,s.push(d)}n.layers=s;const r=[];for(let i=0;i<this.inputLayers.length;i++){const l=this.inputLayers[i],c=Ct.nodeKey(l,this.inputLayersNodeIndices[i]);if(!this.containerNodes.has(c))continue;let d=e[c];null==d&&(d=0),r.push([l.name,d,this.inputLayersTensorIndices[i]])}n.inputLayers=r;const o=[];for(let i=0;i<this.outputLayers.length;i++){const l=this.outputLayers[i],c=Ct.nodeKey(l,this.outputLayersNodeIndices[i]);if(!this.containerNodes.has(c))continue;let d=e[c];null==d&&(d=0),o.push([l.name,d,this.outputLayersTensorIndices[i]])}return n.outputLayers=o,n}static fromConfig(n,e,s={},r=!1){const o={},i={};function l(g,y){g.name in i?i[g.name].push(y):i[g.name]=[y]}function u(g,y){const b=[];let C;for(const v of y){const w=v[0],S=v[1],I=v[2];if(C=null==v[3]?{}:v[3],!(w in o))return void l(g,y);const k=o[w];if(k.inboundNodes.length<=S)return void l(g,y);b.push(k.inboundNodes[S].outputTensors[I])}b.length>0&&g.apply(Ze(b),C)}function c(g){const y=g.name,b=Ut(g,null!=e.customObjects?e.customObjects:{});b.setFastWeightInitDuringBuild(r),o[y]=b,g.inboundNodes.forEach(v=>{if(!(v instanceof Array))throw new R(`Corrupted configuration, expected array for nodeData: ${v}`);l(b,v)})}const d=e.name,h=e.layers;for(const g of h)c(g);for(;!Qg(i);)for(const g of h){const y=o[g.name];if(y.name in i){const b=i[y.name];delete i[y.name];for(const C of b)u(y,C)}}const p=[],f=[],m=e.inputLayers;for(const g of m){const y=g[0],b=g[1],C=g[2];nt(y in o),p.push(o[y].inboundNodes[b].outputTensors[C])}const x=e.outputLayers;for(const g of x){const y=g[0],b=g[1],C=g[2];nt(y in o),f.push(o[y].inboundNodes[b].outputTensors[C])}return new n({inputs:p,outputs:f,name:d})}get stateful(){if(this._stateful)throw new R("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const n of this.layers)if(n.stateful)return!0;return!1}resetStates(){(0,a.tidy)(()=>{this.layers.forEach(n=>{n.stateful&&n.resetStates()})})}}function Ul(t,n){return function Wl(t,n,e){const s=n.length;if(null==t||Array.isArray(t)&&0===t.length)return n.map(r=>null);if(1===s)return Array.isArray(t)&&1===t.length?t:"object"==typeof t&&n[0]in t?[t[n[0]]]:[t];if(Array.isArray(t)){if(t.length!==s)throw new Error(`Provided ${e} is an array of ${t.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);return t}if("object"==typeof t&&Object.keys(t).length>0&&"object"==typeof t[Object.keys(t)[0]]){const r=[];return n.forEach(o=>{r.push(o in t?t[o]:null)}),r}throw new Error(`The model has multiple (${s}) outputs, so ${e} must be either an array with ${s} elements or an object with ${n} keys. Provided ${e} not understood: ${JSON.stringify(t)}`)}(t,n,"classWeight")}function Gl(t,n,e,s){return Lo.apply(this,arguments)}function Lo(){return(Lo=(0,se.Z)(function*(t,n,e,s){if(null!=n||null!=s)throw new Error("Support sampleWeight is not implemented yet");if(null!=e){const r=(0,a.tidy)(()=>{if(1===t.shape.length)return(0,a.clone)(t);if(2===t.shape.length){if(t.shape[1]>1)return(0,a.argMax)(t,1);if(1===t.shape[1])return(0,a.reshape)(t,[t.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${t.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${t.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)}),o=Array.from(yield r.data());(0,a.dispose)(r);const i=[];return o.forEach(l=>{if(null==e[l])throw new Error(`classWeight must contain all classes in the training data. The class ${l} exists in the data but not in classWeight`);i.push(e[l])}),(0,a.tensor1d)(i,"float32")}return null})).apply(this,arguments)}function R0(t,n){return(0,a.mul)(t,n)}function Hl(t,n){let e,s;e=n.xs,s=n.ys,a.util.assert(null!=e&&null!=s,()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${n}`);const o=Xl("input",t.inputNames,e),i=Xl("output",t.outputNames,s),l=o[0].shape[0];a.util.assert(o.length===t.inputs.length,()=>`LayersModel has ${t.inputs.length} inputs, but the dataset provides ${o.length} inputs.  (Expected input keys: ${JSON.stringify(t.inputNames)})`),a.util.assert(i.length===t.outputs.length,()=>`LayersModel has ${t.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: ${JSON.stringify(t.outputNames)})`);for(let u=0;u<o.length;u++)a.util.assert(o[u].shape[0]===l,()=>`Batch size mismatch: input ${t.inputNames[u]} has ${o[u].shape[0]}; expected  ${l} based on input ${t.inputNames[0]}.`);for(let u=0;u<i.length;u++)a.util.assert(i[u].shape[0]===l,()=>`Batch size mismatch: output ${t.outputNames[u]} has ${i[u].shape[0]}; expected  ${l} based on input ${t.inputNames[0]}.`);return{xs:o,ys:i}}function Xl(t,n,e){if(e instanceof a.Tensor)return[e];if(Array.isArray(e))return a.util.assert(e.length===n.length,()=>`Received an array of ${e.length} Tensors, but expected ${n.length} to match the ${t} keys ${n}.`),e;{const s=[];for(const r of n){if(null==e[r])throw new R(`The feature data generated by the dataset lacks the required ${t} key '${r}'.`);s.push(e[r])}return s}}function Mo(){return(Mo=(0,se.Z)(function*(t,n,e){const s=null!=e.batchesPerEpoch;if(a.util.assert(null!=t.optimizer,()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."),a.util.assert(null!=e,()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),a.util.assert(null!=e.epochs&&e.epochs>0&&Number.isInteger(e.epochs),()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${e.epochs}`),a.util.assert(!s||e.batchesPerEpoch>0&&Number.isInteger(e.batchesPerEpoch),()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${e.batchesPerEpoch}`),a.util.assert(null==e.validationSplit,()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),t.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");t.isTraining=!0;try{const r=null!=e.validationData;let o,i;if(r)if(jl(e.validationData))a.util.assert(null==e.validationBatches||e.validationBatches>0&&Number.isInteger(e.validationBatches),()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${e.validationBatches}`);else{const g=function D0(t){if(3===t.length)throw new ie("Validation with sample weights is not implemented yet.");return{xs:t[0],ys:t[1]}}(e.validationData);o=g.xs,i=g.ys}const l=t.makeTrainFunction(),u=t.getDedupedMetricsNames();let c;c=r?u.slice().concat(u.map(g=>"val_"+g)):u.slice();const d=$l(e.callbacks,e.yieldEvery),h=null==e.verbose?1:e.verbose,{callbackList:p,history:f}=El(d,h,e.epochs,null,null,function E0(t,n){let e=null;return null!=n.batchesPerEpoch?e=n.batchesPerEpoch:Number.isFinite(t.size)&&(e=t.size),e}(n,e),null,r,c);p.setModel(t),t.history=f,yield p.onTrainBegin(),t.stopTraining_=!1;let m=null==e.initialEpoch?0:e.initialEpoch,x=yield n.iterator();for(;m<e.epochs;){const g={};yield p.onEpochBegin(m);let y=0,b=0;for(s||(x=yield n.iterator());!s||y<e.batchesPerEpoch;){const C=yield x.next();if(s&&C.done){console.warn(`You provided \`batchesPerEpoch\` as ${e.batchesPerEpoch}, but your dataset iterator ran out of data after ${y} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, ${e.batchesPerEpoch*e.epochs} batches). You may need to use the repeat() function when building your dataset.`);break}if(null!=C.value){const{xs:v,ys:w}=Hl(t,C.value),S={};S.batch=b,S.size=v[0].shape[0],yield p.onBatchBegin(b,S);const I=[];if(null!=e.classWeight){const T=Ul(e.classWeight,t.outputNames);for(let A=0;A<T.length;++A)I.push(yield Gl(w[A],null,T[A]))}const k=v.concat(w).concat(I),N=l(k);a.dispose(k);for(let T=0;T<u.length;++T){const $=N[T];S[u[T]]=$,a.keep($)}yield p.onBatchEnd(b,S),Dl(S),b++,y++}if(s?y>=e.batchesPerEpoch:C.done){if(r){let v;v=jl(e.validationData)?ge(yield t.evaluateDataset(e.validationData,{batches:e.validationBatches})):ge(t.evaluate(o,i,{batchSize:null==e.validationBatchSize?32:e.validationBatchSize,verbose:0}));for(let w=0;w<t.metricsNames.length;++w)g[`val_${t.metricsNames[w]}`]=v[w]}break}if(t.stopTraining_)break}if(yield p.onEpochEnd(m,g),m++,t.stopTraining_)break}return yield p.onTrainEnd(),yield t.history.syncData(),t.history}finally{t.isTraining=!1}})).apply(this,arguments)}function jl(t){return"function"==typeof t.iterator}function Bo(){return(Bo=(0,se.Z)(function*(t,n,e){const s=null!=(e=e||{}).batches,r=t.testFunction;let o=[];if(e.verbose>0)throw new ie("Verbose mode is not implemented yet.");a.util.assert(!s||e.batches>0&&Number.isInteger(e.batches),()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(e.batches)}`);const i=function _0(t){return"function"==typeof t.next}(n)?n:yield n.iterator();let l=0,u=0;for(;!s||u<e.batches;){const c=yield i.next();if(o=a.tidy(()=>{if(c.value){const{xs:d,ys:h}=Hl(t,c.value),p=d.concat(h),f=a.tidy(()=>r(p));if(a.dispose(p),0===u)for(let x=0;x<f.length;++x)o.push((0,a.scalar)(0));const m=p[0].shape[0];for(let x=0;x<f.length;++x){const g=f[x],y=o[x];o[x]=a.tidy(()=>a.add(o[x],a.mul(m,g))),u>0&&a.dispose(y)}a.dispose(f),l+=m,++u}return o}),c.done){s&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${e.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let c=0;c<o.length;++c){const d=o[c];o[c]=a.div(o[c],l),a.dispose(d)}return Ze(o)})).apply(this,arguments)}function Vo(t){a.util.assert(t>0&&Number.isInteger(t),()=>`batchSize is required to be a positive integer, but got ${t}`)}function ys(t,n,e){return null==t?[null]:Array.isArray(t)?t.map(s=>Cn(s,n,e-n)):Cn(t,n,e-n)}function Wo(t,n){return a.tidy(()=>null==t?null:Array.isArray(t)?t.map(e=>Wo(e,n)):fl(t,"int32"===n.dtype?n:a.cast(n,"int32")))}function Uo(t,n){const e=[];let s=0,r=null;for(;s<t;)r=s+n,r>=t&&(r=t),e.push([s,r]),s=r;return e}function Kl(t){const n=[];t instanceof a.Tensor&&(t=[t]);for(let e=0;e<t.length;++e){const s=t[e];if(1===s.rank)n.push(hs(s,1));else{if(0===s.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");n.push(s)}}return n}function wt(t,n){if(null==t)return;const e=[];if(n instanceof a.Tensor)e.push(n.id);else if(Array.isArray(n))n.forEach(r=>e.push(r.id));else if(null!=n)for(const r in n)e.push(n[r].id);const s=[];if(t instanceof a.Tensor)-1===e.indexOf(t.id)&&s.push(t);else if(Array.isArray(t))t.forEach(r=>{-1===e.indexOf(r.id)&&s.push(r)});else if(null!=t)for(const r in t){const o=t[r];-1===e.indexOf(o.id)&&s.push(o)}s.forEach(r=>{r.isDisposed||r.dispose()})}function Go(t){return Array.isArray(t)}function ql(t){return!function O0(t){return t instanceof a.Tensor}(t)&&!Go(t)}function Zl(t,n,e,s=!0,r=""){if(null==n||0===n.length){if(null!=t){let i=!1;if(Go(t)&&t.length>0)i=!0;else if(ql(t)){for(const l in t)if(t.hasOwnProperty(l)){i=!0;break}}else i=!0;if(i)throw new R(`Error when checking model ${r} expected no data, but got ${t}`)}return[]}if(null==t)return n.map(i=>null);let o;if(ql(t)){o=[];for(const i of n){if(null==t[i])throw new R(`No data provided for "${i}". Need data for each key in: ${n}`);o.push(t[i])}}else if(Go(t)){if(t.length!==n.length)throw new R(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${n.length} Tensor(s), but instead got the following list of Tensor(s): ${t}`);o=t}else{if(n.length>1)throw new R(`The model ${r} expects ${n.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${t.shape}`);o=[t]}if(o=Kl(o),null!=e)for(let i=0;i<n.length;++i){if(null==e[i])continue;const l=o[i];if(l.shape.length!==e[i].length)throw new R(`Error when checking ${r}: expected ${n[i]} to have ${e[i].length} dimension(s). but got array with shape ${l.shape}`);for(let u=0;u<e[i].length;++u){if(0===u&&!s)continue;const d=e[i][u];if(null!=d&&d>=0&&l.shape[u]!==d)throw new R(`${r} expected a batch of elements where each example has shape [${e[i].slice(1,e[i].length)}] (i.e.,tensor shape [*,${e[i].slice(1,e[i].length)}]) but the ${r} received an input with ${l.shape[0]} examples, each with shape [${l.shape.slice(1,l.shape.length)}] (tensor shape [${l.shape}])`)}}return o}function Yl(t,n,e,s=!0,r=""){let o;if(Array.isArray(t)){if(t.length!==n.length)throw new R(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${n.length} Tensor(s), but instead got ${t.length} Tensors(s).`);o=t}else{if(n.length>1)throw new R(`The model expects ${n.length} ${r} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(t.shape)}.`);o=[t]}if(null!=e)for(let i=0;i<n.length;++i){if(null==e[i])continue;const l=o[i];if(l.shape.length!==e[i].length)throw new R(`Error when checking ${r}: expected ${n[i]} to have ${e[i].length} dimension(s), but got array with shape ${JSON.stringify(l.shape)}`);for(let u=0;u<e[i].length;++u){if(0===u&&!s)continue;const d=e[i][u];if(null!=d&&d!==l.shape[u])throw new R(`Error when checking ${r}: expected ${n[i]} to have shape ${JSON.stringify(e[i])} but got array with shape ${JSON.stringify(l.shape)}.`)}}}let Un=(()=>{class t extends Ct{constructor(e){super(e),this.isTraining=!1}summary(e,s,r=console.log){if(!this.built)throw new R("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");!function w0(t,n,e,s=console.log){const r=function I0(t){let n=!0;const e=[],s=[];for(const r in t.nodesByDepth)e.push(t.nodesByDepth[r]);for(const r of e){if(r.length>1||1===r.length&&r[0].inboundLayers.length>1){n=!1;break}s.push(...r)}if(n)for(const r of t.layers){let o=!1;for(const i of r.inboundNodes)if(-1!==s.indexOf(i)){if(o){n=!1;break}o=!0}if(!n)break}return n}(t),o=["Layer (type)","Input Shape","Output shape","Param #"];let i;if(r?(n=n||90,e=e||[.32,.61,.89,1]):(n=n||115,e=e||[.24,.48,.7,.8,1]),e[e.length-1]<=1&&(e=e.map(d=>Math.floor(n*d))),!r){o.push("Receives inputs"),i=[];for(const d in t.nodesByDepth)i.push(...t.nodesByDepth[d])}s("_".repeat(n)),xr(o,e,s),s("=".repeat(n));const l=t.layers;for(let d=0;d<l.length;++d)r?k0(l[d],e,s):T0(l[d],e,i,s),s((d===l.length-1?"=":"_").repeat(n));t.checkTrainableWeightsConsistency();const u=function S0(t){let n;return n=or(null!=t.collectedTrainableWeights?t.collectedTrainableWeights:t.trainableWeights),n}(t),c=or(t.nonTrainableWeights);s(`Total params: ${u+c}`),s(`Trainable params: ${u}`),s(`Non-trainable params: ${c}`),s("_".repeat(n))}(this,e,s,r)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function C0(t){const n={Adagrad:()=>a.train.adagrad(.01),Adadelta:()=>a.train.adadelta(1,.95,Oe()),Adam:()=>a.train.adam(.001,.9,.999,Oe()),Adamax:()=>a.train.adamax(.002,.9,.999,Oe(),0),RMSProp:()=>a.train.rmsprop(.001,.9,0,Oe()),SGD:()=>a.train.sgd(.01)};if(n.adagrad=n.Adagrad,n.adadelta=n.Adadelta,n.adam=n.Adam,n.adamax=n.Adamax,n.rmsprop=n.RMSProp,n.sgd=n.SGD,t in n)return n[t]();throw new R(`Unknown Optimizer ${t}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof a.Optimizer))throw new R("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let s=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new R(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);s=e.loss.map(u=>_o(u))}else{const l=_o(e.loss);this.outputs.forEach(u=>{s.push(l)})}else{e.loss=e.loss;for(const l in e.loss)if(-1===this.outputNames.indexOf(l))throw new R(`Unknown entry in loss dictionary: "${l}". Only expected the following keys: ${this.outputNames}`);for(const l of this.outputNames)null==e.loss[l]&&console.warn(`Output "${l}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${l} during training`),s.push(_o(e.loss[l]))}this.lossFunctions=s,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let l=0;l<this.outputs.length;++l){const u=this.internalOutputShapes[l];this.feedOutputNames.push(this.outputNames[l]),this.feedOutputShapes.push(u),this.feedLossFns.push(this.lossFunctions[l])}const r=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],vn("loss",()=>{for(let l=0;l<this.outputs.length;++l)-1===r.indexOf(l)&&this.outputs.length>1&&(this.metricsTensors.push([this.lossFunctions[l],l]),this.metricsNames.push(this.outputNames[l]+"_loss"))});const o=function L0(t,n){if(null==t||Array.isArray(t)&&0===t.length)return n.map(s=>[]);let e;if("string"==typeof t||"function"==typeof t)e=[t];else{if(!Array.isArray(t)&&"object"!=typeof t)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${t}`);e=t}if(Array.isArray(e))return n.map(s=>e);{const s=[];for(const r of n){let o=e.hasOwnProperty(r)?e[r]:[];Array.isArray(o)||(o=[o]),s.push(o)}return s}}(e.metrics,this.outputNames),i=(l,u,c)=>{this.outputNames.length>1&&(u=this.outputNames[l]+"_"+u),this.metricsNames.push(u),this.metricsTensors.push([c,l])};vn("metric",()=>{for(let l=0;l<this.outputs.length;++l)-1===r.indexOf(l)&&(d=>{let p,f,m;for(const x of d){if("string"==typeof x&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(x)){const y=this.internalOutputShapes[l];let b;1===y[y.length-1]||this.lossFunctions[l]===pr?-1!==["accuracy","acc"].indexOf(x)?f=Fl:-1!==["crossentropy","ce"].indexOf(x)&&(f=d0):this.lossFunctions[l]===hr?-1!==["accuracy","acc"].indexOf(x)?f=h0:-1!==["crossentropy","ce"].indexOf(x)&&(f=Ll):-1!==["accuracy","acc"].indexOf(x)?f=Ol:-1!==["crossentropy","ce"].indexOf(x)&&(f=zl),-1!==["accuracy","acc"].indexOf(x)?b="acc":-1!==["crossentropy","ce"].indexOf(x)&&(b="ce"),m=f,p=""+b}else m=v0(x),p=""+gr(x);let g;vn(p,()=>{g=m}),i(l,p,g)}})(o[l])}),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,s,r={}){const o=null==r.batchSize?32:r.batchSize;Vo(o);const l=this.standardizeUserDataXY(e,s,!0,o);try{const u=l[0].concat(l[1]);return this.makeTestFunction(),Ze(this.testLoop(this.testFunction,u,o,r.verbose,r.steps))}finally{wt(l[0],e),wt(l[1],s)}}evaluateDataset(e,s){var r=this;return(0,se.Z)(function*(){return r.makeTestFunction(),function F0(t,n,e){return Bo.apply(this,arguments)}(r,e,s)})()}checkNumSamples(e,s,r,o="steps"){let i;if(null!=r){if(i=null,null!=s)throw new R(`If ${o} is set, batchSize must be null or undefined.Got batchSize = ${s}`)}else{if(null==e)throw new R(`Either the input data should have a defined shape, or ${o} shoud be specified.`);i=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return i}execute(e,s){if(Array.isArray(s)&&0===s.length)throw new R("`outputs` is an empty Array, which is not allowed.");const r=Array.isArray(s),i=this.retrieveSymbolicTensors(r?s:[s]),l=new Jt;if(e instanceof a.Tensor&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new R(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let c=0;c<this.inputs.length;++c)l.add(this.inputs[c],e[c])}else for(const c of this.inputs){const d=e[c.name];if(null==d)throw new R(`No value is provided for the model's input ${c.name}`);l.add(c,d)}const u=ms(i,l);return r?u:u[0]}retrieveSymbolicTensors(e){const s=xn(null,e.length);let r=e.length;for(const o of this.layers){const i=Array.isArray(o.output)?o.output:[o.output],l=i.map(u=>u.name);for(let u=0;u<e.length;++u){const c=l.indexOf(e[u]);if(-1!==c&&(s[u]=i[c],r--),0===r)break}if(0===r)break}if(r>0){const o=[];throw s.forEach((i,l)=>{null==i&&o.push(e[l])}),new R(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(o)}`)}return s}predictLoop(e,s=32,r=!1){return a.tidy(()=>{const o=this.checkNumSamples(e);if(r)throw new ie("Verbose predictLoop() is not implemented yet.");const i=Uo(o,s),l=this.outputs.map(u=>[]);for(let u=0;u<i.length;++u)a.tidy(()=>{const p=ys(e,i[u][0],i[u][1]),f=[];if(Array.isArray(p))for(let x=0;x<p.length;++x)f.push({key:this.inputs[x],value:p[x]});else f.push({key:this.inputs[0],value:p});const m=new Jt(f);return ms(this.outputs,m)}).forEach((d,h)=>l[h].push(d));return Ze(l.map(u=>a.concat(u,0)))})}predict(e,s={}){const r=Kl(e);Yl(r,this.inputNames,this.feedInputShapes,!1);try{const o=null==s.batchSize?32:s.batchSize;return Vo(o),this.predictLoop(r,o)}finally{wt(r,e)}}predictOnBatch(e){Yl(e,this.inputNames,this.feedInputShapes,!0);const s=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,s)}standardizeUserDataXY(e,s,r=!0,o){if(null==this.optimizer_)throw new lt("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const i=[];for(let l=0;l<this.feedOutputShapes.length;++l){const u=this.feedOutputShapes[l];i.push(this.feedLossFns[l]===hr?u.slice(0,u.length-1).concat([1]):u)}if(function P0(t,n,e){const s=Zt(t.map(o=>o.shape[0]));s.sort();const r=Zt(n.map(o=>o.shape[0]));if(r.sort(),s.length>1)throw new R(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map(o=>o.shape))}`);if(r.length>1)throw new R(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(n.map(o=>o.shape))}`);if(s.length>0&&r.length>0&&!a.util.arraysEqual(s,r))throw new R(`Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${r[0]} target sample(s).`)}(e=Zl(e,this.feedInputNames,this.feedInputShapes,!1,"input"),s=Zl(s,this.feedOutputNames,i,!1,"target")),function z0(t,n,e){const s=[dr,pr,xs];for(let r=0;r<t.length;++r){const o=t[r],i=n[r],l=e[r];if(null!=i){if(i===xs&&1===o.shape[o.shape.length-1])throw new R(`You are passing a target array of shape ${o.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==s.indexOf(i)){const u=o.shape.slice(1),c=l.slice(1);for(let d=0;d<u.length;++d){const p=c[d];if(null!=p&&u[d]!==p)throw new R(`A target Tensor with shape ${o.shape} was passed for an output of shape ${l}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(s,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=o&&o>0&&e[0].shape[0]%o!=0)throw new R(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${o}. Found: ${e[0].shape[0]} sample(s).`);return[e,s]}standardizeUserData(e,s,r,o,i=!0,l){var u=this;return(0,se.Z)(function*(){const[c,d]=u.standardizeUserDataXY(e,s,i,l);if(null!=r)throw new Error("sample weight is not supported yet.");let h=null;if(null!=o){const p=Ul(o,u.outputNames);h=[];for(let f=0;f<p.length;++f)h.push(yield Gl(d[f],null,p[f]))}return[c,d,h]})()}testLoop(e,s,r,o=0,i){return a.tidy(()=>{const l=this.checkNumSamples(s,r,i,"steps"),u=[];if(o>0)throw new ie("Verbose mode is not implemented yet.");if(null!=i)throw new ie("steps mode in testLoop() is not implemented yet");{const c=Uo(l,r),d=(0,a.tensor1d)(yt(0,l));for(let h=0;h<c.length;++h){const p=c[h][0],f=c[h][1],m=Cn(d,p,f-p),x=Wo(s,m),g=e(x);if(0===h)for(let y=0;y<g.length;++y)u.push((0,a.scalar)(0));for(let y=0;y<g.length;++y)u[y]=a.add(u[y],a.mul(f-p,g[y]))}for(let h=0;h<u.length;++h)u[h]=a.div(u[h],l)}return u})}getDedupedMetricsNames(){const e=this.metricsNames,s=[];for(let r=0;r<e.length;++r){const o=e[r];let i=o;sl(e,o)>1&&(i+=`_${sl(e.slice(0,r),o)}`),s.push(i)}return s}makeTrainFunction(){return e=>{const s=[],r=e.slice(0,this.inputs.length),o=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),i=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),l=[],c=this.collectedTrainableWeights.map(p=>p.read());return[this.optimizer_.minimize(()=>{const p=[];for(let g=0;g<this.inputs.length;++g)p.push({key:this.inputs[g],value:r[g]});const f=new Jt(p),m=ms(this.outputs,f,{training:!0});let x;for(let g=0;g<this.lossFunctions.length;++g){let b=(0,this.lossFunctions[g])(o[g],m[g]);null!=i[g]&&(b=R0(b,i[g]));const C=a.mean(b);s.push(C),x=0===g?b:a.add(x,b)}for(let g=0;g<this.metricsTensors.length;++g){let y;if(this.outputs.length>1&&g<this.outputs.length)y=s[g];else{const C=this.metricsTensors[g][1];y=a.mean((0,this.metricsTensors[g][0])(o[C],m[C]))}a.keep(y),l.push(y)}return x=a.mean(x),this.calculateLosses().forEach(g=>{x=a.add(x,g)}),x},!0,c)].concat(l)}}makeTestFunction(){this.testFunction=e=>a.tidy(()=>{const s=[];let r;const o=e.slice(0,this.inputs.length),i=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),l=[];for(let d=0;d<this.inputs.length;++d)l.push({key:this.inputs[d],value:o[d]});const u=new Jt(l),c=ms(this.outputs,u);for(let d=0;d<this.lossFunctions.length;++d){const p=a.mean((0,this.lossFunctions[d])(i[d],c[d]));r=0===d?p:a.add(r,p),s.push(r)}for(let d=0;d<this.metricsTensors.length;++d){const p=this.metricsTensors[d][1],f=a.mean((0,this.metricsTensors[d][0])(i[p],c[p]));s.push(f)}return s})}fit(e,s,r={}){var o=this;return(0,se.Z)(function*(){if(o.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let i,l,u,c,d,h,p,f,m;o.isTraining=!0;try{const x=null==r.batchSize?32:r.batchSize;Vo(x);const g=!1,y=yield o.standardizeUserData(e,s,r.sampleWeight,r.classWeight,g,x);i=y[0],l=y[1],m=y[2];let C,b=!1;if(null!=r.validationData&&r.validationData.length>0){if(b=!0,2!==r.validationData.length)throw 3===r.validationData.length?new ie("validationData including sample weights is not supported yet."):new R(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${r.validationData} is invalid.`);d=r.validationData[0],h=r.validationData[1];const A=!0,$=yield o.standardizeUserData(d,h,null,null,A,x);p=$[0],f=$[1],C=p.concat(f)}else if(null!=r.validationSplit&&r.validationSplit>0&&r.validationSplit<1){b=!0;const A=Math.floor(i[0].shape[0]*(1-r.validationSplit)),$=i[0].shape[0];p=ys(i,A,$),u=i,i=ys(i,0,A),f=ys(l,A,$),c=l,l=ys(l,0,A),C=p.concat(f)}else null!=r.validationSteps&&(b=!0);const v=i.concat(l).concat(m);o.checkTrainableWeightsConsistency();const w=o.makeTrainFunction(),S=o.getDedupedMetricsNames();let I,k;b?(o.makeTestFunction(),I=o.testFunction,k=S.slice().concat(S.map(A=>"val_"+A))):(I=null,C=[],k=S.slice());const N=$l(r.callbacks,r.yieldEvery);return yield o.fitLoop(w,v,S,x,r.epochs,r.verbose,N,I,C,r.shuffle,k,r.initialEpoch,null,null)}finally{o.isTraining=!1,wt(i,e),wt(l,s),wt(u,e),wt(c,s),wt(p,d),wt(f,h),null!=m&&a.dispose(m)}})()}fitLoop(e,s,r,o,i,l,u,c,d,h,p,f,m,x){var g=this;return(0,se.Z)(function*(){null==o&&(o=32),null==i&&(i=1),null==h&&(h=!0),null==f&&(f=0);let y=!1;if(null!=c&&null!=d&&(y=!0),null!=x&&(y=!0,null==m))throw new R("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const b=g.checkNumSamples(s,o,m,"steps_per_epoch");let C;null!=b&&(C=yt(0,b)),null==l&&(l=1);const{callbackList:v,history:w}=El(u,l,i,f,b,m,o,y,p);v.setModel(g),g.history=w,yield v.onTrainBegin(),g.stopTraining_=!1;for(let S=f;S<i;++S){yield v.onEpochBegin(S);const I={};if(null!=m)throw new ie("stepsPerEpoch mode is not implemented yet.");{if("batch"===h)throw new ie("batch shuffling is not implemneted yet");h&&a.util.shuffle(C);const k=(0,a.tensor1d)(C),N=Uo(b,o);for(let T=0;T<N.length;++T){const A={};if(yield v.onBatchBegin(T,A),a.tidy(()=>{const $=N[T][0],F=N[T][1],O=Cn(k,$,F-$);A.batch=T,A.size=F-$;const P=Wo(s,O),z=e(P);for(let M=0;M<r.length;++M){const B=z[M];A[r[M]]=B,a.keep(B)}if(T===N.length-1&&y){const M=g.testLoop(c,d,o);for(let E=0;E<r.length;++E){const B=r[E],W=M[E];a.keep(W),I["val_"+B]=W}}}),yield v.onBatchEnd(T,A),Dl(A),g.stopTraining_)break}k.dispose()}if(yield v.onEpochEnd(S,I),g.stopTraining_)break}return yield v.onTrainEnd(),yield g.history.syncData(),g.history})()}fitDataset(e,s){var r=this;return(0,se.Z)(function*(){return function $0(t,n,e){return Mo.apply(this,arguments)}(r,e,s)})()}trainOnBatch(e,s){var r=this;return(0,se.Z)(function*(){const o=yield r.standardizeUserData(e,s),i=o[0],l=o[1],c=r.makeTrainFunction()(i.concat(l)),d=[];for(const h of c){const p=yield h.data();d.push(p[0])}return a.dispose(c),wt(o[0],e),wt(o[1],s),Ze(d)})()}getNamedWeights(e){const s=[],r=null!=e&&e.trainableOnly,o=r?this.trainableWeights:this.weights,i=this.getWeights(r);for(let l=0;l<o.length;++l)r&&!o[l].trainable||s.push({name:o[l].originalName,tensor:i[l]});return s}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const s=a.memory().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=s-a.memory().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=Wt(this.loss);else if(Array.isArray(this.loss)){for(const s of this.loss)if("string"!=typeof s)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map(s=>Wt(s))}else{const s=Object.keys(this.loss);e={};const r=this.loss;for(const o of s){if("string"!=typeof r[o])throw new Error("Serialization of non-string loss is not supported.");e[o]=Wt(r[o])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[Wt(gr(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map(e=>Wt(gr(e)));{const e={};for(const s in this.metrics)e[s]=Wt(gr(this.metrics[s]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const r=Ut(Oo(e.optimizer_config));let o,i;if("string"==typeof e.loss)o=yn(e.loss);else if(Array.isArray(e.loss))o=e.loss.map(l=>yn(l));else if(null!=e.loss){o={};for(const l in e.loss)o[l]=yn(e.loss[l])}if(Array.isArray(e.metrics))i=e.metrics.map(l=>yn(l));else if(null!=e.metrics){i={};for(const l in e.metrics)i[l]=yn(e.metrics[l])}this.compile({loss:o,metrics:i,optimizer:r})}save(e,s){var r=this;return(0,se.Z)(function*(){if("string"==typeof e){const h=a.io.getSaveHandlers(e);if(0===h.length)throw new R(`Cannot find any save handlers for URL '${e}'`);if(h.length>1)throw new R(`Found more than one (${h.length}) save handlers for URL '${e}'`);e=h[0]}if(null==e.save)throw new R("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const o=yield a.io.encodeWeights(r.getNamedWeights(s)),c={modelTopology:r.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v4.11.0",convertedBy:null};if(null!=s&&s.includeOptimizer&&null!=r.optimizer){c.trainingConfig=r.getTrainingConfig();const h="optimizer",{data:p,specs:f}=yield a.io.encodeWeights(yield r.optimizer.getWeights(),h);o.specs.push(...f),o.data=a.io.concatenateArrayBuffers([o.data,p])}return null!=r.userDefinedMetadata&&(Bl(r.userDefinedMetadata,r.name,!0),c.userDefinedMetadata=r.userDefinedMetadata),c.weightData=o.data,c.weightSpecs=o.specs,e.save(c)})()}setUserDefinedMetadata(e){Bl(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}return t.className="Model",t})();a.serialization.registerClass(Un),a.serialization.registerClass((()=>{class t extends Un{}return t.className="Functional",t})());let U0=(()=>{class t extends Un{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:er("sequential_"),null!=e.layers)for(const s of e.layers)this.add(s)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some(r=>r<0))throw new R(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const s=e instanceof t||e instanceof Un;let r;if(s){if(r=e,1!==r.outputs.length)throw new R("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==r.inputs.length)throw new R("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new R("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const o=function zx(t){if(null==t.batchShape&&null==t.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=t.batchShape&&null!=t.shape)throw new R("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let n=t.batchShape;null!=t.shape&&null==n&&(n=[null].concat(t.shape));let e=t.dtype;return null==e&&(e="float32"),new ar({batchInputShape:n,name:t.name,dtype:e,sparse:t.sparse}).inboundNodes[0].outputTensors[0]}({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(o)}if(s)this.outputs=r.outputs,this.inputs=r.inputs;else{if(1!==e.inboundNodes.length)throw new R(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new R("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=Tl(this.outputs[0])}this.inboundNodes=[],new ir({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:xn(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(o=>o.shape),outputShapes:this.outputs[0].shape})}else{const o=e.apply(this.outputs[0]);if(Array.isArray(o))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[o],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,s){return null==this.model&&this.build(),this.model.call(e,s)}build(e){if(he(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new Un({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,s,r=console.log){this.built||this.build(),super.summary(e,s,r)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,s,r={}){if(!this.built)throw new lt("The model needs to be compiled before being used.");return this.model.evaluate(e,s,r)}evaluateDataset(e,s){var r=this;return(0,se.Z)(function*(){if(!r.built)throw new lt("The model needs to be compiled before being used.");return r.model.evaluateDataset(e,s)})()}predict(e,s={}){return null==this.model&&this.build(),this.model.predict(e,s)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}fit(e,s,r={}){var o=this;return(0,se.Z)(function*(){if(!o.built)throw new lt("The model needs to be compiled before being used.");return o.model.fit(e,s,r)})()}fitDataset(e,s){var r=this;return(0,se.Z)(function*(){if(!r.built)throw new lt("The model needs to be compiled before being used.");return r.model.fitDataset(e,s)})()}trainOnBatch(e,s){var r=this;return(0,se.Z)(function*(){return r.model.trainOnBatch(e,s)})()}static fromConfig(e,s,r={},o=!1){let i,l={};if(s instanceof Array){if(null==s[0].className||"Merge"===s[0].className)throw new R("Legacy serialization format not supported yet.");i=s}else a.util.assert(null!=s.layers,()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),i=s.layers,delete s.layers,l=s;const u=new e(l);if(!(u instanceof t))throw new ie(`Sequential.fromConfig called on non-Sequential input: ${u}`);for(const c of i){const h=Ut(c,void 0,o);o&&h.setFastWeightInitDuringBuild(!0),u.add(h)}return u}set stopTraining(e){if(null==this.model)throw new R("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new R("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const s of this.layers){const r={};r.className=s.getClassName(),r.config=s.getConfig(),e.push(r)}return{name:this.name,layers:e}}}return t.className="Sequential",t})();a.serialization.registerClass(U0);class Ye extends a.serialization.Serializable{getConfig(){return{}}}let G0=(()=>{class t extends Ye{apply(e,s=1){return function mx(t,n=1){if(1!==n)throw new ie(`Support for alpha values other than 1 (${n}) is not implemented yet.`);return a.elu(t)}(e,s)}}return t.className="elu",t})();a.serialization.registerClass(G0);let H0=(()=>{class t extends Ye{apply(e){return a.selu(e)}}return t.className="selu",t})();a.serialization.registerClass(H0);let X0=(()=>{class t extends Ye{apply(e){return a.relu(e)}}return t.className="relu",t})();a.serialization.registerClass(X0);let j0=(()=>{class t extends Ye{apply(e){return(0,a.tidy)(()=>a.minimum(6,a.relu(e)))}}return t.className="relu6",t})();a.serialization.registerClass(j0),a.serialization.registerClass((()=>{class t extends Ye{apply(e){return e}}return t.className="linear",t})());let q0=(()=>{class t extends Ye{apply(e){return a.sigmoid(e)}}return t.className="sigmoid",t})();a.serialization.registerClass(q0);let Z0=(()=>{class t extends Ye{apply(e){return function xx(t){return(0,a.tidy)(()=>{const n=a.add(.5,a.mul(.2,t));return a.clipByValue(n,0,1)})}(e)}}return t.className="hardSigmoid",t})();a.serialization.registerClass(Z0);let Y0=(()=>{class t extends Ye{apply(e){return a.softplus(e)}}return t.className="softplus",t})();a.serialization.registerClass(Y0);let Q0=(()=>{class t extends Ye{apply(e){return function gx(t){return(0,a.tidy)(()=>a.div(t,a.add(a.abs(t),1)))}(e)}}return t.className="softsign",t})();a.serialization.registerClass(Q0);let J0=(()=>{class t extends Ye{apply(e){return a.tanh(e)}}return t.className="tanh",t})();a.serialization.registerClass(J0);let Ql=(()=>{class t extends Ye{apply(e,s=-1){return a.softmax(e,s)}}return t.className="softmax",t})();a.serialization.registerClass(Ql);let ey=(()=>{class t extends Ye{apply(e,s=-1){return a.logSoftmax(e,s)}}return t.className="logSoftmax",t})();a.serialization.registerClass(ey);let ty=(()=>{class t extends Ye{apply(e,s=1){return(0,a.tidy)(()=>a.mul(a.sigmoid(a.mul(e,s)),e))}}return t.className="swish",t})();a.serialization.registerClass(ty);let ny=(()=>{class t extends Ye{apply(e){return(0,a.tidy)(()=>a.mul(e,a.tanh(a.softplus(e))))}}return t.className="mish",t})();function tn(t){return t.getClassName()}function Ko(t,n={}){return cs(t,a.serialization.SerializationMap.getMap().classNameMap,n,"activation")}function nn(t){if(null==t){return Ko({className:"linear",config:{}})}if("string"==typeof t){const n={};return n.className=t,n.config={},Ko(n)}return t instanceof Ye?t:Ko(t)}a.serialization.registerClass(ny);class Jl extends a.serialization.Serializable{}let Zo=(()=>{class t extends Jl{constructor(e){super(),function qo(t){if(null!=t&&"object"!=typeof t)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${t}`)}(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return(0,a.tidy)(()=>{let s=(0,a.zeros)([1]);return this.hasL1&&(s=(0,a.add)(s,(0,a.sum)(a.mul(this.l1,(0,a.abs)(e))))),this.hasL2&&(s=(0,a.add)(s,(0,a.sum)(a.mul(this.l2,ps(e))))),a.reshape(s,[])})}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,s){return new e({l1:s.l1,l2:s.l2})}}return t.className="L1L2",t})();a.serialization.registerClass(Zo);const eu={l1l2:"L1L2"};function be(t){return bo(t)}function tu(t,n={}){return cs(t,a.serialization.SerializationMap.getMap().classNameMap,n,"regularizer")}function Te(t){return null==t?null:"string"==typeof t?tu({className:t in eu?eu[t]:t,config:{}}):t instanceof Jl?t:tu(t)}function Gn(t,n,e){if("number"==typeof t)return xn(t,n);if(t.length!==n)throw new R(`The ${e} argument must be an integer or tuple of ${n} integers. Received: ${t.length} elements.`);for(let s=0;s<n;++s){const r=t[s];if(!ux(r))throw new R(`The ${e} argument must be an integer or tuple of ${n} integers. Received: ${JSON.stringify(t)} including a non-integer number ${r}`)}return t}function St(t,n,e,s,r=1){if(null==t)return t;let i;return i="same"===e?t:t-(n+(n-1)*(r-1))+1,Math.floor((i+s-1)/s)}function Ot(t,n,e,s){if(null==t)return null;if("valid"===s)t=t*n+Qt([e-n,0]);else{if("same"!==s)throw new R(`Unsupport padding mode: ${s}.`);t*=n}return t}function Yo(t,n){return(0,a.tidy)(()=>(Ee(n),"channelsFirst"===n?a.transpose(t,[0,2,3,1]):t))}function nu(t,n){return(0,a.tidy)(()=>(Ee(n),"channelsFirst"===n?a.transpose(t,[0,2,3,4,1]):t))}function Qo(t,n,e,s=[1,1],r="valid",o,i,l=null){return(0,a.tidy)(()=>{if(null==o&&(o="channelsLast"),Ee(o),3!==t.rank&&4!==t.rank)throw new R(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${t.rank}.`);if(3!==n.rank&&4!==n.rank)throw new R(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${t.rank}.`);let u=Yo(t,o);if("causal"===r)throw new ie("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return u=a.fused.conv2d({x:u,filter:n,strides:s,pad:"same"===r?"same":"valid",dilations:i,dataFormat:"NHWC",bias:e,activation:l}),"channelsFirst"===o&&(u=a.transpose(u,[0,3,1,2])),u})}a.serialization.registerClass((()=>{class t extends ce{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,s){e=oe(e);let r=(0,a.relu)(e);return null!=this.maxValue&&(r=(0,a.clipByValue)(r,0,this.maxValue)),r}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},s=super.getConfig();return Object.assign(e,s),e}}return t.className="ReLU",t})()),a.serialization.registerClass((()=>{class t extends ce{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,s){const r=oe(e);return(0,a.leakyRelu)(r,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},s=super.getConfig();return Object.assign(e,s),e}}return t.className="LeakyReLU",t})()),a.serialization.registerClass((()=>{class t extends ce{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=ke(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=Te(e.alphaRegularizer),this.alphaConstraint=Le(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new R(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const s=(e=he(e)).slice(1);if(null!=this.sharedAxes)for(const o of this.sharedAxes)s[o-1]=1;this.alpha=this.addWeight("alpha",s,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const r={};if(null!=this.sharedAxes)for(let o=1;o<e.length;++o)r[o]=e[o];this.inputSpec=[new Pe({ndim:e.length,axes:r})],this.built=!0}call(e,s){return e=oe(e),(0,a.prelu)(e,this.alpha.read())}getConfig(){const e={alphaInitializer:Re(this.alphaInitializer),alphaRegularizer:be(this.alphaRegularizer),alphaConstraint:ze(this.alphaConstraint),sharedAxes:this.sharedAxes},s=super.getConfig();return Object.assign(e,s),e}}return t.className="PReLU",t})()),a.serialization.registerClass((()=>{class t extends ce{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new ie(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,s){const r=oe(e);return(0,a.elu)(r)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},s=super.getConfig();return Object.assign(e,s),e}}return t.className="ELU",t})()),a.serialization.registerClass((()=>{class t extends ce{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,s){const r=oe(e);return(0,a.mul)(r,(0,a.cast)((0,a.greater)(r,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},s=super.getConfig();return Object.assign(e,s),e}}return t.className="ThresholdedReLU",t})()),a.serialization.registerClass((()=>{class t extends ce{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new Ql).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,s){return(0,a.tidy)(()=>{let r=oe(e);const o=s.mask;if(null!=o){const i=(0,a.mul)((0,a.sub)((0,a.ones)(r.shape),(0,a.cast)(o,r.dtype)),(0,a.scalar)(-1e9));r=(0,a.add)(r,i)}return this.axis instanceof Array?this.axis.length>1?(0,a.exp)((0,a.sub)(r,(0,a.logSumExp)(r,this.axis,!0))):this.softmax(r,this.axis[0]):this.softmax(r,this.axis)})}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},s=super.getConfig();return Object.assign(e,s),e}}return t.className="Softmax",t})());class yr extends ce{constructor(n,e){if(super(e),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",yr.verifyArgs(e),this.rank=n,Be(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new ie(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=Gn(e.kernelSize,n,"kernelSize"),this.strides=Gn(null==e.strides?1:e.strides,n,"strides"),this.padding=null==e.padding?"valid":e.padding,st(this.padding),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Ee(this.dataFormat),this.activation=nn(e.activation),this.useBias=null==e.useBias||e.useBias,this.biasInitializer=ke(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=Le(e.biasConstraint),this.biasRegularizer=Te(e.biasRegularizer),this.activityRegularizer=Te(e.activityRegularizer),this.dilationRate=Gn(null==e.dilationRate?1:e.dilationRate,n,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new R(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new R(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new R(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(n){if(nt("kernelSize"in n,"required key 'kernelSize' not in config"),"number"!=typeof n.kernelSize&&!Co(n.kernelSize,"number",1,3))throw new R(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(n.kernelSize)}.`)}getConfig(){const n={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:tn(this.activation),useBias:this.useBias,biasInitializer:Re(this.biasInitializer),biasRegularizer:be(this.biasRegularizer),activityRegularizer:be(this.activityRegularizer),biasConstraint:ze(this.biasConstraint)},e=super.getConfig();return Object.assign(n,e),n}}class Hn extends yr{constructor(n,e){super(n,e),this.kernel=null,Hn.verifyArgs(e),this.filters=e.filters,Be(this.filters,"filters"),this.kernelInitializer=ke(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=Le(e.kernelConstraint),this.kernelRegularizer=Te(e.kernelRegularizer)}build(n){n=he(n);const e="channelsFirst"===this.dataFormat?1:n.length-1;if(null==n[e])throw new R(`The channel dimension of the input should be defined. Found ${n[e]}`);const s=n[e],r=this.kernelSize.concat([s,this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[e]:s}}],this.built=!0}call(n,e){return(0,a.tidy)(()=>{let s;n=oe(n);const r=null==this.bias?null:this.bias.read(),o=ol(this.activation.getClassName());if(null!=o&&2===this.rank)s=Qo(n,this.kernel.read(),r,this.strides,this.padding,this.dataFormat,this.dilationRate,o);else{if(1===this.rank)s=function su(t,n,e,s=1,r="valid",o,i=1){return(0,a.tidy)(()=>{if(null==o&&(o="channelsLast"),Ee(o),3!==t.shape.length)throw new R(`The input of a conv1dWithBias operation should be 3, but is ${t.shape.length} instead.`);if(3!==n.shape.length)throw new R(`The kernel for a conv1dWithBias operation should be 3, but is ${n.shape.length} instead`);if(null!=e&&1!==e.shape.length)throw new R(`The bias for a conv1dWithBias operation should be 1, but is ${n.shape.length} instead`);if("channelsFirst"===o&&(t=a.transpose(t,[0,2,1])),"causal"===r)throw new ie("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let l=a.conv1d(t,n,s,"same"===r?"same":"valid","NWC",i);return null!=e&&(l=vt(l,e)),l})}(n,this.kernel.read(),r,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)s=Qo(n,this.kernel.read(),r,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new ie("convolutions greater than 3D are not implemented yet.");s=function ru(t,n,e,s=[1,1,1],r="valid",o,i){return(0,a.tidy)(()=>{if(null==o&&(o="channelsLast"),Ee(o),4!==t.rank&&5!==t.rank)throw new R(`conv3dWithBias expects input to be of rank 4 or 5, but received ${t.rank}.`);if(4!==n.rank&&5!==n.rank)throw new R(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${t.rank}.`);let l=nu(t,o);if("causal"===r)throw new ie("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return l=a.conv3d(l,n,s,"same"===r?"same":"valid","NDHWC",i),null!=e&&(l=vt(l,e)),"channelsFirst"===o&&(l=a.transpose(l,[0,4,1,2,3])),l})}(n,this.kernel.read(),r,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(s=this.activation.apply(s))}return s})}computeOutputShape(n){n=he(n);const e=[],s="channelsLast"===this.dataFormat?n.slice(1,n.length-1):n.slice(2);for(let o=0;o<s.length;++o){const i=St(s[o],this.kernelSize[o],this.padding,this.strides[o],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[o]);e.push(i)}let r=[n[0]];return"channelsLast"===this.dataFormat?(r=r.concat(e),r.push(this.filters)):(r.push(this.filters),r=r.concat(e)),r}getConfig(){const n={filters:this.filters,kernelInitializer:Re(this.kernelInitializer),kernelRegularizer:be(this.kernelRegularizer),kernelConstraint:ze(this.kernelConstraint)},e=super.getConfig();return Object.assign(n,e),n}static verifyArgs(n){if(!("filters"in n)||"number"!=typeof n.filters||n.filters<1)throw new R(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(n.filters)}`)}}let ou=(()=>{class t extends Hn{constructor(e){super(2,e),t.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Co(e.kernelSize,"number",1,2))throw new R(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}return t.className="Conv2D",t})();a.serialization.registerClass(ou);let iu=(()=>{class t extends Hn{constructor(e){super(3,e),t.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new R(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}return t.className="Conv3D",t})();a.serialization.registerClass(iu);let uy=(()=>{class t extends ou{constructor(e){if(super(e),this.inputSpec=[new Pe({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new R(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=he(e)).length)throw new R("Input should have rank 4; Received input shape: "+JSON.stringify(e));const s="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[s])throw new R("The channel dimension of the inputs should be defined. Found `None`.");const r=e[s],o=this.kernelSize.concat([this.filters,r]);this.kernel=this.addWeight("kernel",o,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Pe({ndim:4,axes:{[s]:r}})],this.built=!0}call(e,s){return a.tidy(()=>{let r=oe(e);if(4!==r.shape.length)throw new R(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${r.shape.length}`);const o=r.shape;let l,u;"channelsFirst"===this.dataFormat?(l=2,u=3):(l=1,u=2);const d=o[u],p=this.kernelSize[1],m=this.strides[1],y=[o[0],Ot(o[l],this.strides[0],this.kernelSize[0],this.padding),Ot(d,m,p,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(r=a.transpose(r,[0,2,3,1]));let b=a.conv2dTranspose(r,this.kernel.read(),y,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(b=a.transpose(b,[0,3,1,2])),null!=this.bias&&(b=vt(b,this.bias.read(),this.dataFormat)),null!=this.activation&&(b=this.activation.apply(b)),b})}computeOutputShape(e){const s=(e=he(e)).slice();let r,o,i;"channelsFirst"===this.dataFormat?(r=1,o=2,i=3):(r=3,o=1,i=2);const l=this.kernelSize[0],u=this.kernelSize[1],c=this.strides[0],d=this.strides[1];return s[r]=this.filters,s[o]=Ot(s[o],c,l,this.padding),s[i]=Ot(s[i],d,u,this.padding),s}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}return t.className="Conv2DTranspose",t})();a.serialization.registerClass(uy);let cy=(()=>{class t extends iu{constructor(e){if(super(e),this.inputSpec=[new Pe({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new R(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(5!==(e=he(e)).length)throw new R("Input should have rank 5; Received input shape: "+JSON.stringify(e));const s="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[s])throw new R("The channel dimension of the inputs should be defined. Found `None`.");const r=e[s],o=this.kernelSize.concat([this.filters,r]);this.kernel=this.addWeight("kernel",o,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Pe({ndim:5,axes:{[s]:r}})],this.built=!0}call(e,s){return a.tidy(()=>{let r=oe(e);if(5!==r.shape.length)throw new R(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${r.shape.length}`);const o=r.shape;let l,u,c;"channelsFirst"===this.dataFormat?(c=2,l=3,u=4):(c=1,l=2,u=3);const h=o[l],p=o[u],m=this.kernelSize[1],x=this.kernelSize[2],y=this.strides[1],b=this.strides[2],S=[o[0],Ot(o[c],this.strides[0],this.kernelSize[0],this.padding),Ot(h,y,m,this.padding),Ot(p,b,x,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(r=a.transpose(r,[0,2,3,4,1]));let I=a.conv3dTranspose(r,this.kernel.read(),S,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(I=a.transpose(I,[0,4,1,2,3])),null!==this.bias&&(I=vt(I,this.bias.read(),this.dataFormat)),null!==this.activation&&(I=this.activation.apply(I)),I})}computeOutputShape(e){const s=(e=he(e)).slice();let r,o,i,l;"channelsFirst"===this.dataFormat?(r=1,o=2,i=3,l=4):(r=4,o=1,i=2,l=3);const u=this.kernelSize[0],c=this.kernelSize[1],d=this.kernelSize[2],h=this.strides[0],p=this.strides[1],f=this.strides[2];return s[r]=this.filters,s[o]=Ot(s[o],h,u,this.padding),s[i]=Ot(s[i],p,c,this.padding),s[l]=Ot(s[l],f,d,this.padding),s}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}return t.className="Conv3DTranspose",t})();a.serialization.registerClass(cy);let dy=(()=>{class t extends Hn{constructor(e,s){if(super(e,s),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==s.filters)throw new R("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=s.kernelInitializer||null!=s.kernelRegularizer||null!=s.kernelConstraint)throw new R("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=s.padding&&"same"!==s.padding&&"valid"!==s.padding)throw new R(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(s.padding)}`);this.depthMultiplier=null==s.depthMultiplier?1:s.depthMultiplier,this.depthwiseInitializer=ke(s.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=Te(s.depthwiseRegularizer),this.depthwiseConstraint=Le(s.depthwiseConstraint),this.pointwiseInitializer=ke(s.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=Te(s.pointwiseRegularizer),this.pointwiseConstraint=Le(s.pointwiseConstraint)}build(e){if((e=he(e)).length<this.rank+2)throw new R(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const s="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[s]||e[s]<0)throw new R(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[s])}`);const r=e[s],o=this.kernelSize.concat([r,this.depthMultiplier]),i=[];for(let u=0;u<this.rank;++u)i.push(1);i.push(r*this.depthMultiplier,this.filters);const l=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",o,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,l,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",i,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,l,this.pointwiseConstraint),this.bias=this.useBias?this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,l,this.biasConstraint):null,this.inputSpec=[new Pe({ndim:this.rank+2,axes:{[s]:r}})],this.built=!0}call(e,s){return(0,a.tidy)(()=>{let r;if(e=oe(e),1===this.rank)throw new ie("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=a.transpose(e,[0,2,3,1])),r=a.separableConv2d(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(r=vt(r,this.bias.read(),this.dataFormat)),null!=this.activation&&(r=this.activation.apply(r)),"channelsFirst"===this.dataFormat&&(r=a.transpose(r,[0,3,1,2])),r})}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=Re(this.depthwiseInitializer),e.pointwiseInitializer=Re(this.pointwiseInitializer),e.depthwiseRegularizer=be(this.depthwiseRegularizer),e.pointwiseRegularizer=be(this.pointwiseRegularizer),e.depthwiseConstraint=ze(this.depthwiseConstraint),e.pointwiseConstraint=ze(this.pointwiseConstraint),e}}return t.className="SeparableConv",t})();a.serialization.registerClass((()=>{class t extends dy{constructor(e){super(2,e)}}return t.className="SeparableConv2D",t})()),a.serialization.registerClass((()=>{class t extends Hn{constructor(e){super(1,e),t.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Co(e.kernelSize,"number",1,1))throw new R(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}return t.className="Conv1D",t})()),a.serialization.registerClass((()=>{class t extends ce{constructor(e){super(e),this.cropping="number"==typeof e.cropping?[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,s){return(0,a.tidy)(()=>{if(e=oe(e),"channelsLast"===this.dataFormat){const r=nr(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return nr(r,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const r=nr(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return nr(r,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}})}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},s=super.getConfig();return Object.assign(e,s),e}}return t.className="Cropping2D",t})());let my=(()=>{class t extends ce{constructor(e){super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Ee(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,function ix(t){bn(nx,"InterpolationFormat",t)}(this.interpolation)}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],null==e[2]?null:this.size[0]*e[2],null==e[3]?null:this.size[1]*e[3]]:[e[0],null==e[1]?null:this.size[0]*e[1],null==e[2]?null:this.size[1]*e[2],e[3]]}call(e,s){return a.tidy(()=>{let r=oe(e);const o=r.shape;if("channelsFirst"===this.dataFormat){r=a.transpose(r,[0,2,3,1]);const i=this.size[0]*o[2],l=this.size[1]*o[3],u="nearest"===this.interpolation?a.image.resizeNearestNeighbor(r,[i,l]):a.image.resizeBilinear(r,[i,l]);return a.transpose(u,[0,3,1,2])}{const i=this.size[0]*o[1],l=this.size[1]*o[2];return"nearest"===this.interpolation?a.image.resizeNearestNeighbor(r,[i,l]):a.image.resizeBilinear(r,[i,l])}})}getConfig(){const e={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation},s=super.getConfig();return Object.assign(e,s),e}}return t.className="UpSampling2D",t})();a.serialization.registerClass(my);let xy=(()=>{class t extends yr{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=ke(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=Le(e.depthwiseConstraint),this.depthwiseRegularizer=Te(e.depthwiseRegularizer)}build(e){if((e=he(e)).length<4)throw new R(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const s="channelsFirst"===this.dataFormat?1:3;if(null==e[s]||e[s]<0)throw new R(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[s]}).`);const r=e[s];this.depthwiseKernel=this.addWeight("depthwise_kernel",[this.kernelSize[0],this.kernelSize[1],r,this.depthMultiplier],null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.bias=this.useBias?this.addWeight("bias",[r*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,s){return(0,a.tidy)(()=>{let r=function gy(t,n,e=[1,1],s="valid",r,o){return(0,a.tidy)(()=>{null==r&&(r="channelsLast"),Ee(r);let i=Yo(t,r);if(4!==t.rank)throw new R(`Input for depthwiseConv2d is required to be 4-D, but is instead ${t.rank}-D`);if(4!==n.rank)throw new R(`depthwiseKernel is required to be 4-D, but is instead ${n.rank}-D`);return i=a.depthwiseConv2d(i,n,e,"same"===s?"same":"valid","NHWC",o),"channelsFirst"===r&&(i=a.transpose(i,[0,3,1,2])),i})}(e=oe(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(r=vt(r,this.bias.read(),this.dataFormat)),null!=this.activation&&(r=this.activation.apply(r)),r})}computeOutputShape(e){e=he(e);const r="channelsFirst"===this.dataFormat?e[3]:e[2],o="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,i=St("channelsFirst"===this.dataFormat?e[2]:e[1],this.kernelSize[0],this.padding,this.strides[0]),l=St(r,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],o,i,l]:[e[0],i,l,o]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=Re(this.depthwiseInitializer),e.depthwiseRegularizer=be(this.depthwiseRegularizer),e.depthwiseConstraint=ze(this.depthwiseRegularizer),e}}return t.className="DepthwiseConv2D",t})();function au(t,n,e,s){if(Array.isArray(t)){if(null!=n||null!=e)throw new R("When inputs is an array, neither initialState or constants should be provided");null!=s&&(e=t.slice(t.length-s,t.length),t=t.slice(0,t.length-s)),t.length>1&&(n=t.slice(1,t.length)),t=t[0]}function r(o){return null==o||Array.isArray(o)?o:[o]}return{inputs:t,initialState:n=r(n),constants:e=r(e)}}function lu(t,n,e,s=!1,r,o,i=!1,l=!1){return a.tidy(()=>{const u=n.shape.length;if(u<3)throw new R(`Input should be at least 3D, but is ${u}D.`);const c=[1,0].concat(yt(2,u));if(n=a.transpose(n,c),null!=o)throw new ie("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=r&&((r=a.cast(a.cast(r,"bool"),"float32")).rank===u-1&&(r=a.expandDims(r,-1)),r=a.transpose(r,c)),s&&(n=a.reverse(n,0),null!=r&&(r=a.reverse(r,0)));const d=[];let h,p=e;const f=n.shape[0],m=a.unstack(n);let x,g;null!=r&&(x=a.unstack(r));for(let y=0;y<f;++y){const b=m[y],C=a.tidy(()=>t(b,p));if(null==r)h=C[0],p=C[1];else{const v=a.tidy(()=>{const w=x[y],S=a.sub(a.onesLike(w),w);return{output:a.add(a.mul(C[0],w),a.mul(p[0],S)),newStates:p.map((N,T)=>a.add(a.mul(C[1][T],w),a.mul(N,S)))}});h=v.output,p=v.newStates}l&&d.push(h)}return l&&(g=a.stack(d,1)),[h,g,p]})}a.serialization.registerClass(xy);let bs=(()=>{class t extends ce{constructor(e){let s;if(super(e),null==e.cell)throw new R("cell property is missing for the constructor of RNN.");if(s=Array.isArray(e.cell)?new du({cells:e.cell}):e.cell,null==s.stateSize)throw new R("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=s,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new Pe({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){return null==this.states_?yt(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map(s=>null):this.states_}setStates(e){this.states_=e}computeOutputShape(e){To(e)&&(e=e[0]);let s=this.cell.stateSize;Array.isArray(s)||(s=[s]);const r=s[0];let o;if(o=this.returnSequences?[e[0],e[1],r]:[e[0],r],this.returnState){const i=[];for(const l of s)i.push([e[0],l]);return[o].concat(i)}return o}computeMask(e,s){return a.tidy(()=>{Array.isArray(s)&&(s=s[0]);const r=this.returnSequences?s:null;if(this.returnState){const o=this.states.map(i=>null);return[r].concat(o)}return r})}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,s=[];for(let r=0;r<e;++r)s.push(null);return s}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new ie("Constants support is not implemented in RNN yet.");To(e)&&(e=e[0]);const r=this.stateful?e[0]:null,o=e.slice(2);this.inputSpec[0]=new Pe({shape:[r,null,...o]});const i=[e[0]].concat(e.slice(2));let l;if(this.cell.build(i),l=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!a.util.arraysEqual(this.stateSpec.map(u=>u.shape[u.shape.length-1]),l))throw new R(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=l.map(u=>new Pe({shape:[null,u]}));this.stateful&&this.resetStates()}resetStates(e,s=!1){(0,a.tidy)(()=>{if(!this.stateful)throw new Dt("Cannot call resetStates() on an RNN Layer that is not stateful.");const r=this.inputSpec[0].shape[0];if(null==r)throw new R("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)this.states_=Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(o=>a.zeros([r,o])):[a.zeros([r,this.cell.stateSize])];else if(null==e)a.dispose(this.states_),null!=this.keptStates&&(a.dispose(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(o=>a.zeros([r,o])):this.states_[0]=a.zeros([r,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new R(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===s?this.keptStates.push(this.states_.slice()):a.dispose(this.states_);for(let o=0;o<this.states_.length;++o){const i=e[o],l=Array.isArray(this.cell.stateSize)?this.cell.stateSize[o]:this.cell.stateSize,u=[r,l];if(!a.util.arraysEqual(i.shape,u))throw new R(`State ${o} is incompatible with layer ${this.name}: expected shape=${u}, received shape=${i.shape}`);this.states_[o]=i}}this.states_=this.states_.map(o=>a.keep(o.clone()))})}apply(e,s){let r=null==s?null:s.initialState,o=null==s?null:s.constants;null==s&&(s={});const i=au(e,r,o,this.numConstants);e=i.inputs,r=i.initialState,o=i.constants;let l=[],u=[];if(null!=r){s.initialState=r,l=l.concat(r),this.stateSpec=[];for(const d of r)this.stateSpec.push(new Pe({shape:d.shape}));u=u.concat(this.stateSpec)}if(null!=o&&(s.constants=o,l=l.concat(o),this.numConstants=o.length),l[0]instanceof Ft){const d=[e].concat(l),h=this.inputSpec.concat(u),p=this.inputSpec;this.inputSpec=h;const f=super.apply(d,s);return this.inputSpec=p,f}return super.apply(e,s)}call(e,s){return(0,a.tidy)(()=>{const r=null==s?null:s.mask,o=null==s?null:s.training;let i=null==s?null:s.initialState;e=oe(e),null==i&&(i=this.stateful?this.states_:this.getInitialState(e));const l=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(i.length!==l)throw new R(`RNN Layer has ${l} state(s) but was passed ${i.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const u={training:o},d=lu((x,g)=>{const y=this.cell.call([x].concat(g),u);return[y[0],y.slice(1)]},e,i,this.goBackwards,r,null,this.unroll,this.returnSequences),h=d[0],p=d[1],f=d[2];this.stateful&&this.resetStates(f,o);const m=this.returnSequences?p:h;return this.returnState?[m].concat(f):m})}getInitialState(e){return(0,a.tidy)(()=>{let s=a.zeros(e.shape);return s=a.sum(s,[1,2]),s=hs(s),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(r=>r>1?Io(s,[1,r]):s):this.cell.stateSize>1?[Io(s,[1,this.cell.stateSize])]:[s]})}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),s={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(s.numConstants=this.numConstants);const r=this.cell.getConfig();return this.getClassName()===t.className&&(s.cell={className:this.cell.getClassName(),config:r}),Object.assign(Object.assign(Object.assign({},r),e),s)}static fromConfig(e,s,r={}){const i=Ut(s.cell,r);return new e(Object.assign(s,{cell:i}))}}return t.className="RNN",t})();a.serialization.registerClass(bs);class br extends ce{}let uu=(()=>{class t extends br{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,Be(this.units,"units"),this.activation=nn(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=ke(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=ke(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=ke(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Te(e.kernelRegularizer),this.recurrentRegularizer=Te(e.recurrentRegularizer),this.biasRegularizer=Te(e.biasRegularizer),this.kernelConstraint=Le(e.kernelConstraint),this.recurrentConstraint=Le(e.recurrentConstraint),this.biasConstraint=Le(e.biasConstraint),this.dropout=Vn([1,Qt([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Vn([1,Qt([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=he(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.bias=this.useBias?this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,s){return(0,a.tidy)(()=>{if(2!==e.length)throw new R(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let r=e[1];e=e[0];const o=null!=s.training&&s.training;let i;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=sn({ones:()=>a.onesLike(e),rate:this.dropout,training:o,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=sn({ones:()=>a.onesLike(r),rate:this.recurrentDropout,training:o,dropoutFunc:this.dropoutFunc}));const l=this.dropoutMask,u=this.recurrentDropoutMask;i=Et(null!=l?a.mul(e,l):e,this.kernel.read()),null!=this.bias&&(i=vt(i,this.bias.read())),null!=u&&(r=a.mul(r,u));let c=a.add(i,Et(r,this.recurrentKernel.read()));return null!=this.activation&&(c=this.activation.apply(c)),[c,c]})}getConfig(){const e=super.getConfig(),s={units:this.units,activation:tn(this.activation),useBias:this.useBias,kernelInitializer:Re(this.kernelInitializer),recurrentInitializer:Re(this.recurrentInitializer),biasInitializer:Re(this.biasInitializer),kernelRegularizer:be(this.kernelRegularizer),recurrentRegularizer:be(this.recurrentRegularizer),biasRegularizer:be(this.biasRegularizer),activityRegularizer:be(this.activityRegularizer),kernelConstraint:ze(this.kernelConstraint),recurrentConstraint:ze(this.recurrentConstraint),biasConstraint:ze(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign(Object.assign({},e),s)}}return t.className="SimpleRNNCell",t})();a.serialization.registerClass(uu);let yy=(()=>{class t extends bs{constructor(e){e.cell=new uu(e),super(e)}call(e,s){return(0,a.tidy)(()=>(null!=this.cell.dropoutMask&&(a.dispose(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(a.dispose(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==s?null:s.mask,training:null==s?null:s.training,initialState:null==s?null:s.initialState})))}static fromConfig(e,s){return new e(s)}}return t.className="SimpleRNN",t})();a.serialization.registerClass(yy);let cu=(()=>{class t extends br{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new R("GRUCell does not support reset_after parameter set to true.");this.units=e.units,Be(this.units,"units"),this.activation=nn(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=nn(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=ke(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=ke(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=ke(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Te(e.kernelRegularizer),this.recurrentRegularizer=Te(e.recurrentRegularizer),this.biasRegularizer=Te(e.biasRegularizer),this.kernelConstraint=Le(e.kernelConstraint),this.recurrentConstraint=Le(e.recurrentConstraint),this.biasConstraint=Le(e.biasConstraint),this.dropout=Vn([1,Qt([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Vn([1,Qt([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=he(e),this.kernel=this.addWeight("kernel",[e[e.length-1],3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.bias=this.useBias?this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,s){return(0,a.tidy)(()=>{if(2!==e.length)throw new R(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const r=null!=s.training&&s.training;let o=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=sn({ones:()=>a.onesLike(e),rate:this.dropout,training:r,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=sn({ones:()=>a.onesLike(o),rate:this.recurrentDropout,training:r,count:3,dropoutFunc:this.dropoutFunc}));const l=this.recurrentDropoutMask;let u,c,d;0<this.dropout&&this.dropout<1&&(e=a.mul(e,this.dropoutMask[0]));let h=Et(e,this.kernel.read());this.useBias&&(h=vt(h,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(o=a.mul(o,l[0]));const p=this.recurrentKernel.read(),[f,m]=a.split(p,[2*this.units,this.units],p.rank-1),x=Et(o,f),[g,y,b]=a.split(h,3,h.rank-1),[C,v]=a.split(x,2,x.rank-1);u=this.recurrentActivation.apply(a.add(g,C)),c=this.recurrentActivation.apply(a.add(y,v));const w=Et(a.mul(c,o),m);d=this.activation.apply(a.add(b,w));const S=a.add(a.mul(u,o),a.mul(a.add(1,a.neg(u)),d));return[S,S]})}getConfig(){const e=super.getConfig(),s={units:this.units,activation:tn(this.activation),recurrentActivation:tn(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Re(this.kernelInitializer),recurrentInitializer:Re(this.recurrentInitializer),biasInitializer:Re(this.biasInitializer),kernelRegularizer:be(this.kernelRegularizer),recurrentRegularizer:be(this.recurrentRegularizer),biasRegularizer:be(this.biasRegularizer),activityRegularizer:be(this.activityRegularizer),kernelConstraint:ze(this.kernelConstraint),recurrentConstraint:ze(this.recurrentConstraint),biasConstraint:ze(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign(Object.assign({},e),s)}}return t.className="GRUCell",t})();a.serialization.registerClass(cu);let by=(()=>{class t extends bs{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new cu(e),super(e)}call(e,s){return(0,a.tidy)(()=>(null!=this.cell.dropoutMask&&(a.dispose(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(a.dispose(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==s?null:s.mask,training:null==s?null:s.training,initialState:null==s?null:s.initialState})))}static fromConfig(e,s){return 0===s.implmentation&&(s.implementation=1),new e(s)}}return t.className="GRU",t})();a.serialization.registerClass(by);let Jo=(()=>{class t extends br{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,Be(this.units,"units"),this.activation=nn(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=nn(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=ke(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=ke(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=ke(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=Te(e.kernelRegularizer),this.recurrentRegularizer=Te(e.recurrentRegularizer),this.biasRegularizer=Te(e.biasRegularizer),this.kernelConstraint=Le(e.kernelConstraint),this.recurrentConstraint=Le(e.recurrentConstraint),this.biasConstraint=Le(e.biasConstraint),this.dropout=Vn([1,Qt([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Vn([1,Qt([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var s;let o;if(e=he(e),this.kernel=this.addWeight("kernel",[e[e.length-1],4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const i=this.biasInitializer,l=this.units;o=new((s=class extends ct{apply(c,d){const h=i.apply([l]),p=(new gl).apply([l]),f=i.apply([2*l]);return pl(pl(h,p),f)}}).className="CustomInit",s)}else o=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,o,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,s){return(0,a.tidy)(()=>{const r=null!=s.training&&s.training;if(3!==e.length)throw new R(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let o=e[1];const i=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=sn({ones:()=>a.onesLike(e),rate:this.dropout,training:r,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=sn({ones:()=>a.onesLike(o),rate:this.recurrentDropout,training:r,count:4,dropoutFunc:this.dropoutFunc}));const u=this.recurrentDropoutMask;let c,d,h,p;0<this.dropout&&this.dropout<1&&(e=a.mul(e,this.dropoutMask[0]));let f=Et(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(o=a.mul(o,u[0])),f=a.add(f,Et(o,this.recurrentKernel.read())),this.useBias&&(f=vt(f,this.bias.read()));const[m,x,g,y]=a.split(f,4,f.rank-1);c=this.recurrentActivation.apply(m),d=this.recurrentActivation.apply(x),h=a.add(a.mul(d,i),a.mul(c,this.activation.apply(g))),p=this.recurrentActivation.apply(y);const b=a.mul(p,this.activation.apply(h));return[b,b,h]})}getConfig(){const e=super.getConfig(),s={units:this.units,activation:tn(this.activation),recurrentActivation:tn(this.recurrentActivation),useBias:this.useBias,kernelInitializer:Re(this.kernelInitializer),recurrentInitializer:Re(this.recurrentInitializer),biasInitializer:Re(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:be(this.kernelRegularizer),recurrentRegularizer:be(this.recurrentRegularizer),biasRegularizer:be(this.biasRegularizer),activityRegularizer:be(this.activityRegularizer),kernelConstraint:ze(this.kernelConstraint),recurrentConstraint:ze(this.recurrentConstraint),biasConstraint:ze(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign(Object.assign({},e),s)}}return t.className="LSTMCell",t})();a.serialization.registerClass(Jo);let vy=(()=>{class t extends bs{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Jo(e),super(e)}call(e,s){return(0,a.tidy)(()=>(null!=this.cell.dropoutMask&&(a.dispose(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(a.dispose(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==s?null:s.mask,training:null==s?null:s.training,initialState:null==s?null:s.initialState})))}static fromConfig(e,s){return 0===s.implmentation&&(s.implementation=1),new e(s)}}return t.className="LSTM",t})();a.serialization.registerClass(vy);let du=(()=>{class t extends br{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const s of this.cells.slice().reverse())Array.isArray(s.stateSize)?e.push(...s.stateSize):e.push(s.stateSize);return e}call(e,s){return(0,a.tidy)(()=>{let r=e.slice(1);const o=[];for(const u of this.cells.slice().reverse())Array.isArray(u.stateSize)?o.push(r.splice(0,u.stateSize.length)):o.push(r.splice(0,1));o.reverse();const i=[];let l;for(let u=0;u<this.cells.length;++u){const c=this.cells[u];r=o[u],l=0===u?[e[0]].concat(r):[l[0]].concat(r),l=c.call(l,s),i.push(l.slice(1))}r=[];for(const u of i.slice().reverse())r.push(...u);return[l[0]].concat(r)})}build(e){let s;To(e)&&(e=e[0]),this.cells.forEach((r,o)=>{vn(`RNNCell_${o}`,()=>{r.build(e),s=Array.isArray(r.stateSize)?r.stateSize[0]:r.stateSize,e=[e[0],s]})}),this.built=!0}getConfig(){const e=super.getConfig(),o={cells:this.cells.map(i=>({className:i.getClassName(),config:i.getConfig()}))};return Object.assign(Object.assign({},e),o)}static fromConfig(e,s,r={}){const o=[];for(const i of s.cells)o.push(Ut(i,r));return new e({cells:o})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const s of this.cells)e.push(...s.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const s of this.cells)e.push(...s.nonTrainableWeights);if(!this.trainable){const s=[];for(const r of this.cells)s.push(...r.trainableWeights);return s.concat(e)}return e}getWeights(){const e=[];for(const s of this.cells)e.push(...s.weights);return No(e)}setWeights(e){const s=[];for(const r of this.cells){const i=e.splice(r.weights.length);for(let l=0;l<r.weights.length;++l)s.push([r.weights[l],i[l]])}Ro(s)}}return t.className="StackedRNNCells",t})();function sn(t){const{ones:n,rate:e,training:s=!1,count:r=1,dropoutFunc:o}=t,i=()=>null!=o?o(n(),e):ml(n(),e),l=()=>fs(i,n,s);return!r||r<=1?a.keep(l().clone()):Array(r).fill(void 0).map(l).map(c=>a.keep(c.clone()))}a.serialization.registerClass(du);let wy=(()=>{class t extends bs{constructor(e){if(e.unroll)throw new ie("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new ie("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new Pe({ndim:5})]}call(e,s){return a.tidy(()=>{if(null!=this.cell.dropoutMask&&(a.dispose(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(a.dispose(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),s&&s.constants)throw new R("ConvRNN2D cell does not support constants");return super.call(e,{mask:null==s?null:s.mask,training:null==s?null:s.training,initialState:null==s?null:s.initialState})})}computeOutputShape(e){let s=this.computeSingleOutputShape(e);return this.returnSequences||(s=[s[0],...s.slice(2)]),this.returnState&&(s=[s,...Array(2).fill([e[0],...s.slice(-3)])]),s}getInitialState(e){return a.tidy(()=>{const{stateSize:s}=this.cell,o=this.computeSingleOutputShape(e.shape),i=[o[0],...o.slice(2)],l=a.zeros(i);return Array.isArray(s)?Array(s.length).fill(l):[l]})}resetStates(e,s=!1){a.tidy(()=>{if(!this.stateful)throw new Dt("Cannot call resetStates() on an RNN Layer that is not stateful.");const r=this.inputSpec[0].shape,o=this.computeSingleOutputShape(r),i=[o[0],...o.slice(2)];if(null==r[0])throw new R("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())this.states_=Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(()=>a.zeros(i)):[a.zeros(i)];else if(null==e)a.dispose(this.states_),null!=this.keptStates&&(a.dispose(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>a.zeros(i)):this.states_[0]=a.zeros(i);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new R(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);s?this.keptStates.push(this.states_.slice()):a.dispose(this.states_);for(let u=0;u<this.states_.length;++u){const c=e[u],d=i;if(!a.util.arraysEqual(c.shape,d))throw new R(`State ${u} is incompatible with layer ${this.name}: expected shape=${d}, received shape=${c.shape}`);this.states_[u]=c}}this.states_=this.states_.map(u=>a.keep(u.clone()))})}computeSingleOutputShape(e){const{dataFormat:s,filters:r,kernelSize:o,padding:i,strides:l,dilationRate:u}=this.cell,c="channelsFirst"===s,h=e[c?4:3],p=St(e[c?3:2],o[0],i,l[0],u[0]),f=St(h,o[1],i,l[1],u[1]);return[...e.slice(0,2),...c?[r,p,f]:[p,f,r]]}}return t.className="ConvRNN2D",t})(),hu=(()=>{class t extends Jo{constructor(e){const{filters:s,kernelSize:r,strides:o,padding:i,dataFormat:l,dilationRate:u}=e;super(Object.assign(Object.assign({},e),{units:s})),this.filters=s,Be(this.filters,"filters"),this.kernelSize=Gn(r,2,"kernelSize"),this.kernelSize.forEach(c=>Be(c,"kernelSize")),this.strides=Gn(o||1,2,"strides"),this.strides.forEach(c=>Be(c,"strides")),this.padding=i||"valid",st(this.padding),this.dataFormat=l||"channelsLast",Ee(this.dataFormat),this.dilationRate=Gn(u||1,2,"dilationRate"),this.dilationRate.forEach(c=>Be(c,"dilationRate"))}build(e){var s;e=he(e);const r="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[r])throw new R(`The channel dimension of the input should be defined. Found ${e[r]}`);const l=this.kernelSize.concat([e[r],4*this.filters]);this.kernel=this.addWeight("kernel",l,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const u=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",u,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let c;if(this.unitForgetBias){const d=this.biasInitializer,h=this.filters;c=new((s=class extends ct{apply(f,m){return So([d.apply([h]),a.ones([h]),d.apply([2*h])])}}).className="CustomInit",s)}else c=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,c,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,s){return a.tidy(()=>{if(3!==e.length)throw new R(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const r=s.training||!1,o=e[0],i=e[1],l=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=sn({ones:()=>a.onesLike(o),rate:this.dropout,training:r,count:4,dropoutFunc:this.dropoutFunc}));const c=this.dropoutMask,d=(U,H,G)=>H&&H[G]?a.mul(H[G],U):U;let h=d(o,c,0),p=d(o,c,1),f=d(o,c,2),m=d(o,c,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=sn({ones:()=>a.onesLike(i),rate:this.recurrentDropout,training:r,count:4,dropoutFunc:this.dropoutFunc}));const x=this.recurrentDropoutMask;let g=d(i,x,0),y=d(i,x,1),b=d(i,x,2),C=d(i,x,3);const[w,S,I,k]=a.split(this.kernel.read(),4,3),[N,T,A,$]=this.useBias?a.split(this.bias.read(),4):[null,null,null,null];h=this.inputConv(h,w,N,this.padding),p=this.inputConv(p,S,T,this.padding),f=this.inputConv(f,I,A,this.padding),m=this.inputConv(m,k,$,this.padding);const[F,O,P,z]=a.split(this.recurrentKernel.read(),4,3);g=this.recurrentConv(g,F),y=this.recurrentConv(y,O),b=this.recurrentConv(b,P),C=this.recurrentConv(C,z);const M=this.recurrentActivation.apply(a.add(h,g)),E=this.recurrentActivation.apply(a.add(p,y)),B=a.add(a.mul(E,l),a.mul(M,this.activation.apply(a.add(f,b)))),W=a.mul(this.recurrentActivation.apply(a.add(m,C)),this.activation.apply(B));return[W,W,B]})}getConfig(){const r=function(t,n){var e={};for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&n.indexOf(s)<0&&(e[s]=t[s]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(s=Object.getOwnPropertySymbols(t);r<s.length;r++)n.indexOf(s[r])<0&&Object.prototype.propertyIsEnumerable.call(t,s[r])&&(e[s[r]]=t[s[r]])}return e}(super.getConfig(),["units"]),o={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign(Object.assign({},r),o)}inputConv(e,s,r,o){const i=a.conv2d(e,s,this.strides,o||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return r?vt(i,r,this.dataFormat):i}recurrentConv(e,s){return a.conv2d(e,s,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}return t.className="ConvLSTM2DCell",t})();a.serialization.registerClass(hu),a.serialization.registerClass((()=>{class t extends wy{constructor(e){const s=new hu(e);super(Object.assign(Object.assign({},e),{cell:s}))}static fromConfig(e,s){return new e(s)}}return t.className="ConvLSTM2D",t})());let pu=(()=>{class t extends ce{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const s=e.shape,r=[];for(let o=0;o<this.noiseShape.length;++o)r.push(null==this.noiseShape[o]?s[o]:this.noiseShape[o]);return r}call(e,s){return(0,a.tidy)(()=>{this.invokeCallHook(e,s);const r=oe(e);if(0<this.rate&&this.rate<1){const o=null!=s.training&&s.training,i=this.getNoiseShape(r);return fs(()=>ml(r,this.rate,i,this.seed),()=>r,o)}return e})}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},s=super.getConfig();return Object.assign(e,s),e}dispose(){return super.dispose()}}return t.className="Dropout",t})();a.serialization.registerClass(pu),a.serialization.registerClass((()=>{class t extends pu{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const s=e.shape;return[s[0],1,s[2]]}}return t.className="SpatialDropout1D",t})()),a.serialization.registerClass((()=>{class t extends ce{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let s=null;null!=e.batchSize&&(s=e.batchSize),this.batchInputShape=[s,e.inputDim]}this.units=e.units,Be(this.units,"units"),this.activation=nn(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=ke(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=ke(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=Le(e.kernelConstraint),this.biasConstraint=Le(e.biasConstraint),this.kernelRegularizer=Te(e.kernelRegularizer),this.biasRegularizer=Te(e.biasRegularizer),this.activityRegularizer=Te(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const s=(e=he(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[s,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:s}}],this.built=!0}computeOutputShape(e){const s=(e=he(e)).slice();return s[s.length-1]=this.units,s}call(e,s){return(0,a.tidy)(()=>{this.invokeCallHook(e,s);const r=oe(e),o=ol(this.activation.getClassName());let i;return null!=o?i=Et(r,this.kernel.read(),o,this.bias?this.bias.read():null):(i=Et(r,this.kernel.read()),null!=this.bias&&(i=vt(i,this.bias.read())),null!=this.activation&&(i=this.activation.apply(i))),i})}getConfig(){const e={units:this.units,activation:tn(this.activation),useBias:this.useBias,kernelInitializer:Re(this.kernelInitializer),biasInitializer:Re(this.biasInitializer),kernelRegularizer:be(this.kernelRegularizer),biasRegularizer:be(this.biasRegularizer),activityRegularizer:be(this.activityRegularizer),kernelConstraint:ze(this.kernelConstraint),biasConstraint:ze(this.biasConstraint)},s=super.getConfig();return Object.assign(e,s),e}}return t.className="Dense",t})());let Ty=(()=>{class t extends ce{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=he(e);for(const s of e.slice(1))if(null==s)throw new R(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],Yt(e,1)]}call(e,s){return(0,a.tidy)(()=>{this.invokeCallHook(e,s);let r=oe(e);if("channelsFirst"===this.dataFormat&&r.rank>1){const o=[0];for(let i=2;i<r.rank;++i)o.push(i);o.push(1),r=(0,a.transpose)(r,o)}return function fx(t){if(t.rank<=1)throw new R(`batchFlatten requires a minimum rank of 2. Got rank: ${t.rank}.`);const n=[t.shape[0],Yt(t.shape,1)];return a.reshape(t,n)}(r)})}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const s=super.getConfig();return Object.assign(e,s),e}}return t.className="Flatten",t})();a.serialization.registerClass(Ty),a.serialization.registerClass((()=>{class t extends ce{constructor(e){super(e),this.supportsMasking=!0,this.activation=nn(e.activation)}call(e,s){return(0,a.tidy)(()=>{this.invokeCallHook(e,s);const r=oe(e);return this.activation.apply(r)})}getConfig(){const e={activation:tn(this.activation)},s=super.getConfig();return Object.assign(e,s),e}}return t.className="Activation",t})()),a.serialization.registerClass((()=>{class t extends ce{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,s){return(0,a.tidy)(()=>function hx(t,n){return(0,a.tidy)(()=>{if(2!==t.shape.length)throw new R(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);return Io(hs(t,1),[1,n,1])})}(e=oe(e),this.n))}getConfig(){const e={n:this.n},s=super.getConfig();return Object.assign(e,s),e}}return t.className="RepeatVector",t})()),a.serialization.registerClass((()=>{class t extends ce{constructor(e){super(e),this.targetShape=e.targetShape;for(let s=0;s<this.targetShape.length;++s)this.isUnknown(this.targetShape[s])&&(this.targetShape[s]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,s){const r="Total size of new array must be unchanged.",o=s.slice();let i=1,l=null;for(let c=0;c<o.length;++c){const d=o[c];if(this.isUnknown(d)){if(null!==l)throw new R("Can only specifiy one unknown dimension.");l=c}else i*=d}const u=Yt(e);if(null!==l){if(0===i||u%i!=0)throw new R(r);o[l]=u/i}else if(u!==i)throw new R(r);return o}computeOutputShape(e){let s=!1;for(let r=0;r<e.length;++r)if(this.isUnknown(e[r])){s=!0;break}return s?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,s){return(0,a.tidy)(()=>{this.invokeCallHook(e,s);const r=oe(e),o=r.shape,i=o.slice(0,1).concat(this.fixUnknownDimension(o.slice(1),this.targetShape));return(0,a.reshape)(r,i)})}getConfig(){const e={targetShape:this.targetShape},s=super.getConfig();return Object.assign(e,s),e}}return t.className="Reshape",t})());let Dy=(()=>{class t extends ce{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const s=yt(1,e.dims.length+1);if(!a.util.arraysEqual(e.dims.slice().sort(),s))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new Pe({ndim:this.dims.length+1})]}computeOutputShape(e){const s=(e=he(e)).slice();return this.dims.forEach((r,o)=>{s[o+1]=e[r]}),s}call(e,s){return(0,a.transpose)(oe(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},s=super.getConfig();return Object.assign(e,s),e}}return t.className="Permute",t})();a.serialization.registerClass(Dy),a.serialization.registerClass((()=>{class t extends ce{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),s={maskValue:this.maskValue};return Object.assign(s,e),s}computeMask(e,s){const r=oe(e);return(0,a.any)((0,a.notEqual)(r,this.maskValue),-1)}call(e,s){return(0,a.tidy)(()=>{this.invokeCallHook(e,s);const r=oe(e),l=(0,a.any)((0,a.notEqual)(r,this.maskValue),-1,!0);return(0,a.mul)(r,(0,a.cast)(l,r.dtype))})}}return t.className="Masking",t})()),a.serialization.registerClass((()=>{class t extends ce{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let s=null;null!=e.batchSize&&(s=e.batchSize),this.batchInputShape=null==e.inputLength?[s,null]:[s].concat(ge(e.inputLength))}this.inputDim=e.inputDim,Be(this.inputDim,"inputDim"),this.outputDim=e.outputDim,Be(this.outputDim,"outputDim"),this.embeddingsInitializer=ke(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=Te(e.embeddingsRegularizer),this.activityRegularizer=Te(e.activityRegularizer),this.embeddingsConstraint=Le(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,s){return(0,a.tidy)(()=>this.maskZero?(e=oe(e),(0,a.notEqual)(e,(0,a.zerosLike)(e))):null)}computeOutputShape(e){if(e=he(e),null==this.inputLength)return[...e,this.outputDim];const s=ge(this.inputLength);if(s.length!==e.length-1)throw new R(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let r=0;for(let o=0;o<s.length;++o){const i=s[o],l=e[o+1];if(null!=i&&null!=l&&i!==l)throw new R(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==i&&(s[r]=l),r++}}return[e[0],...s,this.outputDim]}call(e,s){return(0,a.tidy)(()=>{this.invokeCallHook(e,s);let r=oe(e);"int32"!==r.dtype&&(r=$t(r,"int32"));const o=fl(this.embeddings.read(),(0,a.reshape)(r,[r.size]));return(0,a.reshape)(o,he(this.computeOutputShape(r.shape)))})}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:Re(this.embeddingsInitializer),embeddingsRegularizer:be(this.embeddingsRegularizer),activityRegularizer:be(this.activityRegularizer),embeddingsConstraint:ze(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},s=super.getConfig();return Object.assign(e,s),e}}return t.className="Embedding",t})());class wn extends ce{constructor(n){super(n||{}),this.supportsMasking=!0}mergeFunction(n){throw new ie}computeElementwiseOpOutputShape(n,e){if(null==n||null==e)return null;if(n.length<e.length)return this.computeElementwiseOpOutputShape(e,n);if(0===e.length)return n;const s=n.slice(0,n.length-e.length);for(let r=0;r<e.length;++r){const o=n[n.length-e.length+r],i=e[r];if(null==o||null==i||o<0||i<0)s.push(null);else if(1===o)s.push(i);else if(1===i)s.push(o);else{if(o!==i)throw new R("Operands could not be broadcast together with shapes "+JSON.stringify(n)+" "+JSON.stringify(e));s.push(o)}}return s}build(n){if(Array.isArray(n)&&!Array.isArray(n[0])&&(n=[he(n)]),n.length<2)throw new R(`A merge layer should be called on an Array of at least 2 inputs. Got ${n.length} input(s).`);let e=[];for(const o of n)null!=o&&null!==o[0]&&e.push(o[0]);if(e=Zt(e),e.length>1)throw new R(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(n)}.`);let s=null==n[0]?null:n[0].slice(1);for(let o=1;o<n.length;++o){const i=null==n[o]?null:n[o].slice(1);s=this.computeElementwiseOpOutputShape(s,i)}const r=n.map(o=>o.length);this.reshapeRequired=-1!==n.indexOf(null)||1!==Zt(r).length}call(n,e){return(0,a.tidy)(()=>{if(this.reshapeRequired){const s=[],r=n.map(o=>o.rank);if(-1===r.indexOf(null)){const o=Qt(r);for(let i of n){const l=i.rank;for(let u=0;u<o-l;++u)i=hs(i,1);s.push(i)}return this.mergeFunction(s)}{let o=!1;for(const u of n){const c=u.rank;if(null==c){const d=u.shape,h=d[0],p=d.slice(1).concat([h]);let f=a.reshape(u,[h].concat(Yt(d.slice(1))));f=a.transpose(f,[1,0]),f=a.reshape(f,p),s.push(f),o=!0}else if(c>1){const d=yt(1,c).concat([0]);s.push(a.transpose(u,d)),o=!0}else s.push(u)}let i=this.mergeFunction(s);const l=i.rank;if(o)if(null==l){const u=i.shape,d=u[u.length-1],h=[d].concat(u.slice(0,u.length-1));i=a.reshape(a.transpose(a.reshape(i,[-1,d]),[1,0]),h)}else if(l>1){const u=[l-1].concat(yt(0,l-1));i=a.transpose(i,u)}return i}}return this.mergeFunction(n)})}computeOutputShape(n){let e;e=null==n[0]?null:n[0].slice(1);for(let r=1;r<n.length;++r){const o=null==n[r]?null:n[r].slice(1);e=this.computeElementwiseOpOutputShape(e,o)}let s=[];for(const r of n)null!=r&&null!==r[0]&&s.push(r[0]);return s=Zt(s),e=1===s.length?s.concat(e):[null].concat(e),e}computeMask(n,e){return a.tidy(()=>{if(null==e)return null;if(!Array.isArray(e))throw new R("`mask` should be an Array");if(!Array.isArray(n))throw new R("`inputs` should be an Array");if(e.length!==n.length)throw new R(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${n.length} vs ${e.length})`);if(e.every(r=>null==r))return null;let s=(e=e.map(r=>null==r?r:a.expandDims(r,0)))[0];for(let r=1;r<e.length-1;++r)s=a.logicalAnd(s,e[r]);return s})}}let ei=(()=>{class t extends wn{constructor(e){super(e)}mergeFunction(e){return(0,a.tidy)(()=>{let s=e[0].clone();for(let r=1;r<e.length;++r)s=a.add(s,e[r]);return s})}}return t.className="Add",t})();a.serialization.registerClass(ei);let ti=(()=>{class t extends wn{constructor(e){super(e)}mergeFunction(e){return(0,a.tidy)(()=>{let s=e[0].clone();for(let r=1;r<e.length;++r)s=a.mul(s,e[r]);return s})}}return t.className="Multiply",t})();a.serialization.registerClass(ti);let ni=(()=>{class t extends wn{constructor(e){super(e)}mergeFunction(e){return(0,a.tidy)(()=>{let s=e[0].clone();for(let r=1;r<e.length;++r)s=a.add(s,e[r]);return a.mul(1/e.length,s)})}}return t.className="Average",t})();a.serialization.registerClass(ni);let si=(()=>{class t extends wn{constructor(e){super(e)}mergeFunction(e){return(0,a.tidy)(()=>{let s=e[0];for(let r=1;r<e.length;++r)s=a.maximum(s,e[r]);return s})}}return t.className="Maximum",t})();a.serialization.registerClass(si);let ri=(()=>{class t extends wn{constructor(e){super(e)}mergeFunction(e){return(0,a.tidy)(()=>{let s=e[0];for(let r=1;r<e.length;++r)s=a.minimum(s,e[r]);return s})}}return t.className="Minimum",t})();a.serialization.registerClass(ri);let oi=(()=>{class t extends wn{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new R("A `Concatenate` layer should be called on a list of at least 2 inputs");let s=!0;for(const o of e)if(null!=o){s=!1;break}if(s)return;const r=[];for(let o=0;o<e.length;++o){const i=e[o].slice();i.splice(this.axis,1);let l=!1;for(const u of r)if(a.util.arraysEqual(u,i)){l=!0;break}l||r.push(i)}if(r.length>1)throw new R("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return(0,a.tidy)(()=>So(e,this.axis))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new R("A `Concatenate` layer should be called on a list of inputs.");const s=e,r=s[0].slice(),o=this.axis<0?r.length+this.axis:this.axis;for(const i of s.slice(1)){if(null==r[o]||null==i[o]){r[o]=null;break}r[o]+=i[o]}return r}computeMask(e,s){if(null==s)return null;if(!Array.isArray(s))throw new R("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new R("`inputs` should be an array for Concatenate");if(s.length!==e.length)throw new R(`Mismatch in the length of mask (${s.length}) and the legnth of inputs (${e.length})`);return a.tidy(()=>{let r=!0;if(s.forEach(l=>{null==l||(r=!1)}),r)return null;const o=[];for(let l=0;l<e.length;++l)o.push(null==s[l]?a.cast(a.onesLike(e[l]),"bool"):s[l].rank<e[l].rank?a.expandDims(s[l],-1):s[l]);const i=a.concat(o,this.axis);return a.all(i,-1,!1)})}getConfig(){const e={axis:this.axis},s=super.getConfig();return Object.assign(e,s),e}}return t.className="Concatenate",t})();function vs(t,n){for(;t<0;)t+=n;return t}a.serialization.registerClass(oi);let Fy=(()=>{class t extends wn{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){a.util.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const s=e[0],r=e[1];if(s.length>3||r.length>3)throw new ie("Dot layer does not support tensors of 4D or higher rank yet.");const o=this.interpretAxes(s,r);if(s[o[0]]!==r[o[1]])throw new R(`Dimension incompatibility: ${s[o[0]]} !== ${r[o[1]]}`)}mergeFunction(e){if(2!==e.length)throw new R(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let o,s=e[0],r=e[1];return o=Array.isArray(this.axes)?this.axes.map((i,l)=>vs(i,e[l].shape.length)):[vs(this.axes,s.shape.length),vs(this.axes,r.shape.length)],this.normalize&&(s=cr(s,o[0]),r=cr(r,o[1])),function _y(t,n,e){if(t.shape.length>3||n.shape.length>3)throw new ie("batchDot is not implemented for tensors of 4D or higher rank yet");if(a.util.assert(t.shape.length>=2,()=>`batchDot requires the rank of x to be >= 2, but got ${t.shape.length}`),a.util.assert(t.shape.length>=2,()=>`batchDot requires the rank of y to be >= 2, but got ${n.shape.length}`),"number"==typeof e&&(e=[e,e]),"complex64"===t.dtype||"complex64"===n.dtype)throw new ie("batchDot is not implemented for complex64-type Tensors yet.");const s=t.shape.length,r=n.shape.length;null==e&&(e=[s-1,r-2]);const o=e;return a.tidy(()=>{let i,l;if(s>r){i=s-r;const u=[];for(let c=0;c<i;++c)u.push(1);n=a.reshape(n,n.shape.concat(u))}else if(r>s){i=r-s;const u=[];for(let c=0;c<i;++c)u.push(1);t=a.reshape(t,t.shape.concat(u))}else i=0;if(l=2===t.shape.length&&2===n.shape.length?o[0]===o[1]?a.sum(a.mul(t,n),o[0]):a.sum(a.mul(a.transpose(t,[1,0]),n),o[1]):a.matMul(t,n,o[0]!==t.shape.length-1,o[1]===n.shape.length-1),i>0){let u;u=s>r?s+r-3:s-1;const c=[];for(let d=u;d<u+i;++d)c.push(d);l=a.squeeze(l,c)}return 1===l.shape.length&&(l=a.expandDims(l,1)),l})}(s,r,o)}interpretAxes(e,s){let r;return r=Array.isArray(this.axes)?this.axes:[vs(this.axes,e.length),vs(this.axes,s.length)],r}computeOutputShape(e){a.util.assert(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const s=e[0].slice(),r=e[1].slice();if(s.length>3||r.length>3)throw new ie("Dot layer does not support tensors of 4D or higher rank yet.");const o=this.interpretAxes(s,r);s.splice(o[0],1),r.splice(o[1],1),r.splice(0,1);const i=s.concat(r);return 1===i.length&&i.push(1),i}computeMask(e,s){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},s=super.getConfig();return Object.assign(e,s),e}}return t.className="Dot",t})();function Cs(t,n,e,s,r,o=.001){let i;if(2===t.rank)i=a.batchNorm2d(t,n,e,s,r,o);else if(3===t.rank)i=a.batchNorm3d(t,n,e,s,r,o);else{if(4!==t.rank)throw new ie(`batchNormalization is not implemented for array of rank ${t.rank} yet`);i=a.batchNorm4d(t,n,e,s,r,o)}return i}a.serialization.registerClass(Fy),a.serialization.registerClass((()=>{class t extends ce{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),s={stddev:this.stddev};return Object.assign(s,e),s}call(e,s){return(0,a.tidy)(()=>{this.invokeCallHook(e,s);const r=oe(e);return fs(()=>(0,a.add)(sr(r.shape,0,this.stddev),r),()=>r,s.training||!1)})}}return t.className="GaussianNoise",t})()),a.serialization.registerClass((()=>{class t extends ce{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),s={rate:this.rate};return Object.assign(s,e),s}call(e,s){return(0,a.tidy)(()=>{this.invokeCallHook(e,s);const r=oe(e);return this.rate>0&&this.rate<1?fs(()=>{const i=Math.sqrt(this.rate/(1-this.rate));return(0,a.mul)(r,sr(r.shape,1,i))},()=>r,s.training||!1):r})}}return t.className="GaussianDropout",t})()),a.serialization.registerClass((()=>{class t extends ce{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||oe(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),s={rate:this.rate};return Object.assign(s,e),s}call(e,s){return(0,a.tidy)(()=>{if(this.rate<1&&this.rate>0){const r=this._getNoiseShape(e);return fs(()=>{const i=oe(e),c=-1.7580993408473766;let d=(0,a.greaterEqual)((0,a.randomUniform)(r),this.rate);d=$t(d,"float32");const h=((1-this.rate)*(1+this.rate*c**2))**-.5,p=-h*c*this.rate,f=(0,a.add)((0,a.mul)(i,d),(0,a.mul)((0,a.add)(d,-1),c));return(0,a.add)((0,a.mul)(f,h),p)},()=>oe(e),s.training||!1)}return e})}}return t.className="AlphaDropout",t})());let Vy=(()=>{class t extends ce{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=ke(e.betaInitializer||"zeros"),this.gammaInitializer=ke(e.gammaInitializer||"ones"),this.movingMeanInitializer=ke(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=ke(e.movingVarianceInitializer||"ones"),this.betaConstraint=Le(e.betaConstraint),this.gammaConstraint=Le(e.gammaConstraint),this.betaRegularizer=Te(e.betaRegularizer),this.gammaRegularizer=Te(e.gammaRegularizer)}build(e){e=he(e);const s=this.axis>=0?this.axis:this.axis+e.length,r=e[s];if(null==r)throw new R(`Axis ${s} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new Pe({ndim:e.length,axes:{[s]:r}})];const o=[r];this.scale&&(this.gamma=this.addWeight("gamma",o,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",o,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",o,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",o,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,s){return(0,a.tidy)(()=>{const r=null!=s.training&&s.training,o=oe(e),i=o.shape,l=i.length,u=yt(0,l),c=this.axis>=0?this.axis:this.axis+l;u.splice(c,1);const d=xn(1,l);d[c]=i[c];const h=u.slice();h.sort();const p=!a.util.arraysEqual(h,yt(0,l).slice(0,l-1));if(!r)return(()=>{if(p){const C=(0,a.reshape)(this.movingMean.read(),d),v=(0,a.reshape)(this.movingVariance.read(),d),w=this.center?(0,a.reshape)(this.beta.read(),d):null,S=this.scale?(0,a.reshape)(this.gamma.read(),d):null;return Cs(o,C,v,w,S,this.epsilon)}return Cs(o,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[m,x,g]=function By(t,n,e,s,r=.001){return a.util.arraysEqual(s.slice().sort(),yt(0,t.rank-1))?function Ly(t,n,e,s,r=.001){return(0,a.tidy)(()=>{const o=a.moments(t,s),i=o.mean,l=o.variance;return[Cs(t,i,l,e,n,r),i,l]})}(t,n,e,s,r):function My(t,n,e,s,r=.001){return(0,a.tidy)(()=>{const o=a.moments(t,s),i=o.mean,l=o.variance,u=[];for(const m of yt(0,t.rank))-1!==s.indexOf(m)?u.push(1):u.push(t.shape[m]);const c=(0,a.reshape)(i,u),d=(0,a.reshape)(l,u),h=null==n?null:(0,a.reshape)(n,u),p=null==e?null:(0,a.reshape)(e,u);return[Cs(t,c,d,p,h,r),i,l]})}(t,n,e,s,r)}(o,this.gamma.read(),this.beta.read(),u,this.epsilon),y=(C,v,w)=>{a.tidy(()=>{const S=1-w,I=C.read(),k=a.mul(a.sub(I,v),S);C.write(a.sub(I,k))})};return(()=>{y(this.movingMean,x,this.momentum),y(this.movingVariance,g,this.momentum)})(),m})}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Re(this.betaInitializer),gammaInitializer:Re(this.gammaInitializer),movingMeanInitializer:Re(this.movingMeanInitializer),movingVarianceInitializer:Re(this.movingVarianceInitializer),betaRegularizer:be(this.betaRegularizer),gammaRegularizer:be(this.gammaRegularizer),betaConstraint:ze(this.betaConstraint),gammaConstraint:ze(this.gammaConstraint)},s=super.getConfig();return Object.assign(e,s),e}}return t.className="BatchNormalization",t})();a.serialization.registerClass(Vy);let Wy=(()=>{class t extends ce{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const s of this.axis)if(!Number.isInteger(s))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=ke(e.betaInitializer||"zeros"),this.gammaInitializer=ke(e.gammaInitializer||"ones"),this.betaRegularizer=Te(e.betaRegularizer),this.gammaRegularizer=Te(e.gammaRegularizer),this.supportsMasking=!0}build(e){const s=(e=he(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let i=0;i<this.axis.length;++i)this.axis[i]<0&&(this.axis[i]+=s);for(const i of this.axis)if(i<0||i>=s)throw new Error(`Invalid axis: ${i}`);if(this.axis.length!==Zt(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const r=this.axis.map(i=>e[i]);this.gamma=this.scale?this.addWeight("gamma",r,"float32",this.gammaInitializer,this.gammaRegularizer,!0):null,this.beta=this.center?this.addWeight("beta",r,"float32",this.betaInitializer,this.betaRegularizer,!0):null,this.built=!0}call(e,s){const r=oe(e),o=r.shape,i=o.length;return(0,a.tidy)(()=>{let{mean:u,variance:c}=(0,a.moments)(r,this.axis,!0);const d=xn(1,i);for(const g of this.axis)d[g]=o[g];const h=g=>null!=g&&g.shape.length!==i?a.reshape(g,d):g;let p=this.scale?h(this.gamma.read()):null,f=this.center?h(this.beta.read()):null;const m=[],x=[];for(let g=0;g<i;++g)-1!==this.axis.indexOf(g)?(m.push(o[g]),x.push(1)):(m.push(1),x.push(o[g]));return u=a.tile(u,m),c=a.tile(c,m),null!=p&&(p=a.tile(p,x)),null!=f&&(f=a.tile(f,x)),Cs(r,u,c,f,p,this.epsilon)})}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:Re(this.betaInitializer),gammaInitializer:Re(this.gammaInitializer),betaRegularizer:be(this.betaRegularizer),gammaRegularizer:be(this.gammaRegularizer)},s=super.getConfig();return Object.assign(e,s),e}}return t.className="LayerNormalization",t})();a.serialization.registerClass(Wy);let Gy=(()=>{class t extends ce{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new R(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let s,r;if("number"==typeof e.padding[0])s=[e.padding[0],e.padding[0]],r=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new R(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(s=e.padding[0],2!==e.padding[1].length)throw new R(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);r=e.padding[1]}this.padding=[s,r]}this.inputSpec=[new Pe({ndim:4})]}computeOutputShape(e){let s,r;return e=he(e),"channelsFirst"===this.dataFormat?(s=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,r=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],s,r]):(s=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,r=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],s,r,e[3]])}call(e,s){return(0,a.tidy)(()=>function Uy(t,n,e){return(0,a.tidy)(()=>{if(4!==t.rank)throw new R(`temporalPadding expects input tensor to be 4-D, but received a ${t.rank}-D tensor.`);if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new R("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==e&&(e="channelsLast"),"channelsLast"!==e&&"channelsFirst"!==e)throw new R(`Unknown data format: ${e}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let s;return s="channelsFirst"===e?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],a.pad(t,s)})}(oe(e),this.padding,this.dataFormat))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},s=super.getConfig();return Object.assign(e,s),e}}return t.className="ZeroPadding2D",t})();function vr(t,n,e,s,r,o){return(0,a.tidy)(()=>{let i;Ee(r),al(o),st(s),null==e&&(e=[1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==o&&(o="max"),t=Yo(t,r);const l="same"===s?"same":"valid";return i="max"===o?a.maxPool(t,n,e,l):a.avgPool(t,n,e,l),"channelsFirst"===r&&(i=a.transpose(i,[0,3,1,2])),i})}function fu(t,n,e,s,r,o){return(0,a.tidy)(()=>{let i;Ee(r),al(o),st(s),null==e&&(e=[1,1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==o&&(o="max"),t=nu(t,r);const l="same"===s?"same":"valid";return i="max"===o?a.maxPool3d(t,n,e,l):a.avgPool3d(t,n,e,l),"channelsFirst"===r&&(i=a.transpose(i,[0,4,1,2,3])),i})}a.serialization.registerClass(Gy);class mu extends ce{constructor(n){if(null==n.poolSize&&(n.poolSize=2),super(n),"number"==typeof n.poolSize)this.poolSize=[n.poolSize];else{if(!Array.isArray(n.poolSize)||1!==n.poolSize.length||"number"!=typeof n.poolSize[0])throw new R(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(n.poolSize)}`);this.poolSize=n.poolSize}if(Be(this.poolSize,"poolSize"),null==n.strides)this.strides=this.poolSize;else if("number"==typeof n.strides)this.strides=[n.strides];else{if(!Array.isArray(n.strides)||1!==n.strides.length||"number"!=typeof n.strides[0])throw new R(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(n.strides)}`);this.strides=n.strides}Be(this.strides,"strides"),this.padding=null==n.padding?"valid":n.padding,st(this.padding),this.inputSpec=[new Pe({ndim:3})]}computeOutputShape(n){const e=St((n=he(n))[1],this.poolSize[0],this.padding,this.strides[0]);return[n[0],e,n[2]]}call(n,e){return(0,a.tidy)(()=>{this.invokeCallHook(n,e),n=hs(oe(n),2);const s=this.poolingFunction(oe(n),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return a.squeeze(s,[2])})}getConfig(){const n={poolSize:this.poolSize,padding:this.padding,strides:this.strides},e=super.getConfig();return Object.assign(n,e),n}}a.serialization.registerClass((()=>{class t extends mu{constructor(e){super(e)}poolingFunction(e,s,r,o,i){return Ee(i),st(o),vr(e,s,r,o,i,"max")}}return t.className="MaxPooling1D",t})()),a.serialization.registerClass((()=>{class t extends mu{constructor(e){super(e)}poolingFunction(e,s,r,o,i){return Ee(i),st(o),vr(e,s,r,o,i,"avg")}}return t.className="AveragePooling1D",t})());class gu extends ce{constructor(n){if(null==n.poolSize&&(n.poolSize=[2,2]),super(n),this.poolSize=Array.isArray(n.poolSize)?n.poolSize:[n.poolSize,n.poolSize],null==n.strides)this.strides=this.poolSize;else if(Array.isArray(n.strides)){if(2!==n.strides.length)throw new R(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${n.strides.length}.`);this.strides=n.strides}else this.strides=[n.strides,n.strides];Be(this.poolSize,"poolSize"),Be(this.strides,"strides"),this.padding=null==n.padding?"valid":n.padding,this.dataFormat=null==n.dataFormat?"channelsLast":n.dataFormat,Ee(this.dataFormat),st(this.padding),this.inputSpec=[new Pe({ndim:4})]}computeOutputShape(n){n=he(n);let e="channelsFirst"===this.dataFormat?n[2]:n[1],s="channelsFirst"===this.dataFormat?n[3]:n[2];return e=St(e,this.poolSize[0],this.padding,this.strides[0]),s=St(s,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[n[0],n[1],e,s]:[n[0],e,s,n[3]]}call(n,e){return(0,a.tidy)(()=>(this.invokeCallHook(n,e),this.poolingFunction(oe(n),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const n={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(n,e),n}}a.serialization.registerClass((()=>{class t extends gu{constructor(e){super(e)}poolingFunction(e,s,r,o,i){return Ee(i),st(o),vr(e,s,r,o,i,"max")}}return t.className="MaxPooling2D",t})()),a.serialization.registerClass((()=>{class t extends gu{constructor(e){super(e)}poolingFunction(e,s,r,o,i){return Ee(i),st(o),vr(e,s,r,o,i,"avg")}}return t.className="AveragePooling2D",t})());class xu extends ce{constructor(n){if(null==n.poolSize&&(n.poolSize=[2,2,2]),super(n),this.poolSize=Array.isArray(n.poolSize)?n.poolSize:[n.poolSize,n.poolSize,n.poolSize],null==n.strides)this.strides=this.poolSize;else if(Array.isArray(n.strides)){if(3!==n.strides.length)throw new R(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${n.strides.length}.`);this.strides=n.strides}else this.strides=[n.strides,n.strides,n.strides];Be(this.poolSize,"poolSize"),Be(this.strides,"strides"),this.padding=null==n.padding?"valid":n.padding,this.dataFormat=null==n.dataFormat?"channelsLast":n.dataFormat,Ee(this.dataFormat),st(this.padding),this.inputSpec=[new Pe({ndim:5})]}computeOutputShape(n){n=he(n);let e="channelsFirst"===this.dataFormat?n[2]:n[1],s="channelsFirst"===this.dataFormat?n[3]:n[2],r="channelsFirst"===this.dataFormat?n[4]:n[3];return e=St(e,this.poolSize[0],this.padding,this.strides[0]),s=St(s,this.poolSize[1],this.padding,this.strides[1]),r=St(r,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[n[0],n[1],e,s,r]:[n[0],e,s,r,n[4]]}call(n,e){return(0,a.tidy)(()=>(this.invokeCallHook(n,e),this.poolingFunction(oe(n),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const n={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(n,e),n}}a.serialization.registerClass((()=>{class t extends xu{constructor(e){super(e)}poolingFunction(e,s,r,o,i){return Ee(i),st(o),fu(e,s,r,o,i,"max")}}return t.className="MaxPooling3D",t})()),a.serialization.registerClass((()=>{class t extends xu{constructor(e){super(e)}poolingFunction(e,s,r,o,i){return Ee(i),st(o),fu(e,s,r,o,i,"avg")}}return t.className="AveragePooling3D",t})());class yu extends ce{constructor(n){super(n),this.inputSpec=[new Pe({ndim:3})]}computeOutputShape(n){return[n[0],n[2]]}call(n,e){throw new ie}}let Yy=(()=>{class t extends yu{constructor(e){super(e||{})}call(e,s){return(0,a.tidy)(()=>{const r=oe(e);return a.mean(r,1)})}}return t.className="GlobalAveragePooling1D",t})();a.serialization.registerClass(Yy);let Qy=(()=>{class t extends yu{constructor(e){super(e||{})}call(e,s){return(0,a.tidy)(()=>{const r=oe(e);return a.max(r,1)})}}return t.className="GlobalMaxPooling1D",t})();a.serialization.registerClass(Qy);class bu extends ce{constructor(n){super(n),this.dataFormat=null==n.dataFormat?"channelsLast":n.dataFormat,Ee(this.dataFormat),this.inputSpec=[new Pe({ndim:4})]}computeOutputShape(n){return"channelsLast"===this.dataFormat?[n[0],n[3]]:[n[0],n[1]]}call(n,e){throw new ie}getConfig(){const n={dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(n,e),n}}let Jy=(()=>{class t extends bu{call(e,s){return(0,a.tidy)(()=>{const r=oe(e);return a.mean(r,"channelsLast"===this.dataFormat?[1,2]:[2,3])})}}return t.className="GlobalAveragePooling2D",t})();a.serialization.registerClass(Jy);let eb=(()=>{class t extends bu{call(e,s){return(0,a.tidy)(()=>{const r=oe(e);return a.max(r,"channelsLast"===this.dataFormat?[1,2]:[2,3])})}}return t.className="GlobalMaxPooling2D",t})();a.serialization.registerClass(eb);class vu extends ce{constructor(n){super(n),this.layer=n.layer}build(n){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(n){null!=this.layer&&(this.layer.trainable=n)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(n){this.layer.setWeights(n)}getConfig(){const n={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},e=super.getConfig();return Object.assign(n,e),n}setFastWeightInitDuringBuild(n){super.setFastWeightInitDuringBuild(n),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(n)}static fromConfig(n,e,s={}){const o=Ut(e.layer,s);delete e.layer;const i={layer:o};return Object.assign(i,e),new n(i)}}a.serialization.registerClass((()=>{class t extends vu{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=he(e)).length<3)throw new R(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const s=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(s),this.layer.built=!0),super.build(e)}computeOutputShape(e){const s=[(e=he(e))[0]].concat(e.slice(2)),r=this.layer.computeOutputShape(s);return[r[0],e[1]].concat(r.slice(1))}call(e,s){return(0,a.tidy)(()=>lu((l,u)=>[oe(this.layer.call(l,s)),[]],e=oe(e),[],!1,null,null,!1,!0)[1])}}return t.className="TimeDistributed",t})());let rb=(()=>{class t extends vu{constructor(e){super(e);const s=e.layer.getConfig(),r={};r.className=e.layer.getClassName(),r.config=s,this.forwardLayer=Ut(r),s.goBackwards=!0!==s.goBackwards;const o={};if(o.className=e.layer.getClassName(),o.config=s,this.backwardLayer=Ut(o),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,function nb(t){bn(ox,"BidirectionalMergeMode",t)}(this.mergeMode),e.weights)throw new ie("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const r=Math.floor(e.length/2);this.forwardLayer.setWeights(e.slice(0,r)),this.backwardLayer.setWeights(e.slice(r))}computeOutputShape(e){let r,o,i,s=this.forwardLayer.computeOutputShape(e);return Array.isArray(s)&&Array.isArray(s[0])||(s=[s]),this.returnState&&(i=s.slice(1)),r=s[0],"concat"===this.mergeMode?(r[r.length-1]*=2,o=[r]):o=null==this.mergeMode?[r,r.slice()]:[r],this.returnState?null==this.mergeMode?o.concat(i).concat(i.slice()):[r].concat(i).concat(i.slice()):Ze(o)}apply(e,s){let r=null==s?null:s.initialState,o=null==s?null:s.constants;null==s&&(s={});const i=au(e,r,o,this.numConstants);if(e=i.inputs,r=i.initialState,o=i.constants,Array.isArray(e)&&(r=e.slice(1),e=e[0]),(null==r||0===r.length)&&null==o)return super.apply(e,s);const l=[],u=[];if(null!=r){const d=r.length;if(d%2>0)throw new R("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");s.initialState=r,l.push(...r);const h=r.map(p=>new Pe({shape:p.shape}));this.forwardLayer.stateSpec=h.slice(0,d/2),this.backwardLayer.stateSpec=h.slice(d/2),u.push(...h)}if(null!=o)throw new ie("Support for constants in Bidirectional layers is not implemented yet.");const c=l[0]instanceof Ft;for(const d of l)if(d instanceof Ft!==c)throw new R("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(c){const d=[e].concat(l),h=this.inputSpec.concat(u),p=this.inputSpec;this.inputSpec=h;const f=super.apply(d,s);return this.inputSpec=p,f}return super.apply(e,s)}call(e,s){return(0,a.tidy)(()=>{const r=s.initialState;let o,i,l,u;if(null==r)o=this.forwardLayer.call(e,s),i=this.backwardLayer.call(e,s);else{const c=r.slice(0,r.length/2),d=r.slice(r.length/2);o=this.forwardLayer.call(e,Object.assign(s,{initialState:c})),i=this.backwardLayer.call(e,Object.assign(s,{initialState:d}))}return this.returnState&&(Array.isArray(o)&&(l=o.slice(1).concat(i.slice(1))),o=o[0],i=i[0]),this.returnSequences&&(i=a.reverse(i,1)),"concat"===this.mergeMode?u=So([o,i]):"sum"===this.mergeMode?u=a.add(o,i):"ave"===this.mergeMode?u=a.mul(.5,a.add(o,i)):"mul"===this.mergeMode?u=a.mul(o,i):null==this.mergeMode&&(u=[o,i]),this.returnState?null==this.mergeMode?u.concat(l):[u].concat(l):u})}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){vn(this.forwardLayer.name,()=>{this.forwardLayer.build(e)}),vn(this.backwardLayer.name,()=>{this.backwardLayer.build(e)}),this.built=!0}computeMask(e,s){let r;if(Array.isArray(s)&&(s=s[0]),r=this.returnSequences?null==this.mergeMode?[s,s]:s:null==this.mergeMode?[null,null]:null,this.returnState){const i=this.forwardLayer.states.map(l=>null);return Array.isArray(r)?r.concat(i).concat(i):[r].concat(i).concat(i)}return r}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},s=super.getConfig();return Object.assign(e,s),e}static fromConfig(e,s){const r=Ut(s.layer);if(delete s.layer,null!=s.numConstants)throw new ie("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const o=s;return o.layer=r,new e(o)}}return t.className="Bidirectional",t})();a.serialization.registerClass(rb),a.serialization.registerClass((()=>{class t extends ce{constructor(e){super(e),this.scale=e.scale,this.offset=e.offset?e.offset:0}getConfig(){const e={scale:this.scale,offset:this.offset},s=super.getConfig();return Object.assign(e,s),e}call(e,s){return(0,a.tidy)(()=>("float32"!==(e=oe(e)).dtype&&(e=$t(e,"float32")),(0,a.add)((0,a.mul)(e,this.scale),this.offset)))}}return t.className="Rescaling",t})());const{resizeBilinear:ib,cropAndResize:ab}=a.image;a.serialization.registerClass((()=>{class t extends ce{constructor(e){super(e),this.height=e.height,this.width=e.width}centerCrop(e,s,r,o,i,l,u,c){return(0,a.tidy)(()=>{let d,h=!1;const g=[s/l,r/u,(o+s)/l,(i+r)/u],y=[];3===e.rank?(h=!0,d=(0,a.stack)([e])):d=e;for(let S=0;S<d.shape[0];S++)y.push(g);const b=(0,a.tensor)(y,[y.length,4]),C=(0,a.range)(0,y.length,1,"int32"),w=ab(d,b,C,[o,i],"nearest");return $t(h?oe((0,a.unstack)(w)):w,c)})}upsize(e,s,r,o){return(0,a.tidy)(()=>$t(ib(e,[s,r]),o))}call(e,s){return(0,a.tidy)(()=>{const r=oe(e),o=r.dtype,i=r.shape,l=i[i.length-3],u=i[i.length-2];let c=0;l!==this.height&&(c=Math.floor((l-this.height)/2));let d=0;return u!==this.width&&(d=Math.floor((u-this.width)/2),0===d&&(d=1)),c>=0&&d>=0?this.centerCrop(r,c,d,this.height,this.width,l,u,o):this.upsize(e,this.height,this.width,o)})}getConfig(){const e={height:this.height,width:this.width},s=super.getConfig();return Object.assign(e,s),e}computeOutputShape(e){const r=(e=he(e)).length-2;return e[e.length-3]=this.height,e[r]=this.width,e}}return t.className="CenterCrop",t})()),a.serialization.registerClass((()=>{class t extends ce{constructor(e){super(e),this.numTokens=e.numTokens,this.outputMode=e.outputMode?e.outputMode:"multiHot"}getConfig(){const e={numTokens:this.numTokens,outputMode:this.outputMode},s=super.getConfig();return Object.assign(e,s),e}computeOutputShape(e){return null==(e=he(e))?[this.numTokens]:"oneHot"===this.outputMode&&1!==e[e.length-1]?(e.push(this.numTokens),e):(e[e.length-1]=this.numTokens,e)}call(e,s){return(0,a.tidy)(()=>{let r;if("int32"!==(e=oe(e)).dtype&&(e=$t(e,"int32")),typeof s.countWeights<"u"){if("count"!==this.outputMode)throw new R(`countWeights is not used when outputMode !== count.\n              Received countWeights=${s.countWeights}`);r=oe(s.countWeights)}const o=(0,a.max)(e),i=(0,a.min)(e),l=(0,a.greater)(this.numTokens,o).bufferSync().get(0),u=(0,a.greaterEqual)(i,0).bufferSync().get(0);if(!l||!u)throw new R(`Input values must be between 0 < values <= numTokens with numTokens=${this.numTokens}`);return function ub(t,n,e,s){let r=oe(t);if("int32"!==r.dtype&&(r=$t(r,"int32")),"int"===n)return r;const o=r.shape;if(0===r.rank&&(r=(0,a.expandDims)(r,-1)),"oneHot"===n&&1!==r.shape[r.shape.length-1]&&(r=(0,a.expandDims)(r,-1)),r.rank>2)throw new R(`When outputMode is not int, maximum output rank is 2 Received outputMode ${n} and input shape ${o} which would result in output rank ${r.rank}.`);const i=["multiHot","oneHot"].includes(n);let u;if(u=(0,a.denseBincount)(r,typeof s<"u"&&"count"===n?s:[],e,i),"tfIdf"!==n)return u;if(s)return(0,a.mul)(u,s);throw new R("When outputMode is 'tfIdf', weights must be provided.")}(e,this.outputMode,this.numTokens,r)})}}return t.className="CategoryEncoding",t})());const Cu=new Set(["bilinear","nearest"]);let hb=(()=>{class t extends ce{constructor(e){if(super(e),this.height=e.height,this.width=e.width,e.interpolation){if(!Cu.has(e.interpolation))throw new R(`Invalid interpolation parameter: ${e.interpolation} is not implemented`);this.interpolation=e.interpolation}else this.interpolation="bilinear";this.cropToAspectRatio=!!e.cropToAspectRatio}computeOutputShape(e){return e=he(e),[this.height,this.width,e[2]]}getConfig(){const e={height:this.height,width:this.width,interpolation:this.interpolation,cropToAspectRatio:this.cropToAspectRatio},s=super.getConfig();return Object.assign(e,s),e}call(e,s){return(0,a.tidy)(()=>{const r=[this.height,this.width];if("bilinear"===this.interpolation)return a.image.resizeBilinear(e,r,!this.cropToAspectRatio);if("nearest"===this.interpolation)return a.image.resizeNearestNeighbor(e,r,!this.cropToAspectRatio);throw new Error(`Interpolation is ${this.interpolation} but only ${[...Cu]} are supported`)})}}return t.className="Resizing",t})();a.serialization.registerClass(hb);let pb=(()=>{class t{constructor(e){this.seed=e}next(){if(void 0!==this.seed)return this.seed++}}return t.className="RandomSeed",t})(),fb=(()=>{class t extends ce{constructor(e){super(e),this.randomGenerator=new pb(e.seed)}getConfig(){const e={seed:this.randomGenerator.seed},s=super.getConfig();return Object.assign(e,s),e}}return t.className="BaseRandomLayer",t})();const wu=new Set(["bilinear","nearest"]);let gb=(()=>{class t extends fb{constructor(e){super(e);const{factor:s,interpolation:r="bilinear"}=e;if(this.factor=s,Array.isArray(this.factor)&&2===this.factor.length)this.widthLower=this.factor[0],this.widthUpper=this.factor[1];else{if(Array.isArray(this.factor)||!(this.factor>0))throw new R(`Invalid factor: ${this.factor}. Must be positive number or tuple of 2 numbers`);this.widthLower=-this.factor,this.widthUpper=this.factor}if(this.widthLower<-1||this.widthUpper<-1)throw new R(`factor must have values larger than -1. Got: ${this.factor}`);if(this.widthUpper<this.widthLower)throw new R(`factor cannot have upper bound less than lower bound.\n        Got upper bound: ${this.widthUpper}.\n        Got lower bound: ${this.widthLower}\n      `);if(r){if(!wu.has(r))throw new R(`Invalid interpolation parameter: ${r} is not implemented`);this.interpolation=r}}getConfig(){const e={factor:this.factor,interpolation:this.interpolation},s=super.getConfig();return Object.assign(e,s),e}computeOutputShape(e){return e=he(e),[this.imgHeight,-1,e[2]]}call(e,s){return(0,a.tidy)(()=>{const r=oe(e);this.imgHeight=r.shape[r.shape.length-3];const o=r.shape[r.shape.length-2];this.widthFactor=(0,a.randomUniform)([1],1+this.widthLower,1+this.widthUpper,"float32",this.randomGenerator.next());let i=this.widthFactor.dataSync()[0]*o;i=Math.round(i);const l=[this.imgHeight,i];switch(this.interpolation){case"bilinear":return a.image.resizeBilinear(e,l);case"nearest":return a.image.resizeNearestNeighbor(e,l);default:throw new Error(`Interpolation is ${this.interpolation}\n          but only ${[...wu]} are supported`)}})}}return t.className="RandomWidth",t})();a.serialization.registerClass(gb);var vb=D(9128);function Q(t,n){Array.isArray(t)||(t=[t]),t.forEach(e=>{null!=e&&a.util.assert("complex64"!==e.dtype,()=>`${n} does not support complex64 tensors in the CPU backend.`)})}Symbol("out"),Symbol("field"),Symbol("quote"),Symbol("quoteafterquote"),Symbol("quoteinquote");const jb=a.kernel_impls.whereImpl;let Kb=(()=>{class t extends a.KernelBackend{nextDataId(){return t.nextDataId++}constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new a.DataStorage(this,(0,a.engine)())}write(e,s,r){this.firstUse&&(this.firstUse=!1,(0,a.env)().get("IS_NODE")&&a.backend_util.warn("\n============================\nHi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. \n============================"));const o={id:this.nextDataId()};return this.data.set(o,{values:e,dtype:r,refCount:1}),o}makeTensorInfo(e,s,r){let o;if("string"===s&&null!=r&&r.length>0&&a.util.isString(r[0])){const i=r.map(l=>a.util.encodeString(l));o=this.write(i,e,s)}else o=this.write(r,e,s);return{dataId:o,shape:e,dtype:s}}refCount(e){return this.data.has(e)?this.data.get(e).refCount:0}incRef(e){this.data.get(e).refCount++}decRef(e){this.data.has(e)&&this.data.get(e).refCount--}move(e,s,r,o,i){this.data.set(e,{values:s,dtype:o,refCount:i})}numDataIds(){return this.data.numDataIds()}read(e){var s=this;return(0,se.Z)(function*(){return s.readSync(e)})()}readSync(e){const{dtype:s,complexTensorInfos:r}=this.data.get(e);if("complex64"===s){const o=this.readSync(r.real.dataId),i=this.readSync(r.imag.dataId);return a.backend_util.mergeRealAndImagArrays(o,i)}return a.util.convertBackendValuesAndArrayBuffer(this.data.get(e).values,s)}bufferSync(e){const s=this.readSync(e.dataId);if("string"===e.dtype)try{const r=s.map(o=>a.util.decodeString(o));return(0,a.buffer)(e.shape,e.dtype,r)}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return(0,a.buffer)(e.shape,e.dtype,s)}makeOutput(e,s,r){return(0,a.engine)().makeTensorFromTensorInfo(this.makeTensorInfo(s,r,e),this)}disposeData(e,s=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!s&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:r}=this.data.get(e);null!=r&&(this.disposeData(r.real.dataId,!0),this.disposeData(r.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}time(e){return(0,se.Z)(function*(){const s=a.util.now();return e(),{kernelMs:a.util.now()-s}})()}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){Q([e],"where");const s=this.readSync(e.dataId);return jb(e.shape,s)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}return t.nextDataId=0,t})();function Pt(t){return(n,e,s)=>{const r=a.util.getArrayFromDType(e,n.length);for(let o=0;o<n.length;++o)r[o]=t(n[o],s);return r}}function fe(t,n,e){return rn(t,Pt(n),e)}function rn(t,n,e){return({inputs:s,attrs:r,backend:o})=>{const{x:i}=s;Q(i,t);const l=o,u=l.data.get(i.dataId).values;let c;if("string"===i.dtype){if(!Array.isArray(u))throw new Error("String tensor's value was not an instance of Array");c=a.backend_util.fromUint8ToStringArray(u)}else c=u;const d=e||i.dtype,h=n(c,d,r);return l.makeTensorInfo(i.shape,d,h)}}(0,a.registerBackend)("cpu",()=>new Kb,1);const zu=fe(a.Elu,t=>t>=0?t:Math.exp(t)-1),Zb={kernelName:a.Elu,backendName:"cpu",kernelFunc:zu};function zt(t){const{inputs:n,backend:e}=t,{x:s}=n;return e.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const Yb={kernelName:a.Identity,backendName:"cpu",kernelFunc:zt};function Lu(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{alpha:o}=s;Q([r],"leakyRelu");const i=a.util.sizeFromShape(r.shape),l=e.data.get(r.dataId).values,u=a.util.getTypedArrayFromDType("float32",i);for(let c=0;c<l.length;c++)u[c]=l[c]<0?o*l[c]:l[c];return e.makeTensorInfo(r.shape,"float32",u)}const Qb={kernelName:a.LeakyRelu,backendName:"cpu",kernelFunc:Lu};function _e(t){return(n,e,s,r,o)=>{const i=a.backend_util.assertAndGetBroadcastShape(n,e),l=i.length,u=a.util.computeStrides(i),c=a.util.sizeFromShape(i),d=a.util.getTypedArrayFromDType(o,c),h=n.length,p=e.length,f=a.util.computeStrides(n),m=a.util.computeStrides(e),x=a.backend_util.getBroadcastDims(n,i),g=a.backend_util.getBroadcastDims(e,i);if(x.length+g.length===0)for(let y=0;y<d.length;++y)d[y]=t(s[y%s.length],r[y%r.length]);else for(let y=0;y<d.length;++y){const b=a.util.indexToLoc(y,l,u),C=b.slice(-h);x.forEach(I=>C[I]=0);const v=a.util.locToIndex(C,h,f),w=b.slice(-p);g.forEach(I=>w[I]=0);const S=a.util.locToIndex(w,p,m);d[y]=t(s[v],r[S])}return[d,i]}}const Jb=_e((t,n)=>t<0?n*t:t);function Mu(t){const{inputs:n,backend:e}=t,{x:s,alpha:r}=n;Q([s,r],"prelu");const o=e.data.get(s.dataId).values,i=e.data.get(r.dataId).values,[l,u]=Jb(s.shape,r.shape,o,i,"float32");return e.makeTensorInfo(u,"float32",l)}const ev={kernelName:a.Prelu,backendName:"cpu",kernelFunc:Mu},Bu=fe(a.Relu,t=>Math.max(0,t)),tv={kernelName:a.Relu,backendName:"cpu",kernelFunc:Bu},Vu=fe(a.Relu6,t=>Math.min(Math.max(0,t),6)),nv={kernelName:a.Relu6,backendName:"cpu",kernelFunc:Vu},sv=Pt(t=>1/(1+Math.exp(-t))),Wu=fe(a.Sigmoid,t=>1/(1+Math.exp(-t))),rv={kernelName:a.Sigmoid,backendName:"cpu",kernelFunc:Wu};function kr(t,n,e,s,r){if("linear"===e)return zt({inputs:{x:n},backend:t});if("relu"===e)return Bu({inputs:{x:n},backend:t});if("elu"===e)return zu({inputs:{x:n},backend:t});if("relu6"===e)return Vu({inputs:{x:n},backend:t});if("prelu"===e)return Mu({inputs:{x:n,alpha:s},backend:t});if("leakyrelu"===e)return Lu({inputs:{x:n},backend:t,attrs:{alpha:r}});if("sigmoid"===e)return Wu({inputs:{x:n},backend:t});throw new Error(`Activation ${e} has not been implemented for the CPU backend.`)}function Je(t){const{inputs:n,backend:e}=t,{real:s,imag:r}=n,o=e.data.get(s.dataId).values,i=e.data.get(r.dataId).values,l=e.makeTensorInfo(s.shape,"complex64");return e.data.get(l.dataId).complexTensorInfos={real:e.makeTensorInfo(s.shape,"float32",o),imag:e.makeTensorInfo(r.shape,"float32",i)},l}const ov={kernelName:a.Complex,backendName:"cpu",kernelFunc:Je};function Tr(t,n,e="float32"){if("complex64"===e)return Je({inputs:{real:Tr(t,n,"float32"),imag:Tr(t,n,"float32")},backend:t});const s=a.util.makeZerosTypedArray(a.util.sizeFromShape(n),e);return t.makeTensorInfo(n,e,s)}function Sn(t){const{inputs:n,backend:e}=t,{input:s}=n,r=e.data.get(s.dataId).complexTensorInfos.real,o=e.data.get(r.dataId).values;return e.makeTensorInfo(r.shape,r.dtype,o)}const iv={kernelName:a.Real,backendName:"cpu",kernelFunc:Sn};function Uu(t,n,e,s){if("int32"===s)return[n,"int32",Int32Array.from(t)];if("bool"===s){const r=a.util.toTypedArray([0],e),[o,i]=_e((l,u)=>l!==u?1:0)(n,[],t,r,"bool");return[i,"bool",o]}throw new Error(`Error in Cast: failed to cast ${e} to ${s}`)}function on(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{dtype:o}=s;if("complex64"===o){if("complex64"===r.dtype)return zt({inputs:{x:r},backend:e});const d=Tr(e,r.shape,r.dtype),h=on({inputs:{x:r},backend:e,attrs:{dtype:"float32"}}),p=Je({inputs:{real:h,imag:d},backend:e});return e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(h),p}if("complex64"===r.dtype){const d=Sn({inputs:{input:r},backend:e}),h=on({inputs:{x:d},backend:e,attrs:{dtype:o}});return e.disposeIntermediateTensorInfo(d),h}if(!a.util.hasEncodingLoss(r.dtype,o)){const d=zt({inputs:{x:r},backend:e});return{dataId:d.dataId,shape:d.shape,dtype:o}}const i=e.data.get(r.dataId).values,[l,u,c]=Uu(i,r.shape,r.dtype,o);return e.makeTensorInfo(l,u,c)}const av={kernelName:a.Cast,backendName:"cpu",kernelFunc:on};function Me(t,n,e,s){return null==e?({inputs:r,backend:o})=>{const{a:i,b:l}=r,u=o;Q([i,l],t);const c=u.data.get(i.dataId).values,d=u.data.get(l.dataId).values,h="string"===i.dtype?a.backend_util.fromUint8ToStringArray(c):c,p="string"===i.dtype?a.backend_util.fromUint8ToStringArray(d):d,f=s||i.dtype,[m,x]=n(i.shape,l.shape,h,p,f);return u.makeTensorInfo(x,f,m)}:({inputs:r,backend:o})=>{const{a:i,b:l}=r,u=o;if("complex64"===i.dtype||"complex64"===l.dtype){const c=on({inputs:{x:i},backend:u,attrs:{dtype:"complex64"}}),d=u.data.get(c.dataId),p=d.complexTensorInfos.imag,f=u.data.get(d.complexTensorInfos.real.dataId).values,m=u.data.get(p.dataId).values,x=on({inputs:{x:l},backend:u,attrs:{dtype:"complex64"}}),g=u.data.get(x.dataId),b=g.complexTensorInfos.imag,C=u.data.get(g.complexTensorInfos.real.dataId).values,v=u.data.get(b.dataId).values,[w,S,I]=e(i.shape,l.shape,f,m,C,v),k=u.makeTensorInfo(I,"float32",w),N=u.makeTensorInfo(I,"float32",S),T=Je({inputs:{real:k,imag:N},backend:u});return u.disposeIntermediateTensorInfo(c),u.disposeIntermediateTensorInfo(x),u.disposeIntermediateTensorInfo(k),u.disposeIntermediateTensorInfo(N),T}{const c=u.data.get(i.dataId).values,d=u.data.get(l.dataId).values,h=s||i.dtype,[p,f]=n(i.shape,l.shape,c,d,h);return u.makeTensorInfo(f,h,p)}}}function hi(t){return(n,e,s,r,o,i)=>{const l=a.backend_util.assertAndGetBroadcastShape(n,e),u=a.util.sizeFromShape(l),c=l.length,d=a.util.computeStrides(l),h=a.util.getTypedArrayFromDType("float32",u),p=a.util.getTypedArrayFromDType("float32",u),f=a.backend_util.getBroadcastDims(n,l),m=a.backend_util.getBroadcastDims(e,l),x=a.backend_util.mergeRealAndImagArrays(s,r),g=a.backend_util.mergeRealAndImagArrays(o,i),y=n.length,b=a.util.computeStrides(n),C=e.length,v=a.util.computeStrides(e);if(f.length+m.length===0)for(let w=0;w<h.length;w++){const S=w%x.length,I=w%g.length,k=t(x[2*S],x[2*S+1],g[2*I],g[2*I+1]);h[w]=k.real,p[w]=k.imag}else for(let w=0;w<h.length;w++){const S=a.util.indexToLoc(w,c,d),I=S.slice(-y);f.forEach($=>I[$]=0);const k=a.util.locToIndex(I,y,b),N=S.slice(-C);m.forEach($=>N[$]=0);const T=a.util.locToIndex(N,C,v),A=t(x[2*k],x[2*k+1],g[2*T],g[2*T+1]);h[w]=A.real,p[w]=A.imag}return[h,p,l]}}const Gu=_e((t,n)=>t+n),lv=hi((t,n,e,s)=>({real:t+e,imag:n+s})),jn=Me(a.Add,Gu,lv),uv={kernelName:a.Add,backendName:"cpu",kernelFunc:jn};function ve(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{shape:o}=s,i=a.util.sizeFromShape(r.shape),l=a.util.inferFromImplicitShape(o,i),u=a.util.sizeFromShape(l);a.util.assert(i===u,()=>`The new shape (${l}) has ${u} elements and the old shape (${r.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`),e.incRef(r.dataId);const c=e.data.get(r.dataId);if(null!=c.complexTensorInfos){const h=c.complexTensorInfos.imag;c.complexTensorInfos.real.shape=l,h.shape=l}return{dataId:r.dataId,shape:l,dtype:r.dtype}}const cv={kernelName:a.Reshape,backendName:"cpu",kernelFunc:ve};function Hu(t){const{inputs:n,backend:e,attrs:s}=t,{a:r,b:o}=n,{transposeA:i,transposeB:l}=s;Q([r,o],"matMul");const u=r.shape.length,c=o.shape.length,d=i?r.shape[u-2]:r.shape[u-1],h=l?o.shape[c-1]:o.shape[c-2],p=i?r.shape[u-1]:r.shape[u-2],f=l?o.shape[c-2]:o.shape[c-1],m=r.shape.slice(0,-2),x=o.shape.slice(0,-2),g=a.util.sizeFromShape(m),y=a.util.sizeFromShape(x),C=a.broadcast_util.assertAndGetBroadcastShape(r.shape.slice(0,-2),o.shape.slice(0,-2)).concat([p,f]);a.util.assert(d===h,()=>`Error in matMul: inner shapes (${d}) and (${h}) of Tensors with shapes ${r.shape} and ${o.shape} and transposeA=${i} and transposeB=${l} must match.`);const w=l?[y,f,h]:[y,h,f],S=ve({inputs:{x:r},backend:e,attrs:{shape:i?[g,d,p]:[g,p,d]}}),I=ve({inputs:{x:o},backend:e,attrs:{shape:w}}),k=i?S.shape[1]:S.shape[2],N=i?S.shape[2]:S.shape[1],T=l?I.shape[1]:I.shape[2],A=Math.max(g,y),$=e.data.get(S.dataId).values,F=e.data.get(I.dataId).values,O=a.util.computeStrides(S.shape),P=a.util.computeStrides(I.shape),[z,M,E]=i?[O[0],1,O[1]]:[O[0],O[1],1],[B,W,U]=l?[1,P[1],P[0]]:[P[1],1,P[0]],H=N*T,G=(0,a.buffer)([A,N,T],S.dtype),q=G.values,X=e.blockSize;for(let Y=0;Y<A;Y++){const ee=Y%g,re=Y%y;for(let ne=0;ne<N;ne+=X){const ae=Math.min(ne+X,N);for(let le=0;le<T;le+=X){const me=Math.min(le+X,T);for(let Ce=0;Ce<k;Ce+=X){const De=Math.min(Ce+X,k);for(let we=ne;we<ae;we++)for(let ye=le;ye<me;ye++){let Ae=0;for(let Ne=Ce;Ne<De;Ne++)Ae+=$[ee*z+we*M+Ne*E]*F[Ne*B+ye*W+re*U];q[Y*H+(we*T+ye)]+=Ae}}}}}return e.disposeIntermediateTensorInfo(S),e.disposeIntermediateTensorInfo(I),e.makeTensorInfo(C,G.dtype,G.values)}const dv={kernelName:a.BatchMatMul,backendName:"cpu",kernelFunc:Hu},pv={kernelName:a._FusedMatMul,backendName:"cpu",kernelFunc:function hv(t){const{inputs:n,backend:e,attrs:s}=t,{a:r,b:o,bias:i,preluActivationWeights:l}=n,{transposeA:u,transposeB:c,activation:d,leakyreluAlpha:h}=s;let p,f,m;const x=[];p=Hu({inputs:{a:r,b:o},attrs:{transposeA:u,transposeB:c},backend:e}),i&&(f=jn({inputs:{a:p,b:i},backend:e}),x.push(p),p=f),d&&(m=kr(e,p,d,l,h),x.push(p),p=m);for(const y of x)e.disposeIntermediateTensorInfo(y);return p}};function Xu(t){const n=new Float32Array(t.length);for(let e=0;e<t.length;++e)n[e]=Math.abs(t[e]);return n}const mv={kernelName:a.Abs,backendName:"cpu",kernelFunc:t=>{const{x:n}=t.inputs,e=t.backend;Q(n,"abs");let s=new Float32Array(a.util.sizeFromShape(n.shape));return s=Xu(e.data.get(n.dataId).values),e.makeOutput(s,n.shape,n.dtype)}},gv=fe(a.Acos,t=>Math.acos(t)),xv={kernelName:a.Acos,backendName:"cpu",kernelFunc:gv},yv=fe(a.Acosh,t=>Math.acosh(t)),bv={kernelName:a.Acosh,backendName:"cpu",kernelFunc:yv},Cv={kernelName:a.AddN,backendName:"cpu",kernelFunc:function vv(t){const{inputs:n,backend:e}=t,s=n;Q(n,"addN");const r=s.map(l=>e.data.get(l.dataId).values),o=(0,a.buffer)(s[0].shape,s[0].dtype),i=o.values;for(let l=0;l<s.length;l++){const u=r[l];for(let c=0;c<i.length;c++)i[c]+=u[c]}return e.makeTensorInfo(o.shape,o.dtype,o.values)}};function pi(t,n,e,s,r){const o=n.length,i=a.util.sizeFromShape(n),l=a.util.computeStrides(n),u=a.util.computeStrides(r),c=a.util.getTypedArrayFromDType(e,a.util.sizeFromShape(r));for(let d=0;d<i;++d){const h=a.util.indexToLoc(d,o,l),p=new Array(h.length);for(let m=0;m<p.length;m++)p[m]=h[s[m]];c[a.util.locToIndex(p,o,u)]=t[d]}return c}function Qe(t){const{inputs:n,attrs:e,backend:s}=t,{x:r}=n,{perm:o}=e;Q(r,"transpose");const l=new Array(r.shape.length);for(let h=0;h<l.length;h++)l[h]=r.shape[o[h]];const c=pi(s.data.get(r.dataId).values,r.shape,r.dtype,o,l);return{dataId:s.write(c,l,r.dtype),shape:l,dtype:r.dtype}}const wv={kernelName:a.Transpose,backendName:"cpu",kernelFunc:Qe},Iv={kernelName:a.All,backendName:"cpu",kernelFunc:function Sv(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{axis:o,keepDims:i}=s;Q(r,"all");const l=a.util.parseAxisParam(o,r.shape);let u=l;const c=a.backend_util.getAxesPermutation(u,r.shape.length);let d=r;null!=c&&(d=Qe({inputs:{x:r},backend:e,attrs:{perm:c}}),u=a.backend_util.getInnerMostAxes(u.length,r.shape.length)),a.backend_util.assertAxesAreInnerMostDims("all",u,d.shape.length);const[h,p]=a.backend_util.computeOutAndReduceShapes(d.shape,u),f=a.util.sizeFromShape(p),m=a.util.makeZerosTypedArray(a.util.sizeFromShape(h),d.dtype),x=e.data.get(d.dataId).values;for(let y=0;y<m.length;++y){const b=y*f;let C=x[b];for(let v=0;v<f;++v)C=C&&x[b+v];m[y]=C}null!=c&&e.disposeIntermediateTensorInfo(d);const g=e.makeTensorInfo(h,d.dtype,m);if(i){const b=ve({inputs:{x:g},backend:e,attrs:{shape:a.backend_util.expandShapeToKeepDim(h,l)}});return e.disposeIntermediateTensorInfo(g),b}return g}},Tv={kernelName:a.Any,backendName:"cpu",kernelFunc:function kv(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{axis:o,keepDims:i}=s;Q(r,"any");const l=a.util.parseAxisParam(o,r.shape);let u=l;const c=a.backend_util.getAxesPermutation(u,r.shape.length);let d=r;null!=c&&(d=Qe({inputs:{x:r},backend:e,attrs:{perm:c}}),u=a.backend_util.getInnerMostAxes(u.length,r.shape.length)),a.backend_util.assertAxesAreInnerMostDims("any",u,d.shape.length);const[h,p]=a.backend_util.computeOutAndReduceShapes(d.shape,u),f=a.util.sizeFromShape(p),m=a.util.makeZerosTypedArray(a.util.sizeFromShape(h),d.dtype),x=e.data.get(d.dataId).values;for(let y=0;y<m.length;++y){const b=y*f;let C=x[b];for(let v=0;v<f;++v)C=C||x[b+v];m[y]=C}null!=c&&e.disposeIntermediateTensorInfo(d);const g=e.makeTensorInfo(h,d.dtype,m);if(i){const b=ve({inputs:{x:g},backend:e,attrs:{shape:a.backend_util.expandShapeToKeepDim(h,l)}});return e.disposeIntermediateTensorInfo(g),b}return g}},Rv={kernelName:a.ArgMax,backendName:"cpu",kernelFunc:function Nv(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{axis:o}=s;Q(r,"argMax");let i=a.util.parseAxisParam(o,r.shape);const l=a.backend_util.getAxesPermutation(i,r.shape.length);let u=r;const c=[];null!=l&&(u=Qe({inputs:{x:r},backend:e,attrs:{perm:l}}),c.push(u),i=a.backend_util.getInnerMostAxes(i.length,u.shape.length)),i=[i[0]],a.backend_util.assertAxesAreInnerMostDims("argMax",i,u.shape.length);const[d,h]=a.backend_util.computeOutAndReduceShapes(u.shape,i),p=a.util.sizeFromShape(d),f=a.util.makeZerosTypedArray(p,"int32"),m=a.util.sizeFromShape(h),x=e.data.get(u.dataId).values;for(let g=0;g<f.length;++g){const y=g*m;let b=x[y],C=0;for(let v=0;v<m;++v){const w=x[y+v];w>b&&(b=w,C=v)}f[g]=C}return c.forEach(g=>e.disposeIntermediateTensorInfo(g)),e.makeTensorInfo(d,"int32",f)}},Dv={kernelName:a.ArgMin,backendName:"cpu",kernelFunc:function Av(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{axis:o}=s;Q(r,"argMin");let i=a.util.parseAxisParam(o,r.shape);const l=a.backend_util.getAxesPermutation(i,r.shape.length);let u=r;const c=[];null!=l&&(u=Qe({inputs:{x:r},backend:e,attrs:{perm:l}}),c.push(u),i=a.backend_util.getInnerMostAxes(i.length,u.shape.length)),i=[i[0]],a.backend_util.assertAxesAreInnerMostDims("argMin",i,u.shape.length);const[d,h]=a.backend_util.computeOutAndReduceShapes(u.shape,i),p=a.util.sizeFromShape(d),f=a.util.makeZerosTypedArray(p,"int32"),m=a.util.sizeFromShape(h),x=e.data.get(u.dataId).values;for(let g=0;g<f.length;++g){const y=g*m;let b=x[y],C=0;for(let v=0;v<m;++v){const w=x[y+v];w<b&&(b=w,C=v)}f[g]=C}return c.forEach(g=>e.disposeIntermediateTensorInfo(g)),e.makeTensorInfo(d,"int32",f)}},$v=fe(a.Asin,t=>Math.asin(t)),Ev={kernelName:a.Asin,backendName:"cpu",kernelFunc:$v},_v=fe(a.Asinh,t=>Math.asinh(t)),Fv={kernelName:a.Asinh,backendName:"cpu",kernelFunc:_v},Ov=fe(a.Atan,t=>Math.atan(t)),Pv={kernelName:a.Atan,backendName:"cpu",kernelFunc:Ov},zv=_e((t,n)=>Math.atan2(t,n)),Lv=Me(a.Atan2,zv),Mv={kernelName:a.Atan2,backendName:"cpu",kernelFunc:Lv},Bv=fe(a.Atanh,t=>Math.atanh(t)),Vv={kernelName:a.Atanh,backendName:"cpu",kernelFunc:Bv};function fi(t,n,e,s,r,o){const i=r.strideHeight,l=r.strideWidth,u=r.dilationHeight,c=r.dilationWidth,d=r.effectiveFilterHeight,h=r.effectiveFilterWidth,p=r.padInfo.top,f=r.padInfo.left,m="max"===o?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,x=(0,a.buffer)(r.outShape,e),g=x.values,y=r.outShape[1]*r.outShape[2]*r.outShape[3],b=r.outShape[2]*r.outShape[3],C=r.outShape[3];for(let v=0;v<r.batchSize;++v){const w=v*y,S=v*s[0];for(let I=0;I<r.inChannels;++I)for(let k=0;k<r.outHeight;++k){const N=k*i-p,T=Math.max(0,N),A=Math.min(r.inHeight,d+N),$=w+k*b;for(let F=0;F<r.outWidth;++F){const O=F*l-f,P=Math.max(0,O),z=Math.min(r.inWidth,h+O);let M=m,E=0,B=0;for(let U=T;U<A;U+=u){const H=S+U*s[1];for(let G=P;G<z;G+=c){const X=t[H+G*s[2]+I];"max"===o&&X>M?M=X:"avg"===o&&(E+=X,B++)}if(isNaN(M))break}g[$+F*C+I]="avg"===o?E/B:M}}}return x}function ju(t,n,e,s,r=!1,o=!1){const i=(0,a.buffer)(s.outShape,"int32"),l=s.strideHeight,u=s.strideWidth,c=s.dilationHeight,d=s.dilationWidth,h=s.effectiveFilterHeight,p=s.effectiveFilterWidth,f=s.padInfo.top,m=s.padInfo.left,x=(0,a.buffer)(n,e,t);for(let g=0;g<s.batchSize;++g)for(let y=0;y<s.inChannels;++y)for(let b=0;b<s.outHeight;++b){const C=b*l-f;let v=C;for(;v<0;)v+=c;const w=Math.min(s.inHeight,h+C);for(let S=0;S<s.outWidth;++S){const I=S*u-m;let k=I;for(;k<0;)k+=d;const N=Math.min(s.inWidth,p+I);let T=Number.NEGATIVE_INFINITY,A=-1;for(let $=v;$<w;$+=c){const F=$-C;for(let O=k;O<N;O+=d){const P=O-I,z=x.get(g,$,O,y);z>T&&(T=z,A=r?o?((g*s.inHeight+$)*s.inWidth+O)*s.inChannels+y:($*s.inWidth+O)*s.inChannels+y:F*p+P)}}i.set(A,g,b,S,y)}}return i}function Ku(t,n,e,s,r,o){const i=r.strideDepth,l=r.strideHeight,u=r.strideWidth,c=r.dilationDepth,d=r.dilationHeight,h=r.dilationWidth,p=r.effectiveFilterDepth,f=r.effectiveFilterHeight,m=r.effectiveFilterWidth,x=r.padInfo.front,g=r.padInfo.top,y=r.padInfo.left,b="max"===o?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,C=(0,a.buffer)(r.outShape,e),v=C.values,w=r.outShape[1]*r.outShape[2]*r.outShape[3]*r.outShape[4],S=r.outShape[2]*r.outShape[3]*r.outShape[4],I=r.outShape[3]*r.outShape[4],k=r.outShape[4];for(let N=0;N<r.batchSize;++N){const T=N*w,A=N*s[0];for(let $=0;$<r.inChannels;++$)for(let F=0;F<r.outDepth;++F){const O=F*i-x;let P=O;for(;P<0;)P+=c;const z=Math.min(r.inDepth,p+O),M=T+F*S;for(let E=0;E<r.outHeight;++E){const B=E*l-g;let W=B;for(;W<0;)W+=d;const U=Math.min(r.inHeight,f+B),H=M+E*I;for(let G=0;G<r.outWidth;++G){const q=G*u-y;let X=q;for(;X<0;)X+=h;const Y=Math.min(r.inWidth,m+q),ee=H+G*k;let re=b,ne=0,ae=0;for(let me=P;me<z;me+=c){const Ce=A+me*s[1];for(let De=W;De<U;De+=d){const we=Ce+De*s[2];for(let ye=X;ye<Y;ye+=h){const Ne=t[we+ye*s[3]+$];if("max"===o&&Ne>re?re=Ne:"avg"===o&&(ne+=Ne,ae++),isNaN(re))break}if(isNaN(re))break}if(isNaN(re))break}v[ee+$]="avg"===o?ne/Math.max(ae,1):re}}}}return C}const Gv={kernelName:a.AvgPool,backendName:"cpu",kernelFunc:function Uv(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n;Q(r,"avgPool");const{filterSize:o,strides:i,pad:l,dimRoundingMode:u}=s;a.util.assert(a.backend_util.eitherStridesOrDilationsAreOne(i,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`);const d=a.backend_util.computePool2DInfo(r.shape,o,i,1,l,u);let h;if(1===d.filterWidth&&1===d.filterHeight&&a.util.arraysEqual(d.inShape,d.outShape))h=zt({inputs:{x:r},backend:e});else{const p=e.data.get(r.dataId).values,f=a.util.computeStrides(r.shape),m=fi(p,0,r.dtype,f,d,"avg");h=e.makeTensorInfo(d.outShape,r.dtype,m.values)}return h}},Xv={kernelName:a.AvgPool3D,backendName:"cpu",kernelFunc:function Hv(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{filterSize:o,strides:i,pad:l,dimRoundingMode:u,dataFormat:c}=s;Q(r,"avgPool3d");const d=a.backend_util.computePool3DInfo(r.shape,o,i,1,l,u,c),p=Ku(e.data.get(r.dataId).values,0,r.dtype,a.util.computeStrides(r.shape),d,"avg");return e.makeTensorInfo(p.shape,"float32",p.values)}},Kv={kernelName:a.AvgPool3DGrad,backendName:"cpu",kernelFunc:function jv(t){const{inputs:n,backend:e,attrs:s}=t,{dy:r,input:o}=n,{filterSize:i,strides:l,pad:u,dimRoundingMode:c}=s;Q([r,o],"avgPool3DGrad");const d=a.backend_util.computePool3DInfo(o.shape,i,l,1,u,c),h=d.strideDepth,p=d.strideHeight,f=d.strideWidth,m=d.filterDepth,x=d.filterHeight,g=d.filterWidth,y=d.dilationDepth,b=d.dilationHeight,C=d.dilationWidth,v=d.effectiveFilterDepth,w=d.effectiveFilterHeight,S=d.effectiveFilterWidth,I=v-1-d.padInfo.front,k=S-1-d.padInfo.left,N=w-1-d.padInfo.top,T=(0,a.buffer)(o.shape,"float32"),A=1/(m*x*g),$=e.bufferSync(r);for(let F=0;F<d.batchSize;++F)for(let O=0;O<d.inChannels;++O)for(let P=0;P<d.inDepth;++P)for(let z=0;z<d.inHeight;++z)for(let M=0;M<d.inWidth;++M){const E=P-I,B=z-N,W=M-k;let U=0;for(let H=0;H<v;H+=y){const G=(E+H)/h;if(!(G<0||G>=d.outDepth||Math.floor(G)!==G))for(let q=0;q<w;q+=b){const X=(B+q)/p;if(!(X<0||X>=d.outHeight||Math.floor(X)!==X))for(let Y=0;Y<S;Y+=C){const ee=(W+Y)/f;ee<0||ee>=d.outWidth||Math.floor(ee)!==ee||(U+=$.get(F,G,X,ee,O))}}}T.set(U*A,F,P,z,M,O)}return e.makeTensorInfo(T.shape,T.dtype,T.values)}},Zv={kernelName:a.AvgPoolGrad,backendName:"cpu",kernelFunc:function qv(t){const{inputs:n,backend:e,attrs:s}=t,{dy:r,input:o}=n,i=o;Q([r,o],"avgPoolGrad");const{filterSize:l,strides:u,pad:c}=s,d=a.backend_util.computePool2DInfo(i.shape,l,u,1,c),h=d.strideHeight,p=d.strideWidth,f=d.filterHeight,m=d.filterWidth,x=d.dilationHeight,g=d.dilationWidth,y=d.effectiveFilterHeight,b=d.effectiveFilterWidth,C=b-1-d.padInfo.left,v=y-1-d.padInfo.top,w=(0,a.buffer)(i.shape,"float32"),S=1/(f*m),I=e.data.get(r.dataId).values,k=(0,a.buffer)(r.shape,"float32",I);for(let N=0;N<d.batchSize;++N)for(let T=0;T<d.inChannels;++T)for(let A=0;A<d.inHeight;++A)for(let $=0;$<d.inWidth;++$){const F=A-v,O=$-C;let P=0;for(let z=0;z<y;z+=x){const M=(F+z)/h;if(!(M<0||M>=d.outHeight||Math.floor(M)!==M))for(let E=0;E<b;E+=g){const B=(O+E)/p;B<0||B>=d.outWidth||Math.floor(B)!==B||(P+=k.get(N,M,B,T))}}w.set(P*S,N,A,$,T)}return e.makeTensorInfo(w.shape,w.dtype,w.values)}},Qv={kernelName:a.FusedBatchNorm,backendName:"cpu",kernelFunc:function Yv(t){const{inputs:n,backend:e,attrs:s}=t,{x:r,scale:o,offset:i,mean:l,variance:u}=n;a.util.assert(l.shape.length===u.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),a.util.assert(null==i||l.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),a.util.assert(null==o||l.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks."),Q([r,l,u,o,i],"batchNorm");let{varianceEpsilon:c}=s;null==c&&(c=.001);const d=e.data.get(r.dataId).values,h=e.data.get(l.dataId).values,p=e.data.get(u.dataId).values,f=o?e.data.get(o.dataId).values:new Float32Array([1]),m=i?e.data.get(i.dataId).values:new Float32Array([0]),x=new Float32Array(d.length),g=m.length,y=f.length,b=p.length,C=h.length;let v=0,w=0,S=0,I=0;for(let k=0;k<d.length;++k)x[k]=m[v++]+(d[k]-h[w++])*f[S++]/Math.sqrt(p[I++]+c),v>=g&&(v=0),w>=C&&(w=0),S>=y&&(S=0),I>=b&&(I=0);return e.makeTensorInfo(r.shape,r.dtype,x)}};function qu(t,n,e,s,r){const o=a.slice_util.isSliceContinous(s,n,e),i=a.util.sizeFromShape(e),l=a.util.computeStrides(s);if(o){const h=a.slice_util.computeFlatOffset(n,l);return"string"===r?t.slice(h,h+i):t.subarray(h,h+i)}const u="string"===r?a.backend_util.fromUint8ToStringArray(t):t,c=(0,a.buffer)(s,r,u),d=(0,a.buffer)(e,r);for(let h=0;h<d.size;++h){const p=d.indexToLoc(h),f=p.map((m,x)=>m+n[x]);d.set(c.get(...f),...p)}return"string"===r?a.backend_util.fromStringArrayToUint8(d.values):d.values}function In(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{begin:o,size:i}=s;Q(r,"slice");const[l,u]=a.slice_util.parseSliceParams(r,o,i);a.slice_util.assertParamsValid(r,l,u);const d=qu(e.data.get(r.dataId).values,l,u,r.shape,r.dtype);return e.makeTensorInfo(u,r.dtype,d)}const Jv={kernelName:a.Slice,backendName:"cpu",kernelFunc:In},tC={kernelName:a.BatchToSpaceND,backendName:"cpu",kernelFunc:function eC(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{blockShape:o,crops:i}=s;Q([r],"batchToSpaceND");const l=o.reduce((y,b)=>y*b),u=a.backend_util.getReshaped(r.shape,o,l),c=a.backend_util.getPermuted(u.length,o.length),d=a.backend_util.getReshapedPermuted(r.shape,o,l),h=a.backend_util.getSliceBeginCoords(i,o.length),p=a.backend_util.getSliceSize(d,i,o.length),f=ve({inputs:{x:r},backend:e,attrs:{shape:u}}),m=Qe({inputs:{x:f},backend:e,attrs:{perm:c}}),x=ve({inputs:{x:m},backend:e,attrs:{shape:d}}),g=In({inputs:{x},backend:e,attrs:{begin:h,size:p}});return e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(x),g}};function mi(t,n,e,s,r){const o=a.util.sizeFromShape(s),i=a.util.makeZerosTypedArray(r,e);for(let l=0;l<t.length;l++){const u=t[l];if(u<0)throw new Error("Input x must be non-negative!");u>=r||(i[u]+=o>0?n[l]:1)}return i}function Zu(t,n,e,s=!1){const r=t.shape[0],o=t.shape[1],i=(0,a.buffer)([r,e],n.dtype);for(let l=0;l<r;l++)for(let u=0;u<o;u++){const c=t.get(l,u);if(c<0)throw new Error("Input x must be non-negative!");c>=e||i.set(s?1:n.size>0?i.get(l,c)+n.get(l,u):i.get(l,c)+1,l,c)}return i}const sC={kernelName:a.Bincount,backendName:"cpu",kernelFunc:function nC(t){const{inputs:n,backend:e,attrs:s}=t,{x:r,weights:o}=n,{size:i}=s,c=mi(e.data.get(r.dataId).values,e.data.get(o.dataId).values,o.dtype,o.shape,i);return e.makeTensorInfo([i],o.dtype,c)}},Yu=_e((t,n)=>t&n),rC=Me(a.BitwiseAnd,Yu),oC={kernelName:a.BitwiseAnd,backendName:"cpu",kernelFunc:rC},aC={kernelName:a.BroadcastArgs,backendName:"cpu",kernelFunc:function iC(t){const{inputs:n,backend:e}=t,{s0:s,s1:r}=n,o=e.data.get(s.dataId).values,i=e.data.get(r.dataId).values,l=a.backend_util.assertAndGetBroadcastShape(Array.from(o),Array.from(i));return e.makeTensorInfo([l.length],"int32",Int32Array.from(l))}},Qu=Pt(t=>Math.ceil(t)),lC=rn(a.Ceil,Qu),uC={kernelName:a.Ceil,backendName:"cpu",kernelFunc:lC},cC=fe(a.ClipByValue,(t,n)=>t>n.clipValueMax?n.clipValueMax:t<n.clipValueMin?n.clipValueMin:t),dC={kernelName:a.ClipByValue,backendName:"cpu",kernelFunc:cC},pC={kernelName:a.ComplexAbs,backendName:"cpu",kernelFunc:t=>{const{x:n}=t.inputs,e=t.backend,s=new Float32Array(a.util.sizeFromShape(n.shape)),r=e.data.get(n.dataId),i=r.complexTensorInfos.imag,l=e.data.get(r.complexTensorInfos.real.dataId).values,u=e.data.get(i.dataId).values;for(let c=0;c<l.length;c++)s[c]=Math.hypot(l[c],u[c]);return e.makeOutput(s,n.shape,"float32")}};function Ju(t,n,e,s){const r=a.util.getArrayFromDType(e,a.util.sizeFromShape(n));if(s&&"string"!==e){let o=0;t.forEach(i=>{const l=a.util.sizeFromShape(i.shape);r.set(i.vals,o),o+=l})}else{let o=0;t.forEach(i=>{const l="string"===e?a.backend_util.fromUint8ToStringArray(i.vals):i.vals;let u=0;for(let c=0;c<i.shape[0];++c){const d=c*n[1]+o;for(let h=0;h<i.shape[1];++h)r[d+h]=l[u++]}o+=i.shape[1]})}return r}function Kn(t){const{inputs:n,backend:e}=t,{input:s}=n,r=e.data.get(s.dataId).complexTensorInfos.imag,o=e.data.get(r.dataId).values;return e.makeTensorInfo(r.shape,r.dtype,o)}const fC={kernelName:a.Imag,backendName:"cpu",kernelFunc:Kn};function qn(t){const{inputs:n,backend:e,attrs:s}=t,{axis:r}=s,o=a.util.parseAxisParam(r,n[0].shape)[0],i=n.map(x=>x.shape);a.backend_util.assertParamsConsistent(i,o);let l=a.backend_util.computeOutShape(n.map(x=>x.shape),o);if(0===a.util.sizeFromShape(l))return e.makeTensorInfo(l,n[0].dtype,[]);const u=n.filter(x=>a.util.sizeFromShape(x.shape)>0);if(1===u.length)return zt({inputs:{x:u[0]},backend:e});if("complex64"===u[0].dtype){const x=u.map(v=>Sn({inputs:{input:v},backend:e})),g=u.map(v=>Kn({inputs:{input:v},backend:e})),y=qn({inputs:x,backend:e,attrs:{axis:o}}),b=qn({inputs:g,backend:e,attrs:{axis:o}}),C=Je({inputs:{real:y,imag:b},backend:e});return x.forEach(v=>e.disposeIntermediateTensorInfo(v)),g.forEach(v=>e.disposeIntermediateTensorInfo(v)),e.disposeIntermediateTensorInfo(y),e.disposeIntermediateTensorInfo(b),C}const c=u.map(x=>{const y=[-1,a.util.sizeFromShape(x.shape.slice(o))];return ve({inputs:{x},backend:e,attrs:{shape:y}})}),d=c.map(x=>({vals:e.data.get(x.dataId).values,shape:x.shape}));l=a.backend_util.computeOutShape(c.map(x=>x.shape),1);const p=Ju(d,l,n[0].dtype,1===c[0].shape[0]),f=a.backend_util.computeOutShape(u.map(x=>x.shape),o),m=e.makeTensorInfo(f,n[0].dtype,p);return c.forEach(x=>e.disposeIntermediateTensorInfo(x)),m}const mC={kernelName:a.Concat,backendName:"cpu",kernelFunc:qn};function ec(t){const{inputs:n,backend:e,attrs:s}=t,{x:r,filter:o}=n,{strides:i,pad:l,dataFormat:u,dilations:c,dimRoundingMode:d}=s;Q([r,o],"conv2d");const h=a.backend_util.convertConv2DDataFormat(u),p=a.backend_util.computeConv2DInfo(r.shape,o.shape,i,c,l,d,!1,h),f=p.filterHeight,m=p.filterWidth,x=p.dilationHeight,g=p.dilationWidth,y=p.padInfo.left,b=p.padInfo.top,C="channelsLast"===p.dataFormat,v=new a.TensorBuffer(p.outShape,r.dtype),w=a.util.computeStrides(r.shape),S=a.util.computeStrides(o.shape),I=w[0],k=C?w[1]:w[2],N=C?w[2]:1,T=C?1:w[1],A=v.strides[0],$=C?v.strides[1]:v.strides[2],F=C?v.strides[2]:1,O=C?1:v.strides[1],P=e.data.get(r.dataId).values,z=e.data.get(o.dataId).values,M=v.values;for(let E=0;E<p.batchSize;++E){const B=E*I,W=E*A;for(let U=0;U<p.outHeight;++U){const H=W+U*$,G=U*p.strideHeight-b;for(let q=0;q<f;++q){const X=G+q*x;if(X<0||X>=p.inHeight)continue;const Y=q*S[0],ee=B+X*k;for(let re=0;re<p.outWidth;++re){const ne=H+re*F,ae=re*p.strideWidth-y;for(let le=0;le<m;++le){const me=ae+le*g;if(me<0||me>=p.inWidth)continue;const De=ee+me*N;let we=Y+le*S[1];for(let ye=0;ye<p.inChannels;++ye){const Ae=P[De+ye*T];for(let Ne=0;Ne<p.outChannels;++Ne)M[ne+Ne*O]+=Ae*z[we+Ne];we+=p.outChannels}}}}}}return e.makeTensorInfo(v.shape,v.dtype,M)}const gC={kernelName:a.Conv2D,backendName:"cpu",kernelFunc:ec},yC={kernelName:a.Conv2DBackpropFilter,backendName:"cpu",kernelFunc:function xC(t){const{inputs:n,backend:e,attrs:s}=t,{x:r,dy:o}=n,{strides:i,pad:l,dataFormat:u,dimRoundingMode:c,filterShape:d}=s;Q([r,o],"conv2dBackpropFilter");const h=a.backend_util.convertConv2DDataFormat(u),p=a.backend_util.computeConv2DInfo(r.shape,d,i,1,l,c,!1,h),{strideHeight:f,strideWidth:m,filterHeight:x,filterWidth:g}=p,y="channelsLast"===p.dataFormat,b=new a.TensorBuffer(p.filterShape,"float32"),C=p.padInfo.left,v=p.padInfo.top,w=e.data.get(r.dataId).values,S=e.data.get(o.dataId).values,I=new a.TensorBuffer(r.shape,r.dtype,w),k=new a.TensorBuffer(o.shape,o.dtype,S);for(let N=0;N<x;++N){const T=Math.max(0,Math.ceil((v-N)/f)),A=Math.min(p.outHeight,(p.inHeight+v-N)/f);for(let $=0;$<g;++$){const F=Math.max(0,Math.ceil((C-$)/m)),O=Math.min(p.outWidth,(p.inWidth+C-$)/m);for(let P=0;P<p.inChannels;++P)for(let z=0;z<p.outChannels;++z){let M=0;for(let E=0;E<p.batchSize;++E)for(let B=T;B<A;++B){const W=N+B*f-v;for(let U=F;U<O;++U){const H=$+U*m-C;M+=y?I.get(E,W,H,P)*k.get(E,B,U,z):I.get(E,P,W,H)*k.get(E,z,B,U)}}b.set(M,N,$,P,z)}}}return e.makeTensorInfo(b.shape,b.dtype,b.values)}},vC={kernelName:a.Conv2DBackpropInput,backendName:"cpu",kernelFunc:function bC(t){const{inputs:n,backend:e,attrs:s}=t,{dy:r,filter:o}=n,{inputShape:i,strides:l,pad:u,dataFormat:c,dimRoundingMode:d}=s;Q([r,o],"conv2dBackpropInput");const h=a.util.computeStrides(o.shape),p=a.util.computeStrides(r.shape);let f=a.backend_util.convertConv2DDataFormat(c);const m=a.backend_util.computeConv2DInfo(i,o.shape,l,1,u,d,!1,f),x=new a.TensorBuffer(m.inShape,"float32"),g=x.values,y=e.data.get(r.dataId).values,b=e.data.get(o.dataId).values,[C,v,w]=h,{batchSize:S,filterHeight:I,filterWidth:k,inChannels:N,inHeight:T,inWidth:A,outChannels:$,outHeight:F,outWidth:O,strideHeight:P,strideWidth:z}=m;f=m.dataFormat;const M=I-1-m.padInfo.top,E=k-1-m.padInfo.left,B="channelsLast"===f,W=x.strides[0],U=B?x.strides[1]:x.strides[2],H=B?x.strides[2]:1,G=B?1:x.strides[1],q=p[0],X=B?p[1]:p[2],Y=B?p[2]:1,ee=B?1:p[1];for(let re=0;re<S;++re)for(let ne=0;ne<N;++ne)for(let ae=0;ae<T;++ae){const le=ae-M,me=Math.max(0,Math.ceil(le/P)),Ce=Math.min(F,(I+le)/P);for(let De=0;De<A;++De){const we=De-E,ye=Math.max(0,Math.ceil(we/z)),Ae=Math.min(O,(k+we)/z);let Ne=0;for(let We=me;We<Ce;++We){const dn=We*P-le;for(let it=ye;it<Ae;++it){const kt=q*re+X*We+Y*it,Xt=C*(I-1-dn)+v*(k-1-(it*z-we))+w*ne;for(let hn=0;hn<$;++hn)Ne+=y[kt+ee*hn]*b[Xt+hn]}}g[W*re+U*ae+H*De+G*ne]=Ne}}return e.makeTensorInfo(x.shape,x.dtype,x.values)}},wC={kernelName:a.Conv3D,backendName:"cpu",kernelFunc:function CC(t){const{inputs:n,backend:e,attrs:s}=t,{x:r,filter:o}=n,{strides:i,pad:l,dilations:u}=s;Q([r,o],"conv3d");const c=a.backend_util.computeConv3DInfo(r.shape,o.shape,i,u,l),{filterDepth:d,filterHeight:h,filterWidth:p,dilationDepth:f,dilationHeight:m,dilationWidth:x,padInfo:g}=c,y=g.front,b=g.left,C=g.top,v=new a.TensorBuffer(c.outShape,r.dtype),w=e.data.get(r.dataId).values,S=e.data.get(o.dataId).values,I=v.values,k=a.util.computeStrides(r.shape),N=a.util.computeStrides(o.shape);for(let T=0;T<c.batchSize;++T){const A=T*k[0],$=T*v.strides[0];for(let F=0;F<c.outDepth;++F){const O=$+F*v.strides[1],P=F*c.strideDepth-y;for(let z=0;z<d;++z){const M=P+z*f;if(M<0||M>=c.inDepth)continue;const E=z*N[0],B=A+M*k[1];for(let W=0;W<c.outHeight;++W){const U=O+W*v.strides[2],H=W*c.strideHeight-C;for(let G=0;G<h;++G){const q=H+G*m;if(q<0||q>=c.inHeight)continue;const X=E+G*N[1],Y=B+q*k[2];for(let ee=0;ee<c.outWidth;++ee){const re=U+ee*c.outChannels,ne=ee*c.strideWidth-b;for(let ae=0;ae<p;++ae){const le=ne+ae*x;if(le<0||le>=c.inWidth)continue;const Ce=Y+le*c.inChannels;let De=X+ae*N[2];for(let we=0;we<c.inChannels;++we){const ye=w[Ce+we];for(let Ae=0;Ae<c.outChannels;++Ae)I[re+Ae]+=ye*S[De+Ae];De+=c.outChannels}}}}}}}}return e.makeTensorInfo(v.shape,v.dtype,v.values)}},IC={kernelName:a.Conv3DBackpropFilterV2,backendName:"cpu",kernelFunc:function SC(t){const{inputs:n,backend:e,attrs:s}=t,{x:r,dy:o}=n,{strides:i,pad:l,filterShape:u}=s;Q([r,o],"conv3dBackpropFilterV2");const c=a.util.computeStrides(r.shape),d=a.util.computeStrides(o.shape),h=a.backend_util.computeConv3DInfo(r.shape,u,i,1,l),p=h.strideDepth,f=h.strideHeight,m=h.strideWidth,x=h.filterDepth,g=h.filterHeight,y=h.filterWidth,b=new a.TensorBuffer(h.filterShape,"float32"),C=b.values,[v,w,S,I]=b.strides,k=e.data.get(o.dataId).values,[N,T,A,$]=d,F=e.data.get(r.dataId).values,[O,P,z,M]=c,E=h.padInfo.front,B=h.padInfo.left,W=h.padInfo.top;for(let U=0;U<x;++U){const H=Math.max(0,Math.ceil((E-U)/p)),G=Math.min(h.outDepth,(h.inDepth+E-U)/p),q=U*v;for(let X=0;X<g;++X){const Y=Math.max(0,Math.ceil((W-X)/f)),ee=Math.min(h.outHeight,(h.inHeight+W-X)/f),re=X*w+q;for(let ne=0;ne<y;++ne){const ae=Math.max(0,Math.ceil((B-ne)/m)),le=Math.min(h.outWidth,(h.inWidth+B-ne)/m),me=ne*S+re;for(let Ce=0;Ce<h.inChannels;++Ce){const De=Ce*I+me;for(let we=0;we<h.outChannels;++we){let ye=0;for(let Ae=0;Ae<h.batchSize;++Ae){const Ne=Ae*O,Ht=Ae*N;for(let We=H;We<G;++We){const it=(U+We*p-E)*P+Ne,En=We*T+Ht;for(let kt=Y;kt<ee;++kt){const hn=(X+kt*f-W)*z+it,pn=kt*A+En;for(let fn=ae;fn<le;++fn)ye+=F[(ne+fn*m-B)*M+hn+Ce]*k[fn*$+pn+we]}}}C[De+we]=ye}}}}}return e.makeTensorInfo(b.shape,b.dtype,b.values)}},TC={kernelName:a.Conv3DBackpropInputV2,backendName:"cpu",kernelFunc:function kC(t){const{inputs:n,backend:e,attrs:s}=t,{dy:r,filter:o}=n,{pad:i,strides:l,inputShape:u}=s;Q([r],"conv3dBackpropInputV2");const c=a.util.computeStrides(r.shape),d=a.util.computeStrides(o.shape),h=a.backend_util.computeConv3DInfo(u,o.shape,l,1,i),p=new a.TensorBuffer(h.inShape,"float32"),f=p.values,[m,x,g,y]=p.strides,b=e.data.get(r.dataId).values,[C,v,w,S]=c,I=e.data.get(o.dataId).values,[k,N,T,A]=d,{batchSize:$,filterDepth:F,filterHeight:O,filterWidth:P,inChannels:z,inDepth:M,inHeight:E,inWidth:B,outChannels:W,outDepth:U,outHeight:H,outWidth:G,strideDepth:q,strideHeight:X,strideWidth:Y}=h,ee=F-1-h.padInfo.front,re=O-1-h.padInfo.top,ne=P-1-h.padInfo.left;for(let ae=0;ae<$;++ae)for(let le=0;le<z;++le)for(let me=0;me<M;++me){const Ce=me-ee,De=Math.max(0,Math.ceil(Ce/q)),we=Math.min(U,(F+Ce)/q);for(let ye=0;ye<E;++ye){const Ae=ye-re,Ne=Math.max(0,Math.ceil(Ae/X)),Ht=Math.min(H,(O+Ae)/X);for(let We=0;We<B;++We){const dn=We-ne,it=Math.max(0,Math.ceil(dn/Y)),En=Math.min(G,(P+dn)/Y);let kt=0;for(let Xt=De;Xt<we;++Xt){const hn=Xt*q-Ce;for(let pn=Ne;pn<Ht;++pn){const fn=pn*X-Ae;for(let Fs=it;Fs<En;++Fs){const Wi=C*ae+v*Xt+w*pn+S*Fs,ZO=k*(F-1-hn)+N*(O-1-fn)+T*(P-1-(Fs*Y-dn))+A*le;for(let Jr=0;Jr<W;++Jr)kt+=b[Wi+Jr]*I[ZO+Jr]}}}f[m*ae+x*me+g*ye+y*We+le]=kt}}}return e.makeTensorInfo(p.shape,p.dtype,p.values)}},NC=fe(a.Cos,t=>Math.cos(t)),RC={kernelName:a.Cos,backendName:"cpu",kernelFunc:NC},AC=fe(a.Cosh,t=>Math.cosh(t)),DC={kernelName:a.Cosh,backendName:"cpu",kernelFunc:AC},EC={kernelName:a.CropAndResize,backendName:"cpu",kernelFunc:function $C(t){const{inputs:n,backend:e,attrs:s}=t,{image:r,boxes:o,boxInd:i}=n,{cropSize:l,method:u,extrapolationValue:c}=s,[d,h,p,f]=r.shape,m=o.shape[0],[x,g]=l,y=(0,a.buffer)([m,x,g,f],"float32"),b=e.data.get(o.dataId).values,C=e.data.get(i.dataId).values,v=e.data.get(r.dataId).values,w=a.util.computeStrides(r.shape),S=a.util.computeStrides(y.shape);for(let I=0;I<m;I++){const k=4*I,N=b[k],T=b[k+1],A=b[k+2],$=b[k+3],F=C[I];if(F>=d)continue;const O=x>1?(A-N)*(h-1)/(x-1):0,P=g>1?($-T)*(p-1)/(g-1):0;for(let z=0;z<x;z++){const M=x>1?N*(h-1)+z*O:.5*(N+A)*(h-1);if(M<0||M>h-1)for(let E=0;E<g;E++)for(let B=0;B<f;B++)y.values[B+E*S[2]+z*S[1]+I*S[0]]=c;else if("bilinear"===u){const E=Math.floor(M),B=Math.ceil(M),W=M-E;for(let U=0;U<g;U++){const H=g>1?T*(p-1)+U*P:.5*(T+$)*(p-1);if(H<0||H>p-1){for(let Y=0;Y<f;Y++)y.values[Y+U*S[2]+z*S[1]+I*S[0]]=c;continue}const G=Math.floor(H),q=Math.ceil(H),X=H-G;for(let Y=0;Y<f;Y++){let ee=Y+G*w[2]+E*w[1]+F*w[0];const re=v[ee];ee=Y+q*w[2]+E*w[1]+F*w[0];const ne=v[ee];ee=Y+G*w[2]+B*w[1]+F*w[0];const ae=v[ee];ee=Y+q*w[2]+B*w[1]+F*w[0];const le=v[ee],me=re+(ne-re)*X;ee=Y+U*S[2]+z*S[1]+I*S[0],y.values[ee]=me+(ae+(le-ae)*X-me)*W}}}else for(let E=0;E<g;++E){const B=g>1?T*(p-1)+E*P:.5*(T+$)*(p-1);if(B<0||B>p-1){for(let H=0;H<f;H++)y.values[H+E*S[2]+z*S[1]+I*S[0]]=c;continue}const W=Math.round(B),U=Math.round(M);for(let H=0;H<f;H++)y.values[H+E*S[2]+z*S[1]+I*S[0]]=v[H+W*w[2]+U*w[1]+F*w[0]]}}}return e.makeTensorInfo(y.shape,y.dtype,y.values)}},FC={kernelName:a.Cumprod,backendName:"cpu",kernelFunc:function _C(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{axis:o,exclusive:i,reverse:l}=s;Q(r,"cumprod");const u=a.backend_util.getAxesPermutation([o],r.shape.length);let c=r;null!=u&&(c=Qe({inputs:{x:r},backend:e,attrs:{perm:u}}));const d=a.backend_util.getInnerMostAxes(1,r.shape.length)[0];if(d!==c.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${c.shape.length-1} but got axis=${d}`);const h=(0,a.upcastType)(c.dtype,"int32"),p=a.util.makeOnesTypedArray(a.util.sizeFromShape(c.shape),h),f=e.data.get(c.dataId).values,m=c.shape[c.shape.length-1],x=l?(y,b)=>y+m-b-1:(y,b)=>y+b;for(let y=0;y<f.length;y+=m)for(let b=0;b<m;b++){const C=x(y,b);if(0===b)p[C]=i?1:f[C];else{const v=x(y,b-1);p[C]=i?f[v]*p[v]:f[C]*p[v]}}const g=e.makeTensorInfo(c.shape,h,p);if(null!=u){const b=Qe({inputs:{x:g},backend:e,attrs:{perm:a.backend_util.getUndoAxesPermutation(u)}});return e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(c),b}return g}},PC={kernelName:a.Cumsum,backendName:"cpu",kernelFunc:function OC(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{axis:o,exclusive:i,reverse:l}=s;Q(r,"cumsum");const u=a.backend_util.getAxesPermutation([o],r.shape.length);let c=r;null!=u&&(c=Qe({inputs:{x:r},backend:e,attrs:{perm:u}}));const d=a.backend_util.getInnerMostAxes(1,r.shape.length)[0];if(d!==c.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${c.shape.length-1} but got axis=${d}`);const h=(0,a.upcastType)(c.dtype,"int32"),p=a.util.makeZerosTypedArray(a.util.sizeFromShape(c.shape),h),f=e.data.get(c.dataId).values,m=c.shape[c.shape.length-1],x=l?(y,b)=>y+m-b-1:(y,b)=>y+b;for(let y=0;y<f.length;y+=m)for(let b=0;b<m;b++){const C=x(y,b);if(0===b)p[C]=i?0:f[C];else{const v=x(y,b-1);p[C]=i?f[v]+p[v]:f[C]+p[v]}}const g=e.makeTensorInfo(c.shape,h,p);if(null!=u){const b=Qe({inputs:{x:g},backend:e,attrs:{perm:a.backend_util.getUndoAxesPermutation(u)}});return e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(c),b}return g}},LC={kernelName:a.DenseBincount,backendName:"cpu",kernelFunc:function zC(t){const{inputs:n,backend:e,attrs:s}=t,{x:r,weights:o}=n,{size:i,binaryOutput:l}=s;if(1===r.shape.length){const d=mi(e.data.get(r.dataId).values,e.data.get(o.dataId).values,o.dtype,o.shape,i);return e.makeTensorInfo([i],o.dtype,d)}if(2===r.shape.length){const d=Zu(e.bufferSync(r),e.bufferSync(o),i,l);return e.makeTensorInfo(d.shape,o.dtype,d.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}},BC={kernelName:a.DepthToSpace,backendName:"cpu",kernelFunc:function MC(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{blockSize:o,dataFormat:i}=s;a.util.assert("NHWC"===i,()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`);const l=r.shape[0],u=r.shape[1],c=r.shape[2],d=r.shape[3],h=u*o,p=c*o,f=d/(o*o),m=e.data.get(r.dataId).values,x=new Float32Array(l*h*p*f);let g=0;for(let y=0;y<l;++y)for(let b=0;b<h;++b){const C=Math.floor(b/o),v=b%o;for(let w=0;w<p;++w){const S=Math.floor(w/o),k=(v*o+w%o)*f;for(let N=0;N<f;++N)x[g++]=m[N+k+d*(S+c*(C+u*y))]}}return e.makeTensorInfo([l,h,p,f],r.dtype,x)}};function tc(t){const{inputs:n,backend:e,attrs:s}=t,{x:r,filter:o}=n,{strides:i,pad:l,dilations:u,dimRoundingMode:c}=s;Q([r,o],"depthwiseConv2DNative");const d=a.util.computeStrides(r.shape),h=a.util.computeStrides(o.shape);let p=u;null==p&&(p=[1,1]),a.util.assert(a.backend_util.eitherStridesOrDilationsAreOne(i,p),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${p}'`);const f=a.backend_util.computeConv2DInfo(r.shape,o.shape,i,p,l,c,!0),{filterHeight:m,filterWidth:x,dilationHeight:g,dilationWidth:y,padInfo:b}=f,C=b.left,v=b.top,w=f.outChannels/f.inChannels,S=new a.TensorBuffer(f.outShape,r.dtype),I=e.data.get(r.dataId).values,k=e.data.get(o.dataId).values,N=S.values;for(let T=0;T<f.batchSize;++T){const A=T*d[0],$=T*S.strides[0];for(let F=0;F<f.outHeight;++F){const O=$+F*S.strides[1],P=F*f.strideHeight-v;for(let z=0;z<m;++z){const M=P+z*g;if(M<0||M>=f.inHeight)continue;const E=z*h[0],B=A+M*d[1];for(let W=0;W<f.outWidth;++W){const U=O+W*S.strides[2],H=W*f.strideWidth-C;for(let G=0;G<x;++G){const q=H+G*y;if(q<0||q>=f.inWidth)continue;const Y=B+q*f.inChannels;let ee=U,re=E+G*h[1];for(let ne=0;ne<f.inChannels;++ne){const ae=I[Y+ne];for(let le=0;le<w;++le)N[ee+le]+=ae*k[re+le];ee+=w,re+=w}}}}}}return e.makeTensorInfo(S.shape,S.dtype,S.values)}const VC={kernelName:a.DepthwiseConv2dNative,backendName:"cpu",kernelFunc:tc},UC={kernelName:a.DepthwiseConv2dNativeBackpropFilter,backendName:"cpu",kernelFunc:function WC(t){const{inputs:n,backend:e,attrs:s}=t,{x:r,dy:o}=n,{strides:i,dilations:l,pad:u,dimRoundingMode:c,filterShape:d}=s;Q([r,o],"depthwiseConv2dNativeBackpropFilter");const h=a.backend_util.computeConv2DInfo(r.shape,d,i,l,u,c,!0),{strideHeight:p,strideWidth:f,filterHeight:m,filterWidth:x}=h,g=new a.TensorBuffer(h.filterShape,"float32"),y=h.padInfo.left,b=h.padInfo.top,C=h.outChannels/h.inChannels,v=e.data.get(r.dataId).values,w=new a.TensorBuffer(r.shape,r.dtype,v),S=e.data.get(o.dataId).values,I=new a.TensorBuffer(o.shape,o.dtype,S);for(let k=0;k<m;++k){const N=Math.max(0,Math.ceil((b-k)/p)),T=Math.min(h.outHeight,(h.inHeight+b-k)/p);for(let A=0;A<x;++A){const $=Math.max(0,Math.ceil((y-A)/f)),F=Math.min(h.outWidth,(h.inWidth+y-A)/f);for(let O=0;O<h.outChannels;++O){const P=Math.trunc(O/C),z=O%C;let M=0;for(let E=0;E<h.batchSize;++E)for(let B=N;B<T;++B){const W=k+B*p-b;for(let U=$;U<F;++U)M+=w.get(E,W,A+U*f-y,P)*I.get(E,B,U,O)}g.set(M,k,A,P,z)}}}return e.makeTensorInfo(g.shape,g.dtype,g.values)}},HC={kernelName:a.DepthwiseConv2dNativeBackpropInput,backendName:"cpu",kernelFunc:function GC(t){const{inputs:n,backend:e,attrs:s}=t,{dy:r,filter:o}=n,{strides:i,dilations:l,pad:u,dimRoundingMode:c,inputShape:d}=s;Q([r,o],"depthwiseConv2DNativeBackpropInput");const h=a.util.computeStrides(r.shape),p=a.util.computeStrides(o.shape),f=a.backend_util.computeConv2DInfo(d,o.shape,i,l,u,c,!0),m=new a.TensorBuffer(f.inShape,"float32"),x=m.values,[g,y,b]=m.strides,C=e.data.get(r.dataId).values,[v,w,S]=h,I=e.data.get(o.dataId).values,[k,N,T]=p,{batchSize:A,filterHeight:$,filterWidth:F,inChannels:O,inHeight:P,inWidth:z,outChannels:M,outHeight:E,outWidth:B,strideHeight:W,strideWidth:U}=f,H=$-1-f.padInfo.top,G=F-1-f.padInfo.left,q=M/O;for(let X=0;X<A;++X)for(let Y=0;Y<O;++Y)for(let ee=0;ee<P;++ee){const re=ee-H,ne=Math.max(0,Math.ceil(re/W)),ae=Math.min(E,($+re)/W);for(let le=0;le<z;++le){const me=le-G,Ce=Math.max(0,Math.ceil(me/U)),De=Math.min(B,(F+me)/U);let we=0;for(let ye=ne;ye<ae;++ye){const Ae=ye*W-re;for(let Ne=Ce;Ne<De;++Ne){const We=v*X+w*ye+S*Ne,dn=k*($-1-Ae)+N*(F-1-(Ne*U-me))+T*Y;for(let it=0;it<q;++it)we+=C[We+(Y*q+it)]*I[dn+it]}}x[g*X+y*ee+b*le+Y]=we}}return e.makeTensorInfo(m.shape,m.dtype,m.values)}},jC={kernelName:a.Diag,backendName:"cpu",kernelFunc:function XC(t){const{inputs:n,backend:e}=t,{x:s}=n,r=a.util.sizeFromShape(s.shape),o=e.data.get(s.dataId).values,i=(0,a.buffer)([r,r],s.dtype),l=i.values;for(let c=0;c<o.length;c++)l[c*r+c]=o[c];const u=[...s.shape,...s.shape];return e.makeTensorInfo(u,i.dtype,i.values)}},KC={kernelName:a.Dilation2D,backendName:"cpu",kernelFunc:({inputs:t,backend:n,attrs:e})=>{const{x:s,filter:r}=t,{strides:o,pad:i,dilations:l}=e,u=n,c=u.data.get(s.dataId).values,d=s.shape.length,h=u.data.get(r.dataId).values,p=r.shape.length,{batchSize:f,inHeight:m,inWidth:x,inChannels:g,outHeight:y,outWidth:b,padInfo:C,strideHeight:v,strideWidth:w,filterHeight:S,filterWidth:I,dilationHeight:k,dilationWidth:N,outShape:T}=a.backend_util.computeDilation2DInfo(s.shape,r.shape,o,i,"NHWC",l),A=a.util.sizeFromShape(T),$=T.length,F=a.util.getArrayFromDType(s.dtype,A);for(let P=0;P<f;++P)for(let z=0;z<y;++z){const M=z*v-C.top;for(let E=0;E<b;++E){const B=E*w-C.left;for(let W=0;W<g;++W){let U=Number.MIN_SAFE_INTEGER;for(let G=0;G<S;++G){const q=M+G*k;if(q>=0&&q<m)for(let X=0;X<I;++X){const Y=B+X*N;if(Y>=0&&Y<x){const ee=a.util.locToIndex([P,q,Y,W],d,a.util.computeStrides(s.shape)),re=a.util.locToIndex([G,X,W],p,a.util.computeStrides(r.shape)),ne=c[ee]+h[re];ne>U&&(U=ne)}}}F[a.util.locToIndex([P,z,E,W],$,a.util.computeStrides(T))]=U}}}return{dataId:u.write(a.util.toTypedArray(F,s.dtype),T,s.dtype),shape:T,dtype:s.dtype}}},qC={kernelName:a.Dilation2DBackpropFilter,backendName:"cpu",kernelFunc:({inputs:t,backend:n,attrs:e})=>{const{x:s,filter:r,dy:o}=t,{strides:i,pad:l,dilations:u}=e,c=n,d=a.util.toNestedArray(s.shape,c.data.get(s.dataId).values),h=a.util.toNestedArray(r.shape,c.data.get(r.dataId).values),{batchSize:p,inHeight:f,inWidth:m,inChannels:x,outHeight:g,outWidth:y,padInfo:b,strideHeight:C,strideWidth:v,filterHeight:w,filterWidth:S,dilationHeight:I,dilationWidth:k,outShape:N}=a.backend_util.computeDilation2DInfo(s.shape,r.shape,i,l,"NHWC",u);a.util.assert(o.rank===N.length,()=>`Error in ${a.Dilation2DBackpropFilter}, dy must have the same rank as output ${N.length}, but got ${o.rank}`);const T=a.util.toNestedArray(N,c.data.get(o.dataId).values),A=a.util.makeZerosNestedTypedArray(r.shape,r.dtype);for(let F=0;F<p;++F)for(let O=0;O<g;++O){const P=O*C-b.top;for(let z=0;z<y;++z){const M=z*v-b.left;for(let E=0;E<x;++E){let B=Number.MIN_SAFE_INTEGER,W=0,U=0;for(let H=0;H<w;++H){const G=P+H*I;if(G>=0&&G<f)for(let q=0;q<S;++q){const X=M+q*k;if(X>=0&&X<m){const Y=d[F][G][X][E]+h[H][q][E];Y>B&&(B=Y,W=H,U=q)}}}A[W][U][E]+=T[F][O][z][E]}}}return{dataId:c.write(a.util.toTypedArray(A,s.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},ZC={kernelName:a.Dilation2DBackpropInput,backendName:"cpu",kernelFunc:({inputs:t,backend:n,attrs:e})=>{const{x:s,filter:r,dy:o}=t,{strides:i,pad:l,dilations:u}=e,c=n,d=a.util.toNestedArray(s.shape,c.data.get(s.dataId).values),h=a.util.toNestedArray(r.shape,c.data.get(r.dataId).values),{batchSize:p,inHeight:f,inWidth:m,inChannels:x,outHeight:g,outWidth:y,padInfo:b,strideHeight:C,strideWidth:v,filterHeight:w,filterWidth:S,dilationHeight:I,dilationWidth:k,outShape:N}=a.backend_util.computeDilation2DInfo(s.shape,r.shape,i,l,"NHWC",u);a.util.assert(o.rank===N.length,()=>`Error in ${a.Dilation2DBackpropInput}, dy must have the same rank as output ${N.length}, but got ${o.rank}`);const T=a.util.toNestedArray(N,c.data.get(o.dataId).values),A=a.util.makeZerosNestedTypedArray(s.shape,s.dtype);for(let F=0;F<p;++F)for(let O=0;O<g;++O){const P=O*C-b.top;for(let z=0;z<y;++z){const M=z*v-b.left;for(let E=0;E<x;++E){let B=Number.MIN_SAFE_INTEGER,W=P<0?0:P,U=M<0?0:M;for(let H=0;H<w;++H){const G=P+H*I;if(G>=0&&G<f)for(let q=0;q<S;++q){const X=M+q*k;if(X>=0&&X<m){const Y=d[F][G][X][E]+h[H][q][E];Y>B&&(B=Y,W=G,U=X)}}}A[F][W][U][E]+=T[F][O][z][E]}}}return{dataId:c.write(a.util.toTypedArray(A,s.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},QC={kernelName:a.Draw,backendName:"cpu",kernelFunc:function YC(t){const{inputs:n,backend:e,attrs:s}=t,{image:r}=n,{canvas:o,options:i}=s,{contextOptions:l,imageOptions:u}=i||{},c=(null==u?void 0:u.alpha)||1,d=(null==l?void 0:l.contextType)||"2d";if("2d"!==d)throw new Error(`Context type ${l.contextType} is not supported by the CPU backend.`);const h=o.getContext(d,(null==l?void 0:l.contextAttributes)||{});if(null==h)throw new Error(`Could not get the context with ${d} type.`);const[p,f]=r.shape.slice(0,2),m=2===r.shape.length?1:r.shape[2],x=e.data.get(r.dataId).values,g="float32"===r.dtype?255:1,y=new Uint8ClampedArray(f*p*4);for(let C=0;C<p*f;++C){const v=[0,0,0,255*c];for(let S=0;S<m;S++){const I=x[C*m+S];if("float32"===r.dtype){if(I<0||I>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${I}.`)}else if("int32"===r.dtype&&(I<0||I>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${I}.`);1===m?(v[0]=I*g,v[1]=I*g,v[2]=I*g):v[S]=I*g}const w=4*C;y[w+0]=Math.round(v[0]),y[w+1]=Math.round(v[1]),y[w+2]=Math.round(v[2]),y[w+3]=Math.round(v[3])}o.width=f,o.height=p;const b=new ImageData(y,f,p);return h.putImageData(b,0,0),r}},gi=_e((t,n)=>t*n),JC=hi((t,n,e,s)=>({real:t*e-n*s,imag:t*s+n*e})),Nr=Me(a.Multiply,gi,JC),ew={kernelName:a.Multiply,backendName:"cpu",kernelFunc:Nr};function Ss(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{axis:o,keepDims:i}=s;let l;Q(r,"sum"),l="bool"===r.dtype?on({inputs:{x:r},backend:e,attrs:{dtype:"int32"}}):zt({inputs:{x:r},backend:e});const u=l.shape.length,c=a.util.parseAxisParam(o,l.shape),d=a.backend_util.getAxesPermutation(c,u);let h=c,p=l;null!=d&&(p=Qe({inputs:{x:l},backend:e,attrs:{perm:d}}),h=a.backend_util.getInnerMostAxes(h.length,u)),a.backend_util.assertAxesAreInnerMostDims("sum",h,p.shape.length);const[f,m]=a.backend_util.computeOutAndReduceShapes(p.shape,h);let g=Tr(e,f,a.backend_util.upcastType(p.dtype,"int32"));const y=a.util.sizeFromShape(m),b=e.data.get(g.dataId).values,C=e.data.get(p.dataId).values;for(let v=0;v<b.length;++v){const w=v*y;let S=0;for(let I=0;I<y;++I)S+=C[w+I];b[v]=S}if(i){const w=g;g=ve({inputs:{x:g},backend:e,attrs:{shape:a.backend_util.expandShapeToKeepDim(g.shape,c)}}),e.disposeIntermediateTensorInfo(w)}return e.disposeIntermediateTensorInfo(l),null!=d&&e.disposeIntermediateTensorInfo(p),g}const tw={kernelName:a.Sum,backendName:"cpu",kernelFunc:Ss},sw={kernelName:a.Einsum,backendName:"cpu",kernelFunc:function nw(t){const{inputs:n,backend:e,attrs:s}=t,{equation:r}=s,o=n,{allDims:i,summedDims:l,idDims:u}=a.backend_util.decodeEinsumEquation(r,o.length);a.backend_util.checkEinsumDimSizes(i.length,u,o);const{path:c,steps:d}=a.backend_util.getEinsumComputePath(l,u),h=d.length;let p=null,f=i.length;const m=[];for(let x=0;x<h;++x){for(const g of d[x]){const{permutationIndices:y,expandDims:b}=a.backend_util.getEinsumPermutation(f,u[g]);let C;a.backend_util.isIdentityPermutation(y)?C=o[g]:(C=Qe({inputs:{x:o[g]},backend:e,attrs:{perm:y}}),m.push(C));const v=C.shape.slice();for(let w=0;w<b.length;++w)v.splice(b[w],0,1);a.util.arraysEqual(C.shape,v)||(C=ve({inputs:{x:C},backend:e,attrs:{shape:v}}),m.push(C)),null===p?p=C:(p=Nr({inputs:{a:C,b:p},backend:e}),m.push(p))}x<h-1&&(c[x]>=0&&(p=Ss({inputs:{x:p},backend:e,attrs:{axis:c[x]-(i.length-f),keepDims:!1}}),m.push(p)),f--)}for(const x of m)x!==p&&e.disposeIntermediateTensorInfo(x);return p}},ow={kernelName:a.EluGrad,backendName:"cpu",kernelFunc:function rw(t){const{inputs:n,backend:e}=t,{dy:s,y:r}=n;Q([s,r],"eluGrad");const o=new Float32Array(a.util.sizeFromShape(r.shape)),i=e.data.get(r.dataId).values,l=e.data.get(s.dataId).values;for(let u=0;u<i.length;++u){const c=i[u];o[u]=c>=0?l[u]:l[u]*(c+1)}return e.makeTensorInfo(r.shape,"float32",o)}},nc=_e((t,n)=>t===n?1:0),sc=Me(a.Equal,nc,null,"bool"),iw={kernelName:a.Equal,backendName:"cpu",kernelFunc:sc},aw=a.backend_util.ERF_P,lw=a.backend_util.ERF_A1,uw=a.backend_util.ERF_A2,cw=a.backend_util.ERF_A3,dw=a.backend_util.ERF_A4,hw=a.backend_util.ERF_A5,pw=fe(a.Erf,t=>{const n=Math.sign(t),e=Math.abs(t),s=1/(1+aw*e);return n*(1-((((hw*s+dw)*s+cw)*s+uw)*s+lw)*s*Math.exp(-e*e))}),fw={kernelName:a.Erf,backendName:"cpu",kernelFunc:pw},rc=Pt(t=>Math.exp(t)),oc=rn(a.Exp,rc,"float32"),mw={kernelName:a.Exp,backendName:"cpu",kernelFunc:oc};function Rr(t){const{inputs:n,backend:e,attrs:s}=t,{input:r}=n,{dim:o}=s,i=r.shape.length,l=r.shape.slice();let u=o;return o<0&&(a.util.assert(-(i+1)<=o,()=>`Axis must be in the interval [${-(i+1)}, ${i}]`),u=i+o+1),l.splice(u,0,1),ve({inputs:{x:r},backend:e,attrs:{shape:l}})}const gw={kernelName:a.ExpandDims,backendName:"cpu",kernelFunc:Rr},ic=Pt(t=>Math.expm1(t)),xw=rn(a.Expm1,ic),yw={kernelName:a.Expm1,backendName:"cpu",kernelFunc:xw},bw=_e((t,n)=>t/n),xi=Me(a.RealDiv,bw),yi={kernelName:a.RealDiv,backendName:"cpu",kernelFunc:xi},ac=_e((t,n)=>t-n),vw=hi((t,n,e,s)=>({real:t-e,imag:n-s})),bi=Me(a.Sub,ac,vw),Cw={kernelName:a.Sub,backendName:"cpu",kernelFunc:bi};function lc(t,n,e){const s=t.shape,r=s[0],o=s[1],i=e.data.get(t.dataId),l=i.complexTensorInfos.real,u=i.complexTensorInfos.imag,c=[r,o],d=a.util.sizeFromShape(c),h=a.util.getTypedArrayFromDType("float32",d),p=a.util.getTypedArrayFromDType("float32",d);for(let g=0;g<r;g++){const y=In({inputs:{x:l},backend:e,attrs:{begin:[g,0],size:[1,o]}}),b=In({inputs:{x:u},backend:e,attrs:{begin:[g,0],size:[1,o]}}),C=Je({inputs:{real:y,imag:b},backend:e}),{real:v,imag:w}=ww(C,n,e),S=a.backend_util.mergeRealAndImagArrays(v,w);for(let I=0;I<o;I++){const k=a.backend_util.getComplexWithIndex(S,I);h[g*o+I]=k.real,p[g*o+I]=k.imag}e.disposeIntermediateTensorInfo(y),e.disposeIntermediateTensorInfo(b),e.disposeIntermediateTensorInfo(C)}const f=e.makeTensorInfo(c,"float32",h),m=e.makeTensorInfo(c,"float32",p),x=Je({inputs:{real:f,imag:m},backend:e});return e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(m),x}function ww(t,n,e){const s=a.util.sizeFromShape(t.shape),r=e.data.get(t.dataId),o=e.data.get(r.complexTensorInfos.real.dataId).values,i=e.data.get(r.complexTensorInfos.imag.dataId).values;if(function Sw(t){return 0==(t&t-1)}(s)){const l=vi(o,i,s,n,e),u=[t.shape[0],t.shape[1]];if(n){const c=e.makeTensorInfo(u,"float32",l.real),d=e.makeTensorInfo(u,"float32",l.imag),h=e.makeTensorInfo([],"float32",a.util.createScalarValue(s,"float32")),p=zt({inputs:{x:h},backend:e}),f=yi.kernelFunc({inputs:{a:c,b:h},backend:e}),m=yi.kernelFunc({inputs:{a:d,b:p},backend:e}),x=e.data.get(f.dataId).values,g=e.data.get(m.dataId).values;return e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(m),{real:x,imag:g}}return l}{const u=function Iw(t,n,e){const s=new Float32Array(2*n);for(let r=0;r<n;r++){let o=0,i=0;for(let l=0;l<n;l++){const u=a.backend_util.exponent(r*l,n,e),c=a.backend_util.getComplexWithIndex(t,l);o+=c.real*u.real-c.imag*u.imag,i+=c.real*u.imag+c.imag*u.real}e&&(o/=n,i/=n),a.backend_util.assignToTypedArray(s,o,i,r)}return s}(a.backend_util.mergeRealAndImagArrays(o,i),s,n);return a.backend_util.splitRealAndImagArrays(u)}}function vi(t,n,e,s,r){if(1===e)return{real:t,imag:n};const o=a.backend_util.mergeRealAndImagArrays(t,n),i=e/2,l=a.backend_util.complexWithEvenIndex(o),u=l.real,c=l.imag,d=[u.length],h=r.makeTensorInfo(d,"float32",u),p=r.makeTensorInfo(d,"float32",c),f=Je({inputs:{real:h,imag:p},backend:r}),m=a.backend_util.complexWithOddIndex(o),x=m.real,g=m.imag,y=[x.length],b=r.makeTensorInfo(y,"float32",x),C=r.makeTensorInfo(y,"float32",g),v=Je({inputs:{real:b,imag:C},backend:r}),w=vi(u,c,i,s,r),S=w.real,I=w.imag,k=[S.length],N=r.makeTensorInfo(k,"float32",S),T=r.makeTensorInfo(k,"float32",I),A=Je({inputs:{real:N,imag:T},backend:r}),$=vi(x,g,i,s,r),F=$.real,O=$.imag,P=[F.length],z=r.makeTensorInfo(P,"float32",F),M=r.makeTensorInfo(P,"float32",O),E=Je({inputs:{real:z,imag:M},backend:r}),B=a.backend_util.exponents(e,s),W=[B.real.length],U=r.makeTensorInfo(W,"float32",B.real),H=r.makeTensorInfo(W,"float32",B.imag),G=Je({inputs:{real:U,imag:H},backend:r}),q=Nr({inputs:{a:G,b:E},backend:r}),X=jn({inputs:{a:A,b:q},backend:r}),Y=bi({inputs:{a:A,b:q},backend:r}),ee=Sn({inputs:{input:X},backend:r}),re=Sn({inputs:{input:Y},backend:r}),ne=Kn({inputs:{input:X},backend:r}),ae=Kn({inputs:{input:Y},backend:r}),le=qn({inputs:[ee,re],backend:r,attrs:{axis:0}}),me=qn({inputs:[ne,ae],backend:r,attrs:{axis:0}}),Ce=r.data.get(le.dataId).values,De=r.data.get(me.dataId).values;return r.disposeIntermediateTensorInfo(h),r.disposeIntermediateTensorInfo(p),r.disposeIntermediateTensorInfo(f),r.disposeIntermediateTensorInfo(b),r.disposeIntermediateTensorInfo(C),r.disposeIntermediateTensorInfo(v),r.disposeIntermediateTensorInfo(N),r.disposeIntermediateTensorInfo(T),r.disposeIntermediateTensorInfo(A),r.disposeIntermediateTensorInfo(z),r.disposeIntermediateTensorInfo(M),r.disposeIntermediateTensorInfo(E),r.disposeIntermediateTensorInfo(U),r.disposeIntermediateTensorInfo(H),r.disposeIntermediateTensorInfo(G),r.disposeIntermediateTensorInfo(q),r.disposeIntermediateTensorInfo(X),r.disposeIntermediateTensorInfo(Y),r.disposeIntermediateTensorInfo(ee),r.disposeIntermediateTensorInfo(ne),r.disposeIntermediateTensorInfo(re),r.disposeIntermediateTensorInfo(ae),r.disposeIntermediateTensorInfo(le),r.disposeIntermediateTensorInfo(me),{real:Ce,imag:De}}const Tw={kernelName:a.FFT,backendName:"cpu",kernelFunc:function kw(t){const{inputs:n,backend:e}=t,{input:s}=n,r=a.util.sizeFromShape(s.shape),o=s.shape[s.shape.length-1],l=ve({inputs:{x:s},backend:e,attrs:{shape:[r/o,o]}}),u=lc(l,!1,e),c=ve({inputs:{x:u},backend:e,attrs:{shape:s.shape}});return e.disposeIntermediateTensorInfo(l),e.disposeIntermediateTensorInfo(u),c}};function Ci(t){const{backend:n,attrs:e}=t,{shape:s,value:r,dtype:o}=e,i=o||a.util.inferDtype(r),l=a.util.getArrayFromDType(i,a.util.sizeFromShape(s));return function Rw(t,n,e){t.fill(n)}(l,r),n.makeTensorInfo(s,i,l)}const Nw={kernelName:a.Fill,backendName:"cpu",kernelFunc:Ci},Aw={kernelName:a.FlipLeftRight,backendName:"cpu",kernelFunc:({inputs:t,backend:e})=>{const{image:s}=t,r=e,o=a.util.getTypedArrayFromDType(s.dtype,a.util.sizeFromShape(s.shape)),[i,l,u,c]=s.shape,d=r.data.get(s.dataId).values;for(let p=0;p<i;p++){const f=p*u*l*c;for(let m=0;m<l;m++){const x=m*(u*c);for(let g=0;g<u;g++){const y=g*c;for(let b=0;b<c;b++){const C=Math.round(u-g-1),v=f+x+y+b;let w=d[v];C>=0&&C<u&&(w=d[f+x+C*c+b]),o[v]=w}}}}return{dataId:r.write(o,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},uc=Pt(t=>Math.floor(t)),Dw=rn(a.Floor,uc),$w={kernelName:a.Floor,backendName:"cpu",kernelFunc:Dw},Ew=_e((t,n)=>Math.floor(t/n)),_w=Me(a.FloorDiv,Ew,null,"int32"),Fw={kernelName:a.FloorDiv,backendName:"cpu",kernelFunc:_w},Pw={kernelName:a.FusedConv2D,backendName:"cpu",kernelFunc:function Ow(t){const{inputs:n,backend:e,attrs:s}=t,{x:r,filter:o,bias:i,preluActivationWeights:l}=n,{strides:u,pad:c,dataFormat:d,dilations:h,dimRoundingMode:p,activation:f,leakyreluAlpha:m}=s;let x=ec({inputs:{x:r,filter:o},backend:e,attrs:{strides:u,pad:c,dataFormat:d,dilations:h,dimRoundingMode:p}});if(i){const g=x;if("NCHW"===d&&1===i.shape.length&&1!==i.shape[0]){const y=ve({inputs:{x:i},backend:e,attrs:{shape:[i.shape[0],1,1]}});x=jn({inputs:{a:x,b:y},backend:e}),e.disposeIntermediateTensorInfo(y)}else x=jn({inputs:{a:x,b:i},backend:e});e.disposeIntermediateTensorInfo(g)}if(f){const g=x;if("NCHW"===d&&"prelu"===f&&1===l.shape.length&&1!==l.shape[0]){const y=ve({inputs:{x:l},backend:e,attrs:{shape:[l.shape[0],1,1]}});x=kr(e,x,f,y,m),e.disposeIntermediateTensorInfo(y)}else x=kr(e,x,f,l,m);e.disposeIntermediateTensorInfo(g)}return x}},Lw={kernelName:a.FusedDepthwiseConv2D,backendName:"cpu",kernelFunc:function zw(t){const{inputs:n,backend:e,attrs:s}=t,{x:r,filter:o,bias:i,preluActivationWeights:l}=n,{strides:u,pad:c,dataFormat:d,dilations:h,dimRoundingMode:p,activation:f,leakyreluAlpha:m}=s;let x=tc({inputs:{x:r,filter:o},backend:e,attrs:{strides:u,pad:c,dataFormat:d,dilations:h,dimRoundingMode:p}});if(i){const g=x;x=jn({inputs:{a:x,b:i},backend:e}),e.disposeIntermediateTensorInfo(g)}if(f){const g=x;x=kr(e,x,f,l,m),e.disposeIntermediateTensorInfo(g)}return x}};function cc(t,n,e,s,r,o,i,l,u){const c=(0,a.buffer)([s,o],e);for(let d=0;d<s;d++){const h=[];let p=0;for(let f=0;f<r;f++){const m=t[d*r+f];p+=m*i[f],h.push(m)}if(p<0||p>=u/o)throw new Error(`Invalid indices: ${h} does not index into ${l}`);for(let f=0;f<o;f++)c.values[d*o+f]=n.get(...n.indexToLoc(p*o+f))}return c}const Bw={kernelName:a.GatherNd,backendName:"cpu",kernelFunc:function Mw(t){const{inputs:n,backend:e}=t,{params:s,indices:r}=n,o=a.util.sizeFromShape(s.shape),i=r.shape,l=i[i.length-1],[u,c,d,h]=a.backend_util.prepareAndValidate(s,r);if(0===c)return e.makeTensorInfo(u,s.dtype,[]);const m=cc(e.data.get(r.dataId).values,e.bufferSync(s),s.dtype,c,l,d,h,s.shape,o);return e.makeTensorInfo(u,s.dtype,m.values)}};function dc(t,n,e){const s=(0,a.buffer)(e,t.dtype);for(let r=0;r<s.size;++r){const i=s.indexToLoc(r).slice(),c=n.locToIndex([i[0],i[2]]);i[2]=n.values[c];const d=t.locToIndex(i);0<=d&&d<t.values.length&&(s.values[r]=t.values[d])}return s}const Ww={kernelName:a.GatherV2,backendName:"cpu",kernelFunc:function Vw(t){const{inputs:n,backend:e,attrs:s}=t,{x:r,indices:o}=n,{axis:i,batchDims:l}=s;Q([r,o],"gatherV2");const u=a.util.parseAxisParam(i,r.shape)[0],c=e.data.get(o.dataId).values,d=r.shape[u];for(let v=0;v<c.length;++v){const w=c[v];a.util.assert(w<=d-1&&w>=0,()=>`GatherV2: the index value ${w} is not in [0, ${d-1}]`)}let h=l;null==l&&(h=0);const p=a.util.sizeFromShape(o.shape),f=a.backend_util.segment_util.collectGatherOpShapeInfo(r,o,u,h),m=ve({inputs:{x:r},backend:e,attrs:{shape:[f.batchSize,f.outerSize,f.dimSize,f.sliceSize]}}),x=ve({inputs:{x:o},backend:e,attrs:{shape:[f.batchSize,p/f.batchSize]}}),g=[f.batchSize,f.outerSize,p/f.batchSize,f.sliceSize],y=e.bufferSync(x),C=dc(e.bufferSync(m),y,g);return e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(x),e.makeTensorInfo(f.outputShape,C.dtype,C.values)}},hc=_e((t,n)=>t>n?1:0),Uw=Me(a.Greater,hc,null,"bool"),Gw={kernelName:a.Greater,backendName:"cpu",kernelFunc:Uw},pc=_e((t,n)=>t>=n?1:0),Hw=Me(a.GreaterEqual,pc,null,"bool"),Xw={kernelName:a.GreaterEqual,backendName:"cpu",kernelFunc:Hw},Kw={kernelName:a.IFFT,backendName:"cpu",kernelFunc:function jw(t){const{inputs:n,backend:e}=t,{input:s}=n,r=a.util.sizeFromShape(s.shape),o=s.shape[s.shape.length-1],l=ve({inputs:{x:s},backend:e,attrs:{shape:[r/o,o]}}),u=lc(l,!0,e),c=ve({inputs:{x:u},backend:e,attrs:{shape:s.shape}});return e.disposeIntermediateTensorInfo(l),e.disposeIntermediateTensorInfo(u),c}},qw=fe(a.IsFinite,t=>Number.isFinite(t)?1:0,"bool"),Zw={kernelName:a.IsFinite,backendName:"cpu",kernelFunc:qw},Yw=fe(a.IsInf,t=>Math.abs(t)===1/0?1:0,"bool"),Qw={kernelName:a.IsInf,backendName:"cpu",kernelFunc:Yw},Jw=fe(a.IsNan,t=>Number.isNaN(t)?1:0,"bool"),eS={kernelName:a.IsNan,backendName:"cpu",kernelFunc:Jw},fc=_e((t,n)=>t<n?1:0),tS=Me(a.Less,fc,null,"bool"),nS={kernelName:a.Less,backendName:"cpu",kernelFunc:tS},mc=_e((t,n)=>t<=n?1:0),sS=Me(a.LessEqual,mc,null,"bool"),rS={kernelName:a.LessEqual,backendName:"cpu",kernelFunc:sS};function gc(t,n,e){const s=(n-t)/(e-1),r=a.util.makeZerosTypedArray(e,"float32");r[0]=t;for(let o=1;o<r.length;o++)r[o]=r[o-1]+s;return r}const iS={kernelName:a.LinSpace,backendName:"cpu",kernelFunc:function oS(t){const{backend:n,attrs:e}=t,{start:s,stop:r,num:o}=e,i=gc(s,r,o);return n.makeTensorInfo([i.length],"float32",i)}},xc=Pt(t=>Math.log(t)),aS=rn(a.Log,xc),lS={kernelName:a.Log,backendName:"cpu",kernelFunc:aS},uS=fe(a.Log1p,t=>Math.log1p(t)),cS={kernelName:a.Log1p,backendName:"cpu",kernelFunc:uS},dS=_e((t,n)=>t&&n),hS=Me(a.LogicalAnd,dS,null,"bool"),pS={kernelName:a.LogicalAnd,backendName:"cpu",kernelFunc:hS},fS=fe(a.LogicalNot,t=>t?0:1,"bool"),mS={kernelName:a.LogicalNot,backendName:"cpu",kernelFunc:fS},gS=_e((t,n)=>t||n),xS=Me(a.LogicalOr,gS,null,"bool"),yS={kernelName:a.LogicalOr,backendName:"cpu",kernelFunc:xS},vS={kernelName:a.LRN,backendName:"cpu",kernelFunc:function bS(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{depthRadius:o,bias:i,alpha:l,beta:u}=s;Q(r,"LRN");const c=r.shape[3],d=c-1,h=e.data.get(r.dataId).values,p=a.util.sizeFromShape(r.shape),f=new Float32Array(p);function m(x){const g=x%c;let y=x-g+Math.max(0,g-o);const b=x-g+Math.min(g+o,d);let C=0;for(;y<=b;y++){const v=h[y];C+=v*v}return C}for(let x=0;x<p;x++){const g=m(x),y=h[x]*Math.pow(i+l*g,-u);f[x]=y}return e.makeTensorInfo(r.shape,r.dtype,f)}},wS={kernelName:a.LRNGrad,backendName:"cpu",kernelFunc:function CS(t){const{inputs:n,backend:e,attrs:s}=t,{x:r,y:o,dy:i}=n,{depthRadius:l,bias:u,alpha:c,beta:d}=s;Q(i,"LRNGrad");const h=a.util.sizeFromShape(i.shape),p=i.shape[3],f=e.data.get(i.dataId).values,m=e.data.get(r.dataId).values,x=e.data.get(o.dataId).values,g=new Float32Array(h),y=h;for(let b=0;b<y;b++){const C=b%p,v=b-C+Math.max(0,C-l),w=b-C+Math.min(p,C+l+1);let S=0;for(let I=v;I<w;I++)S+=Math.pow(m[I],2);S=c*S+u;for(let I=v;I<w;I++){let k=-2*c*d*m[I]*x[b]/S;b===I&&(k+=Math.pow(S,-d)),k*=f[b],g[I]+=k}}return e.makeTensorInfo(i.shape,r.dtype,g)}};function yc(t,n,e,s){const r=a.util.getTypedArrayFromDType(s,a.util.sizeFromShape(e));for(let o=0;o<r.length;++o){const i=o*n;let l=t[i];for(let u=0;u<n;++u){const c=t[i+u];(Number.isNaN(c)||c>l)&&(l=c)}r[o]=l}return r}function bc(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{reductionIndices:o,keepDims:i}=s,l=e;let u=r.shape;const c=u.length,d=a.util.parseAxisParam(o,u);let h=d;const p=a.backend_util.getAxesPermutation(h,c);let f=l.data.get(r.dataId).values;if(null!=p){const v=new Array(c);for(let w=0;w<v.length;w++)v[w]=u[p[w]];f=pi(f,u,r.dtype,p,v),h=a.backend_util.getInnerMostAxes(h.length,c),u=v}Q(r,"max"),a.backend_util.assertAxesAreInnerMostDims("max",h,c);const[m,x]=a.backend_util.computeOutAndReduceShapes(u,h),y=yc(f,a.util.sizeFromShape(x),m,r.dtype),b=l.write(y,m,r.dtype);let C=m;return i&&(C=a.backend_util.expandShapeToKeepDim(m,d)),{dataId:b,shape:C,dtype:r.dtype}}const SS={kernelName:a.Max,backendName:"cpu",kernelFunc:bc},vc=_e((t,n)=>Math.max(t,n)),IS=Me(a.Maximum,vc),kS={kernelName:a.Maximum,backendName:"cpu",kernelFunc:IS},NS={kernelName:a.MaxPool,backendName:"cpu",kernelFunc:function TS(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n;Q(r,"maxPool");const{filterSize:o,strides:i,pad:l,dimRoundingMode:u}=s;a.util.assert(a.backend_util.eitherStridesOrDilationsAreOne(i,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`);const d=a.backend_util.computePool2DInfo(r.shape,o,i,1,l,u);let h;if(1===d.filterWidth&&1===d.filterHeight&&a.util.arraysEqual(d.inShape,d.outShape))h=zt({inputs:{x:r},backend:e});else{const p=e.data.get(r.dataId).values,f=a.util.computeStrides(r.shape),m=fi(p,0,r.dtype,f,d,"max");h=e.makeTensorInfo(d.outShape,r.dtype,m.values)}return h}},AS={kernelName:a.MaxPool3D,backendName:"cpu",kernelFunc:function RS(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{filterSize:o,strides:i,pad:l,dimRoundingMode:u,dataFormat:c}=s;Q(r,"maxPool3d");const d=a.backend_util.computePool3DInfo(r.shape,o,i,1,l,u,c),p=Ku(e.data.get(r.dataId).values,0,r.dtype,a.util.computeStrides(r.shape),d,"max");return e.makeTensorInfo(p.shape,"float32",p.values)}},$S={kernelName:a.MaxPool3DGrad,backendName:"cpu",kernelFunc:function DS(t){const{inputs:n,backend:e,attrs:s}=t,{dy:r,input:o}=n,{filterSize:i,strides:l,pad:u,dimRoundingMode:c}=s;Q([r,o],"maxPool3DGrad");const d=a.backend_util.computePool3DInfo(o.shape,i,l,1,u,c),p=function Wv(t,n){const e=(0,a.buffer)(n.outShape,"int32"),s=n.strideDepth,r=n.strideHeight,o=n.strideWidth,i=n.dilationDepth,l=n.dilationHeight,u=n.dilationWidth,c=n.effectiveFilterDepth,d=n.effectiveFilterHeight,h=n.effectiveFilterWidth,p=n.padInfo.front,f=n.padInfo.top,m=n.padInfo.left;for(let x=0;x<n.batchSize;++x)for(let g=0;g<n.inChannels;++g)for(let y=0;y<n.outDepth;++y){const b=y*s-p;let C=b;for(;C<0;)C+=i;const v=Math.min(n.inDepth,c+b);for(let w=0;w<n.outHeight;++w){const S=w*r-f;let I=S;for(;I<0;)I+=l;const k=Math.min(n.inHeight,d+S);for(let N=0;N<n.outWidth;++N){const T=N*o-m;let A=T;for(;A<0;)A+=u;const $=Math.min(n.inWidth,h+T);let F=Number.NEGATIVE_INFINITY,O=-1;for(let P=C;P<v;P+=i){const z=P-b;for(let M=I;M<k;M+=l){const E=M-S;for(let B=A;B<$;B+=u){const W=B-T,U=t.get(x,P,M,B,g);U>=F&&(F=U,O=z*d*h+E*d+W)}}}e.set(O,x,y,w,N,g)}}}return e}(e.bufferSync(o),d),f=d.strideDepth,m=d.strideHeight,x=d.strideWidth,g=d.dilationDepth,y=d.dilationHeight,b=d.dilationWidth,C=d.effectiveFilterDepth,v=d.effectiveFilterHeight,w=d.effectiveFilterWidth,S=C-1-d.padInfo.front,I=w-1-d.padInfo.left,k=v-1-d.padInfo.top,N=(0,a.buffer)(o.shape,"float32"),T=e.bufferSync(r);for(let A=0;A<d.batchSize;++A)for(let $=0;$<d.inChannels;++$)for(let F=0;F<d.inDepth;++F)for(let O=0;O<d.inHeight;++O)for(let P=0;P<d.inWidth;++P){const z=F-S,M=O-k,E=P-I;let B=0;for(let W=0;W<C;W+=g){const U=(z+W)/f;if(!(U<0||U>=d.outDepth||Math.floor(U)!==U))for(let H=0;H<v;H+=y){const G=(M+H)/m;if(!(G<0||G>=d.outHeight||Math.floor(G)!==G))for(let q=0;q<w;q+=b){const X=(E+q)/x;if(X<0||X>=d.outWidth||Math.floor(X)!==X)continue;const re=C*v*w-1-p.get(A,U,G,X,$)===W*v*w+H*w+q?1:0;0!==re&&(B+=T.get(A,U,G,X,$)*re)}}}N.set(B,A,F,O,P,$)}return e.makeTensorInfo(N.shape,N.dtype,N.values)}},_S={kernelName:a.MaxPoolGrad,backendName:"cpu",kernelFunc:function ES(t){const{inputs:n,backend:e,attrs:s}=t,{dy:r,input:o,output:i}=n,l=o;Q([o,i],"maxPoolGrad");const{filterSize:u,strides:c,pad:d,dimRoundingMode:h}=s,p=a.backend_util.computePool2DInfo(l.shape,u,c,1,d,h),f=e.data.get(l.dataId).values,m=(0,a.buffer)(p.outShape,l.dtype,ju(f,l.shape,l.dtype,p).values),x=p.strideHeight,g=p.strideWidth,y=p.dilationHeight,b=p.dilationWidth,C=p.effectiveFilterHeight,v=p.effectiveFilterWidth,w=v-1-p.padInfo.left,S=C-1-p.padInfo.top,I=(0,a.buffer)(l.shape,"float32"),k=e.data.get(r.dataId).values,N=(0,a.buffer)(r.shape,"float32",k);for(let T=0;T<p.batchSize;++T)for(let A=0;A<p.inChannels;++A)for(let $=0;$<p.inHeight;++$)for(let F=0;F<p.inWidth;++F){const O=$-S,P=F-w;let z=0;for(let M=0;M<C;M+=y){const E=(O+M)/x;if(!(E<0||E>=p.outHeight||Math.floor(E)!==E))for(let B=0;B<v;B+=b){const W=(P+B)/g;if(W<0||W>=p.outWidth||Math.floor(W)!==W)continue;const G=C*v-1-m.get(T,E,W,A)===M*v+B?1:0;0!==G&&(z+=N.get(T,E,W,A)*G)}}I.set(z,T,$,F,A)}return e.makeTensorInfo(I.shape,I.dtype,I.values)}},OS={kernelName:a.MaxPoolWithArgmax,backendName:"cpu",kernelFunc:({inputs:t,attrs:n,backend:e})=>{const{x:s}=t,{filterSize:r,strides:o,pad:i,includeBatchInIndex:l}=n,u=e;Q(s,"MaxPoolWithArgmax");const c=u.data.get(s.dataId).values,d=a.backend_util.computePool2DInfo(s.shape,r,o,[1,1],i),[h,p]=function FS(t,n,e,s,r){const i=fi(t,0,e,a.util.computeStrides(n),r,"max"),l=ju(t,n,e,r,!0,s);return[i.values,l.values]}(c,s.shape,s.dtype,l,d),f=u.write(h,d.outShape,s.dtype),m=u.write(p,d.outShape,s.dtype);return[{dataId:f,shape:d.outShape,dtype:s.dtype},{dataId:m,shape:d.outShape,dtype:"int32"}]}},zS={kernelName:a.Mean,backendName:"cpu",kernelFunc:function PS(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{axis:o,keepDims:i}=s,l=a.util.parseAxisParam(o,r.shape),c=a.backend_util.computeOutAndReduceShapes(r.shape,l)[1],d=a.util.sizeFromShape(c),h=[],p=e.makeTensorInfo([],"float32",new Float32Array([d]));h.push(p);const f=on({inputs:{x:r},backend:e,attrs:{dtype:"float32"}});h.push(f);const m=xi({inputs:{a:f,b:p},backend:e});h.push(m);const x=Ss({inputs:{x:m},backend:e,attrs:{axis:o,keepDims:i}});return h.forEach(g=>e.disposeIntermediateTensorInfo(g)),x}},MS={kernelName:a.Min,backendName:"cpu",kernelFunc:function LS(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{axis:o,keepDims:i}=s;Q(r,"min");const l=a.util.parseAxisParam(o,r.shape);let u=l;const c=a.backend_util.getAxesPermutation(u,r.shape.length);let d=r;null!=c&&(d=Qe({inputs:{x:r},backend:e,attrs:{perm:c}}),u=a.backend_util.getInnerMostAxes(u.length,r.shape.length)),a.backend_util.assertAxesAreInnerMostDims("min",u,d.shape.length);const[h,p]=a.backend_util.computeOutAndReduceShapes(d.shape,u),f=a.util.sizeFromShape(p),m=a.util.makeZerosTypedArray(a.util.sizeFromShape(h),d.dtype),x=e.data.get(d.dataId).values;for(let y=0;y<m.length;++y){const b=y*f;let C=x[b];for(let v=0;v<f;++v){const w=x[b+v];(Number.isNaN(w)||w<C)&&(C=w)}m[y]=C}null!=c&&e.disposeIntermediateTensorInfo(d);const g=e.makeTensorInfo(h,d.dtype,m);if(i){const b=ve({inputs:{x:g},backend:e,attrs:{shape:a.backend_util.expandShapeToKeepDim(h,l)}});return e.disposeIntermediateTensorInfo(g),b}return g}},Cc=_e((t,n)=>Math.min(t,n)),BS=Me(a.Minimum,Cc),VS={kernelName:a.Minimum,backendName:"cpu",kernelFunc:BS},US={kernelName:a.MirrorPad,backendName:"cpu",kernelFunc:function WS(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{paddings:o,mode:i}=s;Q(r,"mirrorPad");const l=o.map((C,v)=>C[0]+r.shape[v]+C[1]),u=o.map(C=>C[0]),c=o.map((C,v)=>C[0]+r.shape[v]),d="reflect"===i?0:1,h=e.data.get(r.dataId).values,p=r.shape.length,f=a.util.computeStrides(r.shape),m=a.util.sizeFromShape(l),x=l.length,g=a.util.computeStrides(l),y=a.util.getTypedArrayFromDType(r.dtype,m);for(let C=0;C<m;C++){let v=a.util.indexToLoc(C,x,g);for(let S=0;S<x;S++)v[S]<u[S]?v[S]=2*u[S]-v[S]-d:v[S]>=c[S]&&(v[S]=2*(c[S]-1)-v[S]+d);v=v.map((S,I)=>S-u[I]);const w=a.util.locToIndex(v,p,f);y[C]=h[w]}return{dataId:e.write(y,l,r.dtype),shape:l,dtype:r.dtype}}},GS=_e((t,n)=>{const e=t%n;return t<0&&n<0||t>=0&&n>=0?e:(e+n)%n}),HS=Me(a.Mod,GS),XS={kernelName:a.Mod,backendName:"cpu",kernelFunc:HS};function wc(t){const{inputs:n,backend:e,attrs:s}=t,{logits:r}=n,{dim:o}=s,i=r.shape.length;let l=o;if(-1===l&&(l=i-1),l!==i-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${l}`);const u=a.util.parseAxisParam([l],r.shape),c=bc({inputs:{x:r},backend:e,attrs:{reductionIndices:u,keepDims:!1}}),d=a.backend_util.expandShapeToKeepDim(c.shape,u),h=ve({inputs:{x:c},backend:e,attrs:{shape:d}}),p=bi({inputs:{a:r,b:h},backend:e}),f=oc({inputs:{x:p},backend:e}),m=Ss({inputs:{x:f},backend:e,attrs:{axis:u,keepDims:!1}}),x=ve({inputs:{x:m},backend:e,attrs:{shape:d}}),g=xi({inputs:{a:f,b:x},backend:e});return e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(x),g}const jS={kernelName:a.Softmax,backendName:"cpu",kernelFunc:wc},qS={kernelName:a.Multinomial,backendName:"cpu",kernelFunc:function KS(t){const{inputs:n,backend:e,attrs:s}=t,{logits:r}=n,{numSamples:o,seed:i,normalized:l}=s;Q(r,"multinomial");const u=l?r:wc({inputs:{logits:r},backend:e,attrs:{dim:-1}}),c=u.shape[0],d=u.shape[1],h=e.data.get(u.dataId).values,p=[c,o],f=a.util.makeZerosTypedArray(a.util.sizeFromShape(p),"int32");for(let m=0;m<c;++m){const x=m*d,g=new Float32Array(d-1);g[0]=h[x];for(let C=1;C<g.length;++C)g[C]=g[C-1]+h[x+C];const y=vb.alea(i.toString()),b=m*o;for(let C=0;C<o;++C){const v=y();f[b+C]=g.length;for(let w=0;w<g.length;w++)if(v<g[w]){f[b+C]=w;break}}}return l||e.disposeIntermediateTensorInfo(u),e.makeTensorInfo(p,"int32",f)}};function Sc(t,n,e){const s=a.util.createScalarValue(-1,e);return gi([],n,s,t,e)}const YS={kernelName:a.Neg,backendName:"cpu",kernelFunc:function ZS(t){const{inputs:n,backend:e}=t,{x:s}=n;Q(s,"neg");const r=e.data.get(s.dataId).values,[o,i]=Sc(r,s.shape,s.dtype);return e.makeTensorInfo(i,s.dtype,o)}},QS=a.kernel_impls.nonMaxSuppressionV3Impl,eI={kernelName:a.NonMaxSuppressionV3,backendName:"cpu",kernelFunc:function JS(t){const{inputs:n,backend:e,attrs:s}=t,{boxes:r,scores:o}=n,{maxOutputSize:i,iouThreshold:l,scoreThreshold:u}=s;Q(r,"NonMaxSuppression");const c=e.data.get(r.dataId).values,d=e.data.get(o.dataId).values,{selectedIndices:h}=QS(c,d,i,l,u);return e.makeTensorInfo([h.length],"int32",new Int32Array(h))}},tI=a.kernel_impls.nonMaxSuppressionV4Impl,sI={kernelName:a.NonMaxSuppressionV4,backendName:"cpu",kernelFunc:function nI(t){const{inputs:n,backend:e,attrs:s}=t,{boxes:r,scores:o}=n,{maxOutputSize:i,iouThreshold:l,scoreThreshold:u,padToMaxOutputSize:c}=s;Q(r,"NonMaxSuppressionPadded");const d=e.data.get(r.dataId).values,h=e.data.get(o.dataId).values,{selectedIndices:p,validOutputs:f}=tI(d,h,i,l,u,c);return[e.makeTensorInfo([p.length],"int32",new Int32Array(p)),e.makeTensorInfo([],"int32",new Int32Array([f]))]}},rI=a.kernel_impls.nonMaxSuppressionV5Impl,iI={kernelName:a.NonMaxSuppressionV5,backendName:"cpu",kernelFunc:function oI(t){const{inputs:n,backend:e,attrs:s}=t,{boxes:r,scores:o}=n,{maxOutputSize:i,iouThreshold:l,scoreThreshold:u,softNmsSigma:c}=s;Q(r,"NonMaxSuppressionWithScore");const d=e.data.get(r.dataId).values,h=e.data.get(o.dataId).values,p=i,f=l,m=u,x=c,{selectedIndices:g,selectedScores:y}=rI(d,h,p,f,m,x);return[e.makeTensorInfo([g.length],"int32",new Int32Array(g)),e.makeTensorInfo([y.length],"float32",new Float32Array(y))]}},Ic=_e((t,n)=>t!==n?1:0),aI=Me(a.NotEqual,Ic,null,"bool"),lI={kernelName:a.NotEqual,backendName:"cpu",kernelFunc:aI},cI={kernelName:a.OneHot,backendName:"cpu",kernelFunc:function uI(t){const{inputs:n,backend:e,attrs:s}=t,{indices:r}=n,{dtype:o,depth:i,onValue:l,offValue:u}=s;Q(r,"oneHot");const c=a.util.sizeFromShape(r.shape),d=new Float32Array(c*i);d.fill(u);const h=e.data.get(r.dataId).values;for(let p=0;p<c;++p)h[p]>=0&&h[p]<i&&(d[p*i+h[p]]=l);return e.makeTensorInfo([...r.shape,i],o,d)}};function Ar(t){const{inputs:n,backend:e}=t,{x:s}=n;if("string"===s.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===s.dtype){const r=Sn({inputs:{input:s},backend:e}),o=Ar({inputs:{x:r},backend:e}),i=Kn({inputs:{input:s},backend:e}),l=Ar({inputs:{x:i},backend:e}),u=Je({inputs:{real:o,imag:l},backend:e});return e.disposeIntermediateTensorInfo(r),e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(l),u}return Ci({backend:e,attrs:{shape:s.shape,value:0,dtype:s.dtype}})}const dI={kernelName:a.ZerosLike,backendName:"cpu",kernelFunc:Ar},hI={kernelName:a.OnesLike,backendName:"cpu",kernelFunc:function kc(t){const{inputs:n,backend:e}=t,{x:s}=n;if("string"===s.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===s.dtype){const r=Sn({inputs:{input:s},backend:e}),o=kc({inputs:{x:r},backend:e}),i=Kn({inputs:{input:s},backend:e}),l=Ar({inputs:{x:i},backend:e}),u=Je({inputs:{real:o,imag:l},backend:e});return e.disposeIntermediateTensorInfo(r),e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(l),u}return Ci({backend:e,attrs:{shape:s.shape,value:1,dtype:s.dtype}})}};function Tc(t){const{inputs:n,backend:e,attrs:s}=t,{axis:r}=s;if(1===n.length)return Rr({inputs:{input:n[0]},backend:e,attrs:{dim:r}});const o=n[0].shape,i=n[0].dtype;n.forEach(d=>{a.util.assertShapesMatch(o,d.shape,"All tensors passed to stack must have matching shapes"),a.util.assert(i===d.dtype,()=>"All tensors passed to stack must have matching dtypes")});const l=[],c=qn({inputs:n.map(d=>{const h=Rr({inputs:{input:d},backend:e,attrs:{dim:r}});return l.push(h),h}),backend:e,attrs:{axis:r}});return l.forEach(d=>e.disposeIntermediateTensorInfo(d)),c}const pI={kernelName:a.Pack,backendName:"cpu",kernelFunc:Tc},Nc={kernelName:a.PadV2,backendName:"cpu",kernelFunc:function fI(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{paddings:o,constantValue:i}=s;Q(r,"pad");const l=o.map((b,C)=>b[0]+r.shape[C]+b[1]),u=o.map(b=>b[0]),c=e.data.get(r.dataId).values,d=a.util.sizeFromShape(r.shape),h=r.shape.length,p=a.util.computeStrides(r.shape),f=a.util.sizeFromShape(l),m=l.length,x=a.util.computeStrides(l),g=a.util.getTypedArrayFromDType(r.dtype,f);0!==i&&g.fill(i);for(let b=0;b<d;b++){const v=a.util.indexToLoc(b,h,p).map((S,I)=>S+u[I]);g[a.util.locToIndex(v,m,x)]=c[b]}return{dataId:e.write(g,l,r.dtype),shape:l,dtype:r.dtype}}},mI=_e((t,n)=>Math.pow(t,n)),gI=Me(a.Pow,mI),xI={kernelName:a.Pow,backendName:"cpu",kernelFunc:gI};function Rc(t,n,e,s){const[r,o]=a.backend_util.computeOutAndReduceShapes(t,s),i=(0,a.upcastType)(n,"int32"),l=a.util.makeZerosTypedArray(a.util.sizeFromShape(r),i),u=a.util.sizeFromShape(o);for(let c=0;c<l.length;++c){const d=c*u;let h=1;for(let p=0;p<u;++p)h*=e[d+p];l[c]=h}return{outVals:l,outShape:r,outDtype:i}}const bI={kernelName:a.Prod,backendName:"cpu",kernelFunc:function yI(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{axis:o,keepDims:i}=s;Q(r,"prod");const l=r.shape.length,u=a.util.parseAxisParam(o,r.shape),c=a.backend_util.getAxesPermutation(u,l);let d=u,h=r;const p=[];null!=c&&(h=Qe({inputs:{x:r},backend:e,attrs:{perm:c}}),p.push(h),d=a.backend_util.getInnerMostAxes(d.length,l));const f=e.data.get(h.dataId).values,{outVals:m,outShape:x,outDtype:g}=Rc(h.shape,h.dtype,f,d);let y=x;return i&&(y=a.backend_util.expandShapeToKeepDim(x,u)),p.forEach(b=>e.disposeIntermediateTensorInfo(b)),e.makeTensorInfo(y,g,m)}};function Ac(t,n){const e=t.slice(0,n);for(;e.length<n;)e.push(1);for(let s=n;s<t.length;s++)e[n-1]*=t[s];return e}function Dc(t,n,e,s,r,o,i,l){if(0===t.length)throw new Error("paramsNestedSplits must be non empty");if(0===n[0].length)throw new Error("Split tensors must not be scalars");if(function vI(t,n,e){t.forEach((s,r)=>{if(s<0||s>=e){const o=a.util.indexToLoc(r,n.length,a.util.computeStrides(n)).join(",");throw new Error(`indices[${o}] = ${s} is not in [0, ${e})`)}})}(o,i,n[0][0]-1),0===s.length)throw new Error("params.rank must be nonzero");const c=s[0],{outSplits:d,valueSlices:h,numValues:p}=function wI(t,n,e,s){const r=[];let o=0;const l=new Array(n.length-1+e.length).fill(null).map(()=>[0]);!function CI(t,n){for(let e=0;e<t.length;++e){const s=t[e],r=e===t.length-1?n:t[e+1].length;if(0===s.length)throw new Error("Ragged splits may not be empty");if(s[0]<0)throw new Error("Ragged splits must be non-negative");if(s[s.length-1]>r)throw new Error("Ragged splits must not point past values");for(let o=1;o<s.length;++o)if(s[o-1]>s[o])throw new Error("Ragged splits must be sorted in ascending order")}}(e,s);let u=1;for(let c=0;c<n.length-1;++c){u*=n[c];const d=n[c+1];for(let h=1;h<u+1;++h)l[c].push(h*d)}for(let c=0;c<t.length;++c){let d=t[c],h=t[c]+1;for(let p=0;p<e.length;++p){const f=e[p],m=p+n.length-1;if(m>=0){const x=l[m],g=x[x.length-1]-f[d];for(let y=d;y<h;++y)l[m].push(f[y+1]+g)}d=f[d],h=f[h]}h!==d&&(r.push([d,h]),o+=h-d)}return{outSplits:l,valueSlices:r,numValues:o}}(o,i,t,c),f=function SI(t){const n=[];for(let e=0;e<t.length;++e){const r=a.util.getArrayFromDType("int32",t[e].length);n.push(r),t[e].forEach((o,i)=>r[i]=o)}return n}(d),m=function kI(t,n,e,s,r){const o=n.slice();o[0]=r;const i=a.util.getArrayFromDType(e,a.util.sizeFromShape(o)),l=t.length;return function II(t,n,e,s,r,o){const i=Ac(n,2)[1],l=Ac(o,2)[1];let u=0;for(const c of e)for(let d=c[0];d<c[1];++d){for(let h=0;h<s;++h)r[u*l+h]=t[d*i+h];++u}}(t,n,s,0===l?0:l/n[0],i,o),[i,o]}(e,s,r,h,p);return[f,m[0],m[1]]}const NI={kernelName:a.RaggedGather,backendName:"cpu",kernelFunc:function TI(t){const{inputs:n,backend:e,attrs:s}=t,{paramsNestedSplits:r,paramsDenseValues:o,indices:i}=n,u=r.map(y=>e.data.get(y.dataId).values),c=r.map(y=>y.shape),d=e.data.get(o.dataId).values,h=e.data.get(i.dataId).values,[p,f,m]=Dc(u,c,d,o.shape,o.dtype,h,i.shape),x=p.map(y=>e.makeTensorInfo([y.length],"int32",y)),g=e.makeTensorInfo(m,o.dtype,f);return x.concat([g])}},$c=2147483647;function Ec(t,n,e,s,r,o,i){if(n.length>1)throw new Error("starts must be a scalar or vector");if(r.length>1)throw new Error("limits must be a scalar or vector");if(i.length>1)throw new Error("deltas must be a scalar or vector");const l=0===n.length,u=0===r.length,c=0===i.length,d=[];l||d.push(n[0]),u||d.push(r[0]),c||d.push(i[0]);for(let g=1;g<d.length;++g)if(d[g]!==d[g-1])throw new Error("starts, limits, and deltas must have the same shape");const h=0===d.length?1:d[0],p=a.util.getArrayFromDType("int32",h+1);p[0]=0;for(let g=0;g<h;++g){const y=l?t[0]:t[g],b=u?s[0]:s[g],C=c?o[0]:o[g];if(0===C)throw new Error("Requires delta != 0");let v;if(C>0&&b<y||C<0&&b>y)v=0;else if(v=Math.ceil(Math.abs((b-y)/C)),v>$c)throw new Error(`Requires ((limit - start) / delta) <= ${$c}`);p[g+1]=p[g]+v}const m=a.util.getArrayFromDType(e,p[h]);let x=0;for(let g=0;g<h;++g){const y=p[g+1]-p[g];let b=l?t[0]:t[g];const C=c?o[0]:o[g];for(let v=0;v<y;++v)m[x++]=b,b+=C}return[p,m]}const AI={kernelName:a.RaggedRange,backendName:"cpu",kernelFunc:function RI(t){const{inputs:n,backend:e}=t,{starts:s,limits:r,deltas:o}=n,i=e.data.get(s.dataId).values,l=e.data.get(r.dataId).values,u=e.data.get(o.dataId).values,[c,d]=Ec(i,s.shape,s.dtype,l,r.shape,u,o.shape);return[e.makeTensorInfo([c.length],"int32",c),e.makeTensorInfo([d.length],s.dtype,d)]}};var dt=a.backend_util.RowPartitionType;class Dr{constructor(n,e,s,r,o,i,l,u,c,d){this.shape=n,this.shapeShape=e,this.values=s,this.valuesShape=r,this.valuesDType=o,this.defaultValue=i,this.defaultValueShape=l,this.rowPartitionValues=u,this.rowPartitionValuesShapes=c,this.rowPartitionTypes=a.backend_util.getRowPartitionTypesHelper(d),this.raggedRank=a.backend_util.getRaggedRank(this.rowPartitionTypes)}getRowPartitionTypeByDimension(n){return this.rowPartitionTypes[0]===dt.FIRST_DIM_SIZE?this.rowPartitionTypes[n+1]:this.rowPartitionTypes[n]}getRowPartitionTensor(n){return this.rowPartitionTypes[0]===dt.FIRST_DIM_SIZE?this.rowPartitionValues[n+1]:this.rowPartitionValues[n]}getMaxWidth(n){const e=this.getRowPartitionTensor(n-1);switch(this.getRowPartitionTypeByDimension(n-1)){case dt.VALUE_ROWIDS:return Dr.getMaxWidthValueRowID(e);case dt.ROW_SPLITS:return Dr.getMaxWidthRowSplit(e);default:throw new Error(`Cannot handle partition type ${dt[this.getRowPartitionTypeByDimension(n-1)]}`)}}static getMaxWidthRowSplit(n){const e=n.length;if(0===e||1===e)return 0;let s=0;for(let r=0;r<e-1;++r){const o=n[r+1]-n[r];o>s&&(s=o)}return s}static getMaxWidthValueRowID(n){const e=n.length;if(0===e)return 0;let s=0,r=n[0],o=0;for(let i=1;i<e;++i){const l=n[i];l!==r&&(r=l,o=Math.max(i-s,o),s=i)}return Math.max(e-s,o)}tensorShapeFromTensor(n,e,s=!0){if(0===e.length){if(-1===n[0])return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return Fc(n,s)}calculateOutputSize(n){const e=this.valuesShape;a.backend_util.validateDefaultValueShape(this.defaultValueShape,e);const r=this.tensorShapeFromTensor(this.shape,this.shapeShape),i=a.backend_util.combineRaggedTensorToTensorShapes(this.raggedRank,r,e);i[0]<0&&(i[0]=n);for(let l=1;l<=this.raggedRank;++l)i[l]<0&&(i[l]=this.getMaxWidth(l));return i}calculateFirstParentOutputIndex(n,e,s){const r=Math.min(n,s),o=[];let i=0;for(let l=0;l<r;++l,i+=e)o.push(i);for(let l=r;l<n;++l)o.push(-1);return a.util.assert(o.length===n,()=>"Final length of result must be equal to firstDimension."),o}calculateOutputIndexRowSplit(n,e,s,r){const o=n.length,i=[];for(let l=0;l<o-1;++l){const u=n[l+1]-n[l];let c=Math.min(r,u),d=e[l];-1===d&&(c=0);for(let h=0;h<c;++h)i.push(d),d+=s;for(let h=0;h<u-c;++h)i.push(-1)}if(o>0&&i.length!==n[o-1])throw new Error("Invalid row split size.");return i}calculateOutputIndexValueRowID(n,e,s,r){const o=n.length,i=[];if(0===o)return[];let l=0,u=n[0];if(u>=e.length)throw new Error(`Got currentValueRowId=${u}, which is not less than ${e.length}`);let c=e[u];i.push(c);for(let d=1;d<o;++d){const h=n[d];if(h===u)c>=0&&(++l,l<r?c+=s:c=-1);else{if(l=0,u=h,h>=e.length)throw new Error(`Got nextValueRowId=${h} which is not less than ${e.length}`);c=e[h]}i.push(c)}if(i.length!==n.length)throw new Error("Invalid row ids.");return i}calculateOutputIndex(n,e,s,r){const o=this.getRowPartitionTensor(n),i=this.getRowPartitionTypeByDimension(n);switch(i){case dt.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(o,e,s,r);case dt.ROW_SPLITS:if(o.length-1>e.length)throw new Error(`Row partition size is greater than output size: ${o.length-1} > ${e.length}`);return this.calculateOutputIndexRowSplit(o,e,s,r);default:throw new Error(`Unsupported partition type: ${dt[i]}`)}}getFirstDimensionSize(){const n=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw new Error("No row_partition_types given.");const e=this.rowPartitionTypes[0];switch(e){case dt.FIRST_DIM_SIZE:return n[0];case dt.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case dt.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${dt[e]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const e=this.getFirstDimensionSize(),s=this.calculateOutputSize(e),r=new Array(this.raggedRank+1);r[r.length-1]=1;for(let u=r.length-2;u>=0;--u)r[u]=r[u+1]*s[u+1];const o=Fc(s,!1),i=a.util.getArrayFromDType(this.valuesDType,a.util.sizeFromShape(o));if(r[0]*s[0]>0){let u=this.calculateFirstParentOutputIndex(e,r[0],s[0]);for(let c=1;c<=this.raggedRank;++c)u=this.calculateOutputIndex(c-1,u,r[c],s[c]);this.setOutput(this.raggedRank,u,i,o)}return[o,i]}setOutput(n,e,s,r){if(0===s.length)return;const o=this.values,i=s;let l=r.slice();l=l.slice(n+1);const u=a.util.sizeFromShape(l),c=e.length;let d=this.defaultValue;if(d.length!==u&&1!==d.length){const m=this.defaultValueShape;(0,a.tidy)(()=>{const x=(0,a.reshape)(d,m);d=(0,a.broadcastTo)(x,l).dataSync()})}let h=0,p=0,f=0;for(let m=0;m<=c;++m){let x=m<c?e[m]:-1;if(x!==f){if(p<f){const g=o.subarray(h*u);_c(i.subarray(p*u),g,(f-p)*u)}if(m>=c&&(x=Math.floor(s.length/u)),x>f)if(1===this.defaultValue.length)i.subarray(f*u,x*u).fill(this.defaultValue[0]),f=x;else for(;x>f;)_c(i.slice(f*u),d,u),++f;x<0?(h=m+1,p=f):(h=m,p=f,f=p+1)}else++f}}}function _c(t,n,e){for(let s=0;s<e;s++)t[s]=n[s]}function Fc(t,n){const e=[];for(let s of t){if(s<0){if(!n)throw new Error(`Dimension ${s} must be >= 0`);if(s<-1)throw new Error(`Dimension ${s} must be >= -1`);s=-1}e.push(s)}return e}function Oc(t,n,e,s,r,o,i,l,u,c){return new Dr(t,n,e,s,r,o,i,l,u,c).compute()}const $I={kernelName:a.RaggedTensorToTensor,backendName:"cpu",kernelFunc:function DI(t){const{inputs:n,backend:e,attrs:s}=t,{shape:r,values:o,defaultValue:i,rowPartitionTensors:l}=n,{rowPartitionTypes:u}=s,c=e.data.get(r.dataId).values,d=e.data.get(o.dataId).values,h=e.data.get(i.dataId).values,p=l.map(g=>e.data.get(g.dataId).values),f=l.map(g=>g.shape),[m,x]=Oc(c,r.shape,d,o.shape,o.dtype,h,i.shape,p,f,u);return e.makeTensorInfo(m,o.dtype,x)}};function Pc(t,n,e,s){if(t===n||t<n&&e<0||n<t&&e>1)return a.util.makeZerosTypedArray(0,s);const l=Math.abs(Math.ceil((n-t)/e)),u=a.util.makeZerosTypedArray(l,s);n<t&&1===e&&(e=-1),u[0]=t;for(let c=1;c<u.length;c++)u[c]=u[c-1]+e;return u}const _I={kernelName:a.Range,backendName:"cpu",kernelFunc:function EI(t){const{backend:n,attrs:e}=t,{start:s,stop:r,dtype:o,step:i}=e,l=Pc(s,r,i,o);return n.makeTensorInfo([l.length],o,l)}},FI=fe(a.Reciprocal,t=>1/t),OI={kernelName:a.Reciprocal,backendName:"cpu",kernelFunc:FI},zI={kernelName:a.ResizeBilinear,backendName:"cpu",kernelFunc:function PI(t){const{inputs:n,backend:e,attrs:s}=t,{images:r}=n,{alignCorners:o,halfPixelCenters:i,size:l}=s;Q(r,"resizeBilinear");const u=a.util.computeStrides(r.shape),[c,d]=l,[h,p,f,m]=r.shape,x=e.data.get(r.dataId).values,g=new Float32Array(a.util.sizeFromShape([h,c,d,m])),y=[o&&c>1?p-1:p,o&&d>1?f-1:f],b=[o&&c>1?c-1:c,o&&d>1?d-1:d];let C=0;const v=y[0]/b[0],w=y[1]/b[1];for(let S=0;S<h;S++)for(let I=0;I<c;I++){let k;k=i?v*(I+.5)-.5:v*I;const N=Math.max(0,Math.floor(k)),T=k-N,A=Math.min(p-1,Math.ceil(k)),$=S*u[0]+N*u[1],F=S*u[0]+A*u[1];for(let O=0;O<d;O++){let P;P=i?w*(O+.5)-.5:w*O;const z=Math.max(0,Math.floor(P)),M=P-z,E=Math.min(f-1,Math.ceil(P)),B=$+z*u[2],W=F+z*u[2],U=$+E*u[2],H=F+E*u[2];for(let G=0;G<m;G++){const q=x[B+G],X=x[W+G],re=q+(x[U+G]-q)*M;g[C++]=re+(X+(x[H+G]-X)*M-re)*T}}}return e.makeTensorInfo([h,c,d,m],"float32",g)}},MI={kernelName:a.ResizeBilinearGrad,backendName:"cpu",kernelFunc:function LI(t){const{inputs:n,backend:e,attrs:s}=t,{images:r,dy:o}=n,{alignCorners:i}=s;Q([o,r],"resizeBilinearGrad");const l=a.util.computeStrides(r.shape),[u,c,d,h]=r.shape,[,p,f]=o.shape,m=new Float32Array(u*c*d*h),x=[i&&p>1?c-1:c,i&&f>1?d-1:d],g=[i&&p>1?p-1:p,i&&f>1?f-1:f],y=x[0]/g[0],b=x[1]/g[1],C=e.data.get(o.dataId).values;let v=0;for(let w=0;w<u;w++){const S=w*l[0];for(let I=0;I<p;I++){const k=I*y,N=Math.floor(k),T=Math.min(Math.ceil(k),c-1),A=S+N*l[1],$=S+T*l[1],F=k-N,O=1-F;for(let P=0;P<f;P++){const z=P*b,M=Math.floor(z),E=Math.min(Math.ceil(z),d-1),B=z-M,W=1-B,U=A+M*l[2],H=A+E*l[2],G=$+M*l[2],q=$+E*l[2],X=O*W,Y=O*B,ee=F*W,re=F*B;for(let ne=0;ne<h;ne++){const ae=C[v++];m[U+ne]+=ae*X,m[H+ne]+=ae*Y,m[G+ne]+=ae*ee,m[q+ne]+=ae*re}}}}return e.makeTensorInfo([u,d,c,h],"float32",m)}},VI={kernelName:a.ResizeNearestNeighbor,backendName:"cpu",kernelFunc:function BI(t){const{inputs:n,backend:e,attrs:s}=t,{images:r}=n,{alignCorners:o,halfPixelCenters:i,size:l}=s;Q(r,"resizeNearestNeighbor");const u=a.util.computeStrides(r.shape),[c,d]=l,[h,p,f,m]=r.shape,x=e.data.get(r.dataId).values,g=new Float32Array(h*c*d*m),y=[o&&c>1?p-1:p,o&&d>1?f-1:f],b=[o&&c>1?c-1:c,o&&d>1?d-1:d],C=y[0]/b[0],v=y[1]/b[1];let w=0;for(let S=0;S<h;S++){const I=S*u[0];for(let k=0;k<c;k++){const N=i?C*(k+.5):C*k;let T=Math.min(p-1,o?Math.round(N):Math.floor(N));i&&(T=Math.max(0,T));const A=I+T*u[1];for(let $=0;$<d;$++){const F=i?v*($+.5):v*$;let O=Math.min(f-1,o?Math.round(F):Math.floor(F));i&&(O=Math.max(0,O));const P=A+O*u[2];for(let z=0;z<m;z++)g[w++]=x[P+z]}}}return e.makeTensorInfo([h,c,d,m],r.dtype,g)}},UI={kernelName:a.ResizeNearestNeighborGrad,backendName:"cpu",kernelFunc:function WI(t){const{inputs:n,backend:e,attrs:s}=t,{images:r,dy:o}=n,{alignCorners:i}=s;Q([o,r],"resizeNearestNeighborGrad");const l=a.util.computeStrides(r.shape),u=a.util.computeStrides(o.shape),[c,d,h,p]=r.shape,[,f,m]=o.shape,x=new Float32Array(c*d*h*p),g=e.data.get(o.dataId).values,y=[i&&f>1?d-1:d,i&&m>1?h-1:h],b=[i&&f>1?f-1:f,i&&m>1?m-1:m],C=y[0]/b[0],v=y[1]/b[1],w=1/C,S=1/v,I=2*Math.ceil(w)+2,k=2*Math.ceil(S)+2;for(let N=0;N<c;N++){const T=N*l[0];for(let A=0;A<d;A++){const $=T+A*l[1],F=Math.floor(A*w),O=Math.floor(F-I/2);for(let P=0;P<h;P++){const z=$+P*l[2],M=Math.floor(P*S),E=Math.floor(M-k/2);for(let B=0;B<p;B++){let W=0;for(let U=0;U<I;U++){const H=U+O;if(H<0||H>=f)continue;const G=T+H*u[1],q=H*C;if(A===Math.min(d-1,i?Math.round(q):Math.floor(q)))for(let Y=0;Y<k;Y++){const ee=Y+E;if(ee<0||ee>=m)continue;const re=G+ee*u[2],ne=ee*v;P===Math.min(h-1,i?Math.round(ne):Math.floor(ne))&&(W+=g[re+B])}}x[z+B]=W}}}}return e.makeTensorInfo(r.shape,r.dtype,x)}},HI={kernelName:a.Reverse,backendName:"cpu",kernelFunc:function GI(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{dims:o}=s;Q(r,"reverse");const i=r.shape.length,l=a.util.parseAxisParam(o,r.shape);if(0===i)return zt({inputs:{x:r},backend:e});const u=new a.TensorBuffer(r.shape,r.dtype),c=e.bufferSync(r);for(let d=0;d<u.size;d++){const h=u.indexToLoc(d),p=h.slice();l.forEach(f=>p[f]=r.shape[f]-1-p[f]),u.set(c.get(...p),...h)}return e.makeTensorInfo(u.shape,u.dtype,u.values)}},XI={kernelName:a.RotateWithOffset,backendName:"cpu",kernelFunc:({inputs:t,attrs:n,backend:e})=>{const{image:s}=t,{radians:r,fillValue:o,center:i}=n,l=e,u=a.util.getTypedArrayFromDType(s.dtype,a.util.sizeFromShape(s.shape)),[c,d,h,p]=s.shape,[f,m]=a.backend_util.getImageCenter(i,d,h),g=Math.sin(r),y=Math.cos(r),b=l.data.get(s.dataId).values;for(let v=0;v<c;v++){const w=v*h*d*p;for(let S=0;S<d;S++){const I=S*(h*p);for(let k=0;k<h;k++){const N=k*p;for(let T=0;T<p;T++){const A=[c,S,k,T],$=A[2],F=A[1];let O=($-f)*y-(F-m)*g,P=($-f)*g+(F-m)*y;O=Math.round(O+f),P=Math.round(P+m);let z=o;"number"!=typeof o&&(z=3===T?255:o[T]),O>=0&&O<h&&P>=0&&P<d&&(z=b[w+P*(h*p)+O*p+T]),u[w+I+N+T]=z}}}}return{dataId:l.write(u,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},jI=fe(a.Round,t=>{const n=Math.floor(t);return t-n<.5?Math.floor(t):t-n>.5?Math.ceil(t):n%2==0?n:n+1}),KI={kernelName:a.Round,backendName:"cpu",kernelFunc:jI},zc=Pt(t=>1/Math.sqrt(t)),qI=rn(a.Rsqrt,zc),ZI={kernelName:a.Rsqrt,backendName:"cpu",kernelFunc:qI};function kn(t,n,e,s,r,o,i,l,u,c){const d=[s/r,r],h=t.values,p=n.values;if(0===s)return(0,a.buffer)(e,n.dtype);const f=u instanceof a.TensorBuffer?u:(0,a.buffer)(d,n.dtype);"string"==typeof u||"number"==typeof u?f.values.fill(u):"boolean"==typeof u&&f.values.fill(+u);for(let m=0;m<o;m++){const x=[];let g=0;for(let y=0;y<i;y++){const b=h[m*i+y];x.push(b),g+=b*l[y]}if(g<0||g>=s/r)throw new Error(`Invalid indices: ${x} does not index into ${e}`);for(let y=0;y<r;y++)c?f.values[g*r+y]+=p[m*r+y]:f.values[g*r+y]=0===n.rank?p[0]:p[m*r+y]}return f}const QI={kernelName:a.ScatterNd,backendName:"cpu",kernelFunc:function YI(t){const{inputs:n,backend:e,attrs:s}=t,{indices:r,updates:o}=n,{shape:i}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:d,outputSize:h}=a.backend_util.calculateShapes(o,r,i),x=kn(e.bufferSync(r),e.bufferSync(o),i,h,c,u,l,d,0,!0);return e.makeTensorInfo(i,x.dtype,x.values)}};function JI(t,n){let e=0,s=t.length,r=0;for(;e<s;)r=Math.floor((e+s)/2),t[r]<n?e=r+1:s=r;return s}function ek(t,n){let e=0,s=t.length,r=0;for(;e<s;)r=Math.floor((e+s)/2),t[r]<=n?e=r+1:s=r;return s}const sk={kernelName:a.SearchSorted,backendName:"cpu",kernelFunc:function nk(t){const{inputs:n,backend:e,attrs:s}=t,{sortedSequence:r,values:o}=n,{side:i}=s,c=function tk(t,n,e,s,r,o){const i=a.util.getArrayFromDType("int32",e*r);for(let l=0;l<e;++l){const u=t.slice(l*s,(l+1)*s),c=l*r;for(let d=0;d<r;++d)i[c+d]="left"===o?JI(u,n[d+c]):ek(u,n[d+c])}return i}(e.data.get(r.dataId).values,e.data.get(o.dataId).values,r.shape[0],r.shape[1],o.shape[1],i);return e.makeTensorInfo(o.shape,"int32",c)}},ok={kernelName:a.Select,backendName:"cpu",kernelFunc:function rk(t){const{inputs:n,backend:e}=t,{condition:s,t:r,e:o}=n;Q([s,r,o],"select");const i=s.shape.length,l=e.data.get(s.dataId).values,u=e.data.get(r.dataId).values,c=e.data.get(o.dataId).values,d=(0,a.upcastType)(r.dtype,o.dtype),h=a.util.makeZerosTypedArray(a.util.sizeFromShape(r.shape),d);let p=0;const f=0===i||i>1||1===r.shape.length?1:a.util.sizeFromShape(r.shape.slice(1));for(let m=0;m<l.length;m++)for(let x=0;x<f;x++)h[p++]=1===l[m]?u[m]:c[m];return e.makeTensorInfo(r.shape,d,h)}},ik=a.backend_util.SELU_SCALEALPHA,ak=a.backend_util.SELU_SCALE,lk=fe(a.Selu,t=>t>=0?ak*t:ik*(Math.exp(t)-1)),uk={kernelName:a.Selu,backendName:"cpu",kernelFunc:lk},ck=fe(a.Sign,t=>t<0?-1:t>0?1:0),dk={kernelName:a.Sign,backendName:"cpu",kernelFunc:ck},hk=fe(a.Sin,t=>Math.sin(t)),pk={kernelName:a.Sin,backendName:"cpu",kernelFunc:hk},fk=fe(a.Sinh,t=>Math.sinh(t)),mk={kernelName:a.Sinh,backendName:"cpu",kernelFunc:fk},Lc=Math.log(1.1920928955078125e-7)+2,gk=fe(a.Softplus,t=>{const n=t>-Lc,e=t<Lc,s=Math.exp(t);let r;return r=e?s:n?t:Math.log(1+s),r}),xk={kernelName:a.Softplus,backendName:"cpu",kernelFunc:gk},bk={kernelName:a.SpaceToBatchND,backendName:"cpu",kernelFunc:function yk(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{blockShape:o,paddings:i}=s;Q([r],"spaceToBatchND");const l=a.util.sizeFromShape(o),u=[[0,0]];u.push(...i);for(let S=1+o.length;S<r.shape.length;++S)u.push([0,0]);const c=Nc.kernelFunc({inputs:{x:r},backend:e,attrs:{paddings:u,constantValue:0}}),d=a.backend_util.getReshaped(c.shape,o,l,!1),h=a.backend_util.getPermuted(d.length,o.length,!1),p=a.backend_util.getReshapedPermuted(c.shape,o,l,!1),x=ve({inputs:{x:c},backend:e,attrs:{shape:d}}),b=Qe({inputs:{x},backend:e,attrs:{perm:h}}),w=ve({inputs:{x:b},backend:e,attrs:{shape:p}});return e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(x),e.disposeIntermediateTensorInfo(b),w}};function Mc(t,n,e,s,r,o,i){const l=n[0],u=o[0],c=new Array(u),d=new Array(l),h=n[1];if(0===u){if(0!==l)throw new Error(a.backend_util.getSparseFillEmptyRowsIndicesDenseShapeMismatch(l));return[a.util.getArrayFromDType(e,0),[0,h],a.util.getArrayFromDType(r,0),c,d]}let p=!0,f=0;const m=new Array(u).fill(0);for(let g=0;g<l;++g){const y=t[g*h];if(y<0)throw new Error(a.backend_util.getSparseFillEmptyRowsNegativeIndexErrorMessage(g,y));if(y>=u)throw new Error(a.backend_util.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(g,y,u));++m[y],p=p&&y>=f,f=y}let x=!0;for(let g=0;g<u;++g){const y=0===m[g];c[g]=y,x=x&&!y,m[g]=Math.max(m[g],1),g>0&&(m[g]+=m[g-1])}if(x&&p){const g=t,y=s;for(let b=0;b<l;++b)d[b]=b;return[g,[l,h],y,c,d]}{const g=m[u-1],y=a.util.getArrayFromDType(e,g*h),b=a.util.getArrayFromDType(r,g),C=new Array(u).fill(0);for(let v=0;v<l;++v){const w=t[v*h],I=(0===w?0:m[w-1])+C[w];C[w]++;for(let k=0;k<h;++k)y[I*h+k]=t[v*h+k];b[I]=s[v],d[v]=I}for(let v=0;v<u;++v)if(0===C[v]){const S=0===v?0:m[v-1];y[S*h+0]=v;for(let I=1;I<h;++I)y[S*h+I]=0;b[S]=i}return[y,[g,h],b,c,d]}}const Ck={kernelName:a.SparseFillEmptyRows,backendName:"cpu",kernelFunc:function vk(t){const{inputs:n,backend:e}=t,{indices:s,values:r,denseShape:o,defaultValue:i}=n;if(1!==o.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${o.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n        ${r.shape}`);if(0!==i.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${i.shape}`);const l=e.data.get(s.dataId).values,u=e.data.get(r.dataId).values,c=e.data.get(o.dataId).values,d=e.data.get(i.dataId).values[0],[h,p,f,m,x]=Mc(l,s.shape,s.dtype,u,r.dtype,c,d);return[e.makeTensorInfo(p,s.dtype,h),e.makeTensorInfo([p[0]],r.dtype,f),e.makeTensorInfo([m.length],"bool",new Uint8Array(m.map(g=>Number(g)))),e.makeTensorInfo([x.length],s.dtype,new Int32Array(x))]}};function Bc(t,n,e,s,r){const o=a.util.sizeFromShape(s),i=n[0],l=r.length,u=[];let c=1,d=-1;for(let g=0;g<l;++g){const y=r[g];if(-1===y){if(-1!==d)throw new Error(a.backend_util.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(d,g));d=g,u.push(1)}else{if(y<0)throw new Error(a.backend_util.getSparseReshapeNegativeOutputDimErrorMessage(g,y));c*=y,u.push(y)}}if(-1!==d){if(c<=0)throw new Error(a.backend_util.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());const g=Math.trunc(o/c);if(c*g!==o)throw new Error(a.backend_util.getSparseReshapeInputOutputMultipleErrorMessage(s,u));u[d]=g}if(a.util.sizeFromShape(u)!==o)throw new Error(a.backend_util.getSparseReshapeInputOutputMismatchErrorMessage(s,u));const p=s.length,f=[];if(p>0){f[p-1]=1;for(let g=p-2;g>=0;--g)f[g]=f[g+1]*s[g+1]}const m=[];if(l>0){m[l-1]=1;for(let g=l-2;g>=0;--g)m[g]=m[g+1]*u[g+1]}const x=a.util.getArrayFromDType(e,i*l);for(let g=0;g<i;++g){let y=0;for(let b=0;b<p;++b)y+=t[g*p+b]*f[b];for(let b=0;b<l;++b)x[g*l+b]=Math.trunc(y/m[b]),y%=m[b]}return[x,[i,l],u]}const Sk={kernelName:a.SparseReshape,backendName:"cpu",kernelFunc:function wk(t){const{inputs:n,backend:e}=t,{inputIndices:s,inputShape:r,newShape:o}=n;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${r.shape}`);if(1!==o.shape.length)throw new Error(`Target shape should be a vector but received shape ${o.shape}`);const i=Array.from(e.data.get(r.dataId).values),l=e.data.get(s.dataId).values,u=Array.from(e.data.get(o.dataId).values),[c,d,h]=Bc(l,s.shape,s.dtype,i,u);return[e.makeTensorInfo(d,s.dtype,c),e.makeTensorInfo([h.length],o.dtype,new Int32Array(h))]}};function wi(t,n,e,s,r,o=!1,i=0){const l=s.length,u=[n[0],t.length/n[0]],c=u[1],h=l>0?r[l-1]+1:0;if(h<0)throw new Error(a.backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());const p=n.slice();p[0]=h;const f=p.reduce((C,v)=>C*v,1),m=a.util.getArrayFromDType(e,f);if(0===l)return h>0&&m.fill(i),[m,p];if(h<=0)throw new Error(a.backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let x=0,g=1,y=0,b=r[x];for(;;){let C=0;if(g<l){if(C=r[g],b===C){++g;continue}if(b>=C)throw new Error(a.backend_util.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(b<0||b>=h)throw new Error(a.backend_util.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(b,h));b>y&&m.fill(i,y*c,b*c);for(let v=x;v<g;++v){const w=s[v];if(w<0||w>=u[0])throw new Error(a.backend_util.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(v,s[v],u[0]));for(let S=0;S<c;S++)m[b*c+S]+=t[w*c+S]}if(o)for(let v=0;v<c;v++)m[b*c+v]/=g-x;if(x=g,++g,y=b+1,b=C,g>l)break}return y<h&&m.fill(i,y*c,h*c),[m,p]}const kk={kernelName:a.SparseSegmentMean,backendName:"cpu",kernelFunc:function Ik(t){const{inputs:n,backend:e}=t,{data:s,indices:r,segmentIds:o}=n;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${r.shape}`);if(1!==o.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${o.shape}`);if(r.shape[0]!==o.shape[0])throw new Error("segmentIds and indices should have same size.");const i=e.data.get(s.dataId).values,l=e.data.get(r.dataId).values,u=e.data.get(o.dataId).values,[c,d]=wi(i,s.shape,s.dtype,l,u,!0);return e.makeTensorInfo(d,s.dtype,c)}},Nk={kernelName:a.SparseSegmentSum,backendName:"cpu",kernelFunc:function Tk(t){const{inputs:n,backend:e}=t,{data:s,indices:r,segmentIds:o}=n;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${r.shape}`);if(1!==o.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${o.shape}`);if(r.shape[0]!==o.shape[0])throw new Error("segmentIds and indices should have same size.");const i=e.data.get(s.dataId).values,l=e.data.get(r.dataId).values,u=e.data.get(o.dataId).values,[c,d]=wi(i,s.shape,s.dtype,l,u);return e.makeTensorInfo(d,s.dtype,c)}},Ak={kernelName:a.SparseToDense,backendName:"cpu",kernelFunc:function Rk(t){const{inputs:n,backend:e,attrs:s}=t,{sparseIndices:r,sparseValues:o,defaultValue:i}=n,{outputShape:l}=s,{sliceRank:u,numUpdates:c,sliceSize:d,strides:h,outputSize:p}=a.backend_util.calculateShapes(o,r,l),f=!1,m=e.bufferSync(r);let x;switch(o.dtype){case"bool":x=kn(m,e.bufferSync(o),l,p,d,c,u,h,!!e.data.get(i.dataId).values[0],f);break;case"float32":case"int32":x=kn(m,e.bufferSync(o),l,p,d,c,u,h,e.data.get(i.dataId).values[0],f);break;case"string":x=kn(m,e.bufferSync(o),l,p,d,c,u,h,a.util.decodeString(e.data.get(i.dataId).values[0]),f);break;default:throw new Error(`Unsupported type ${o.dtype}`)}return e.makeTensorInfo(l,x.dtype,x.values)}},$k={kernelName:a.SplitV,backendName:"cpu",kernelFunc:function Dk(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{numOrSizeSplits:o,axis:i}=s,l=a.util.parseAxisParam(i,r.shape)[0],u=a.backend_util.prepareSplitSize(r,o,l),c=new Array(r.shape.length).fill(0),d=r.shape.slice();return u.map(h=>{const p=[...d];p[l]=h;const f=In({inputs:{x:r},backend:e,attrs:{begin:c,size:p}});return c[l]+=h,f})}},Ek=Pt(t=>Math.sqrt(t)),_k=fe(a.Sqrt,t=>Math.sqrt(t)),Fk={kernelName:a.Sqrt,backendName:"cpu",kernelFunc:_k},Ok={kernelName:a.Square,backendName:"cpu",kernelFunc:({inputs:t,backend:n})=>{const{x:e}=t,s=n;Q(e,"square");const r=s.data.get(e.dataId).values,o=new Float32Array(r.length);for(let l=0;l<r.length;++l){const u=r[l];o[l]=u*u}return{dataId:s.write(o,e.shape,e.dtype),shape:e.shape,dtype:e.dtype}}},Pk=_e((t,n)=>{const e=t-n;return e*e}),zk=Me(a.SquaredDifference,Pk),Lk={kernelName:a.SquaredDifference,backendName:"cpu",kernelFunc:zk},Vc=Pt((t,n)=>{const{pattern:e,replaceGlobal:s,rewrite:r}=n;return t.replace(new RegExp(e,s?"g":""),r)}),Mk=rn(a.StaticRegexReplace,Vc),Bk={kernelName:a.StaticRegexReplace,backendName:"cpu",kernelFunc:Mk},Vk=fe(a.Step,(t,n)=>{const e=n;return isNaN(t)?NaN:t>0?1:e.alpha}),Wk={kernelName:a.Step,backendName:"cpu",kernelFunc:Vk};function Wc(t,n,e,s){const r=(0,a.buffer)(t,n.dtype);for(let o=0;o<r.size;o++){const i=r.indexToLoc(o),l=new Array(i.length);for(let u=0;u<l.length;u++)l[u]=i[u]*e[u]+s[u];r.set(n.get(...l),...i)}return r}const Gk={kernelName:a.StridedSlice,backendName:"cpu",kernelFunc:function Uk(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{begin:o,end:i,strides:l,beginMask:u,endMask:c,ellipsisMask:d,newAxisMask:h,shrinkAxisMask:p}=s;Q(r,"stridedSlice");const{finalShapeSparse:f,finalShape:m,isIdentity:x,sliceDim0:g,isSimpleSlice:y,begin:b,end:C,strides:v}=a.slice_util.sliceInfo(r.shape,o,i,l,u,c,d,h,p);let w;if(x)w=ve({inputs:{x:r},backend:e,attrs:{shape:m}});else if(g||y){a.util.assert(r.shape.length>=1,()=>`Input must have rank at least 1, got: ${r.shape.length}`);const S=a.slice_util.computeOutShape(b,C,v),I=In({inputs:{x:r},backend:e,attrs:{begin:b,size:S}});w=ve({inputs:{x:I},backend:e,attrs:{shape:m}}),e.disposeIntermediateTensorInfo(I)}else{const I=Wc(f,e.bufferSync(r),v,b);w=e.makeTensorInfo(m,I.dtype,I.values)}return w}};class Hk{constructor(n,e,s,r,o,i){this.separator=a.util.encodeString(n),this.nGramWidths=e,this.leftPad=a.util.encodeString(s),this.rightPad=a.util.encodeString(r),this.padWidth=o,this.preserveShort=i}getPadWidth(n){return Math.min(this.padWidth<0?n-1:this.padWidth,n-1)}getNumNGrams(n,e){const s=this.getPadWidth(e);return Math.max(0,n+2*s-e+1)}createNGrams(n,e,s,r,o,i){for(let l=0;l<o;++l){const u=this.getPadWidth(i),c=Math.max(0,u-l),d=Math.max(0,u-(o-(l+1))),h=i-(c+d),p=e+(c>0?0:l-u);let f=0;f+=c*this.leftPad.length;for(let b=0;b<h;++b)f+=n[p+b].length;f+=d*this.rightPad.length,f+=(c+d+h-1)*this.separator.length,s[r+l]=new Uint8Array(f);const x=s[r+l];let g=0;const y=b=>b.forEach(C=>x[g++]=C);for(let b=0;b<c;++b)y(this.leftPad),y(this.separator);for(let b=0;b<h-1;++b)y(n[p+b]),y(this.separator);if(h>0){y(n[p+h-1]);for(let b=0;b<d;++b)y(this.separator),y(this.rightPad)}else{for(let b=0;b<d-1;++b)y(this.rightPad),y(this.separator);y(this.rightPad)}}}compute(n,e){const s=n.length,r=e.length;if(r>0){let u=e[0];if(0!==u)throw new Error(`First split value must be 0, got ${u}`);for(let c=1;c<r;++c){let d=e[c]>=u;if(d=d&&e[c]<=s,!d)throw new Error(`Invalid split value ${e[c]}, must be in [${u}, ${s}]`);u=e[c]}if(u!==s)throw new Error(`Last split value must be data size. Expected ${s}, got ${u}`)}const o=r-1,i=a.util.getArrayFromDType("int32",r);if(0===s||0===r){const u=new Array(s);for(let c=0;c<=o;++c)i[c]=0;return[u,i]}i[0]=0;for(let u=1;u<=o;++u){const c=e[u]-e[u-1];let d=0;this.nGramWidths.forEach(h=>{d+=this.getNumNGrams(c,h)}),this.preserveShort&&c>0&&0===d&&(d=1),i[u]=i[u-1]+d}const l=new Array(i[o]);for(let u=0;u<o;++u){const c=e[u];let d=i[u];if(this.nGramWidths.forEach(h=>{const f=this.getNumNGrams(e[u+1]-e[u],h);this.createNGrams(n,c,l,d,f,h),d+=f}),this.preserveShort&&d===i[u]){const h=e[u+1]-e[u];if(0===h)continue;this.createNGrams(n,c,l,d,1,h+2*this.padWidth)}}return[l,i]}}function Uc(t,n,e,s,r,o,i,l){return new Hk(e,s,r,o,i,l).compute(t,n)}const jk={kernelName:a.StringNGrams,backendName:"cpu",kernelFunc:function Xk(t){const{inputs:n,backend:e,attrs:s}=t,{separator:r,nGramWidths:o,leftPad:i,rightPad:l,padWidth:u,preserveShortSequences:c}=s,{data:d,dataSplits:h}=n,p=e.data.get(d.dataId).values,f=e.data.get(h.dataId).values,[m,x]=Uc(p,f,r,o,i,l,u,c);return[e.makeTensorInfo([m.length],"string",m),e.makeTensorInfo(h.shape,"int32",x)]}};function Kk(t,n,e,s){if(!t.length)return;if(0===n.length){for(let o=0;o<t.length;++o)s.push(t.subarray(o,o+1));return}if(1===n.length){const o=n[0];let i=t.indexOf(o);for(;-1!==i;){const l=t.subarray(0,i);(!e||0!==l.length)&&s.push(l),i=(t=t.subarray(i+1)).indexOf(o)}return void((!e||0!==t.length)&&s.push(t))}let r=0;for(let o=0;o<t.length+1;o++)if(o===t.length||-1!==n.indexOf(t[o])){const i=t.subarray(r,o);(!e||0!==i.length)&&s.push(i),r=o+1}}function Gc(t,n,e){const s=t.length,r=[];let o=0,i=0;const l=new Array(s);for(let p=0;p<s;++p){const f=r.length;Kk(t[p],n,e,r);const m=r.length-f;l[p]=m,o+=m,i=Math.max(i,m)}const u=a.util.getArrayFromDType("int32",2*o),c=new Array(o),d=[s,i];let h=0;for(let p=0;p<s;++p)for(let f=0;f<l[p];++f)u[2*h]=p,u[2*h+1]=f,c[h]=r[h],++h;return[u,c,d]}const Zk={kernelName:a.StringSplit,backendName:"cpu",kernelFunc:function qk(t){const{inputs:n,backend:e,attrs:s}=t,{skipEmpty:r}=s,{input:o,delimiter:i}=n;if("string"!==o.dtype)throw new Error("Input must be of datatype string");if(1!==o.shape.length)throw new Error(`Input must be a vector, got shape: ${o.shape}`);if(0!==i.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);const l=e.data.get(o.dataId).values,u=e.data.get(i.dataId).values[0],[c,d,h]=Gc(l,u,r),p=d.length;return[e.makeTensorInfo([p,2],"int32",c),e.makeTensorInfo([p],"string",d),e.makeTensorInfo([2],"int32",new Int32Array(h))]}};function Hc(t,n){const e=a.util.getArrayFromDType("int32",t.length);for(let s=0;s<t.length;++s)e[s]=a.util.fingerPrint64(t[s]).modulo(n).getLowBitsUnsigned();return e}const Qk={kernelName:a.StringToHashBucketFast,backendName:"cpu",kernelFunc:function Yk(t){const{inputs:n,backend:e,attrs:s}=t,{numBuckets:r}=s,{input:o}=n;if("string"!==o.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const l=Hc(e.data.get(o.dataId).values,r);return e.makeTensorInfo(o.shape,"int32",l)}},Jk=fe(a.Tan,t=>Math.tan(t)),e1={kernelName:a.Tan,backendName:"cpu",kernelFunc:Jk},t1=fe(a.Tanh,t=>Math.tanh(t));function Xc(t,n){const e=new Array(t.rank);for(let r=0;r<e.length;r++)e[r]=t.shape[r]*n[r];const s=(0,a.buffer)(e,t.dtype);for(let r=0;r<s.values.length;++r){const o=s.indexToLoc(r),i=new Array(t.rank);for(let u=0;u<i.length;u++)i[u]=o[u]%t.shape[u];const l=t.locToIndex(i);s.values[r]=t.values[l]}return s}const Is=(t,n)=>{const e=n.value-t.value;return 0===e?t.index-n.index:e};function jc(t,n,e=0,s=t.length-1){for(;s>e;){if(s-e>600){const l=s-e+1,u=n-e+1,c=Math.log(l),d=.5*Math.exp(2*c/3),h=.5*Math.sqrt(c*d*(l-d)/l)*Math.sign(u-l/2);jc(t,n,Math.max(e,Math.floor(n-u*d/l+h)),Math.min(s,Math.floor(n+(l-u)*d/l+h)))}const r=t[n];let o=e,i=s;for(a.util.swap(t,e,n),Is(t[s],r)>0&&a.util.swap(t,e,s);o<i;){for(a.util.swap(t,o,i),o++,i--;Is(t[o],r)<0;)o+=1;for(;Is(t[i],r)>0;)i-=1}0===Is(t[e],r)?a.util.swap(t,e,i):(i+=1,a.util.swap(t,i,s)),i<=n&&(e=i+1),n<=i&&(s=i-1)}}function Kc(t,n,e,s,r){const o=n[n.length-1],[i,l]=[t.length/o,o],u=a.util.getTypedArrayFromDType(e,i*s),c=a.util.getTypedArrayFromDType("int32",i*s);for(let h=0;h<i;h++){const p=h*l,f=t.subarray(p,p+l);let m=new Array(f.length);f.forEach((b,C)=>m[C]={value:b,index:C}),s<m.length&&(jc(m,s),m=m.slice(0,s)),r&&m.sort(Is);const x=h*s,g=u.subarray(x,x+s),y=c.subarray(x,x+s);for(let b=0;b<s;b++)g[b]=m[b].value,y[b]=m[b].index}const d=n.slice();return d[d.length-1]=s,[(0,a.buffer)(d,e,u),(0,a.buffer)(d,"int32",c)]}function qc(t,n,e){switch(e){case"reflect":return function d1(t,n){let e=t;if(e<0)if(n<=1)e=0;else{const s=2*n;e<s&&(e=s*Math.trunc(-e/s)+e),e=e<-n?e+s:-e-1}else if(e>n-1)if(n<=1)e=0;else{const s=2*n;e-=s*Math.trunc(e/s),e>=n&&(e=s-e-1)}return a.util.clamp(0,e,n-1)}(t,n);case"wrap":return function h1(t,n){let e=t;return e<0?n<=1?e=0:e+=n*(Math.trunc(-e/(n-1))+1):e>n-1&&(n<=1?e=0:e-=n*Math.trunc(e/(n-1))),a.util.clamp(0,e,n-1)}(t,n);case"nearest":return function f1(t,n){return a.util.clamp(0,t,n-1)}(t,n);default:return function p1(t,n){return t}(t)}}function ks(t,n,e,s,r,o,i,l,u,c,d){return 0<=l&&l<n&&0<=u&&u<e?t[i*s+l*r+u*o+c]:d}function m1(t,n,e,s,r,o,i,l,u,c,d){return ks(t,n,e,s,r,o,i,Math.round(l),Math.round(u),c,d)}function g1(t,n,e,s,r,o,i,l,u,c,d){const h=Math.floor(l),p=Math.floor(u),f=h+1,m=p+1;return(f-l)*((m-u)*ks(t,n,e,s,r,o,i,h,p,c,d)+(u-p)*ks(t,n,e,s,r,o,i,h,m,c,d))+(l-h)*((m-u)*ks(t,n,e,s,r,o,i,f,p,c,d)+(u-p)*ks(t,n,e,s,r,o,i,f,m,c,d))}function Zc(t,n,e,s){const r=a.util.parseAxisParam(n,e)[0],o=[1,e[0],1];for(let m=0;m<r;m++)o[0]*=e[m];o[1]=e[r];for(let m=r+1;m<e.length;m++)o[2]*=e[m];const i=new Map,l=new Int32Array(e[r]),u=new a.TensorBuffer(o,s,t),c=[],d=1===o[0]&&1===o[2];for(let m=0;m<e[r];m++){let x;if(d)x=t[m].toString();else{const y=[];for(let b=0;b<o[0];b++)for(let C=0;C<o[2];C++)y.push(u.get(b,m,C));x=y.join(",")}const g=i.get(x);if(null!=g)l[m]=g;else{const y=i.size;i.set(x,y),l[m]=y,c.push(m)}}const h=o.slice();h[1]=i.size;const p=new a.TensorBuffer(h,s);c.forEach((m,x)=>{for(let g=0;g<o[0];g++)for(let y=0;y<o[2];y++)p.set(u.get(g,m,y),g,x,y)});const f=e.slice();return f[r]=h[1],{outputValues:p.values,outputShape:f,indices:l}}const S1=[pv,mv,xv,bv,uv,Cv,Iv,Tv,Rv,Dv,Ev,Fv,Pv,Mv,Vv,Gv,Xv,Kv,Zv,dv,Qv,tC,sC,oC,aC,av,uC,dC,ov,pC,mC,gC,yC,vC,wC,IC,TC,RC,DC,EC,FC,PC,LC,BC,VC,UC,HC,jC,KC,qC,ZC,QC,sw,Zb,ow,iw,fw,mw,gw,yw,Tw,Nw,Aw,$w,Fw,Pw,Lw,Bw,Ww,Gw,Xw,Yb,Kw,fC,Zw,Qw,eS,Qb,nS,rS,iS,lS,cS,pS,mS,yS,vS,wS,SS,kS,NS,AS,$S,_S,OS,zS,MS,VS,US,XS,qS,ew,YS,eI,sI,iI,lI,cI,hI,pI,Nc,xI,ev,bI,NI,AI,$I,_I,iv,yi,OI,tv,nv,cv,zI,MI,VI,UI,HI,XI,KI,ZI,QI,sk,ok,uk,rv,dk,pk,mk,Jv,jS,xk,bk,Ck,Sk,kk,Nk,Ak,$k,Fk,Ok,Lk,Bk,Wk,Gk,jk,Zk,Qk,Cw,tw,e1,{kernelName:a.Tanh,backendName:"cpu",kernelFunc:t1},{kernelName:a.TensorScatterUpdate,backendName:"cpu",kernelFunc:function s1(t){const{inputs:n,backend:e}=t,{tensor:s,indices:r,updates:o}=n,{sliceRank:i,numUpdates:l,sliceSize:u,strides:c,outputSize:d}=a.backend_util.calculateShapes(o,r,s.shape),p=e.bufferSync(r),f=e.bufferSync(o),m=e.bufferSync(s),x=kn(p,f,s.shape,d,u,l,i,c,m,!1);return e.makeTensorInfo(s.shape,x.dtype,x.values)}},{kernelName:a.Tile,backendName:"cpu",kernelFunc:function o1(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{reps:o}=s;Q(r,"tile");const i=Xc(e.bufferSync(r),o);return e.makeTensorInfo(i.shape,i.dtype,i.values)}},{kernelName:a.TopK,backendName:"cpu",kernelFunc:function a1(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{k:o,sorted:i}=s;Q(r,"topk");const l=e.data.get(r.dataId).values,[u,c]=Kc(l,r.shape,r.dtype,o,i);return[e.makeTensorInfo(u.shape,u.dtype,u.values),e.makeTensorInfo(c.shape,c.dtype,c.values)]}},{kernelName:a.Transform,backendName:"cpu",kernelFunc:function u1(t){const{inputs:n,attrs:e,backend:s}=t,{image:r,transforms:o}=n,{interpolation:i,fillMode:l,fillValue:u,outputShape:c}=e,[d,h,p,f]=r.shape,[m,x]=null!=c?c:[h,p],g=[d,m,x,f],y=a.util.computeStrides(r.shape),b=y[0],C=y[1],v=y[2],w=a.util.computeStrides(g),S=w[0],I=w[1],k=w[2],N=a.util.getTypedArrayFromDType(r.dtype,a.util.sizeFromShape(g));N.fill(u);const T=s.data.get(r.dataId).values,A=s.data.get(o.dataId).values;for(let F=0;F<d;++F){const O=1===o.shape[0]?A:A.subarray(8*F,8*F+8);for(let P=0;P<m;++P)for(let z=0;z<x;++z)for(let M=0;M<f;++M){let E;const B=O[6]*z+O[7]*P+1;if(0===B)continue;const U=(O[3]*z+O[4]*P+O[5])/B,H=qc((O[0]*z+O[1]*P+O[2])/B,p,l),G=qc(U,h,l);switch(i){case"nearest":E=m1(T,h,p,b,C,v,F,G,H,M,u);break;case"bilinear":E=g1(T,h,p,b,C,v,F,G,H,M,u);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${i}`)}N[F*S+P*I+z*k+M]=E}return s.makeTensorInfo(g,r.dtype,N)}return{dataId:s.write(N,g,r.dtype),shape:r.shape,dtype:r.dtype}}},wv,{kernelName:a.Unique,backendName:"cpu",kernelFunc:function x1(t){const{inputs:n,attrs:e,backend:s}=t,{axis:r}=e,{x:o}=n;Q(o,"unique");const i=s.data.get(o.dataId).values,{outputValues:l,outputShape:u,indices:c}=Zc(i,r,o.shape,o.dtype);return[s.makeTensorInfo(u,o.dtype,l),s.makeTensorInfo([c.length],"int32",c)]}},{kernelName:a.Unpack,backendName:"cpu",kernelFunc:function b1(t){const{inputs:n,backend:e,attrs:s}=t,{value:r}=n;let{axis:o}=s;o<0&&(o+=r.shape.length);const i=r.shape.length,l=r.shape[o],u=new Array(i-1);let c=0;for(let f=0;f<i;f++)f!==o&&(u[c++]=r.shape[f]);const d=new Array(i).fill(0),h=r.shape.slice();h[o]=1;const p=new Array(l);for(let f=0;f<p.length;f++){d[o]=f;const m=In({inputs:{x:r},backend:e,attrs:{begin:d,size:h}});p[f]=ve({inputs:{x:m},backend:e,attrs:{shape:u}}),e.disposeIntermediateTensorInfo(m)}return p}},{kernelName:a.UnsortedSegmentSum,backendName:"cpu",kernelFunc:function C1(t){const{inputs:n,backend:e,attrs:s}=t,{x:r,segmentIds:o}=n,{numSegments:i}=s;Q(r,"unsortedSegmentSum");const c=[],d=[],h=r.shape.length-o.shape.length;let p=o;for(let m=0;m<h;++m){const x=Rr({inputs:{input:p},backend:e,attrs:{dim:m+1}});p=x,d.push(x)}for(let m=0;m<i;++m){const x=a.util.createScalarValue(m,"int32"),g=e.makeTensorInfo([],"int32",x),y=sc({inputs:{a:g,b:p},backend:e}),b=on({inputs:{x:y},backend:e,attrs:{dtype:"float32"}}),C=Nr({inputs:{a:b,b:r},backend:e}),v=Ss({inputs:{x:C},backend:e,attrs:{axis:0,keepDims:!1}});c.push(v),d.push(g),d.push(y),d.push(b),d.push(C),d.push(v)}const f=Tc({inputs:c,backend:e,attrs:{axis:0}});return d.forEach(m=>e.disposeIntermediateTensorInfo(m)),f}},dI];for(const t of S1)(0,a.registerKernel)(t);const an={},$r={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function It(t,n){if(!(t in an)||null!=n){const s=function T1(t,n){if(1!==t&&2!==t)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const e=null==n?function k1(t){if(!(0,a.env)().getBool("IS_SAFARI")&&typeof OffscreenCanvas<"u"&&2===t)return new OffscreenCanvas(300,150);if(typeof document<"u")return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(t):n;return e.addEventListener("webglcontextlost",s=>{s.preventDefault(),delete an[t]},!1),(0,a.env)().getBool("SOFTWARE_WEBGL_ENABLED")&&($r.failIfMajorPerformanceCaveat=!1),1===t?e.getContext("webgl",$r)||e.getContext("experimental-webgl",$r):e.getContext("webgl2",$r)}(t,n);if(null===s)return console.log("Could not get context for WebGL version",t),null;an[t]=s}const e=an[t];return null==e||e.isContextLost()?(delete an[t],It(t)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),an[t])}var Er=function(t){return t[t.DENSE=0]="DENSE",t[t.SHARED_BATCH=1]="SHARED_BATCH",t}(Er||{}),ht=function(t){return t[t.RENDER=0]="RENDER",t[t.UPLOAD=1]="UPLOAD",t[t.PIXELS=2]="PIXELS",t[t.DOWNLOAD=3]="DOWNLOAD",t}(ht||{}),Ge=function(t){return t[t.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",t[t.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",t[t.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",t[t.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",t[t.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16",t}(Ge||{});function Ts(t,n){return[n,t]}function _r(t){const n=a.util.sizeFromShape(t),e=Math.ceil(n/4);return a.util.sizeToSquarishShape(e)}function Zn(t,n){return[Math.max(1,Math.ceil(n/2)),Math.max(1,Math.ceil(t/2))]}function Si(t,n){const e=t;let s,r,o,i,l,u,c,d,h,p;return 2===(0,a.env)().getNumber("WEBGL_VERSION")?(s=e.R32F,r=e.R16F,o=e.RGBA16F,i=e.RGBA32F,l=e.RED,c=4,d=1,h=e.HALF_FLOAT,p=e.FLOAT,u=e.RGBA8):(s=t.RGBA,r=t.RGBA,o=t.RGBA,i=e.RGBA,l=t.RGBA,c=4,d=4,h=null!=n?n.HALF_FLOAT_OES:null,p=t.FLOAT,u=t.RGBA),{internalFormatFloat:s,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:o,internalFormatPackedFloat:i,textureFormatFloat:l,downloadTextureFormat:u,downloadUnpackNumChannels:c,defaultNumChannels:d,textureTypeHalfFloat:h,textureTypeFloat:p}}function K(t,n){const e=n();return(0,a.env)().getBool("DEBUG")&&function A1(t){const n=t.getError();if(n!==t.NO_ERROR)throw new Error("WebGL Error: "+function _1(t,n){switch(n){case t.NO_ERROR:return"NO_ERROR";case t.INVALID_ENUM:return"INVALID_ENUM";case t.INVALID_VALUE:return"INVALID_VALUE";case t.INVALID_OPERATION:return"INVALID_OPERATION";case t.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case t.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case t.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${n}`}}(t,n))}(t),e}function E1(t){return!!((0,a.env)().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===t||5.96e-8<Math.abs(t)&&Math.abs(t)<65504)}function Fr(t,n){return Gt(t,()=>t.getExtension(n),'Extension "'+n+'" not supported on this browser.')}const P1=/ERROR: [0-9]+:([0-9]+):/g;function Yc(t,n){const e=P1.exec(n);if(null==e)return console.log(`Couldn't parse line number in error: ${n}`),void console.log(t);const s=+e[1],r=t.split("\n"),o=r.length.toString().length+2,i=r.map((h,p)=>a.util.rightPad((p+1).toString(),o)+h);let l=0;for(let h=0;h<i.length;h++)l=Math.max(i[h].length,l);const u=i.slice(0,s-1),c=i.slice(s-1,s),d=i.slice(s);console.log(u.join("\n")),console.log(n.split("\n")[0]),console.log(`%c ${a.util.rightPad(c[0],l)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(d.join("\n"))}function Ii(t,n){if(K(t,()=>t.validateProgram(n)),!1===t.getProgramParameter(n,t.VALIDATE_STATUS))throw console.log(t.getProgramInfoLog(n)),new Error("Shader program validation failed.")}function Qc(t,n,e,s,r,o,i){const l=t.getAttribLocation(n,e);return-1!==l&&(K(t,()=>t.bindBuffer(t.ARRAY_BUFFER,s)),K(t,()=>t.vertexAttribPointer(l,r,t.FLOAT,!1,o,i)),K(t,()=>t.enableVertexAttribArray(l)),!0)}function j1(t,n,e,s){K(t,()=>function G1(t,n,e){(function ed(t,n){const e=t.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,s=n+t.TEXTURE0;if(s<t.TEXTURE0||s>e)throw new Error(`textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${e}].`)})(t,e),K(t,()=>t.activeTexture(t.TEXTURE0+e)),K(t,()=>t.bindTexture(t.TEXTURE_2D,n))}(t,n,s)),K(t,()=>t.uniform1i(e,s))}function ki(t,n,e){K(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,e)),K(t,()=>t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,n,0))}function Jc(t,n){K(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,n)),K(t,()=>t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,null,0))}function Or(t){const n=t.checkFramebufferStatus(t.FRAMEBUFFER);if(n!==t.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function K1(t,n){switch(n){case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case t.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${n}`}}(t,n))}function Gt(t,n,e){const s=K(t,()=>n());if(null==s)throw new Error(e);return s}function Yn(t,n=2){return a.util.sizeFromShape(t.slice(0,t.length-n))}function Qn(t){if(0===t.length)throw Error("Cannot get rows and columns of an empty shape array.");return[t.length>1?t[t.length-2]:1,t[t.length-1]]}function Pr(t){let n=[1,1,1];return 0===t.length||1===t.length&&1===t[0]||(n=[Yn(t),...Qn(t)]),n}function zr(t){return t%2==0}function Lr(t,n){if(t=t.slice(-2),n=n.slice(-2),a.util.arraysEqual(t,n)||!t.length||!n.length||0===t[0]||0===t[1]||0===n[0]||0===n[1])return!0;if(t.length!==n.length){const e=t[t.length-1],s=n[n.length-1];if(e===s||zr(e)&&zr(s)&&(1===t[0]||1===n[0]))return!0}return t[1]===n[1]&&zr(t[0])&&zr(n[0])}let Mr,Br;function pt(t,n){return null!=t.getExtension(n)}function td(t){try{if(null!=It(t))return!0}catch(n){return console.log("Error when getting WebGL context: ",n),!1}return!1}function Ti(t){const n=Si(t),e=t.createTexture();t.bindTexture(t.TEXTURE_2D,e),t.texImage2D(t.TEXTURE_2D,0,n.internalFormatFloat,1,1,0,n.textureFormatFloat,n.textureTypeFloat,null);const o=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,o),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,e,0);const i=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(e),t.deleteFramebuffer(o),i}function Ns(t,n){Array.isArray(t)||(t=[t]),t.forEach(e=>{null!=e&&a.util.assert("complex64"!==e.dtype,()=>`${n} does not support complex64 tensors in the WebGL backend.`)})}const J=(0,a.env)();function je(){let t,n,e,s,r,o,i,l,u,c;return 2===(0,a.env)().getNumber("WEBGL_VERSION")?(t="#version 300 es",n="in",e="out",s="in",r="texture",o="outputColor",i="out vec4 outputColor;",l=(0,a.env)().getBool("WEBGL2_ISNAN_CUSTOM")?"\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ":"",u="",c="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(t="",n="attribute",e="varying",s="varying",r="texture2D",o="gl_FragColor",i="",l="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",u="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",c="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:t,attribute:n,varyingVs:e,varyingFs:s,texture2D:r,output:o,defineOutput:i,defineSpecialNaN:l,defineSpecialInf:u,defineRound:c}}function Tn(t,n,e="index"){const s=a.util.computeStrides(n);return s.map((r,o)=>`int ${t[o]} = ${e} / ${r}; ${o===s.length-1?`int ${t[o+1]} = ${e} - ${t[o]} * ${r}`:`index -= ${t[o]} * ${r}`};`).join("")}function Vr(t,n,e="index"){const s=a.util.computeStrides(n);return s.map((r,o)=>`int ${t[o]} = ${e} / outShapeStrides[${o}]; ${o===s.length-1?`int ${t[o+1]} = ${e} - ${t[o]} * outShapeStrides[${o}]`:`index -= ${t[o]} * outShapeStrides[${o}]`};`).join("")}function Ni(t){const n=a.util.computeStrides(t).map(e=>e.toString());return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${n[0]} + coords.y * ${n[1]} + coords.z;\n  }\n`}J.registerFlag("HAS_WEBGL",()=>J.getNumber("WEBGL_VERSION")>0),J.registerFlag("WEBGL_VERSION",()=>td(2)?2:td(1)?1:0),J.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1),J.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>2===J.get("WEBGL_VERSION")),J.registerFlag("WEBGL_CPU_FORWARD",()=>!0),J.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),J.registerFlag("WEBGL_PACK",()=>J.getBool("HAS_WEBGL")),J.registerFlag("WEBGL_PACK_NORMALIZATION",()=>J.getBool("WEBGL_PACK")),J.registerFlag("WEBGL_PACK_CLIP",()=>J.getBool("WEBGL_PACK")),J.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>J.getBool("WEBGL_PACK")),J.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>J.getBool("WEBGL_PACK")),J.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>J.getBool("WEBGL_PACK")),J.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>J.getBool("WEBGL_PACK")),J.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>J.getBool("WEBGL_PACK")),J.registerFlag("WEBGL_PACK_REDUCE",()=>J.getBool("WEBGL_PACK")),J.registerFlag("WEBGL_LAZILY_UNPACK",()=>J.getBool("WEBGL_PACK")),J.registerFlag("WEBGL_CONV_IM2COL",()=>J.getBool("WEBGL_PACK")),J.registerFlag("WEBGL_PACK_CONV2DTRANSPOSE",()=>J.getBool("WEBGL_PACK")),J.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>function Z1(t){if(null==Mr){const n=It(t);Mr=n.getParameter(n.MAX_TEXTURE_SIZE)}return Mr}(J.getNumber("WEBGL_VERSION"))),J.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>function Y1(t){if(null==Br){const n=It(t);Br=n.getParameter(n.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,Br)}(J.getNumber("WEBGL_VERSION"))),J.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{const t=J.getNumber("WEBGL_VERSION");return 0===t?0:function Q1(t){if(0===t)return 0;let n;const e=It(t);return n=pt(e,"EXT_disjoint_timer_query_webgl2")&&2===t?2:pt(e,"EXT_disjoint_timer_query")?1:0,n}(t)}),J.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>J.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!a.device_util.isMobile()),J.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>function J1(t){if(0===t)return!1;const n=It(t);if(1===t){if(!pt(n,"OES_texture_float"))return!1}else if(!pt(n,"EXT_color_buffer_float"))return!1;return Ti(n)}(J.getNumber("WEBGL_VERSION"))),J.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>!J.getBool("WEBGL_FORCE_F16_TEXTURES")&&J.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),J.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>function eT(t){if(0===t)return!1;const n=It(t);if(1!==t){if(pt(n,"EXT_color_buffer_float"))return Ti(n);const s="EXT_color_buffer_half_float";if(pt(n,s)){const r=n.getExtension(s);return function tT(t,n){const e=Si(t,n),s=t.createTexture();t.bindTexture(t.TEXTURE_2D,s),t.texImage2D(t.TEXTURE_2D,0,e.internalFormatHalfFloat,1,1,0,e.textureFormatFloat,e.textureTypeHalfFloat,null);const i=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,i),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,s,0);const l=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(s),t.deleteFramebuffer(i),l}(n,r)}return!1}return!(!pt(n,"OES_texture_float")||!pt(n,"WEBGL_color_buffer_float"))&&Ti(n)}(J.getNumber("WEBGL_VERSION"))),J.registerFlag("WEBGL_FENCE_API_ENABLED",()=>function nT(t){return 2===t&&null!=It(t).fenceSync}(J.getNumber("WEBGL_VERSION"))),J.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>J.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0),J.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,t=>{if("number"!=typeof t)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be a number but got ${t}.`);if(t<0&&-1!==t)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${t}.`)}),J.registerFlag("WEBGL_FLUSH_THRESHOLD",()=>a.device_util.isMobile()?1:-1,t=>{if("number"!=typeof t)throw new Error(`WEBGL_FLUSH_THRESHOLD must be a number but got ${t}.`);if(t<0&&-1!==t)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${t}.`)}),J.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",()=>128),J.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",()=>!1),J.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e5),J.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",()=>128),J.registerFlag("WEBGL_EXP_CONV",()=>!1),J.registerFlag("SOFTWARE_WEBGL_ENABLED",()=>J.getBool("IS_TEST")),J.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE",()=>1/0),J.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE",()=>!1),J.registerFlag("WEBGL2_ISNAN_CUSTOM",()=>!1),J.registerFlag("ENGINE_COMPILE_ONLY",()=>!1);const nd="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:sd}=a.backend_util;function oT(t,n,e){const s=[];if(t.forEach(f=>{const m=a.util.sizeFromShape(f.shapeInfo.logicalShape);if(f.shapeInfo.isUniform?s.push(`uniform float ${f.name}${m>1?`[${m}]`:""};`):(s.push(`uniform sampler2D ${f.name};`),s.push(`uniform int offset${f.name};`)),e.enableShapeUniforms){const{uniformShape:x}=Ai(e.packedInputs,f.shapeInfo.logicalShape,f.shapeInfo.texShape);switch(x.length){case 1:s.push(`uniform int ${f.name}Shape;`);break;case 2:s.push(`uniform ivec2 ${f.name}Shape;`);break;case 3:s.push(`uniform ivec3 ${f.name}Shape;`);break;case 4:s.push(`uniform ivec4 ${f.name}Shape;`)}s.push(`uniform ivec2 ${f.name}TexShape;`)}}),e.enableShapeUniforms){switch(n.logicalShape.length){case 1:s.push("uniform int outShape;");break;case 2:s.push("uniform ivec2 outShape;"),s.push("uniform int outShapeStrides;");break;case 3:s.push("uniform ivec3 outShape;"),s.push("uniform ivec2 outShapeStrides;");break;case 4:s.push("uniform ivec4 outShape;"),s.push("uniform ivec3 outShapeStrides;")}s.push("uniform ivec2 outTexShape;")}e.customUniforms&&e.customUniforms.forEach(f=>{s.push(`uniform ${f.type} ${f.name}${f.arrayIndex?`[${f.arrayIndex}]`:""};`)});const r=s.join("\n"),o=t.map(f=>function iT(t,n,e=!1,s){let r="";r+=e?rd(t,s):Jn(t,s);return t.shapeInfo.logicalShape.length<=n.logicalShape.length&&(r+=e?function MT(t,n){const e=t.name,s=e.charAt(0).toUpperCase()+e.slice(1),r="get"+s+"AtOutCoords",o=t.shapeInfo.logicalShape.length,i=n.logicalShape.length,l=sd(t.shapeInfo.logicalShape,n.logicalShape),u=xe(i),c=i-o;let d;const h=["x","y","z","w","u","v"];d=0===o?"":i<2&&l.length>=1?"coords = 0;":l.map(b=>`coords.${h[b+c]} = 0;`).join("\n");let p="";p=i<2&&o>0?"coords":t.shapeInfo.logicalShape.map((b,C)=>`coords.${h[C+c]}`).join(", ");let f="return outputValue;";const x=1===a.util.sizeFromShape(t.shapeInfo.logicalShape),y=1===a.util.sizeFromShape(n.logicalShape);if(1!==o||x||y){if(x&&!y)f=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(l.length){const b=o-2,C=o-1;l.indexOf(b)>-1&&l.indexOf(C)>-1?f="return vec4(outputValue.x);":l.indexOf(b)>-1?f="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":l.indexOf(C)>-1&&(f="return vec4(outputValue.xx, outputValue.zz);")}}else f="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${r}() {\n      ${u} coords = getOutputCoords();\n      ${d}\n      vec4 outputValue = get${s}(${p});\n      ${f}\n    }\n  `}(t,n):function BT(t,n){const e=t.name,s=e.charAt(0).toUpperCase()+e.slice(1),r="get"+s+"AtOutCoords",l=t.shapeInfo.logicalShape.length,u=n.logicalShape.length;if(!t.shapeInfo.isUniform&&l===u&&null==t.shapeInfo.flatOffset&&a.util.arraysEqual(t.shapeInfo.texShape,n.texShape))return`\n      float ${r}() {\n        return sampleTexture(${e}, resultUV);\n      }\n    `;const c=xe(u),d=sd(t.shapeInfo.logicalShape,n.logicalShape),h=u-l;let p;const f=["x","y","z","w","u","v"];p=0===l?"":u<2&&d.length>=1?"coords = 0;":d.map(x=>`coords.${f[x+h]} = 0;`).join("\n");let m="";return m=u<2&&l>0?"coords":t.shapeInfo.logicalShape.map((x,g)=>`coords.${f[g+h]}`).join(", "),`\n    float ${r}() {\n      ${c} coords = getOutputCoords();\n      ${p}\n      return get${s}(${m});\n    }\n  `}(t,n)),r}(f,n,e.packedInputs,e.enableShapeUniforms)).join("\n"),i=n.texShape,l=je(),u=function uT(t){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${t.texture2D}(textureSampler, uv).r;\n    }\n  `}(l);let c,d,h=function hT(t){return`${t.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${t.varyingFs} vec2 resultUV;\n    ${t.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${t.defineSpecialNaN}\n    ${t.defineSpecialInf}\n    ${t.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${pT}\n    ${fT}\n    ${mT}\n  `}(l);return n.isPacked?(c=function aT(t,n,e){switch(t.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function xT(t,n,e){const s=[Math.ceil(n[0]/2),Math.ceil(n[1]/2)];return 1===s[0]?e?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${s[1]}.0);\n      }\n    `:1===s[1]?e?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${s[0]}.0);\n      }\n    `:e?"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      return 2 * (resTexRC.x * ${s[1]} + resTexRC.y);\n    }\n  `}(0,n,e);case 2:return function kT(t,n,e){const s=[Math.ceil(n[0]/2),Math.ceil(n[1]/2)];if(a.util.arraysEqual(t,n))return e?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${s[0]}, ${s[1]}));\n      }\n    `;const r=Math.ceil(t[1]/2);return e?"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(t,n,e);case 3:return function bT(t,n,e){if(e)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const s=[Math.ceil(n[0]/2),Math.ceil(n[1]/2)],r=Math.ceil(t[2]/2),o=r*Math.ceil(t[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      int b = index / ${o};\n      index -= b * ${o};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(t,n,e);default:return function CT(t,n,e){if(e)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const s=[Math.ceil(n[0]/2),Math.ceil(n[1]/2)],r=Math.ceil(t[t.length-1]/2),o=r*Math.ceil(t[t.length-2]/2);let i=o,l="",u="b, r, c";for(let c=2;c<t.length-1;c++)i*=t[t.length-c-1],l=`\n      int b${c} = index / ${i};\n      index -= b${c} * ${i};\n    `+l,u=`b${c}, `+u;return`\n    ivec${t.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      ${l}\n\n      int b = index / ${o};\n      index -= b * ${o};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${t.length}(${u});\n    }\n  `}(t,n,e)}}(n.logicalShape,i,e.enableShapeUniforms),d=function dT(t){return`\n    void setOutput(vec4 val) {\n      ${t.output} = val;\n    }\n  `}(l)):(c=function lT(t,n,e){switch(t.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function yT(t,n,e){return 1===n[0]?e?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${n[1]}.0);\n      }\n    `:1===n[1]?e?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${n[0]}.0);\n      }\n    `:e?"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      return resTexRC.x * ${n[1]} + resTexRC.y;\n    }\n  `}(0,n,e);case 2:return function TT(t,n,e){return a.util.arraysEqual(t,n)?e?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${n[0]}, ${n[1]}));\n      }\n    `:1===t[1]?e?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${n[0]}, ${n[1]}));\n        int index = resTexRC.x * ${n[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `:1===t[0]?e?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${n[0]}, ${n[1]}));\n        int index = resTexRC.x * ${n[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `:e?"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      int r = index / ${t[1]};\n      int c = index - r * ${t[1]};\n      return ivec2(r, c);\n    }\n  `}(t,n,e);case 3:return function vT(t,n,e){if(e)return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${Vr(["r","c","d"],t)}\n    return ivec3(r, c, d);\n  }\n`;const s=Tn(["r","c","d"],t);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      ${s}\n      return ivec3(r, c, d);\n    }\n  `}(t,n,e);case 4:return function wT(t,n,e){if(e)return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${Vr(["r","c","d","d2"],t)}\n      return ivec4(r, c, d, d2);\n    }\n  `;const s=Tn(["r","c","d","d2"],t);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n      ${s}\n      return ivec4(r, c, d, d2);\n    }\n  `}(t,n,e);case 5:return function ST(t,n){const e=Tn(["r","c","d","d2","d3"],t);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${n[0]},\n                             ${n[1]}));\n\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      ${e}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(t,n);case 6:return function IT(t,n){const e=Tn(["r","c","d","d2","d3","d4"],t);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${n[0]}, ${n[1]}));\n      int index = resTexRC.x * ${n[1]} + resTexRC.y;\n\n      ${e}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(t,n);default:throw new Error(`${t.length}-D output sampling is not yet supported`)}}(n.logicalShape,i,e.enableShapeUniforms),d=function cT(t){return`\n    void setOutput(float val) {\n      ${t.output} = vec4(val, 0, 0, 0);\n    }\n  `}(l)),e.packedInputs&&(h+=gT),[h,u,d,r,c,o,e.userCode].join("\n")}function Jn(t,n=!1){const e=t.shapeInfo.logicalShape;switch(e.length){case 0:return function RT(t,n){const e=t.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return`float ${s}() {return ${e};}`;const[r,o]=t.shapeInfo.texShape;if(1===r&&1===o)return`\n      float ${s}() {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const i=Nn(e);if(n)return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], ${i});\n      return sampleTexture(${e}, uv);\n    }\n  `;const[l,u]=t.shapeInfo.texShape;return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${l}, ${u}, ${i});\n      return sampleTexture(${e}, uv);\n    }\n  `}(t,n);case 1:return function DT(t,n){const e=t.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return`\n      float ${s}(int index) {\n        ${es(t)}\n      }\n    `;const r=t.shapeInfo.texShape,o=r[0],i=r[1];if(1===i&&1===o)return`\n      float ${s}(int index) {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const l=Nn(e);return 1===i?n?`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${l}) + 0.5) / float(${e}TexShape[0]));\n        return sampleTexture(${e}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${l}) + 0.5) / ${o}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `:1===o?n?`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${l}) + 0.5) / float(${e}TexShape[1]), 0.5);\n        return sampleTexture(${e}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${l}) + 0.5) / ${i}.0, 0.5);\n        return sampleTexture(${e}, uv);\n      }\n    `:n?`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], index + ${l});\n      return sampleTexture(${e}, uv);\n    }\n  `:`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${o}, ${i}, index + ${l});\n      return sampleTexture(${e}, uv);\n    }\n  `}(t,n);case 2:return function ET(t,n){const e=t.shapeInfo.logicalShape,s=t.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),o=t.shapeInfo.texShape;if(null!=o&&a.util.arraysEqual(e,o))return n?`\n      float ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${o[1]}.0, ${o[0]}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;const{newShape:i,keptDims:l}=a.util.squeezeShape(e);if(i.length<e.length){const f=["row","col"];return`\n      ${Jn(ts(t,i),n)}\n      float ${r}(int row, int col) {\n        return ${r}(${ns(f,l)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${e[1]}, 1)));\n        ${es(t)}\n      }\n    `;const c=o[0],d=o[1],h=Nn(s);return 1===d?n?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${s}TexShape[0]));\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${c}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `:1===c?n?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${s}TexShape[1]), 0.5);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${d}.0, 0.5);\n      return sampleTexture(${s}, uv);\n    }\n  `:n?`\n      float ${r}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${s}Shape[1] + col + ${h};\n        vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${e[1]} + col + ${h};\n    vec2 uv = uvFromFlat(${c}, ${d}, index);\n    return sampleTexture(${s}, uv);\n  }\n`}(t,n);case 3:return function FT(t,n){const e=t.shapeInfo.logicalShape,s=t.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),o=e[1]*e[2],i=e[2],{newShape:l,keptDims:u}=a.util.squeezeShape(e);if(l.length<e.length){const g=["row","col","depth"];return`\n        ${Jn(ts(t,l),n)}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${ns(g,u)});\n        }\n      `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${o}, ${i}, 1)));\n        ${es(t)}\n      }\n    `;const d=t.shapeInfo.texShape,h=d[0],p=d[1],f=t.shapeInfo.flatOffset;if(p===o&&null==f)return n?`\n      float ${r}(int row, int col, int depth) {\n        int stride1 = ${s}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${i}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${p}.0, ${h}.0);\n          return sampleTexture(${s}, uv);\n        }\n      `;if(p===i&&null==f)return n?`\n      float ${r}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${s}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${e[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${p}.0, ${h}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;const m=Nn(s);return n?`\n    float ${r}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${s}Shape[1] * ${s}Shape[2];\n      int stride1 = ${s}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${m};\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n      return sampleTexture(${s}, uv);\n    }\n    `:`\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${o} + col * ${i} + depth + ${m};\n        vec2 uv = uvFromFlat(${h}, ${p}, index);\n        return sampleTexture(${s}, uv);\n      }\n  `}(t,n);case 4:return function PT(t,n){const e=t.shapeInfo.logicalShape,s=t.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),o=e[3],i=e[2]*o,l=e[1]*i,{newShape:u,keptDims:c}=a.util.squeezeShape(e);if(u.length<e.length){const C=["row","col","depth","depth2"];return`\n      ${Jn(ts(t,u),n)}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${ns(C,c)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${l}, ${i}, ${o}, 1)));\n        ${es(t)}\n      }\n    `;const d=t.shapeInfo.flatOffset,h=t.shapeInfo.texShape,p=h[0],f=h[1],m=`int stride2 = ${s}Shape[3];`,x=`int stride1 = ${s}Shape[2] * stride2;`,g=`int stride0 = ${s}Shape[1] * stride1;`;if(f===l&&null==d)return n?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        ${m}\n        ${x}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${i}, ${o}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${p}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;if(f===o&&null==d)return n?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${s}Shape[1] * ${s}Shape[2], ${s}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${e[1]*e[2]}, ${e[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${p}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;const y=Nn(s);return n?`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${m}\n      ${x}\n      ${g}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index + ${y});\n      return sampleTexture(${s}, uv);\n    }\n  `:`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${l} + col * ${i} +\n          depth * ${o} + depth2;\n      vec2 uv = uvFromFlat(${p}, ${f}, index + ${y});\n      return sampleTexture(${s}, uv);\n    }\n  `}(t,n);case 5:return function zT(t){const n=t.shapeInfo.logicalShape,e=t.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),r=n[4],o=n[3]*r,i=n[2]*o,l=n[1]*i,{newShape:u,keptDims:c}=a.util.squeezeShape(n);if(u.length<n.length){const g=["row","col","depth","depth2","depth3"];return`\n      ${Jn(ts(t,u))}\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        return ${s}(${ns(g,c)});\n      }\n    `}if(t.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${l}, ${i}, ${o}, ${r})) +\n          depth3;\n        ${es(t)}\n      }\n    `;const d=t.shapeInfo.flatOffset,h=t.shapeInfo.texShape,p=h[0],f=h[1];if(f===l&&null==d)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${o}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${p}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;if(f===r&&null==d)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${n[1]*n[2]*n[3]},\n               ${n[2]*n[3]}, ${n[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${p}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${l} + col * ${i} + depth * ${o} +\n          depth2 * ${r} + depth3 + ${Nn(e)};\n      vec2 uv = uvFromFlat(${p}, ${f}, index);\n      return sampleTexture(${e}, uv);\n    }\n  `}(t);case 6:return function LT(t){const n=t.shapeInfo.logicalShape,e=t.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),{newShape:r,keptDims:o}=a.util.squeezeShape(n);if(r.length<n.length){const y=["row","col","depth","depth2","depth3","depth4"];return`\n      ${Jn(ts(t,r))}\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${s}(${ns(y,o)});\n      }\n    `}const i=n[5],l=n[4]*i,u=n[3]*l,c=n[2]*u,d=n[1]*c;if(t.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${d}, ${c}, ${u}, ${l})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${es(t)}\n      }\n    `;const h=t.shapeInfo.flatOffset,p=t.shapeInfo.texShape,f=p[0],m=p[1];if(m===d&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${c}, ${u}, ${l}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${m}.0, ${f}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;if(m===i&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${n[1]*n[2]*n[3]*n[4]},\n               ${n[2]*n[3]*n[4]},\n               ${n[3]*n[4]},\n               ${n[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${m}.0, ${f}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${d} + col * ${c} + depth * ${u} +\n          depth2 * ${l} + depth3 * ${i} + depth4 + ${Nn(e)};\n      vec2 uv = uvFromFlat(${f}, ${m}, index);\n      return sampleTexture(${e}, uv);\n    }\n  `}(t);default:throw new Error(`${e.length}-D input sampling is not yet supported`)}}function rd(t,n){switch(t.shapeInfo.logicalShape.length){case 0:return function NT(t){const n=t.name;return`\n    vec4 ${"get"+n.charAt(0).toUpperCase()+n.slice(1)}() {\n      return ${je().texture2D}(${n}, halfCR);\n    }\n  `}(t);case 1:return function AT(t,n){const e=t.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),r=t.shapeInfo.texShape,o=je();if(n)return`\n    vec4 ${s}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${o.texture2D}(${e}, uv);\n    }\n  `;const i=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];return`\n    vec4 ${s}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${i[0]}, ${i[1]}, index);\n      return ${o.texture2D}(${e}, uv);\n    }\n  `}(t,n);case 2:return function $T(t,n){const e=t.shapeInfo.logicalShape,s=t.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),o=t.shapeInfo.texShape,i=o[0],l=o[1],u=je();if(null!=o&&a.util.arraysEqual(e,o))return n?`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n\n        return ${u.texture2D}(${s}, uv);\n      }\n    `:`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${l}.0, ${i}.0);\n\n        return ${u.texture2D}(${s}, uv);\n      }\n    `;if(n)return`\n    vec4 ${r}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${u.texture2D}(${s}, uv);\n    }\n  `;const c=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)];return`\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${Math.ceil(e[1]/2)}, ${c[0]}, ${c[1]}, row, col);\n      return ${u.texture2D}(${s}, uv);\n    }\n  `}(t,n);case 3:return function _T(t,n){const e=t.shapeInfo.logicalShape,s=t.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),o=t.shapeInfo.texShape,i=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)];if(1===e[0]){const f=[1,2],x=["b","row","col"];return`\n        ${rd(ts(t,e.slice(1)),n)}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${ns(x,f)});\n        }\n      `}const l=je();if(n)return`\n    vec4 ${r}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `;const u=i[0],c=i[1],d=Math.ceil(e[2]/2);return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${u}, ${c}, ${d*Math.ceil(e[1]/2)}, ${d}, b, row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `}(t,n);default:return function OT(t,n){const e=t.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),r=je();if(n)return`\n    vec4 ${s}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${e}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${e}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${e}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${r.texture2D}(${e}, uv);\n    }\n  `;const o=t.shapeInfo.logicalShape,i=o.length,l=t.shapeInfo.texShape,u=[Math.ceil(l[0]/2),Math.ceil(l[1]/2)],c=u[0],d=u[1],h=Math.ceil(o[i-1]/2);let p=h*Math.ceil(o[i-2]/2),f="int b, int row, int col",m=`b * ${p} + (row / 2) * ${h} + (col / 2)`;for(let x=2;x<i-1;x++)f=`int b${x}, `+f,p*=o[i-x-1],m=`b${x} * ${p} + `+m;return`\n    vec4 ${s}(${f}) {\n      int index = ${m};\n      int texR = index / ${d};\n      int texC = index - texR * ${d};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${d}, ${c});\n      return ${r.texture2D}(${e}, uv);\n    }\n  `}(t,n)}}const pT="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",fT="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",mT="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",gT="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function Nn(t){return`offset${t}`}function es(t){const n=t.name,e=a.util.sizeFromShape(t.shapeInfo.logicalShape);return e<2?`return ${n};`:`\n    for (int i = 0; i < ${e}; i++) {\n      if (i == index) {\n        return ${n}[i];\n      }\n    }\n  `}function xe(t){if(t<=1)return"int";if(2===t)return"ivec2";if(3===t)return"ivec3";if(4===t)return"ivec4";if(5===t)return"ivec5";if(6===t)return"ivec6";throw Error(`GPU for rank ${t} is not yet supported`)}function Ai(t,n,e){const{newShape:s,keptDims:r}=a.util.squeezeShape(n),o=n.length,i=t&&3===o&&1===n[0],l=i?n.slice(1):s,u=!t&&o>1&&!a.util.arraysEqual(n,e)&&s.length<o||i;return{useSqueezeShape:u,uniformShape:u?l:n,keptDims:r}}function ts(t,n){const e=JSON.parse(JSON.stringify(t));return e.shapeInfo.logicalShape=n,e}function ns(t,n){return n.map(e=>t[e]).join(", ")}function id(t,n,e){const s=[],r=[];let o,i,l,u=null,c=null;c=t.getUniformLocation(e,"NAN",!1),1===(0,a.env)().getNumber("WEBGL_VERSION")&&(u=t.getUniformLocation(e,"INFINITY",!1));const d=!1;for(const h of n.variableNames){const p={name:h,uniform:t.getUniformLocation(e,h,d),offset:t.getUniformLocation(e,`offset${h}`,d)};n.enableShapeUniforms&&(p.shape=t.getUniformLocation(e,`${h}Shape`,d),p.texShape=t.getUniformLocation(e,`${h}TexShape`,d)),s.push(p)}if(n.enableShapeUniforms&&(o=t.getUniformLocation(e,"outShape",d),l=t.getUniformLocation(e,"outShapeStrides",d),i=t.getUniformLocation(e,"outTexShape",d)),n.customUniforms)for(const h of n.customUniforms)r.push(t.getUniformLocation(e,h.name,d));return{variablesLocations:s,customUniformLocations:r,infLoc:u,nanLoc:c,outShapeLocation:o,outShapeStridesLocation:l,outTexShapeLocation:i}}function ad(t,n){if(t.length!==n.length)throw Error(`Binary was compiled with ${t.length} inputs, but was executed with ${n.length} inputs`);t.forEach((e,s)=>{const r=e.logicalShape,o=n[s],i=o.shape;if(!a.util.arraysEqual(r,i))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${i} must match`);if(e.isUniform&&o.isUniform)return;const l=e.texShape,u=o.isUniform?null:o.texData.texShape;if(!a.util.arraysEqual(l,u))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${l} and ${u} must match`)})}function He(t){return(0,a.env)().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&t<=4}class GT{constructor(n){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=Er.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const e=je();this.outputShape=n,this.enableShapeUniforms=He(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?Vr(["r","c","d"],n):Tn(["r","c","d"],n)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${e.output} = result;\n      }\n    `}}class HT{constructor(n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=Er.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const e=je();this.outputShape=n,this.enableShapeUniforms=He(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?Vr(["r","c","d"],n):Tn(["r","c","d"],n)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${e.output} = result;\n      }\n    `}}class XT{constructor(n){this.variableNames=["A"],this.outTexUsage=ht.DOWNLOAD;const e=je();this.outputShape=n,this.userCode=`\n      ${nd}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${e.output} = encode_float(x);\n      }\n    `}}class jT{constructor(n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=ht.DOWNLOAD;const e=je();this.outputShape=n,this.userCode=`\n      ${nd}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${e.output} = encode_float(x);\n      }\n    `}}const KT={R:0,G:1,B:2,A:3};class ld{constructor(n,e=!1,s="RGBA"){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const r=je();this.outputShape=n,this.enableShapeUniforms=He(this.outputShape.length);let o="result";e&&(o="floor(result * 255. + 0.5)");let i="";for(let l=0;l<s.length;l++)i+=`\n          if(offset == ${l}) {\n            result = values[${KT[s[l]]}];\n          }`;this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":Ni(n)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int flatIndex = getFlatIndex(coords);\n        float result = 0.;\n        int offset = imod(flatIndex, ${s.length});\n\n        flatIndex = idiv(flatIndex, ${s.length}, 1.);\n\n        int r = flatIndex / texShape[1];\n        if (r < texShape[0]) {\n          int c = imod(flatIndex, texShape[1]);\n          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n          vec4 values = ${r.texture2D}(A, uv);\n          ${i}\n        }\n        ${r.output} = vec4(${o}, 0., 0., 0.);\n      }\n    `}}class qT{constructor(n,e=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const s=je();this.outputShape=n,this.enableShapeUniforms=He(this.outputShape.length);let r="",o="result";e&&(o="floor(result * 255. + 0.5)");for(let i=0;i<=1;i++)for(let l=0;l<=1;l++){const u=2*i+l;r+=`\n          localCoords = coords;\n          if(localCoords[2] + ${l} < ${this.enableShapeUniforms?"outShape[2]":`${n[2]}`}) {\n          localCoords[2] += ${l};\n          if (localCoords[1] + ${i} < ${this.enableShapeUniforms?"outShape[1]":`${n[1]}`}) {\n            localCoords[1] += ${i};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${s.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${u}] = values[0];\n            } else if (offset == 1) {\n              result[${u}] = values[1];\n            } else if (offset == 2) {\n              result[${u}] = values[2];\n            } else {\n              result[${u}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":Ni(n)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${r}\n\n          ${s.output} = ${o};\n        }\n    `}}function Rs(t,n,e,s,r,o){!function W1(t,n){const e=(0,a.env)().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t<=0||n<=0)throw new Error(`Requested texture size [${t}x${n}] is invalid.`);if(t>e||n>e)throw new Error(`Requested texture size [${t}x${n}] greater than WebGL maximum on this browser / GPU [${e}x${e}].`)}(n,e);const i=function V1(t){return Gt(t,()=>t.createTexture(),"Unable to create WebGLTexture.")}(t),l=t.TEXTURE_2D;return K(t,()=>t.bindTexture(l,i)),K(t,()=>t.texParameteri(l,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE)),K(t,()=>t.texParameteri(l,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE)),K(t,()=>t.texParameteri(l,t.TEXTURE_MIN_FILTER,t.NEAREST)),K(t,()=>t.texParameteri(l,t.TEXTURE_MAG_FILTER,t.NEAREST)),1===(0,a.env)().getNumber("WEBGL_VERSION")?K(t,()=>t.texImage2D(l,0,s,n,e,0,r,o,null)):K(t,()=>t.texStorage2D(l,1,s,n,e)),K(t,()=>t.bindTexture(t.TEXTURE_2D,null)),{texture:i,texShape:[e,n]}}function ud(t){return t.internalFormatFloat}function cd(t){return t.internalFormatHalfFloat}function dd(t){return t.downloadTextureFormat}function hd(t){return t.internalFormatPackedFloat}function pd(t){return t.internalFormatPackedHalfFloat}class Di{constructor(n){this.outputTexture=null,this.program=null,this.disposed=!1,this.itemsToPoll=[];const e=(0,a.env)().getNumber("WEBGL_VERSION");if(null!=n?(this.gl=n,function I1(t,n){an[t]=n}(e,n)):this.gl=It(e),n=this.gl,2===(0,a.env)().getNumber("WEBGL_VERSION")){const o=n;this.createVertexArray=()=>K(o,()=>o.createVertexArray()),this.bindVertexArray=i=>K(o,()=>o.bindVertexArray(i)),this.deleteVertexArray=i=>K(o,()=>o.deleteVertexArray(i)),this.getVertexArray=()=>K(o,()=>o.getParameter(o.VERTEX_ARRAY_BINDING))}else if(null!=n){const o=n.getExtension("OES_vertex_array_object");if(null==o)throw new Error("All WebGL1 implementations are expected to offer OES_vertex_array_object.");this.createVertexArray=()=>K(n,()=>o.createVertexArrayOES()),this.bindVertexArray=i=>K(n,()=>o.bindVertexArrayOES(i)),this.deleteVertexArray=i=>K(n,()=>o.deleteVertexArrayOES(i)),this.getVertexArray=()=>K(n,()=>n.getParameter(o.VERTEX_ARRAY_BINDING_OES))}let s="WEBGL_color_buffer_float";const r="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===(0,a.env)().getNumber("WEBGL_VERSION")){const i="OES_texture_half_float";if(this.textureFloatExtension=Fr(this.gl,"OES_texture_float"),pt(this.gl,i))this.textureHalfFloatExtension=Fr(this.gl,i);else if((0,a.env)().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(s),pt(this.gl,r))this.colorBufferHalfFloatExtension=Fr(this.gl,r);else if((0,a.env)().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(s="EXT_color_buffer_float",pt(this.gl,s))this.colorBufferFloatExtension=this.gl.getExtension(s);else{if(!pt(this.gl,r))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(r)}this.vertexBuffer=function YT(t){return function M1(t,n){const e=Gt(t,()=>t.createBuffer(),"Unable to create WebGLBuffer");return K(t,()=>t.bindBuffer(t.ARRAY_BUFFER,e)),K(t,()=>t.bufferData(t.ARRAY_BUFFER,n,t.STATIC_DRAW)),e}(t,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}(this.gl),this.indexBuffer=function QT(t){return function B1(t,n){const e=Gt(t,()=>t.createBuffer(),"Unable to create WebGLBuffer");return K(t,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,e)),K(t,()=>t.bufferData(t.ELEMENT_ARRAY_BUFFER,n,t.STATIC_DRAW)),e}(t,new Uint16Array([0,1,2,2,1,3]))}(this.gl),this.framebuffer=function U1(t){return Gt(t,()=>t.createFramebuffer(),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=Si(this.gl,this.textureHalfFloatExtension)}get debug(){return(0,a.env)().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const n=this.gl;K(n,()=>n.finish()),K(n,()=>n.bindFramebuffer(n.FRAMEBUFFER,null)),K(n,()=>n.deleteFramebuffer(this.framebuffer)),K(n,()=>n.bindBuffer(n.ARRAY_BUFFER,null)),K(n,()=>n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,null)),K(n,()=>n.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(n,e){return this.throwIfDisposed(),function JT(t,n,e,s){const[r,o]=Ts(n,e);return Rs(t,r,o,ud(s),s.textureFormatFloat,t.FLOAT)}(this.gl,n,e,this.textureConfig)}createFloat16MatrixTexture(n,e){return this.throwIfDisposed(),function eN(t,n,e,s){const[r,o]=Ts(n,e);return Rs(t,r,o,cd(s),s.textureFormatFloat,s.textureTypeHalfFloat)}(this.gl,n,e,this.textureConfig)}createUnsignedBytesMatrixTexture(n,e){return this.throwIfDisposed(),function tN(t,n,e,s){const[r,o]=Ts(n,e);return Rs(t,r,o,dd(s),t.RGBA,t.UNSIGNED_BYTE)}(this.gl,n,e,this.textureConfig)}uploadPixelDataToTexture(n,e){this.throwIfDisposed(),function iN(t,n,e){K(t,()=>t.bindTexture(t.TEXTURE_2D,n)),e.data instanceof Uint8Array?2===(0,a.env)().getNumber("WEBGL_VERSION")?K(t,()=>t.texSubImage2D(t.TEXTURE_2D,0,0,0,e.width,e.height,t.RGBA,t.UNSIGNED_BYTE,e.data)):K(t,()=>t.texImage2D(t.TEXTURE_2D,0,t.RGBA,e.width,e.height,0,t.RGBA,t.UNSIGNED_BYTE,e.data)):2===(0,a.env)().getNumber("WEBGL_VERSION")?K(t,()=>t.texSubImage2D(t.TEXTURE_2D,0,0,0,t.RGBA,t.UNSIGNED_BYTE,e)):K(t,()=>t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,e)),K(t,()=>t.bindTexture(t.TEXTURE_2D,null))}(this.gl,n,e)}uploadDenseMatrixToTexture(n,e,s,r){this.throwIfDisposed(),function oN(t,n,e,s,r,o){let i,l,u;K(t,()=>t.bindTexture(t.TEXTURE_2D,n)),r instanceof Uint8Array?(i=new Uint8Array(e*s*4),l=t.UNSIGNED_BYTE,u=t.RGBA):(i=new Float32Array(e*s*4),l=t.FLOAT,u=o.internalFormatPackedFloat),i.set(r),2===(0,a.env)().getNumber("WEBGL_VERSION")?K(t,()=>t.texSubImage2D(t.TEXTURE_2D,0,0,0,e,s,t.RGBA,l,i)):K(t,()=>t.texImage2D(t.TEXTURE_2D,0,u,e,s,0,t.RGBA,l,i)),K(t,()=>t.bindTexture(t.TEXTURE_2D,null))}(this.gl,n,e,s,r,this.textureConfig)}createFloat16PackedMatrixTexture(n,e){return this.throwIfDisposed(),function sN(t,n,e,s){const[r,o]=Zn(n,e);return Rs(t,r,o,pd(s),t.RGBA,s.textureTypeHalfFloat)}(this.gl,n,e,this.textureConfig)}createPackedMatrixTexture(n,e){return this.throwIfDisposed(),function nN(t,n,e,s){const[r,o]=Zn(n,e);return Rs(t,r,o,hd(s),t.RGBA,t.FLOAT)}(this.gl,n,e,this.textureConfig)}deleteMatrixTexture(n){this.throwIfDisposed(),this.outputTexture===n&&(Jc(this.gl,this.framebuffer),this.outputTexture=null),K(this.gl,()=>this.gl.deleteTexture(n))}downloadByteEncodedFloatMatrixFromOutputTexture(n,e,s){return this.downloadMatrixDriver(n,()=>function uN(t,n,e,s){const[r,o]=Ts(n,e),l=new Uint8Array(function N1(t,n){return t*n}(n*e,4));return K(t,()=>t.readPixels(0,0,r,o,s.downloadTextureFormat,t.UNSIGNED_BYTE,l)),new Float32Array(l.buffer)}(this.gl,e,s,this.textureConfig))}downloadPackedMatrixFromBuffer(n,e,s,r,o,i){return function cN(t,n,e,s,r,o,i,l){const u=t,c=new Float32Array(function R1(t,n){const[e,s]=Zn(t,n);return e*s*4}(o,i));return u.bindBuffer(u.PIXEL_PACK_BUFFER,n),u.getBufferSubData(u.PIXEL_PACK_BUFFER,0,c),u.bindBuffer(u.PIXEL_PACK_BUFFER,null),c}(this.gl,n,0,0,0,o,i)}downloadFloat32MatrixFromBuffer(n,e){return function lN(t,n,e){const s=t,r=new Float32Array(e);return s.bindBuffer(s.PIXEL_PACK_BUFFER,n),s.getBufferSubData(s.PIXEL_PACK_BUFFER,0,r),s.bindBuffer(s.PIXEL_PACK_BUFFER,null),r}(this.gl,n,e)}createBufferFromTexture(n,e,s){this.bindTextureToFrameBuffer(n);const r=function aN(t,n,e,s){const r=t.createBuffer();K(t,()=>t.bindBuffer(t.PIXEL_PACK_BUFFER,r));const l=16*n*e;return K(t,()=>t.bufferData(t.PIXEL_PACK_BUFFER,l,t.STREAM_READ)),K(t,()=>t.readPixels(0,0,e,n,t.RGBA,t.FLOAT,0)),K(t,()=>t.bindBuffer(t.PIXEL_PACK_BUFFER,null)),r}(this.gl,e,s);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const n=this.createFence(this.gl);return this.pollFence(n)}createFence(n){let e,s;if((0,a.env)().getBool("WEBGL_FENCE_API_ENABLED")){const r=n,o=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);n.flush(),s=()=>{const i=r.clientWaitSync(o,0,0);return i===r.ALREADY_SIGNALED||i===r.CONDITION_SATISFIED},e=o}else(0,a.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(e=this.beginQuery(),this.endQuery(),s=()=>this.isQueryAvailable(e,(0,a.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):s=()=>!0;return{query:e,isFencePassed:s}}downloadMatrixFromPackedTexture(n,e,s){return this.downloadMatrixDriver(n,()=>function dN(t,n,e){const s=new Float32Array(n*e*4);return K(t,()=>t.readPixels(0,0,e,n,t.RGBA,t.FLOAT,s)),s}(this.gl,e,s))}createProgram(n){this.throwIfDisposed();const e=this.gl;null==this.vertexShader&&(this.vertexShader=function ZT(t){const n=je();return function F1(t,n){const e=Gt(t,()=>t.createShader(t.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(K(t,()=>t.shaderSource(e,n)),K(t,()=>t.compileShader(e)),!1===t.getShaderParameter(e,t.COMPILE_STATUS))throw console.log(t.getShaderInfoLog(e)),new Error("Failed to compile vertex shader.");return e}(t,`${n.version}\n    precision highp float;\n    ${n.attribute} vec3 clipSpacePos;\n    ${n.attribute} vec2 uv;\n    ${n.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}(e));const s=function z1(t){return Gt(t,()=>t.createProgram(),"Unable to create WebGLProgram.")}(e);K(e,()=>e.attachShader(s,this.vertexShader)),K(e,()=>e.attachShader(s,n)),function L1(t,n){if(K(t,()=>t.linkProgram(n)),!(0,a.env)().get("ENGINE_COMPILE_ONLY")&&!1===t.getProgramParameter(n,t.LINK_STATUS))throw console.log(t.getProgramInfoLog(n)),new Error("Failed to link vertex and fragment shaders.")}(e,s);const r=Object.assign(s,{vao:this.createVertexArray()});return this.debug&&Ii(e,r),r}buildVao(n){this.setProgram(n),this.bindVertexArray(n.vao);const e=this.gl;K(e,()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,this.indexBuffer)),function rN(t,n,e){K(t,()=>t.bindBuffer(t.ARRAY_BUFFER,e)),Qc(t,n,"clipSpacePos",e,3,20,0)&&Qc(t,n,"uv",e,2,20,12)}(e,n,this.vertexBuffer)}deleteProgram(n){this.throwIfDisposed(),n===this.program&&(this.program=null),null!=n&&(K(this.gl,()=>this.gl.deleteProgram(n)),this.deleteVertexArray(n.vao))}setProgram(n){this.throwIfDisposed(),this.program=n,null!=this.program&&this.debug&&Ii(this.gl,this.program),K(this.gl,()=>this.gl.useProgram(n))}getUniformLocation(n,e,s=!0){return this.throwIfDisposed(),s?function H1(t,n,e){return Gt(t,()=>t.getUniformLocation(n,e),'uniform "'+e+'" not present in program.')}(this.gl,n,e):function X1(t,n,e){return t.getUniformLocation(n,e)}(this.gl,n,e)}getAttributeLocation(n,e){return this.throwIfDisposed(),K(this.gl,()=>this.gl.getAttribLocation(n,e))}getUniformLocationNoThrow(n,e){return this.throwIfDisposed(),this.gl.getUniformLocation(n,e)}setInputMatrixTexture(n,e,s){this.throwIfDisposed(),this.throwIfNoProgram(),j1(this.gl,n,e,s)}setOutputMatrixTexture(n,e,s){this.setOutputMatrixTextureDriver(n,s,e)}setOutputPackedMatrixTexture(n,e,s){this.throwIfDisposed();const[r,o]=Zn(e,s);this.setOutputMatrixTextureDriver(n,r,o)}setOutputMatrixWriteRegion(n,e,s,r){this.setOutputMatrixWriteRegionDriver(s,n,r,e)}setOutputPackedMatrixWriteRegion(n,e,s,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&Ii(this.gl,this.program),Or(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const n=this.gl;if(this.debug){const e=this.getVertexArray();console.assert(e===this.program.vao,"VAO changed between setProgram and executeProgram!"),this.debugValidate()}K(n,()=>n.drawElements(n.TRIANGLES,6,n.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),K(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=Fr(this.gl,2===(0,a.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===(0,a.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const s=this.gl,r=this.getQueryTimerExtensionWebGL2(),o=s.createQuery();return s.beginQuery(r.TIME_ELAPSED_EXT,o),o}const n=this.getQueryTimerExtensionWebGL1(),e=n.createQueryEXT();return n.beginQueryEXT(n.TIME_ELAPSED_EXT,e),e}endQuery(){if(2===(0,a.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,s=this.getQueryTimerExtensionWebGL2();return void e.endQuery(s.TIME_ELAPSED_EXT)}const n=this.getQueryTimerExtensionWebGL1();n.endQueryEXT(n.TIME_ELAPSED_EXT)}waitForQueryAndGetTime(n){var e=this;return(0,se.Z)(function*(){return yield a.util.repeatedTry(()=>e.disposed||e.isQueryAvailable(n,(0,a.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),e.getQueryTime(n,(0,a.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))})()}getQueryTime(n,e){if(0===e)return null;if(2===e){const s=this.gl;return s.getQueryParameter(n,s.QUERY_RESULT)/1e6}{const s=this.getQueryTimerExtensionWebGL1();return s.getQueryObjectEXT(n,s.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(n,e){if(0===e)return!0;if(2===e){const s=this.gl,r=this.getQueryTimerExtensionWebGL2(),o=s.getQueryParameter(n,s.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(r.GPU_DISJOINT_EXT)),o&&!this.disjoint}{const s=this.getQueryTimerExtensionWebGL1(),r=s.getQueryObjectEXT(n,s.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(s.GPU_DISJOINT_EXT)),r&&!this.disjoint}}pollFence(n){return new Promise(e=>{this.addItemToPoll(()=>n.isFencePassed(),()=>e())})}pollItems(){const n=function hN(t){let n=0;for(;n<t.length&&t[n]();++n);return n-1}(this.itemsToPoll.map(e=>e.isDoneFn));for(let e=0;e<=n;++e){const{resolveFn:s}=this.itemsToPoll[e];s()}this.itemsToPoll=this.itemsToPoll.slice(n+1)}addItemToPoll(n,e){if(this.itemsToPoll.push({isDoneFn:n,resolveFn:e}),this.itemsToPoll.length>1)return;let s;"setTimeoutCustom"in(0,a.env)().platform&&(s=(0,a.env)().platform.setTimeoutCustom.bind((0,a.env)().platform)),a.util.repeatedTry(()=>(this.pollItems(),0===this.itemsToPoll.length),()=>0,null,s)}bindTextureToFrameBuffer(n){this.throwIfDisposed(),ki(this.gl,n,this.framebuffer),this.debug&&Or(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(ki(this.gl,this.outputTexture,this.framebuffer),this.debug&&Or(this.gl)):Jc(this.gl,this.framebuffer)}downloadMatrixDriver(n,e){this.bindTextureToFrameBuffer(n);const s=e();return this.unbindTextureToFrameBuffer(),s}setOutputMatrixTextureDriver(n,e,s){this.throwIfDisposed();const r=this.gl;ki(r,n,this.framebuffer),this.debug&&Or(r),this.outputTexture=n,K(r,()=>r.viewport(0,0,e,s)),K(r,()=>r.scissor(0,0,e,s))}setOutputMatrixWriteRegionDriver(n,e,s,r){this.throwIfDisposed(),K(this.gl,()=>this.gl.scissor(n,e,s,r))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{addImpl:pN,bincountImpl:fd,bincountReduceImpl:fN,bitwiseAndImpl:mN,castImpl:gN,ceilImpl:xN,concatImpl:yN,equalImpl:bN,expImpl:vN,expm1Impl:CN,floorImpl:wN,gatherNdImpl:SN,gatherV2Impl:IN,greaterImpl:kN,greaterEqualImpl:TN,lessImpl:NN,lessEqualImpl:RN,linSpaceImpl:AN,logImpl:DN,maxImpl:$N,maximumImpl:EN,minimumImpl:_N,multiplyImpl:FN,negImpl:ON,notEqualImpl:PN,prodImpl:zN,raggedGatherImpl:LN,raggedRangeImpl:MN,raggedTensorToTensorImpl:BN,rangeImpl:VN,rsqrtImpl:WN,scatterImpl:UN,sigmoidImpl:GN,simpleAbsImpl:md,sliceImpl:HN,sparseFillEmptyRowsImpl:XN,sparseReshapeImpl:jN,sparseSegmentReductionImpl:gd,sqrtImpl:KN,staticRegexReplaceImpl:qN,stridedSliceImpl:ZN,stringNGramsImpl:YN,stringSplitImpl:QN,stringToHashBucketFastImpl:JN,subImpl:eR,tileImpl:tR,topKImpl:nR,transposeImpl:$i,uniqueImpl:sR}=eo;function xd(t,n){return["x","y","z","w","u","v"].slice(0,n).map(e=>`${t}.${e}`)}function Ke(t,n){return 1===n?[t]:xd(t,n)}class oR{constructor(n){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=n,this.rank=n.length,this.enableShapeUniforms=He(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const e=Ke("rc",this.rank),s=xe(this.rank),r=this.getOutOfBoundsCondition(e),o=this.getSetup(e),i=this.getOutput(e);this.userCode=`\n        void main() {\n          ${s} rc = getOutputCoords();\n\n          if(${r}) {\n            setOutput(vec4(0));\n          } else {\n            ${o}\n\n            setOutput(vec4(${i}));\n          }\n        }\n      `}}getSourceCoordsArr(n){const e=[];for(let s=0;s<=1;s++)for(let r=0;r<=1;r++){let o=`${0===s?"r":"rp1"}, ${0===r?"c":"cp1"}`;for(let i=2;i<this.rank;i++)o=`${n[n.length-1-i]},`+o;e.push(o)}return e}getOutOfBoundsCondition(n){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let e="";for(let s=this.rank-2;s<this.rank;s++)e+=`${n[s]} >= ${this.enableShapeUniforms?`outShape[${s}]`:this.outputShape[s]}`,s<this.rank-1&&(e+="||");return e}getSetup(n){if(1===this.rank)return"";const e=n.slice(-2);return`\n      int r = ${e[0]};\n      int c = ${e[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1]};\n      bool rEdge = rp1 >= ${this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2]};\n    `}getOutput(n){const e=this.getSourceCoordsArr(n);return 1===this.rank?`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`:`getA(${e[0]}),\n            cEdge ? 0. : getA(${e[1]}),\n            rEdge ? 0. : getA(${e[2]}),\n            rEdge || cEdge ? 0. : getA(${e[3]})`}}class yd{constructor(n,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=n,this.enableShapeUniforms=He(this.outputShape.length);let s="";for(let r=0;r<4;r++){let o="thisRC = rc;";r%2==1&&(o+="thisRC.z += 1;"),r>1&&(o+="thisRC.y += 1;"),s+=`\n        ${o}\n        ${r>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${r}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${r>0?"}":""}\n      `}this.userCode=`\n      ${function iR(t,n){return`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${n?function rT(t,n,e="index"){const r=function sT(t,n){const e=t.length,s=t.map(o=>`${n}[${o}]`),r=new Array(e-1);r[e-2]=s[e-1];for(let o=e-3;o>=0;--o)r[o]=`(${r[o+1]} * ${s[o+1]})`;return r}(t.map((o,i)=>i),n);return r.map((o,i)=>`int ${t[i]} = ${e} / ${r[i]}; ${i===r.length-1?`int ${t[i+1]} = ${e} - ${t[i]} * ${r[i]}`:`index -= ${t[i]} * ${r[i]}`};`).join("")}(["r","c","d"],"inputShape"):Tn(["r","c","d"],t)}\n      return ivec3(r, c, d);\n    }\n  `}(e,this.enableShapeUniforms)}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":Ni(n)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":n[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":n[2]};\n\n        ${s}\n\n        setOutput(result);\n      }\n    `}}class aR{constructor(n){this.gpgpu=n,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.usedTextures={},this.logEnabled=!1}acquireTexture(n,e,s){const r=vd(e,s),o=Cd(n,r,s);o in this.freeTextures||(this.freeTextures[o]=[]),o in this.usedTextures||(this.usedTextures[o]=[]);const i=bd(n,r,this.gpgpu.gl,this.gpgpu.textureConfig,s);if(this.freeTextures[o].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=i,this.log();const u=this.freeTextures[o].pop();return this.usedTextures[o].push(u),u}let l;return r===Ge.PACKED_2X2_FLOAT32?l=this.gpgpu.createPackedMatrixTexture(n[0],n[1]):r===Ge.PACKED_2X2_FLOAT16?l=this.gpgpu.createFloat16PackedMatrixTexture(n[0],n[1]):r===Ge.UNPACKED_FLOAT32?l=this.gpgpu.createFloat32MatrixTexture(n[0],n[1]):r===Ge.UNPACKED_FLOAT16?l=this.gpgpu.createFloat16MatrixTexture(n[0],n[1]):r===Ge.PACKED_4X1_UNSIGNED_BYTE&&(l=this.gpgpu.createUnsignedBytesMatrixTexture(n[0],n[1])),this.usedTextures[o].push(l),this.numUsedTextures++,this._numBytesAllocated+=i,this.log(),l}releaseTexture(n,e,s,r){if(null==this.freeTextures)return;const o=vd(s,r),i=Cd(e,o,r);i in this.freeTextures||(this.freeTextures[i]=[]);const l=bd(e,o,this.gpgpu.gl,this.gpgpu.textureConfig,r),u=(0,a.env)().getNumber("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==u&&this._numBytesAllocated>u?(this.gpgpu.deleteMatrixTexture(n.texture),this._numBytesAllocated-=l):(this.freeTextures[i].push(n),this.numFreeTextures++,this._numBytesFree+=l),this.numUsedTextures--;const c=this.usedTextures[i],d=c&&c.indexOf(n);if(null==d||d<0)throw new Error("Cannot release a texture that was never provided by this texture manager");c[d]=c[c.length-1],c.pop(),this.log()}log(){if(!this.logEnabled)return;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${this.numFreeTextures+this.numUsedTextures})`);const e=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*e)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const n in this.freeTextures)this.freeTextures[n].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});for(const n in this.usedTextures)this.usedTextures[n].forEach(e=>{this.gpgpu.deleteMatrixTexture(e.texture)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function bd(t,n,e,s,r){const o=function uR(t,n){switch(t){case Ge.PACKED_2X2_FLOAT32:return hd(n);case Ge.PACKED_2X2_FLOAT16:return pd(n);case Ge.UNPACKED_FLOAT32:return ud(n);case Ge.UNPACKED_FLOAT16:return cd(n);case Ge.PACKED_4X1_UNSIGNED_BYTE:return dd(n);default:throw new Error(`Unknown physical texture type ${t}`)}}(n,s);let i;if(r){const[u,c]=Zn(t[0],t[1]);i=u*c}else{const[u,c]=Ts(t[0],t[1]);i=u*c}const l=function lR(t,n){if(n===t.R32F)return 4;if(n===t.R16F)return 2;if(n===t.RGBA32F)return 16;if(n===t.RGBA)return 16;if(n===t.RGBA16F)return 8;if(n===t.RGBA8)return 4;throw new Error(`Unknown internal format ${n}`)}(e,o);return i*l}function vd(t,n){if(t===ht.UPLOAD)return Ge.PACKED_2X2_FLOAT32;if(t===ht.RENDER||null==t)return function cR(t){return(0,a.env)().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?t?Ge.PACKED_2X2_FLOAT32:Ge.UNPACKED_FLOAT32:t?Ge.PACKED_2X2_FLOAT16:Ge.UNPACKED_FLOAT16}(n);if(t===ht.DOWNLOAD||t===ht.PIXELS)return Ge.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${t}`)}function Cd(t,n,e){return`${t[0]}_${t[1]}_${n}_${e}`}class Lt{constructor(n,e){this.variableNames=["A"],this.outputShape=n,this.enableShapeUniforms=He(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${e}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const ot="if (isnan(x)) return x;",dR="return x;",wd="return abs(x);",hR="return (x >= 0.0) ? x : (exp(x) - 1.0);",pR=ot+"\n  return (x < 0.0) ? 0.0 : x;\n",fR=ot+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",ln="return x;",mR="return 1.0 / (1.0 + exp(-1.0 * x));",gR="return x;",xR="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n",yR="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",bR="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",vR="return 1.0 / (1.0 + exp(-1.0 * x));";class un{constructor(n,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n,this.enableShapeUniforms=He(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${e}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class CR{constructor(n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=n,this.enableShapeUniforms=He(this.outputShape.length);const e=n.length,s=Ke("rc",e),r=xe(e),o=function rR(t,n){if(1===t)return"rc";let e="";for(let s=0;s<t;s++)e+=n[s],s<t-1&&(e+=",");return e}(e,s),i=s.slice(-2),l=e<=1?"rc":`vec2(${i.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${o});\n\n        setOutput(getChannel(packedInput, ${l}));\n      }\n    `}}const wR=a.kernel_impls.whereImpl,Ur={},TR=(0,a.env)().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");let AR=(()=>{class t extends a.KernelBackend{nextDataId(){return t.nextDataId++}constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!(0,a.env)().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let s;if(null!=e){if(e instanceof Di)s=e;else{const r=It((0,a.env)().getNumber("WEBGL_VERSION"),e);s=new Di(r)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const r=It((0,a.env)().getNumber("WEBGL_VERSION"));s=new Di(r),this.binaryCache=function kR(t){return t in Ur||(Ur[t]={}),Ur[t]}((0,a.env)().getNumber("WEBGL_VERSION")),this.gpgpuCreatedLocally=!0}this.gpgpu=s,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new aR(this.gpgpu),this.numMBBeforeWarning=function RR(){return null==(0,a.env)().global.screen?1024:(0,a.env)().global.screen.height*(0,a.env)().global.screen.width*window.devicePixelRatio*600/1024/1024}(),this.texData=new a.DataStorage(this,(0,a.engine)())}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}writeTexture(e,s,r,o,i,l){const u=this.makeTensorInfo(s,r),c=this.texData.get(u.dataId);c.isPacked=!1,c.texture={texture:e,texShape:[o,i]},c.texShape=[o,i];const d=Pr(s),h=new ld(d,!1,l),p=this.runWebGLProgram(h,[u],r,[[o,i]]);return p.shape=s,c.texture=null,this.disposeIntermediateTensorInfo(u),p.dataId}write(e,s,r){if(((0,a.env)().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||(0,a.env)().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===r&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const o={id:this.nextDataId()};return this.texData.set(o,{shape:s,dtype:r,values:e,usage:ht.UPLOAD,refCount:1}),o}refCount(e){return this.texData.has(e)?this.texData.get(e).refCount:0}incRef(e){this.texData.get(e).refCount++}decRef(e){this.texData.has(e)&&this.texData.get(e).refCount--}move(e,s,r,o,i){if((0,a.env)().getBool("DEBUG")&&this.checkNumericalProblems(s),"complex64"===o)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:r,dtype:o,values:s,usage:ht.UPLOAD,refCount:i})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const s=this.texData.get(e),{values:r,dtype:o,complexTensorInfos:i,slice:l,shape:u,isPacked:c}=s;if(null!=l){let f;f=c?new un(u,ln):new Lt(u,ln);const m=this.runWebGLProgram(f,[{dataId:e,shape:u,dtype:o}],o),x=this.readSync(m.dataId);return this.disposeIntermediateTensorInfo(m),x}if(null!=r)return this.convertAndCacheOnCPU(e);if("string"===o)return r;const d=null!=this.activeTimers;let h,p;if(d&&(h=a.util.now()),"complex64"===o){const f=this.readSync(i.real.dataId),m=this.readSync(i.imag.dataId);p=a.backend_util.mergeRealAndImagArrays(f,m)}else p=this.getValuesFromTexture(e);return d&&(this.downloadWaitMs+=a.util.now()-h),this.convertAndCacheOnCPU(e,p)}read(e){var s=this;return(0,se.Z)(function*(){if(s.pendingRead.has(e)){const g=s.pendingRead.get(e);return new Promise(y=>g.push(y))}const r=s.texData.get(e),{values:o,shape:i,slice:l,dtype:u,complexTensorInfos:c,isPacked:d}=r;if(null!=l){let g;g=d?new un(i,ln):new Lt(i,ln);const y=s.runWebGLProgram(g,[{dataId:e,shape:i,dtype:u}],u),b=s.read(y.dataId);return s.disposeIntermediateTensorInfo(y),b}if(null!=o)return s.convertAndCacheOnCPU(e);if((0,a.env)().getBool("DEBUG")&&!(0,a.env)().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===(0,a.env)().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let p,f,h=null;if("complex64"!==u&&(0,a.env)().get("WEBGL_BUFFER_SUPPORTED")){p=s.decode(e);const g=s.texData.get(p.dataId);h=s.gpgpu.createBufferFromTexture(g.texture.texture,..._r(i))}if(s.pendingRead.set(e,[]),"complex64"!==u&&(yield s.gpgpu.createAndWaitForFence()),"complex64"===u){const g=yield Promise.all([s.read(c.real.dataId),s.read(c.imag.dataId)]);f=a.backend_util.mergeRealAndImagArrays(g[0],g[1])}else if(null==h)f=s.getValuesFromTexture(e);else{const g=a.util.sizeFromShape(i);f=s.gpgpu.downloadFloat32MatrixFromBuffer(h,g)}if(null!=p&&s.disposeIntermediateTensorInfo(p),null!=h){const g=s.gpgpu.gl;K(g,()=>g.deleteBuffer(h))}const m=s.convertAndCacheOnCPU(e,f),x=s.pendingRead.get(e);return s.pendingRead.delete(e),x.forEach(g=>g(m)),s.pendingDisposal.has(e)&&(s.pendingDisposal.delete(e),s.disposeData(e)&&(0,a.engine)().removeDataId(e,s),s.pendingDeletes--),m})()}readToGPU(e,s={}){const r=this.texData.get(e),{values:o,shape:i,slice:l,dtype:u,isPacked:c,texture:d}=r;if("complex64"===u)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=l){let m;m=c?new un(i,ln):new Lt(i,ln);const x=this.runWebGLProgram(m,[{dataId:e,shape:i,dtype:u}],u),g=this.readToGPU(x,s);return this.disposeIntermediateTensorInfo(x),g}if(null==d)throw null!=o?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const h=this.decode(e,s.customTexShape),p=(0,a.engine)().makeTensorFromTensorInfo(h),f=this.texData.get(h.dataId);return Object.assign({tensorRef:p},f.texture)}bufferSync(e){const s=this.readSync(e.dataId);if("string"===e.dtype)try{const r=s.map(o=>a.util.decodeString(o));return(0,a.buffer)(e.shape,e.dtype,r)}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return(0,a.buffer)(e.shape,e.dtype,s)}checkNumericalProblems(e){if(null!=e)for(let s=0;s<e.length;s++){const r=e[s];if(!E1(r))throw(0,a.env)().getBool("WEBGL_RENDER_FLOAT32_CAPABLE")?Error(`The value ${r} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`):Error(`The value ${r} cannot be represented on this device.`)}}getValuesFromTexture(e){const{shape:s,dtype:r,isPacked:o}=this.texData.get(e),i=a.util.sizeFromShape(s);if((0,a.env)().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const f=this.decode(e),m=this.texData.get(f.dataId),x=this.gpgpu.downloadMatrixFromPackedTexture(m.texture.texture,..._r(s)).subarray(0,i);return this.disposeIntermediateTensorInfo(f),x}const l=(0,a.env)().getBool("WEBGL_PACK")&&!0===o,u=l?Pr(s):s,c=l?new jT(u):new XT(u),d=this.runWebGLProgram(c,[{shape:u,dtype:r,dataId:e}],"float32"),h=this.texData.get(d.dataId),p=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(h.texture.texture,h.texShape[0],h.texShape[1]).subarray(0,i);return this.disposeIntermediateTensorInfo(d),p}timerAvailable(){return(0,a.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){var s=this;const r=this.activeTimers,o=[];let i=!1;null==this.programTimersStack?(this.programTimersStack=o,i=!0):this.activeTimers.push(o),this.activeTimers=o,e();const l=a.util.flatten(this.activeTimers.map(d=>d.query)).filter(d=>null!=d),u=a.util.flatten(this.activeTimers.map(d=>d.name)).filter(d=>null!=d);this.activeTimers=r,i&&(this.programTimersStack=null);const c={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(0,se.Z)(function*(){if((0,a.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const d=yield Promise.all(l);c.kernelMs=a.util.sum(d),c.getExtraProfileInfo=()=>d.map((h,p)=>({name:u[p],ms:h})).map(h=>`${h.name}: ${h.ms}`).join(", ")}else c.kernelMs={error:"WebGL query timers are not supported in this environment."};return s.uploadWaitMs=0,s.downloadWaitMs=0,c})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return(0,a.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:a.util.now(),endMs:null}}endTimer(e){return(0,a.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=a.util.now(),e)}getQueryTime(e){var s=this;return(0,se.Z)(function*(){return(0,a.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?s.gpgpu.waitForQueryAndGetTime(e):e.endMs-e.startMs})()}disposeData(e,s=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(s?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!s&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:r}=this.texData.get(e);return null!=r&&(this.disposeData(r.real.dataId,s),this.disposeData(r.imag.dataId,s)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:s,dtype:r,texShape:o,usage:i,isPacked:l,slice:u}=this.texData.get(e),c=u&&u.origDataId||e,d=this.dataRefCount.get(c);d>1?this.dataRefCount.set(c,d-1):(this.dataRefCount.delete(c),null!=s&&(this.numBytesInGPU-=this.computeBytes(o,r),this.textureManager.releaseTexture(s,o,i,l)));const h=this.texData.get(e);h.texture=null,h.texShape=null,h.isPacked=!1,h.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,s=TR){return(0,a.env)().getBool("WEBGL_CPU_FORWARD")&&e.every(r=>null==this.texData.get(r.dataId).texture&&a.util.sizeFromShape(r.shape)<s)}getGPGPUContext(){return this.gpgpu}where(e){a.backend_util.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const s=e.dataSync();return wR(e.shape,s)}packedUnaryOp(e,s,r){const o=new un(e.shape,s),i=this.compileAndRun(o,[e],r);return(0,a.engine)().makeTensorFromTensorInfo(i)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const o=md(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,o)}if((0,a.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,wd,e.dtype);const s=new Lt(e.shape,wd),r=this.compileAndRun(s,[e]);return(0,a.engine)().makeTensorFromTensorInfo(r)}makeTensorInfo(e,s,r){let o;if("string"===s&&null!=r&&r.length>0&&a.util.isString(r[0])){const i=r.map(l=>a.util.encodeString(l));o=this.write(i,e,s)}else o=this.write(r,e,s);return this.texData.get(o).usage=null,{dataId:o,shape:e,dtype:s}}makeOutput(e,s,r){return(0,a.engine)().makeTensorFromTensorInfo(this.makeTensorInfo(e,s,r),this)}unpackTensor(e){const s=new CR(e.shape);return this.runWebGLProgram(s,[e],e.dtype)}packTensor(e){const s=new oR(e.shape);return this.runWebGLProgram(s,[e],e.dtype,null,!0)}packedReshape(e,s){const r=[Yn(e.shape),...Qn(e.shape)],o={dtype:e.dtype,shape:r,dataId:e.dataId},i=[Yn(s),...Qn(s)],l=new yd(i,r),d=this.runWebGLProgram(l,[o],e.dtype,[r],!0);return{dataId:d.dataId,shape:s,dtype:d.dtype}}decode(e,s){const r=this.texData.get(e),{isPacked:o,shape:i,dtype:l}=r;if(null!=s){const f=a.util.sizeFromShape(i);a.util.assert(f<=s[0]*s[1]*4,()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.")}const u=Pr(i);let c;c=o?new HT(u):new GT(u);const h=[null!=s?s:_r(u)];return{dtype:l,shape:i,dataId:this.runWebGLProgram(c,[{shape:u,dtype:l,dataId:e}],l,h,!0,s).dataId}}runWebGLProgram(e,s,r,o,i=!1,l){const u=this.makeTensorInfo(e.outputShape,r),c=this.texData.get(u.dataId);if(e.packedOutput&&(c.isPacked=!0),e.outPackingScheme===Er.DENSE){const b=null!=l?l:_r(e.outputShape);c.texShape=b.map(C=>2*C)}if(null!=e.outTexUsage&&(c.usage=e.outTexUsage),0===a.util.sizeFromShape(u.shape))return c.values=a.util.getTypedArrayFromDType(u.dtype,0),u;const d=[],h=s.map(b=>{if("complex64"===b.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let C=this.texData.get(b.dataId);if(null==C.texture){if(!e.packedInputs&&a.util.sizeFromShape(b.shape)<=(0,a.env)().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:b.shape,texData:null,isUniform:!0,uniformValues:C.values};e.packedInputs&&(C.isPacked=!0,C.shape=b.shape)}if(this.uploadToGPU(b.dataId),!!C.isPacked!=!!e.packedInputs)b=C.isPacked?this.unpackTensor(b):this.packTensor(b),d.push(b),C=this.texData.get(b.dataId);else if(C.isPacked&&!Lr(C.shape,b.shape)){const v=b,w=b.shape;b.shape=C.shape,b=this.packedReshape(b,w),d.push(b),C=this.texData.get(b.dataId),v.shape=w}return{shape:b.shape,texData:C,isUniform:!1}});this.uploadToGPU(u.dataId);const p={shape:u.shape,texData:c,isUniform:!1},f=function UT(t,n,e){let s="";n.concat(e).forEach(i=>{const l=null!=i.texData&&null!=i.texData.slice&&i.texData.slice.flatOffset>0;if(t.enableShapeUniforms&&!i.isUniform){const u=i.texData.texShape,{useSqueezeShape:c,uniformShape:d,keptDims:h}=Ai(t.packedInputs,i.shape,u);let p="",f="",m="";if(1===d.length&&t.packedInputs){const w=[Math.ceil(u[0]/2),Math.ceil(u[1]/2)];p=`${w[0]>1}_${w[1]>1}`}else if(2!==d.length||t.packedInputs){if(d.length>2&&!t.packedInputs){const w=a.util.computeStrides(d);m=`${w[0]===u[1]}_${w[w.length-1]===u[1]}`}}else f=`${d[0]>1}_${d[1]>1}`;const x=i.shape.length,g=2===d.length&&a.util.arraysEqual(i.shape,u),y=1===a.util.sizeFromShape(i.shape),b=a.backend_util.getBroadcastDims(i.shape,e.shape),C=!t.packedInputs&&x===e.shape.length&&a.util.arraysEqual(u,e.texData.texShape);s+=`${x}_${C}_${c?h:""}_${d.length}_${y}_${b}_${g}_${p}_${f}_${m}_${t.packedInputs||d.length>2?"":`${u[0]>1}_${u[1]>1}`}_${l}`}else s+=`${i.shape}_${i.isUniform?"uniform":i.texData.texShape}_${l}`});let o=t.constructor.name;return o+="_"+s+"_"+t.userCode+`${(0,a.env)().getNumber("WEBGL_VERSION")}`,o}(e,h,p),m=this.getAndSaveBinary(f,()=>function VT(t,n,e,s){const r=e.map((d,h)=>{const p={logicalShape:d.shape,texShape:d.isUniform?null:d.texData.texShape,isUniform:d.isUniform,isPacked:!d.isUniform&&d.texData.isPacked,flatOffset:null};return null!=d.texData&&null!=d.texData.slice&&d.texData.slice.flatOffset>0&&(p.flatOffset=d.texData.slice.flatOffset),{name:n.variableNames[h],shapeInfo:p}}),o=r.map(d=>d.shapeInfo),i={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},l=oT(r,i,n),u=function O1(t,n){const e=Gt(t,()=>t.createShader(t.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(K(t,()=>t.shaderSource(e,n)),K(t,()=>t.compileShader(e)),(0,a.env)().get("ENGINE_COMPILE_ONLY"))return e;if(!1===t.getShaderParameter(e,t.COMPILE_STATUS))throw Yc(n,t.getShaderInfoLog(e)),new Error("Failed to compile fragment shader.");return e}(t.gl,l),c=t.createProgram(u);return(0,a.env)().get("ENGINE_COMPILE_ONLY")?{program:n,fragmentShader:u,source:l,webGLProgram:c,inShapeInfos:o,outShapeInfo:i,variablesLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:(t.buildVao(c),Object.assign({program:n,fragmentShader:u,source:l,webGLProgram:c,inShapeInfos:o,outShapeInfo:i},id(t,n,c)))}(this.gpgpu,e,h,p)),x=null!=this.activeTimers;let g;x&&(g=this.startTimer()),(0,a.env)().get("ENGINE_COMPILE_ONLY")||function WT(t,n,e,s,r){n.program.enableShapeUniforms||(ad(n.inShapeInfos,e),ad([n.outShapeInfo],[s]));const o=s.texData.texture,i=s.texData.texShape;s.texData.isPacked?t.setOutputPackedMatrixTexture(o.texture,i[0],i[1]):t.setOutputMatrixTexture(o.texture,i[0],i[1]),t.setProgram(n.webGLProgram),t.bindVertexArray(n.webGLProgram.vao),1===(0,a.env)().getNumber("WEBGL_VERSION")&&null!==n.infLoc&&t.gl.uniform1f(n.infLoc,1/0),null!==n.nanLoc&&t.gl.uniform1f(n.nanLoc,NaN);for(let u=0;u<e.length;++u){const c=e[u],{uniform:d,offset:h,shape:p,texShape:f}=n.variablesLocations[u];if(p){const{uniformShape:m}=Ai(n.program.packedInputs,c.shape,c.texData.texShape);switch(m.length){case 1:t.gl.uniform1iv(p,new Int32Array(m));break;case 2:t.gl.uniform2iv(p,new Int32Array(m));break;case 3:t.gl.uniform3iv(p,new Int32Array(m));break;case 4:t.gl.uniform4iv(p,new Int32Array(m))}}if(f&&t.gl.uniform2i(f,c.texData.texShape[0],c.texData.texShape[1]),null!=d){if(c.isUniform){if(a.util.sizeFromShape(c.shape)<2)t.gl.uniform1f(d,c.uniformValues[0]);else{let m=c.uniformValues;m instanceof Float32Array||(m=new Float32Array(m)),t.gl.uniform1fv(d,m)}continue}null!=c.texData.slice&&null!=h&&t.gl.uniform1i(h,c.texData.slice.flatOffset),t.setInputMatrixTexture(c.texData.texture.texture,d,u)}}const l=n.outShapeLocation;if(l)switch(s.shape.length){case 1:t.gl.uniform1iv(l,new Int32Array(s.shape));break;case 2:t.gl.uniform2iv(l,new Int32Array(s.shape));break;case 3:t.gl.uniform3iv(l,new Int32Array(s.shape));break;case 4:t.gl.uniform4iv(l,new Int32Array(s.shape))}if(n.outShapeStridesLocation){const u=a.util.computeStrides(s.shape);switch(s.shape.length){case 2:t.gl.uniform1iv(n.outShapeStridesLocation,new Int32Array(u));break;case 3:t.gl.uniform2iv(n.outShapeStridesLocation,new Int32Array(u));break;case 4:t.gl.uniform3iv(n.outShapeStridesLocation,new Int32Array(u))}}if(n.outTexShapeLocation&&t.gl.uniform2i(n.outTexShapeLocation,s.texData.texShape[0],s.texData.texShape[1]),n.program.customUniforms&&r)for(let u=0;u<n.program.customUniforms.length;++u){const c=n.program.customUniforms[u],d=n.customUniformLocations[u],h=r[u];if("float"===c.type)t.gl.uniform1fv(d,h);else if("vec2"===c.type)t.gl.uniform2fv(d,h);else if("vec3"===c.type)t.gl.uniform3fv(d,h);else if("vec4"===c.type)t.gl.uniform4fv(d,h);else if("int"===c.type)t.gl.uniform1iv(d,h);else if("ivec2"===c.type)t.gl.uniform2iv(d,h);else if("ivec3"===c.type)t.gl.uniform3iv(d,h);else{if("ivec4"!==c.type)throw Error(`uniform type ${c.type} is not supported yet.`);t.gl.uniform4iv(d,h)}}t.executeProgram()}(this.gpgpu,m,h,p,o),d.forEach(b=>this.disposeIntermediateTensorInfo(b)),x&&(g=this.endTimer(g),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(g)}));const y=(0,a.env)().getNumber("WEBGL_FLUSH_THRESHOLD");if(y>0){const b=a.util.now();b-this.lastGlFlushTime>y&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=b)}if(!(0,a.env)().getBool("WEBGL_LAZILY_UNPACK")&&c.isPacked&&!1===i){const b=this.unpackTensor(u);return this.disposeIntermediateTensorInfo(u),b}return u}compileAndRun(e,s,r,o,i=!1){return this.runWebGLProgram(e,s,r=r||s[0].dtype,o,i)}getAndSaveBinary(e,s){return e in this.binaryCache||(this.binaryCache[e]=s()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||((0,a.env)().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach(s=>{this.gpgpu.deleteProgram(this.binaryCache[s].webGLProgram),delete this.binaryCache[s]}),this.textureManager.dispose(),null!=this.canvas&&typeof HTMLCanvasElement<"u"&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=(0,a.tidy)(()=>{if(!(0,a.env)().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=(0,a.env)().getBool("DEBUG");(0,a.env)().set("DEBUG",!1);const s=this.abs((0,a.scalar)(1e-8)).dataSync()[0];if((0,a.env)().set("DEBUG",e),s>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const s=this.texData.get(e),{shape:r,dtype:o,values:i,texture:l,usage:u,isPacked:c}=s;if(null!=l)return;const d=null!=this.activeTimers;let h;d&&(h=a.util.now());let p=s.texShape;if(null==p&&(p=function q1(t,n=!1){let e=(0,a.env)().getNumber("WEBGL_MAX_TEXTURE_SIZE"),s=(0,a.env)().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");s===1/0&&(0,a.env)().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE")&&(s=e/2),n&&(e*=2,s*=2,1===(t=t.map((l,u)=>u>=t.length-2?a.util.nearestLargerEven(t[u]):t[u])).length&&(t=[2,t[0]])),2!==t.length&&(t=a.util.squeezeShape(t).newShape);let r=a.util.sizeFromShape(t),o=null;t.length<=1&&r<=e?o=[1,r]:2===t.length&&t[0]<=e&&t[1]<=e?o=t:3===t.length&&t[0]*t[1]<=e&&t[2]<=e?o=[t[0]*t[1],t[2]]:3===t.length&&t[0]<=e&&t[1]*t[2]<=e?o=[t[0],t[1]*t[2]]:4===t.length&&t[0]*t[1]*t[2]<=e&&t[3]<=e?o=[t[0]*t[1]*t[2],t[3]]:4===t.length&&t[0]<=e&&t[1]*t[2]*t[3]<=e&&(o=[t[0],t[1]*t[2]*t[3]]);const i=null!=o&&Math.max(...o)>s&&Math.min(...o)<=(n?2:1)&&Math.min(...o)>0;if(null==o||i)if(n){const l=Yn(t);let u=2,c=2;t.length&&([u,c]=Qn(t)),r=l*(u/2)*(c/2),o=a.util.sizeToSquarishShape(r).map(d=>2*d)}else o=a.util.sizeToSquarishShape(r);return o}(r,c),s.texShape=p),null!=i){const f=Pr(r);let m,x=p[1],g=p[0];const y=i instanceof Uint8Array||i instanceof Uint8ClampedArray;(c||!y)&&([x,g]=Zn(p[0],p[1])),m=c?new qT(f,y):new ld(f,y);const b=y?[g,x]:p,C=this.makeTensorInfo(b,o),v=this.texData.get(C.dataId);v.usage=y?ht.PIXELS:ht.UPLOAD,v.texShape=b,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(C.dataId),x,g,i);const I=this.runWebGLProgram(m,[C],o,[[g,x]],!0),k=this.texData.get(I.dataId);s.texShape=k.texShape,s.isPacked=k.isPacked,s.usage=k.usage,(0,a.env)().get("ENGINE_COMPILE_ONLY")?this.disposeData(I.dataId):(s.texture=k.texture,s.values=null,this.texData.delete(I.dataId)),this.disposeIntermediateTensorInfo(C),d&&(this.uploadWaitMs+=a.util.now()-h)}else{const f=this.acquireTexture(p,u,o,c);s.texture=f}}convertAndCacheOnCPU(e,s){const r=this.texData.get(e),{dtype:o}=r;return null!=s&&(r.values=function DR(t,n){if("float32"===n||"complex64"===n)return t;if("int32"===n||"bool"===n){const e="int32"===n?new Int32Array(t.length):new Uint8Array(t.length);for(let s=0;s<e.length;++s)e[s]=Math.round(t[s]);return e}throw new Error(`Unknown dtype ${n}`)}(s,o)),r.values}acquireTexture(e,s,r,o){if(this.numBytesInGPU+=this.computeBytes(e,r),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const i=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${i} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,s,o)}computeBytes(e,s){return e[0]*e[1]*a.util.bytesPerElement(s)}checkCompileCompletion(){for(const[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}checkCompileCompletionAsync(){var e=this;return(0,se.Z)(function*(){const s=[];if(e.gpgpu.parallelCompilationExtension){for(const[,r]of Object.entries(e.binaryCache))s.push(e.checkCompletionAsync_(r));return Promise.all(s)}for(const[,r]of Object.entries(e.binaryCache)){const o=new Promise(i=>{try{e.checkCompletion_(r),i(!0)}catch(l){throw l}});s.push(o)}return Promise.all(s)})()}checkCompletionAsync_(e){var s=this;return(0,se.Z)(function*(){return s.gpgpu.gl.getProgramParameter(e.webGLProgram,s.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?s.checkCompletion_(e):(yield(0,a.nextFrame)(),s.checkCompletionAsync_(e))})()}checkCompletion_(e){if(!1===this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS))throw console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),!1===this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS)?(Yc(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),new Error("Failed to compile fragment shader.")):new Error("Failed to link vertex and fragment shaders.");return!0}getUniformLocations(){for(const e of Object.values(this.binaryCache)){this.gpgpu.buildVao(e.webGLProgram);const{variablesLocations:s,customUniformLocations:r,infLoc:o,nanLoc:i,outShapeLocation:l,outShapeStridesLocation:u,outTexShapeLocation:c}=id(this.gpgpu,e.program,e.webGLProgram);e.variablesLocations=s,e.customUniformLocations=r,e.infLoc=o,e.nanLoc=i,e.outShapeLocation=l,e.outShapeStridesLocation=u,e.outTexShapeLocation=c}}createTensorFromGPUData(e,s,r){e.channels=e.channels||"RGBA";const{texture:o,height:i,width:l,channels:u}=e,c=(0,a.engine)().backend;if(!c.gpgpu.gl.isTexture(o))throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");const d=c.writeTexture(o,s,r,i,l,u);return(0,a.engine)().makeTensorFromDataId(d,s,r,c)}}return t.nextDataId=0,t})();a.device_util.isBrowser()&&(0,a.registerBackend)("webgl",()=>new AR,2);const Ei="\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n";class Rn{constructor(n,e,s){this.variableNames=["A","B"],this.outputShape=a.backend_util.assertAndGetBroadcastShape(e,s),this.enableShapeUniforms=He(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${n}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}const An="\n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n";class ss{constructor(n,e,s,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=a.backend_util.assertAndGetBroadcastShape(e,s);const o=this.outputShape.length;this.enableShapeUniforms=He(o);let i="";if(r)if(0===o||1===a.util.sizeFromShape(this.outputShape))i="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(i=`\n          ${xe(o)} coords = getOutputCoords();\n        `,1===o)i+=this.enableShapeUniforms?"\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const u=Ke("coords",o);i+=this.enableShapeUniforms?`\n            bool nextRowOutOfBounds =\n              (${u[o-2]} + 1) >= outShape[${o} - 2];\n            bool nextColOutOfBounds =\n              (${u[o-1]} + 1) >= outShape[${o} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:`\n            bool nextRowOutOfBounds =\n              (${u[o-2]} + 1) >= ${this.outputShape[o-2]};\n            bool nextColOutOfBounds =\n              (${u[o-1]} + 1) >= ${this.outputShape[o-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${n}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${i}\n\n        setOutput(result);\n      }\n    `}}function et(t){const{inputs:n,backend:e}=t,{x:s}=n;return e.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const _R={kernelName:a.Identity,backendName:"webgl",kernelFunc:et};function cn(t){const{inputs:n,backend:e}=t,{real:s,imag:r}=n,o=e.makeTensorInfo(s.shape,"complex64"),i=e.texData.get(o.dataId),l=et({inputs:{x:s},backend:e}),u=et({inputs:{x:r},backend:e});return i.complexTensorInfos={real:l,imag:u},o}const FR={kernelName:a.Complex,backendName:"webgl",kernelFunc:cn},Sd="return (a < 0.) ? b * a : a;",Id="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",PR={kernelName:a.LeakyRelu,backendName:"webgl",kernelFunc:function OR(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{alpha:o}=s,i=e.makeTensorInfo([],"float32",a.util.createScalarValue(o,"float32")),l=(0,a.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ss(Id,r.shape,i.shape):new Rn(Sd,r.shape,i.shape),u=e.runWebGLProgram(l,[r,i],"float32");return e.disposeIntermediateTensorInfo(i),u}},kd="return (a < 0.) ? b * a : a;",Td="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",LR={kernelName:a.Prelu,backendName:"webgl",kernelFunc:function zR(t){const{inputs:n,backend:e}=t,{x:s,alpha:r}=n,o=(0,a.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ss(Td,s.shape,r.shape):new Rn(kd,s.shape,r.shape);return e.runWebGLProgram(o,[s,r],"float32")}},rs="if (isnan(x)) return x;";function de({opSnippet:t,packedOpSnippet:n,cpuKernelImpl:e,dtype:s}){return({inputs:r,backend:o})=>{const{x:i}=r,l=o,u=s||i.dtype;if(l.shouldExecuteOnCPU([i])&&null!=e){const h=l.texData.get(i.dataId),p=e(h.values,u);return l.makeTensorInfo(i.shape,u,p)}let d;return d=(0,a.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=n?new un(i.shape,n):new Lt(i.shape,t),l.runWebGLProgram(d,[i],u)}}function Ve({opSnippet:t,packedOpSnippet:n,checkOutOfBounds:e=!1,supportsComplex:s=!1,cpuKernelImpl:r,dtype:o}){return({inputs:i,backend:l})=>{const{a:u,b:c}=i,d=l;if(s&&"complex64"===u.dtype){const m=d.texData.get(u.dataId),x=d.texData.get(c.dataId),[g,y]=[[m.complexTensorInfos.real,x.complexTensorInfos.real],[m.complexTensorInfos.imag,x.complexTensorInfos.imag]].map(C=>{const[v,w]=C,S={dataId:v.dataId,dtype:v.dtype,shape:u.shape},I={dataId:w.dataId,dtype:w.dtype,shape:c.shape},k=new Rn(t,u.shape,c.shape);return d.runWebGLProgram(k,[S,I],(0,a.upcastType)(v.dtype,w.dtype))}),b=cn({inputs:{real:g,imag:y},backend:d});return d.disposeIntermediateTensorInfo(g),d.disposeIntermediateTensorInfo(y),b}const h=o||(0,a.upcastType)(u.dtype,c.dtype);if(("string"===u.dtype||"string"===c.dtype||d.shouldExecuteOnCPU([u,c]))&&null!=r){const m=d.texData.get(u.dataId).values,x=d.texData.get(c.dataId).values,g="string"===u.dtype?a.backend_util.fromUint8ToStringArray(m):m,y="string"===u.dtype?a.backend_util.fromUint8ToStringArray(x):x,[b,C]=r(u.shape,c.shape,g,y,h),v=d.makeTensorInfo(C,h);return d.texData.get(v.dataId).values=b,v}let f;return f=(0,a.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=n?new ss(n,u.shape,c.shape,e):new Rn(t,u.shape,c.shape),d.runWebGLProgram(f,[u,c],h)}}function As(t,n=!1){if("linear"===t)return n?gR:dR;if("relu"===t)return n?yR:pR;if("elu"===t)return n?xR:hR;if("relu6"===t)return n?bR:fR;if("prelu"===t)return n?Td:kd;if("leakyrelu"===t)return n?Id:Sd;if("sigmoid"===t)return n?vR:mR;throw new Error(`Activation ${t} has not been implemented for the WebGL backend.`)}class Nd{constructor(n,e,s,r=!1,o=!1,i=!1,l=null,u=!1,c=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=s,this.enableShapeUniforms=He(this.outputShape.length);const h=Math.ceil((r?n[1]:n[2])/2),p=r?"i * 2, rc.y":"rc.y, i * 2",f=o?"rc.z, i * 2":"i * 2, rc.z",m=r?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],x=o?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let g="",y="";l&&(g=u?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${l}\n        }`:c?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${l}\n        }`:`vec4 activation(vec4 x) {\n          ${l}\n        }`,y="result = activation(result);");const b=i?"result += getBiasAtOutCoords();":"";i&&this.variableNames.push("bias"),u&&this.variableNames.push("preluActivationWeights"),c&&this.variableNames.push("leakyreluAlpha");let C="rc.x",v="rc.x";n[0]<e[0]?C=`imod(rc.x, ${n[0]})`:e[0]<n[0]&&(v=`imod(rc.x, ${e[0]})`),this.userCode=`\n      ${g}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${h}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        int batchA = ${C};\n        int batchB = ${v};\n        for (int i = 0; i < ${h}; i++) {\n          vec4 a = getMatrixA(batchA, ${p});\n          vec4 b = getMatrixB(batchB, ${f});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${m[0]} * ${x[0]});\n          result += (${m[1]} * ${x[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${b}\n\n        ${y}\n\n        setOutput(result);\n      }\n    `}}const Rd={REAL:"return areal * breal - aimag * bimag;",IMAG:"return areal * bimag + aimag * breal;"};class Ad{constructor(n,e,s){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=a.backend_util.assertAndGetBroadcastShape(e,s),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${n}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const Dd="return a * b;";function _i(t){const{inputs:n,backend:e}=t,{a:s,b:r}=n,o=a.backend_util.upcastType(s.dtype,r.dtype);if("complex64"===s.dtype){const l=e.texData.get(s.dataId),u=e.texData.get(r.dataId),c=new Ad(Rd.REAL,s.shape,r.shape),d=new Ad(Rd.IMAG,s.shape,r.shape),h=[{dataId:l.complexTensorInfos.real.dataId,dtype:l.complexTensorInfos.real.dtype,shape:s.shape},{dataId:l.complexTensorInfos.imag.dataId,dtype:l.complexTensorInfos.imag.dtype,shape:s.shape},{dataId:u.complexTensorInfos.real.dataId,dtype:u.complexTensorInfos.real.dtype,shape:r.shape},{dataId:u.complexTensorInfos.imag.dataId,dtype:u.complexTensorInfos.imag.dtype,shape:r.shape}],p=e.runWebGLProgram(c,h,"float32"),f=e.runWebGLProgram(d,h,"float32"),m=cn({inputs:{real:p,imag:f},backend:e});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),m}if(e.shouldExecuteOnCPU([s,r])){const l=e.texData.get(s.dataId),u=e.texData.get(r.dataId),[c,d]=FN(s.shape,r.shape,l.values,u.values,o),h=e.makeTensorInfo(d,o);return e.texData.get(h.dataId).values=c,h}let i;return i=(0,a.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ss(Dd,s.shape,r.shape):new Rn(Dd,s.shape,r.shape),e.runWebGLProgram(i,[s,r],o)}const MR={kernelName:a.Multiply,backendName:"webgl",kernelFunc:_i};function j(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{shape:o}=s,i=e,l=a.util.sizeFromShape(r.shape),u=a.util.inferFromImplicitShape(o,l),c=a.util.sizeFromShape(u);a.util.assert(l===c,()=>`The new shape (${u}) has ${c} elements and the old shape (${r.shape}) has ${l} elements. The new shape and old shape must have the same number of elements.`);const d=i.texData.get(r.dataId);return!d.isPacked||Lr(r.shape,u)||null!==d.texture&&Lr(d.shape,u)?(i.incRef(r.dataId),{dataId:r.dataId,shape:u,dtype:r.dtype}):function BR(t,n,e){const s=[Yn(t.shape),...Qn(t.shape)],r={dtype:t.dtype,shape:s,dataId:t.dataId},o=[Yn(n),...Qn(n)],i=new yd(o,s),c=e.runWebGLProgram(i,[r],t.dtype,[s],!0);return{dataId:c.dataId,shape:n,dtype:c.dtype}}(r,u,i)}const VR={kernelName:a.Reshape,backendName:"webgl",kernelFunc:j};class $d{constructor(n,e){this.variableNames=["x"];const{windowSize:s,batchSize:r,inSize:o,outSize:i}=n;this.outputShape=[r,i];const l=4*Math.floor(s/4),u=s%4;let c="sumValue += dot(values, ones);";if(null!=e){const h=1/e;c=`sumValue += dot(values * ${a.util.isInt(h)?h.toPrecision(2):h}, ones);`}let d="";o%s>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${d}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${l}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${c}\n        }\n\n        int inIdx = inOffset + ${l};\n        if (${1===u}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${c}\n        } else if (${2===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${c}\n        } else if (${3===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${c}\n        }\n        setOutput(sumValue);\n      }\n    `}}class WR{constructor(n,e){this.variableNames=["x"];const{windowSize:s,batchSize:r,inSize:o,outSize:i}=n;this.outputShape=[r,i];let l="0.0",u="";"prod"===e?l="1.0":"min"===e?(l="1.0 / 1e-20",u="min"):"max"===e&&(l="-1.0 / 1e-20",u="max");let c=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===e?c="sumValue":"prod"===e?c="prodValue":"all"===e?c="allValue":"any"===e&&(c="anyValue");const d=4*Math.floor(s/4),h=s%4;let p=`\n      if (${"sum"===e}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===e}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${u}(values, minMaxValue);\n        if (${"min"===e} || ${"max"===e}) {\n          minMaxValue = ${u}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,f="vec4";"all"===e?(l="1.0",p="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",f="bvec4"):"any"===e&&(l="0.0",p="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",f="bvec4");let m="";o%s>0&&(m=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${l};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${m}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        vec4 minMaxValue = vec4(${l});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${d}; i += 4) {\n          int inIdx = inOffset + i;\n          ${f} values = ${f}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${p}\n        }\n\n        int inIdx = inOffset + ${d};\n        if (${1===h}) {\n          ${f} values = ${f}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${p}\n        } else if (${2===h}) {\n          ${f} values = ${f}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${p}\n        } else if (${3===h}) {\n          ${f} values = ${f}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${p}\n        }\n        setOutput(${c});\n      }\n    `}}function Dn(t,n,e,s){const r=function UR(t){const n=[];for(;0===n.length||1!==n[n.length-1].outSize;){const e=n.length?n[n.length-1].outSize:t[1],s=a.backend_util.computeOptimalWindowSize(e);n.push({inSize:e,windowSize:s,outSize:Math.ceil(e/s)})}return n}(t.shape);let o=t;for(let i=0;i<r.length;i++){const{inSize:l,windowSize:u,outSize:c}=r[i];let d,h;d="mean"===e?0===i?new $d({windowSize:u,inSize:l,batchSize:t.shape[0],outSize:c},l):new $d({windowSize:u,inSize:l,batchSize:t.shape[0],outSize:c}):new WR({windowSize:u,inSize:l,batchSize:t.shape[0],outSize:c},e),h=o,o=s.runWebGLProgram(d,[o],n),h.dataId!==t.dataId&&s.disposeIntermediateTensorInfo(h)}return o}class GR{constructor(n,e){this.variableNames=["A"];const s=new Array(n.length);for(let i=0;i<s.length;i++)s[i]=n[e[i]];this.outputShape=s,this.rank=s.length;const r=xe(this.rank),o=function HR(t){const n=t.length;if(n>6)throw Error(`Transpose for rank ${n} is not yet supported`);const e=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],s=new Array(n);for(let r=0;r<t.length;r++)s[t[r]]=e[r];return s.join()}(e);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${o}));\n    }\n    `}}class XR{constructor(n,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const s=new Array(n.length);for(let d=0;d<s.length;d++)s[d]=n[e[d]];if(this.outputShape=s,this.rank=s.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=xe(this.rank),o=xd("rc",this.rank),i=new Array(this.rank);for(let d=0;d<e.length;d++)i[e[d]]=o[d];const l=`vec2(${i.slice(-2).join()})`,u=`++${o[this.rank-1]} < ${s[this.rank-1]}`,c=`getChannel(getA(${i.join()}), ${l})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${c};\n      if(${u}) {\n        result[1] = ${c};\n      }\n      --${o[this.rank-1]};\n      if(++${o[this.rank-2]} < ${s[this.rank-2]}) {\n        result[2] = ${c};\n        if(${u}) {\n          result[3] = ${c};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function Gr(t,n,e){const s=(0,a.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new XR(t.shape,n):new GR(t.shape,n);return e.runWebGLProgram(s,[t],t.dtype)}function Hr(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{axis:o,keepDims:i}=s;return function jR(t,n,e,s){const o=t.shape.length,i=a.util.parseAxisParam(n,t.shape);let l=i;const u=a.backend_util.getAxesPermutation(l,o),c=null!=u;let d=t;c&&(d=Gr(t,u,s),l=a.backend_util.getInnerMostAxes(l.length,o)),a.backend_util.assertAxesAreInnerMostDims("sum",l,o);const[h,p]=a.backend_util.computeOutAndReduceShapes(d.shape,l);let f=h;e&&(f=a.backend_util.expandShapeToKeepDim(h,i));const m=a.util.sizeFromShape(p),y=j({inputs:{x:d},attrs:{shape:[a.util.sizeFromShape(t.shape)/m,m]},backend:s}),C=Dn(y,(0,a.sumOutType)(t.dtype),"sum",s),v=j({inputs:{x:C},attrs:{shape:f},backend:s});return s.disposeIntermediateTensorInfo(y),s.disposeIntermediateTensorInfo(C),c&&s.disposeIntermediateTensorInfo(d),v}(r,o,i,e)}const KR={kernelName:a.Sum,backendName:"webgl",kernelFunc:Hr};function qe(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{perm:o}=s,i=e,u=new Array(r.shape.length);for(let d=0;d<u.length;d++)u[d]=r.shape[o[d]];let c;if(i.shouldExecuteOnCPU([r])){const h=i.texData.get(r.dataId).values,p=$i(h,r.shape,r.dtype,o,u);c=i.makeTensorInfo(u,r.dtype),i.texData.get(c.dataId).values=p}else c=Gr(r,o,i);return c}const qR={kernelName:a.Transpose,backendName:"webgl",kernelFunc:qe},Ed=1e3;function Xr({a:t,b:n,transposeA:e,transposeB:s,backend:r,bias:o=null,preluActivationWeights:i=null,leakyreluAlpha:l=0,activation:u=null}){const c=t.shape.length,d=n.shape.length,h=e?t.shape[c-2]:t.shape[c-1],p=s?n.shape[d-1]:n.shape[d-2],f=e?t.shape[c-1]:t.shape[c-2],m=s?n.shape[d-2]:n.shape[d-1],x=t.shape.slice(0,-2),g=n.shape.slice(0,-2),y=a.util.sizeFromShape(x),b=a.util.sizeFromShape(g),v=a.broadcast_util.assertAndGetBroadcastShape(t.shape.slice(0,-2),n.shape.slice(0,-2)).concat([f,m]);a.util.assert(h===p,()=>`Error in matMul: inner shapes (${h}) and (${p}) of Tensors with shapes ${t.shape} and ${n.shape} and transposeA=${e} and transposeB=${s} must match.`);const w=e?[y,h,f]:[y,f,h],S=s?[b,m,p]:[b,p,m],I=j({inputs:{x:t},backend:r,attrs:{shape:w}}),k=j({inputs:{x:n},backend:r,attrs:{shape:S}}),N=[I,k],T=Math.max(y,b),A=e?I.shape[1]:I.shape[2],$=null!=o,F=null!=i,O="leakyrelu"===u,P=null!=u?As(u,!0):null;let M;if((1===f||1===m)&&A>Ed&&!1===($||F||O||null!=P)){let B=I,W=k;e&&(B=qe({inputs:{x:I},backend:r,attrs:{perm:[0,2,1]}}),N.push(B)),s&&(W=qe({inputs:{x:k},backend:r,attrs:{perm:[0,2,1]}}),N.push(W));const H=1===m;let G=B;1!==m&&(G=j({inputs:{x:B},backend:r,attrs:{shape:[T,A,1]}}),N.push(G));const q=1===m?2:1;let X=W;H&&(X=j({inputs:{x:W},backend:r,attrs:{shape:[T,1,A]}}),N.push(X));const Y=_i({inputs:{a:G,b:X},backend:r});M=Hr({inputs:{x:Y},backend:r,attrs:{axis:q,keepDims:!0}}),N.push(Y)}else{const B=(0,a.upcastType)(t.dtype,n.dtype),W=new Nd(w,S,[T,f,m],e,s,$,P,F,O),U=[I,k];if(null!=o&&U.push(o),F&&U.push(i),O){const H=r.makeTensorInfo([],"float32",a.util.createScalarValue(l,"float32"));U.push(H),N.push(H)}M=r.runWebGLProgram(W,U,B)}const E=j({inputs:{x:M},backend:r,attrs:{shape:v}});N.push(M);for(const B of N)r.disposeIntermediateTensorInfo(B);return E}const YR={kernelName:a._FusedMatMul,backendName:"webgl",kernelFunc:function ZR(t){const{inputs:n,backend:e,attrs:s}=t,{a:r,b:o,bias:i,preluActivationWeights:l}=n,{transposeA:u,transposeB:c,activation:d,leakyreluAlpha:h}=s;return Xr({a:r,b:o,transposeA:u,transposeB:c,backend:e,bias:i,preluActivationWeights:l,leakyreluAlpha:h,activation:d})}},_d="return abs(x);",JR={kernelName:a.Abs,backendName:"webgl",kernelFunc:function QR(t){const{inputs:n,backend:e}=t,{x:s}=n;if(e.shouldExecuteOnCPU([s])&&"complex64"!==s.dtype){const o=e.texData.get(s.dataId),i=md(o.values);return e.makeTensorInfo(s.shape,s.dtype,i)}let r;return r=(0,a.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new un(s.shape,_d):new Lt(s.shape,_d),e.runWebGLProgram(r,[s],s.dtype)}},t2=de({opSnippet:ot+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),n2={kernelName:a.Acos,backendName:"webgl",kernelFunc:t2},r2=de({opSnippet:ot+"\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),o2={kernelName:a.Acosh,backendName:"webgl",kernelFunc:r2},Fd="return a + b;",i2=Ve({opSnippet:Fd,packedOpSnippet:Fd,supportsComplex:!0,cpuKernelImpl:pN}),a2={kernelName:a.Add,backendName:"webgl",kernelFunc:i2};class l2{constructor(n,e){this.outputShape=[],this.outputShape=n,this.variableNames=e.map((o,i)=>`T${i}`);const s=[];this.variableNames.forEach(o=>{s.push(`float v${o} = get${o}AtOutCoords();`)});const r=this.variableNames.map(o=>`v${o}`).join(" + ");this.userCode=`\n      void main() {\n        ${s.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class u2{constructor(n,e){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n,this.variableNames=e.map((o,i)=>`T${i}`);const s=[];this.variableNames.forEach(o=>{s.push(`vec4 v${o} = get${o}AtOutCoords();`)});const r=this.variableNames.map(o=>`v${o}`).join(" + ");this.userCode=`\n      void main() {\n        ${s.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}const c2={kernelName:a.AddN,backendName:"webgl",kernelFunc:function jr(t){const{inputs:n,backend:e}=t,s=n;if(1===s.length)return et({inputs:{x:s[0]},backend:e});if(s.length>(0,a.env)().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const u=Math.floor(s.length/2),c=jr({inputs:s.slice(0,u),backend:e}),d=jr({inputs:s.slice(u),backend:e});return jr({inputs:[c,d],backend:e})}const r=s.map(u=>u.dtype).reduce((u,c)=>(0,a.upcastType)(u,c)),o=s.map(u=>u.shape),l=(0,a.env)().getBool("WEBGL_PACK")?new u2(s[0].shape,o):new l2(s[0].shape,o);return e.runWebGLProgram(l,s,r)}},h2={kernelName:a.All,backendName:"webgl",kernelFunc:function d2(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{axis:o,keepDims:i}=s,l=r.shape.length,u=a.util.parseAxisParam(o,r.shape);let c=u;const d=a.backend_util.getAxesPermutation(c,l);let h=r;null!=d&&(h=qe({inputs:{x:r},backend:e,attrs:{perm:d}}),c=a.backend_util.getInnerMostAxes(c.length,l)),a.backend_util.assertAxesAreInnerMostDims("all",c,l);const[p,f]=a.backend_util.computeOutAndReduceShapes(h.shape,c),x=j({inputs:{x:h},backend:e,attrs:{shape:[-1,a.util.sizeFromShape(f)]}}),g=Dn(x,x.dtype,"all",e);let y;return y=j(i?{inputs:{x:g},backend:e,attrs:{shape:a.backend_util.expandShapeToKeepDim(p,u)}}:{inputs:{x:g},backend:e,attrs:{shape:p}}),e.disposeIntermediateTensorInfo(x),e.disposeIntermediateTensorInfo(g),null!=d&&e.disposeIntermediateTensorInfo(h),y}},f2={kernelName:a.Any,backendName:"webgl",kernelFunc:function p2(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{axis:o,keepDims:i}=s,l=r.shape.length,u=a.util.parseAxisParam(o,r.shape);let c=u;const d=a.backend_util.getAxesPermutation(c,l);let h=r;null!=d&&(h=qe({inputs:{x:r},backend:e,attrs:{perm:d}}),c=a.backend_util.getInnerMostAxes(c.length,l)),a.backend_util.assertAxesAreInnerMostDims("any",c,l);const[p,f]=a.backend_util.computeOutAndReduceShapes(h.shape,c),x=j({inputs:{x:h},backend:e,attrs:{shape:[-1,a.util.sizeFromShape(f)]}}),g=Dn(x,x.dtype,"any",e);let y;return y=j(i?{inputs:{x:g},backend:e,attrs:{shape:a.backend_util.expandShapeToKeepDim(p,u)}}:{inputs:{x:g},backend:e,attrs:{shape:p}}),e.disposeIntermediateTensorInfo(x),e.disposeIntermediateTensorInfo(g),null!=d&&e.disposeIntermediateTensorInfo(h),y}};class m2{constructor(n,e,s){this.variableNames=["A"];const{windowSize:r,batchSize:o,outSize:i}=n;s||this.variableNames.push("bestIndicesA"),this.outputShape=[o,i],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${s?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));"};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${"max"===e?">":"<"} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class g2{constructor(n,e,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,a.util.assert(n.length>2,()=>`Packed arg${s.charAt(0).toUpperCase()+s.slice(1)} supports only inputs with rank above 2.`);const i=Math.ceil(n[n.length-1]/e);this.outputShape=n.slice(0,-1),i>1&&this.outputShape.push(i),r||this.variableNames.push("bestIndicesA");const l=this.outputShape,u=l.length,c=xe(u),d=Ke("coords",u);let h,p;if(1===i){p=u+1;const k=xe(p);h=`\n        ${k} sourceLocR = ${k}(${d.join()}, 0);\n        ++${d[u-1]};\n        ${k} sourceLocG = ${k}(${d.join()}, 0);\n        ++${d[u-2]};\n        ${k} sourceLocA = ${k}(${d.join()}, 0);\n        --${d[u-1]};\n        ${k} sourceLocB = ${k}(${d.join()}, 0);\n        --${d[u-2]};`}else p=u,h=`\n        ${c} sourceLocR = coords;\n        ++${d[u-1]};\n        ${c} sourceLocG = coords;\n        ++${d[u-2]};\n        ${c} sourceLocA = coords;\n        --${d[u-1]};\n        ${c} sourceLocB = coords;\n        --${d[u-2]};`;const f=["x","y","z","w","u","v"].slice(0,p),m="."+f[p-1],x=f.map(k=>"int "+k),g=Ke("sourceLocR",p-1).concat("inIdx.r"),y=Ke("sourceLocG",p-1).concat("inIdx.g"),b=Ke("sourceLocB",p-1).concat("inIdx.b"),C=Ke("sourceLocA",p-1).concat("inIdx.a"),v="max"===s?"greaterThan":"lessThan",w=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()}),\n                             getBestIndicesAChannel(${C.join()})));`,S=`vec4(\n            getAChannel(${g.join()}),\n            hasNextCol ? getAChannel(${y.join()}) : 0.,\n            hasNextRow ? getAChannel(${b.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${C.join()}) : 0.)`,I=r?"":`\n      float getBestIndicesAChannel(${x.join()}) {\n        return getChannel(getBestIndicesA(${f.join()}),\n                                          vec2(${f.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${x.join()}) {\n        return getChannel(getA(${f.join()}),\n                               vec2(${f.slice(-2).join()}));\n      }\n      ${I}\n      void main() {\n        ${c} coords = getOutputCoords();\n        bool hasNextCol = ${d[u-1]} < ${l[u-1]-1};\n        bool hasNextRow = ${d[u-2]} < ${l[u-2]-1};\n        ${h}\n        ivec4 srcIdx = ivec4(sourceLocR${m}, sourceLocG${m},\n          sourceLocB${m}, sourceLocA${m}) * ${e};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${S};\n\n        for (int i = 0; i < ${e}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${S};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${v}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function Od(t,n,e,s=null){let r=n.shape[0],o=n.shape[1];null!=s&&(r=s.shape[0],o=s.shape[1]);const i=a.backend_util.computeOptimalWindowSize(o),l={windowSize:i,inSize:o,batchSize:r,outSize:Math.ceil(o/i)},u=new m2(l,e,null==s),c=[n];null!=s&&c.push(s);const d=t.runWebGLProgram(u,c,"int32");if(1===d.shape[1])return d;const h=Od(t,n,e,d);return t.disposeIntermediateTensorInfo(d),h}function Pd(t,n,e,s=null){const r=null!=s?s.shape:n.shape,i=a.backend_util.computeOptimalWindowSize(r[r.length-1]),l=new g2(r,i,e,null==s),c=t.runWebGLProgram(l,null==s?[n]:[n,s],"int32");if(c.shape.length===n.shape.length){const d=Pd(t,n,e,c);return t.disposeIntermediateTensorInfo(c),d}return c}function zd(t,n,e,s){const r=[e];if(a.backend_util.assertAxesAreInnerMostDims("arg"+s.charAt(0).toUpperCase()+s.slice(1),r,n.shape.length),!(0,a.env)().getBool("WEBGL_PACK_REDUCE")||n.shape.length<=2){const o=[],i=t.texData.get(n.dataId);let u=n;null!==i&&i.isPacked&&(u=t.unpackTensor(n),o.push(u));const[c,d]=a.backend_util.computeOutAndReduceShapes(u.shape,r),h=a.util.sizeFromShape(d),p=j({inputs:{x:u},backend:t,attrs:{shape:[-1,h]}});o.push(p);const f=Od(t,p,s);o.push(f);const m=j({inputs:{x:f},backend:t,attrs:{shape:c}});return o.forEach(x=>t.disposeIntermediateTensorInfo(x)),m}return Pd(t,n,s)}const y2={kernelName:a.ArgMax,backendName:"webgl",kernelFunc:function x2(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{axis:o}=s;let i=a.util.parseAxisParam(o,r.shape);const l=a.backend_util.getAxesPermutation(i,r.shape.length);let u=r;const c=[];null!=l&&(u=qe({inputs:{x:r},backend:e,attrs:{perm:l}}),c.push(u),i=a.backend_util.getInnerMostAxes(i.length,u.shape.length)),a.backend_util.assertAxesAreInnerMostDims("argMax",[i[0]],u.shape.length);const d=zd(e,u,i[0],"max");return c.forEach(h=>e.disposeIntermediateTensorInfo(h)),d}},v2={kernelName:a.ArgMin,backendName:"webgl",kernelFunc:function b2(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{axis:o}=s;let i=a.util.parseAxisParam(o,r.shape);const l=a.backend_util.getAxesPermutation(i,r.shape.length);let u=r;const c=[];null!=l&&(u=qe({inputs:{x:r},backend:e,attrs:{perm:l}}),c.push(u),i=a.backend_util.getInnerMostAxes(i.length,u.shape.length)),a.backend_util.assertAxesAreInnerMostDims("argMin",[i[0]],u.shape.length);const d=zd(e,u,i[0],"min");return c.forEach(h=>e.disposeIntermediateTensorInfo(h)),d}},w2=de({opSnippet:ot+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),S2={kernelName:a.Asin,backendName:"webgl",kernelFunc:w2},k2=de({opSnippet:ot+"return log(x + sqrt(x * x + 1.0));"}),T2={kernelName:a.Asinh,backendName:"webgl",kernelFunc:k2},R2=de({opSnippet:ot+"\n  return atan(x);\n"}),A2={kernelName:a.Atan,backendName:"webgl",kernelFunc:R2},E2=Ve({opSnippet:Ei+"\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+An+"\n  return result;\n"}),_2={kernelName:a.Atan2,backendName:"webgl",kernelFunc:E2},O2=de({opSnippet:ot+"\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),P2={kernelName:a.Atanh,backendName:"webgl",kernelFunc:O2};class Ds{constructor(n,e,s,r=!1,o=!1){if(this.variableNames=["x"],"avg"===e&&s)throw new Error("Cannot compute positions for average pool.");const i=n.filterWidth,l=n.strideHeight,u=n.strideWidth,c=n.dilationHeight,d=n.dilationWidth,h=n.effectiveFilterHeight,p=n.effectiveFilterWidth,f=n.padInfo.top,m=n.padInfo.left;this.outputShape=n.outShape;const x="avg"===e;let b="0.0";if(x||(b="-1.0 / 1e-20"),s)return void(this.userCode=`\n        const ivec2 strides = ivec2(${l}, ${u});\n        const ivec2 pads = ivec2(${f}, ${m});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${h};\n              wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${n.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p};\n                wC += ${d}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${n.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value >= currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?o?`((batch  * ${n.inHeight} + xR) * ${n.inWidth} + xC) * ${n.inChannels} + d`:`(xR * ${n.inWidth} + xC) * ${n.inChannels} + d`:`wR * ${p} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `);let v=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(v="avgValue / max(count, 1.0)");const w=4*Math.floor(i/4),S=i%4,I=`\n      if (${x}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${l}, ${u});\n      const ivec2 pads = ivec2(${f}, ${m});\n      const float initializationValue = ${b};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${n.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${b});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${h};\n            wR += ${c}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${n.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${w}; wC += 4) {\n            int xC = xCCorner + wC * ${d};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${d}, d),\n              getValue(batch, xR, xC + 2 * ${d}, d),\n              getValue(batch, xR, xC + 3 * ${d}, d)\n            );\n\n            ${I}\n          }\n\n          int xC = xCCorner + ${w};\n          if (${1===S}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${I}\n          } else if (${2===S}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${d}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${I}\n          } else if (${3===S}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${d}, d),\n              getValue(batch, xR, xC + 2 * ${d}, d),\n              initializationValue\n            );\n\n            ${I}\n          }\n        }\n        setOutput(${v});\n      }\n    `}}class Fi{constructor(n,e,s,r=!1,o=!1){if(this.variableNames=["x"],"avg"===e&&s)throw new Error("Cannot compute positions for average pool.");const i=n.filterWidth,l=n.strideDepth,u=n.strideHeight,c=n.strideWidth,d=n.dilationDepth,h=n.dilationHeight,p=n.dilationWidth,f=n.effectiveFilterDepth,m=n.effectiveFilterHeight,x=n.effectiveFilterWidth,g=n.padInfo.front,y=n.padInfo.top,b=n.padInfo.left;this.outputShape=n.outShape;const C="avg"===e;let v="0.0";if(C||(v="-1.0 / 1e-20"),s)return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${l}, ${u}, ${c});\n        const ivec3 pads = ivec3(${g}, ${y}, ${b});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${f};\n              wD += ${d}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${n.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${m};\n                wR += ${h}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${n.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${x};\n                  wC += ${p}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${n.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value >= currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?o?`(((batch * ${n.inDepth} + xD) * ${n.inHeight} + xR) * ${n.inWidth} + xC) * ${n.inChannels} + ch`:`((xD * ${n.inHeight} + xR) * ${n.inWidth} + xC) * ${n.inChannels} + ch`:`wD * ${m} * ${x} +\n                      wR * ${x} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `);let S=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(S="avgValue / max(count, 1.0)");const I=4*Math.floor(i/4),k=i%4,N=`\n      if (${C}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${l}, ${u}, ${c});\n      const ivec3 pads = ivec3(${g}, ${y}, ${b});\n      const float initializationValue = ${v};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${n.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${v});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${f};\n            wD += ${d}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${n.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${m};\n            wR += ${h}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${n.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${I}; wC += 4) {\n              int xC = xCCorner + wC * ${p};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${p}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${p}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${p}, ch)\n              );\n\n              ${N}\n            }\n\n            int xC = xCCorner + ${I};\n            if (${1===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${2===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${p}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${N}\n            } else if (${3===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${p}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${p}, ch),\n                initializationValue\n              );\n\n              ${N}\n            }\n          }\n        }\n        setOutput(${S});\n      }\n    `}}const L2={kernelName:a.AvgPool,backendName:"webgl",kernelFunc:function z2(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n;Ns(r,"avgPool");const{filterSize:o,strides:i,pad:l,dimRoundingMode:u}=s;a.util.assert(a.backend_util.eitherStridesOrDilationsAreOne(i,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`);const d=a.backend_util.computePool2DInfo(r.shape,o,i,1,l,u);if(1===d.filterWidth&&1===d.filterHeight&&a.util.arraysEqual(d.inShape,d.outShape))return et({inputs:{x:r},backend:e});const h=new Ds(d,"avg",!1);return e.runWebGLProgram(h,[r],"float32")}},B2={kernelName:a.AvgPool3D,backendName:"webgl",kernelFunc:function M2(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{filterSize:o,strides:i,pad:l,dimRoundingMode:u,dataFormat:c}=s,h=a.backend_util.computePool3DInfo(r.shape,o,i,[1,1,1],l,u,c),p=new Fi(h,"avg",!1);return e.runWebGLProgram(p,[r],"float32")}};class V2{constructor(n){this.variableNames=["dy"],this.outputShape=n.inShape;const u=n.effectiveFilterHeight,c=n.effectiveFilterWidth;this.userCode=`\n      const ivec2 pads = ivec2(${u-1-n.padInfo.top}, ${c-1-n.padInfo.left});\n      const float avgMultiplier = float(${1/(n.filterHeight*n.filterWidth)});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${u};\n            wR += ${n.dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${n.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${n.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${c};\n            wC+= ${n.dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${n.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${n.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class W2{constructor(n){this.variableNames=["dy"],this.outputShape=n.inShape;const h=n.effectiveFilterDepth,p=n.effectiveFilterHeight,f=n.effectiveFilterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${h-1-n.padInfo.front}, ${p-1-n.padInfo.top}, ${f-1-n.padInfo.left});\n      const float avgMultiplier = float(${1/(n.filterDepth*n.filterHeight*n.filterWidth)});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${h};\n            wD += ${n.dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${n.strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${n.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${p};\n              wR += ${n.dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${n.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${n.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${f};\n                wC += ${n.dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${n.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${n.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const G2={kernelName:a.AvgPool3DGrad,backendName:"webgl",kernelFunc:function U2(t){const{inputs:n,backend:e,attrs:s}=t,{dy:r,input:o}=n,i=o,{filterSize:l,strides:u,pad:c,dimRoundingMode:d}=s,p=a.backend_util.computePool3DInfo(i.shape,l,u,[1,1,1],c,d),f=new W2(p);return e.runWebGLProgram(f,[r],i.dtype)}},X2={kernelName:a.AvgPoolGrad,backendName:"webgl",kernelFunc:function H2(t){const{inputs:n,backend:e,attrs:s}=t,{dy:r,input:o}=n,i=o;Ns([r,o],"avgPoolGrad");const{filterSize:l,strides:u,pad:c}=s,d=a.backend_util.computePool2DInfo(i.shape,l,u,1,c),h=new V2(d);return e.runWebGLProgram(h,[r],i.dtype)}},K2={kernelName:a.BatchMatMul,backendName:"webgl",kernelFunc:function j2(t){const{inputs:n,backend:e,attrs:s}=t,{a:r,b:o}=n,{transposeA:i,transposeB:l}=s;return Xr({a:r,b:o,transposeA:i,transposeB:l,backend:e})}};class q2{constructor(n,e,s,r,o,i){this.outputShape=[],this.variableNames=["x","mean","variance"],a.backend_util.assertAndGetBroadcastShape(n,e),a.backend_util.assertAndGetBroadcastShape(n,s);let l="0.0";null!=r&&(a.backend_util.assertAndGetBroadcastShape(n,r),this.variableNames.push("offset"),l="getOffsetAtOutCoords()");let u="1.0";null!=o&&(a.backend_util.assertAndGetBroadcastShape(n,o),this.variableNames.push("scale"),u="getScaleAtOutCoords()"),this.outputShape=n,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${l};\n        float scale = ${u};\n        float inv = scale * inversesqrt(variance + float(${i}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class Z2{constructor(n,e,s,r,o,i){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],a.backend_util.assertAndGetBroadcastShape(n,e),a.backend_util.assertAndGetBroadcastShape(n,s);let l="vec4(0.0)";null!=r&&(a.backend_util.assertAndGetBroadcastShape(n,r),this.variableNames.push("offset"),l="getOffsetAtOutCoords()");let u="vec4(1.0)";null!=o&&(a.backend_util.assertAndGetBroadcastShape(n,o),this.variableNames.push("scale"),u="getScaleAtOutCoords()"),this.outputShape=n,this.userCode=`\n      void main() {\n        vec4 offset = ${l};\n        vec4 scale = ${u};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${i}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const Q2={kernelName:a.FusedBatchNorm,backendName:"webgl",kernelFunc:({inputs:t,backend:n,attrs:e})=>{const{x:s,mean:r,variance:o,offset:i,scale:l}=t;a.util.assert(r.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),a.util.assert(null==i||r.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),a.util.assert(null==l||r.shape.length===l.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:u}=e;null==u&&(u=.001);const c=[s,r,o];let d=null;null!=i&&(d=i.shape,c.push(i));let h=null;null!=l&&(h=l.shape,c.push(l));const p=(0,a.env)().getBool("WEBGL_PACK_NORMALIZATION")?new Z2(s.shape,r.shape,o.shape,d,h,u):new q2(s.shape,r.shape,o.shape,d,h,u);return n.runWebGLProgram(p,c,c[0].dtype)}};class J2{constructor(n){this.variableNames=["source"],this.outputShape=n,this.rank=n.length;const e=xe(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const s=function eA(t){if(1===t)return"sourceLoc";if(t<=6)return Oi.slice(0,t).map(n=>"sourceLoc."+n).join(",");throw Error(`Slicing for rank ${t} is not yet supported`)}(this.rank);let r;r=`\n        ${e} sourceLoc;\n        ${e} coords = getOutputCoords();\n        ${n.map((i,l)=>`sourceLoc.${Oi[l]} = start[${l}] + coords.${Oi[l]};`).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${r}\n        setOutput(getSource(${s}));\n      }\n    `}}const Oi=["x","y","z","w","u","v"];class tA{constructor(n){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n,this.rank=n.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const e=xe(this.rank),s=Ke("coords",this.rank),r=Ke("sourceLoc",this.rank),o=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,i=`getChannel(getSource(${r.join()}), ${o})`,l=`\n      result.x = ${i};\n      if (++${s[this.rank-1]} < ${n[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${i};\n        --${r[this.rank-1]};\n      }\n    `,u=1===this.rank?"":`\n      --${s[this.rank-1]};\n      if (++${s[this.rank-2]} < ${n[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${i};\n        if (++${s[this.rank-1]} < ${n[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${i};\n        }\n      }\n    `,c=this.rank<=4?`sourceLoc = coords +\n            ${e}(${n.map((d,h)=>`start[${h}]`).join()});`:n.map((d,h)=>`${r[h]} = ${s[h]} + start[${h}];`).join("\n");this.userCode=`\n      void main() {\n        ${e} coords = getOutputCoords();\n        ${e} sourceLoc;\n        ${c}\n        vec4 result = vec4(0.);\n        ${l}\n        ${u}\n        setOutput(result);\n      }\n    `}}function os(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{begin:o,size:i}=s,[l,u]=a.slice_util.parseSliceParams(r,o,i);if(a.slice_util.assertParamsValid(r,l,u),0===a.util.sizeFromShape(u))return e.makeTensorInfo(u,r.dtype,[]);if(e.shouldExecuteOnCPU([r])||"string"===r.dtype){const h=e.texData.get(r.dataId),p=HN(h.values,l,u,r.shape,r.dtype);return e.makeTensorInfo(u,r.dtype,p)}const{isPacked:c}=e.texData.get(r.dataId),d=a.slice_util.isSliceContinous(r.shape,l,u);if(c||!d){const h=(0,a.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new tA(u):new J2(u);return e.runWebGLProgram(h,[r],r.dtype,[l])}return e.uploadToGPU(r.dataId),function nA(t,n,e,s){const r=s.texData.get(t.dataId),o=s.makeTensorInfo(e,t.dtype),i=s.texData.get(o.dataId);Object.assign(i,r),i.refCount=1,i.shape=e,i.dtype=t.dtype;let l=a.slice_util.computeFlatOffset(n,a.util.computeStrides(t.shape));r.slice&&(l+=r.slice.flatOffset),i.slice={flatOffset:l,origDataId:r.slice&&r.slice.origDataId||t.dataId};const u=s.dataRefCount.get(i.slice.origDataId)||1;return s.dataRefCount.set(i.slice.origDataId,u+1),o}(r,l,u,e)}const sA={kernelName:a.Slice,backendName:"webgl",kernelFunc:os},oA={kernelName:a.BatchToSpaceND,backendName:"webgl",kernelFunc:t=>{const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{blockShape:o,crops:i}=s;a.util.assert(r.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");const l=o.reduce((b,C)=>b*C),u=a.backend_util.getReshaped(r.shape,o,l),c=a.backend_util.getPermuted(u.length,o.length),d=a.backend_util.getReshapedPermuted(r.shape,o,l),h=a.backend_util.getSliceBeginCoords(i,o.length),p=a.backend_util.getSliceSize(d,i,o.length),f=[],m=j({inputs:{x:r},backend:e,attrs:{shape:u}}),x=qe({inputs:{x:m},backend:e,attrs:{perm:c}}),g=j({inputs:{x},backend:e,attrs:{shape:d}}),y=os({inputs:{x:g},backend:e,attrs:{begin:h,size:p}});return f.push(m),f.push(x),f.push(g),f.forEach(b=>e.disposeIntermediateTensorInfo(b)),y}},aA={kernelName:a.Bincount,backendName:"webgl",kernelFunc:function iA(t){const{inputs:n,backend:e,attrs:s}=t,{x:r,weights:o}=n,{size:i}=s,l=e.readSync(r.dataId),u=e.readSync(o.dataId),c=fd(l,u,o.dtype,o.shape,i);return e.makeTensorInfo([i],o.dtype,c)}},dA={kernelName:a.BitwiseAnd,backendName:"webgl",kernelFunc:function cA(t){const{inputs:n,backend:e}=t,{a:s,b:r}=n,o=(0,a.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS"),i=(0,a.env)().getNumber("WEBGL_VERSION");if(e.shouldExecuteOnCPU([s,r])||1===i){const u=e.texData.get(s.dataId).values,c=e.texData.get(r.dataId).values,[d,h]=mN(s.shape,r.shape,u,c,s.dtype),p=e.makeTensorInfo(h,s.dtype);return e.texData.get(p.dataId).values=d,p}let l;return l=o?new ss("\n  int r = int(a.r) & int(b.r);\n  int g = int(a.g) & int(b.g);\n  int rb = int(a.b) & int(b.b);\n  int ra = int(a.a) & int(b.a);\n  return vec4(r, g, rb, ra);\n",s.shape,r.shape,!1):new Rn("\n  return float(int(a.r) & int(b.r));\n",s.shape,r.shape),e.runWebGLProgram(l,[s,r],s.dtype)}},pA={kernelName:a.BroadcastArgs,backendName:"webgl",kernelFunc:function hA(t){const{inputs:n,backend:e}=t,{s0:s,s1:r}=n,o=e.readSync(s.dataId),i=e.readSync(r.dataId),l=a.backend_util.assertAndGetBroadcastShape(Array.from(o),Array.from(i));return e.makeTensorInfo([l.length],"int32",Int32Array.from(l))}},Ld=Ve({opSnippet:"return float(a != b);",cpuKernelImpl:PN,dtype:"bool"}),fA={kernelName:a.NotEqual,backendName:"webgl",kernelFunc:Ld};function $s(t){const{inputs:n,backend:e}=t,{input:s}=n;return et({inputs:{x:e.texData.get(s.dataId).complexTensorInfos.real},backend:e})}const mA={kernelName:a.Real,backendName:"webgl",kernelFunc:$s},yA={kernelName:a.Cast,backendName:"webgl",kernelFunc:function Pi(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{dtype:o}=s;if("complex64"===o){if("complex64"===r.dtype)return et({inputs:{x:r},backend:e});const i=a.zeros(r.shape),l=Pi({inputs:{x:r},backend:e,attrs:{dtype:"float32"}}),u=cn({inputs:{real:l,imag:i},backend:e});return i.dispose(),e.disposeIntermediateTensorInfo(l),u}if("complex64"===r.dtype){const i=$s({inputs:{input:r},backend:e}),l=Pi({inputs:{x:i},backend:e,attrs:{dtype:o}});return e.disposeIntermediateTensorInfo(i),l}if(!a.util.hasEncodingLoss(r.dtype,o)){const i=et({inputs:{x:r},backend:e});return{dataId:i.dataId,shape:i.shape,dtype:o}}if(e.shouldExecuteOnCPU([r])){const i=e.texData.get(r.dataId).values,[l,u,c]=gN(i,r.shape,r.dtype,o);return e.makeTensorInfo(l,u,c)}if("int32"===o)return function xA(t,n){const e=new Lt(t.shape,"return float(int(x));"),s=n.runWebGLProgram(e,[t],"int32");return{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}(r,e);if("bool"===o){const i=e.makeTensorInfo([],"bool",a.util.getTypedArrayFromDType("bool",1)),u=Ld({inputs:{a:r,b:i},backend:e});return e.disposeIntermediateTensorInfo(i),u}throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${o}`)}},Md="return ceil(x);",bA=de({opSnippet:Md,packedOpSnippet:Md,cpuKernelImpl:xN}),vA={kernelName:a.Ceil,backendName:"webgl",kernelFunc:bA};class CA{constructor(n){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=n,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class wA{constructor(n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=n,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const IA={kernelName:a.ClipByValue,backendName:"webgl",kernelFunc:function SA(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{clipValueMin:o,clipValueMax:i}=s;let l;return l=(0,a.env)().getBool("WEBGL_PACK_CLIP")?new wA(r.shape):new CA(r.shape),e.runWebGLProgram(l,[r],r.dtype,[[o],[i]])}};class kA{constructor(n){this.variableNames=["real","imag"],this.outputShape=n,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function Bd(t,n){return{dataId:n.dataId,dtype:n.dtype,shape:t.shape}}const NA={kernelName:a.ComplexAbs,backendName:"webgl",kernelFunc:function TA(t){const{inputs:n,backend:e}=t,{x:s}=n,r=e.texData.get(s.dataId),o=new kA(s.shape),i=[Bd(s,r.complexTensorInfos.real),Bd(s,r.complexTensorInfos.imag)];return e.runWebGLProgram(o,i,i[0].dtype)}};class RA{constructor(n){this.outputShape=[],this.outputShape=a.backend_util.computeOutShape(n,1),this.variableNames=n.map((i,l)=>`T${l}`);const e=new Array(n.length-1);e[0]=n[0][1];for(let i=1;i<e.length;i++)e[i]=e[i-1]+n[i][1];const s=[`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];for(let i=1;i<e.length;i++)s.push(`else if (yC < ${e[i]}) setOutput(getT${i}(yR, yC-${e[i-1]}));`);s.push(`else setOutput(getT${e.length}(yR, yC-${e[e.length-1]}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${s.join("\n        ")}\n      }\n    `}}class AA{constructor(n,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=a.backend_util.computeOutShape(n,e);const s=this.outputShape,r=s.length,o=xe(r),i=Ke("coords",r),l=["x","y","z","w","u","v"].slice(0,r);this.variableNames=n.map((x,g)=>`T${g}`);const u=new Array(n.length-1);u[0]=n[0][e];for(let x=1;x<u.length;x++)u[x]=u[x-1]+n[x][e];const c=l[e],d=l.slice(-2),h=l.join();let p=`if (${c} < ${u[0]}) {\n        return getChannel(\n            getT0(${h}), vec2(${d.join()}));\n        }`;for(let x=1;x<u.length;x++){const g=u[x-1];p+=`\n        if (${c} < ${u[x]}  && ${c} >= ${u[x-1]}) {\n          return getChannel(\n            getT${x}(${Kr(l,c,g)}),\n            vec2(${Kr(d,c,g)}));\n        }`}const m=u[u.length-1];p+=`\n        return getChannel(\n          getT${u.length}(${Kr(l,c,m)}),\n          vec2(${Kr(d,c,m)}));`,this.userCode=`\n      float getValue(${l.map(x=>"int "+x)}) {\n        ${p}\n      }\n\n      void main() {\n        ${o} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${i}), 0., 0., 0.);\n\n        ${i[r-1]} = ${i[r-1]} + 1;\n        if (${i[r-1]} < ${s[r-1]}) {\n          result.g = getValue(${i});\n        }\n\n        ${i[r-2]} = ${i[r-2]} + 1;\n        if (${i[r-2]} < ${s[r-2]}) {\n          result.a = getValue(${i});\n        }\n\n        ${i[r-1]} = ${i[r-1]} - 1;\n        if (${i[r-2]} < ${s[r-2]} &&\n            ${i[r-1]} < ${s[r-1]}) {\n          result.b = getValue(${i});\n        }\n        setOutput(result);\n      }\n    `}}function Kr(t,n,e){const s=t.indexOf(n);return t.map((o,i)=>i===s?`${o} - ${e}`:o).join()}function qr(t){const{inputs:n,backend:e}=t,{input:s}=n;return et({inputs:{x:e.texData.get(s.dataId).complexTensorInfos.imag},backend:e})}const DA={kernelName:a.Imag,backendName:"webgl",kernelFunc:qr};function Es(t,n,e){const s=t[0].dtype;if("complex64"===s){const f=t.map(b=>$s({inputs:{input:b},backend:e})),m=t.map(b=>qr({inputs:{input:b},backend:e})),x=Es(f,n,e),g=Es(m,n,e),y=cn({inputs:{real:x,imag:g},backend:e});return f.forEach(b=>e.disposeIntermediateTensorInfo(b)),m.forEach(b=>e.disposeIntermediateTensorInfo(b)),e.disposeIntermediateTensorInfo(x),e.disposeIntermediateTensorInfo(g),y}let r=e.shouldExecuteOnCPU(t);if("string"===s&&(r=!0),r){const f=t.map(v=>{const S=[-1,a.util.sizeFromShape(v.shape.slice(n))];return j({inputs:{x:v},backend:e,attrs:{shape:S}})}),m=f.map(v=>({vals:e.readSync(v.dataId),shape:v.shape})),x=a.backend_util.computeOutShape(f.map(v=>v.shape),1),y=yN(m,x,s,1===f[0].shape[0]),b=a.backend_util.computeOutShape(t.map(v=>v.shape),n),C=e.makeTensorInfo(b,s,y);return f.forEach(v=>e.disposeIntermediateTensorInfo(v)),C}const o=t.filter(f=>a.util.sizeFromShape(f.shape)>0),i=(0,a.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&o[0].shape.length>1;if(1===o.length){const f=i?new Lt(t[0].shape,ln):new un(t[0].shape,ln);return e.runWebGLProgram(f,t,s)}const l=(0,a.env)().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(o.length>l){const f=[];for(let x=0;x<o.length;x+=l){const g=o.slice(x,x+l);f.push(Es(g,n,e))}const m=Es(f,n,e);for(const x of f)e.disposeIntermediateTensorInfo(x);return m}if(i){const f=new AA(o.map(m=>m.shape),n);return e.runWebGLProgram(f,o,s)}const{tensors2D:u,outShape:c}=function $A(t,n,e){const s=a.backend_util.computeOutShape(t.map(o=>o.shape),n);return{tensors2D:t.map(o=>j({inputs:{x:o},attrs:{shape:[-1,a.util.sizeFromShape(o.shape.slice(n))]},backend:e})),outShape:s}}(o,n,e),d=new RA(u.map(f=>f.shape)),h=e.runWebGLProgram(d,u,s);u.forEach(f=>e.disposeIntermediateTensorInfo(f));const p=j({inputs:{x:h},attrs:{shape:c},backend:e});return e.disposeIntermediateTensorInfo(h),p}function Vd(t){const{inputs:n,backend:e,attrs:s}=t,{axis:r}=s,o=a.util.parseAxisParam(r,n[0].shape)[0],i=n.map(c=>c.shape);a.backend_util.assertParamsConsistent(i,o);const l=a.backend_util.computeOutShape(n.map(c=>c.shape),o);if(0===a.util.sizeFromShape(l))return e.makeTensorInfo(l,n[0].dtype,[]);const u=n.filter(c=>a.util.sizeFromShape(c.shape)>0);return 1===u.length?et({inputs:{x:u[0]},backend:e}):Es(u,o,e)}const EA={kernelName:a.Concat,backendName:"webgl",kernelFunc:Vd};class Wd{constructor(n,e=!1,s=null,r=!1,o=!1){this.variableNames=["x","W"],this.outputShape=n.outShape;const i=n.padInfo.top,l=n.padInfo.left,u=n.strideHeight,c=n.strideWidth,d=n.dilationHeight,h=n.dilationWidth,p=n.filterHeight,f=n.filterWidth,m=4*Math.floor(n.inChannels/4),x=n.inChannels%4,g="channelsLast"===n.dataFormat,y=g?1:2,b=g?2:3,C=g?3:1;let v="",w="";s&&(v=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${s}\n        }`:o?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${s}\n        }`:`\n          float activation(float x) {\n            ${s}\n          }\n        `,w="result = activation(result);");const S=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${v}\n\n      const ivec2 strides = ivec2(${u}, ${c});\n      const ivec2 pads = ivec2(${i}, ${l});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${C}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${y}], coords[${b}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${p}; wR++) {\n          int xR = xRCorner + wR * ${d};\n\n          if (xR < 0 || xR >= ${n.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${f}; wC++) {\n            int xC = xCCorner + wC * ${h};\n\n            if (xC < 0 || xC >= ${n.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${m}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${g}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===x}) {\n\n              if (${g}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${m}) *\n                    getW(wR, wC, ${m}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${m}, xR, xC) *\n                    getW(wR, wC, ${m}, d2);\n              }\n\n            } else if (${2===x}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${m}, d2),\n                getW(wR, wC, ${m} + 1, d2)\n              );\n\n              if (${g}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${m}),\n                  getX(batch, xR, xC, ${m} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${m}, xR, xC),\n                  getX(batch, ${m} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===x}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${m}, d2),\n                getW(wR, wC, ${m} + 1, d2),\n                getW(wR, wC, ${m} + 2, d2)\n              );\n\n              if (${g}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${m}),\n                  getX(batch, xR, xC, ${m} + 1),\n                  getX(batch, xR, xC, ${m} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${m}, xR, xC),\n                  getX(batch, ${m} + 1, xR, xC),\n                  getX(batch, ${m} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${S}\n        ${w}\n        setOutput(result);\n      }\n    `}}class _A{constructor(n){this.variableNames=["x","W"],this.outputShape=n.outShape;const e=n.padInfo.front,s=n.padInfo.top,r=n.padInfo.left,o=n.strideDepth,i=n.strideHeight,l=n.strideWidth,u=n.dilationDepth,c=n.dilationHeight,d=n.dilationWidth,h=n.filterDepth,p=n.filterHeight,f=n.filterWidth,m=4*Math.floor(n.inChannels/4),x=n.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${o}, ${i}, ${l});\n      const ivec3 pads = ivec3(${e}, ${s}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${h}; wF++) {\n          int xF = xFCorner + wF * ${u};\n\n          if (xF < 0 || xF >= ${n.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${p}; wR++) {\n            int xR = xRCorner + wR * ${c};\n\n            if (xR < 0 || xR >= ${n.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${f}; wC++) {\n              int xC = xCCorner + wC * ${d};\n\n              if (xC < 0 || xC >= ${n.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${m}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===x}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${m}) *\n                  getW(wF, wR, wC, ${m}, d2);\n              } else if (${2===x}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${m}),\n                  getX(batch, xF, xR, xC, ${m} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${m}, d2),\n                  getW(wF, wR, wC, ${m} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===x}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${m}),\n                  getX(batch, xF, xR, xC, ${m} + 1),\n                  getX(batch, xF, xR, xC, ${m} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${m}, d2),\n                  getW(wF, wR, wC, ${m} + 1, d2),\n                  getW(wF, wR, wC, ${m} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Ud{constructor(n,e=!1,s=null,r=!1,o=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=n.outShape,this.enableShapeUniforms=He(this.outputShape.length);const i=n.padInfo.left,l=n.strideWidth,u=n.dilationWidth,c=n.filterHeight,d=n.filterWidth,h=d;let p="\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;";for(let g=0;g<d;g++)p+=`\n           vec4 xTexelC${2*g};\n           int xTexelC${2*g}Ready;\n           vec4 xTexelC${2*g+1};\n           int xTexelC${2*g+1}Ready;\n           vec4 xC${g};`;p+=`\n     for (int r = 0; r < ${c}; r++) {\n      for (int d1 = 0; d1 < ${n.inChannels}; d1 += 2) {\n       `;for(let g=0;g<d;g++)p+=`\n           xTexelC${2*g} = vec4(0.0);\n           xTexelC${2*g}Ready = 0;\n           xTexelC${2*g+1} = vec4(0.0);\n           xTexelC${2*g+1}Ready = 0;\n           xC${g} = vec4(0.0);`;p+="\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       ";for(let g=0;g<(h+1)/2;g++){const y=2*g;if(p+=`\n           xC = xCCorner + ${y*u};\n           `,1===l){if(y<d&&(i%2==1?(p+=`\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y}Ready == 0) {\n                   xTexelC${y} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${y}.zw = vec2(0.0);\n                   }\n                   xTexelC${y}Ready = 1;\n                 }\n               `,p+=1===u&&y>0?`\n                 xC${y} = vec4(xTexelC${y-2}.zw, xTexelC${y}.xy);\n                 `:`\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${y} = vec4(previous.zw, xTexelC${y}.xy);\n                   } else {\n                     xC${y} = vec4(0.0, 0.0, xTexelC${y}.xy);\n                   }\n                   `):p+=`\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${y}Ready == 0) {\n                   xTexelC${y} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${y}.zw = vec2(0.0);\n                   }\n                   xTexelC${y}Ready = 1;\n                 }\n\n                 xC${y} = xTexelC${y};\n                 `,y+1<d)){const b=i%2==0?a.util.nearestLargerEven(u):u;u%2==0&&i%2==1||u%2!=0&&i%2!=1?(p+=`\n                   xCOffset = xC + imod(pads[1], 2) + ${b};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y+1}Ready == 0) {\n                     xTexelC${y+1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${y+1}.zw = vec2(0.0);\n                     }\n                     xTexelC${y+1}Ready = 1;\n                   }\n                   `,p+=u>1?`\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${y+1} = vec4(previous.zw, xTexelC${y+1}.xy);\n                     } else {\n                      xC${y+1} = vec4(0.0, 0.0, xTexelC${y+1}.xy);\n                     }\n                     `:`\n                     xC${y+1} = vec4(xTexelC${y}.zw, xTexelC${y+1}.xy);\n                     `):p+=1===b?`\n                     xC${y+1} = xTexelC${y};\n                     `:`\n                     xCOffset = xC + ${b};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y+1}Ready == 0) {\n                       xTexelC${y+1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${y+1}.zw = vec2(0.0);\n                       }\n                       xTexelC${y+1}Ready = 1;\n                     }\n\n                     xC${y+1} = xTexelC${y+1};\n                     `}}else y<d&&(i%2==1?(p+=`\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y}Ready == 0) {\n                   xTexelC${y} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${y}.zw = vec2(0.0);\n                   }\n                   xTexelC${y}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${y+1}Ready == 0) {\n                   xTexelC${y+1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${y+1}.zw = vec2(0.0);\n                   }\n                   xTexelC${y+1}Ready = 1;\n                 }\n\n                 xC${y} = vec4(xTexelC${y}.zw, xTexelC${y+1}.zw);\n               `,y+1<d&&(p+=`\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${y+1} = vec4(xTexelC${y+1}.xy, final.xy);\n                 `)):(p+=`\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${y}Ready == 0) {\n                   xTexelC${y} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${y}.zw = vec2(0.0);\n                   }\n                   xTexelC${y}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${y+1}Ready == 0) {\n                   xTexelC${y+1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${y+1}.zw = vec2(0.);\n                   }\n                   xTexelC${y+1}Ready = 1;\n                 }\n\n                 xC${y} = vec4(\n                   xTexelC${y}.xy, xTexelC${y+1}.xy);\n               `,y+1<d&&(p+=`\n                   xC${y+1} = vec4(xTexelC${y}.zw, xTexelC${y+1}.zw);\n                 `)));y<d&&(p+=`\n             wTexel = getW(r, ${y}, d1, d2);\n             dotProd += xC${y}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${n.inChannels}) {\n               dotProd += xC${y}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `,y+1<d&&(p+=`\n               wTexel = getW(r, ${y+1}, d1, d2);\n               dotProd += xC${y+1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${n.inChannels}) {\n                 dotProd += xC${y+1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `))}p+="\n     }\n   ",p+="\n     }\n   ",p+="\n     }\n   ";let f="",m="";s&&(f=r?`vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${s}\n         }`:o?`vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${s}\n         }`:`vec4 activation(vec4 x) {\n           ${s}\n         }`,m="result = activation(result);");const x=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n       ${f}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${p}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${x}\n         ${m}\n         setOutput(result);\n       }\n     `}}class FA{constructor(n,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=n,this.enableShapeUniforms=He(this.outputShape.length);const{dataFormat:s}=e,r=je(),o="channelsLast"===s,i=o?1:2,l=o?2:3,u=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${n[2]} && pos < ${n[1]}) {`;let c="";for(let d=0;d<=1;d++)for(let h=0;h<=1;h++)c+=`\n          blockIndex = rc.z + ${h};\n          pos = rc.y + ${d};\n\n          ${u}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${i}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${l}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${o}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*d+h}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*d+h}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${c}\n\n        ${r.output} = result;\n      }\n    `}}function Zr(t,n){const e=t.length;return e>=3?n?[...t.slice(0,-3),t[e-3]*t[e-2],t[e-1]]:[...t.slice(0,-3),t[e-3],t[e-2]*t[e-1]]:!n&&1===e&&t[0]>1?[t[0],1]:null}function Gd({x:t,filter:n,convInfo:e,backend:s,bias:r=null,preluActivationWeights:o=null,leakyreluAlpha:i=0,activation:l=null}){const u=t.shape,c=s.texData.get(t.dataId),d=e.inChannels,h=u[0]*u[1]*u[2],p=e.outChannels,f="channelsLast"===e.dataFormat;let g;const y=[];if(null!=o){const v=Zr(o.shape,f);null!=v&&(o=j({inputs:{x:o},backend:s,attrs:{shape:v}}),y.push(o))}if(null!=r){const v=Zr(r.shape,f);null!=v&&(r=j({inputs:{x:r},backend:s,attrs:{shape:v}}),y.push(r))}if((1!==h&&1!==p||!(d>Ed))&&c.isPacked&&f&&null!=c.texture&&u[2]%2!=0&&a.util.arraysEqual(c.shape.slice(-3),u.slice(-3))){const w={dataId:t.dataId,shape:[1,u[0]*u[1]*(u[2]+1),e.inChannels],dtype:t.dtype},S=c.shape;c.shape=c.shape.slice(),c.shape[c.shape.length-2]++,a.util.assert(Lr(c.shape,w.shape),()=>`packed reshape ${c.shape} to ${w.shape} isn't free`);const I=j({inputs:{x:n},backend:s,attrs:{shape:[1,e.inChannels,e.outChannels]}});y.push(I);const k=Xr({a:w,b:I,backend:s,transposeA:!1,transposeB:!1,bias:r,activation:l,preluActivationWeights:o,leakyreluAlpha:i}),N=s.texData.get(k.dataId);a.util.assert(N.isPacked,()=>"batchMatMul result is expected to be packed"),c.shape=S,N.shape=e.outShape,g=et({inputs:{x:k},backend:s}),g.shape=e.outShape,y.push(k)}else{const v=e.outHeight*e.outWidth,w=j({inputs:{x:t},backend:s,attrs:{shape:f?[e.batchSize,v,e.inChannels]:[e.batchSize,e.inChannels,v]}}),S=j({inputs:{x:n},backend:s,attrs:{shape:[1,e.inChannels,e.outChannels]}}),I=Xr({a:f?w:S,b:f?S:w,transposeA:!f,transposeB:!1,backend:s,bias:r,activation:l,preluActivationWeights:o,leakyreluAlpha:i});g=j({inputs:{x:I},backend:s,attrs:{shape:e.outShape}}),y.push(w),y.push(S),y.push(I)}for(const v of y)s.disposeIntermediateTensorInfo(v);return g}function Hd({x:t,filter:n,convInfo:e,backend:s,bias:r=null,preluActivationWeights:o=null,leakyreluAlpha:i=0,activation:l=null}){const{filterWidth:u,filterHeight:c,inChannels:d,outWidth:h,outHeight:p,dataFormat:f}=e,m="channelsLast"===f,x=u*c*d,g=p*h,y=[e.batchSize,x,g],v=[];if(null!=o){const E=Zr(o.shape,m);null!=E&&(o=j({inputs:{x:o},backend:s,attrs:{shape:E}}),v.push(o))}if(null!=r){const E=Zr(r.shape,m);null!=E&&(r=j({inputs:{x:r},backend:s,attrs:{shape:E}}),v.push(r))}const w=j({inputs:{x:n},backend:s,attrs:{shape:[1,x,a.util.sizeFromShape(n.shape)/x]}});v.push(w);const S=new FA(y,e),k=s.runWebGLProgram(S,[t],"float32",[t.shape,[e.padInfo.top,e.padInfo.left],[e.strideHeight,e.strideWidth],[e.dilationHeight,e.dilationWidth],[e.inChannels],[e.filterWidth*e.inChannels],[e.outWidth]]),N=j({inputs:{x:k},backend:s,attrs:{shape:y}});v.push(k),v.push(N);const T=null!=r,A=null!=o,$="leakyrelu"===l,F=l?As(l,!0):null,O=new Nd(m?N.shape:w.shape,m?w.shape:N.shape,m?[e.batchSize,g,e.outChannels]:[e.batchSize,e.outChannels,g],!0,!1,T,F,A,$),P=m?[N,w]:[w,N];if(r&&P.push(r),A&&P.push(o),$){const E=s.makeTensorInfo([],"float32",a.util.createScalarValue(i,"float32"));P.push(E),v.push(E)}const z=s.runWebGLProgram(O,P,"float32"),M=j({inputs:{x:z},backend:s,attrs:{shape:e.outShape}});v.push(z);for(const E of v)s.disposeIntermediateTensorInfo(E);return M}const PA={kernelName:a.Conv2D,backendName:"webgl",kernelFunc:function OA(t){const{inputs:n,backend:e,attrs:s}=t,{x:r,filter:o}=n,{strides:i,pad:l,dataFormat:u,dilations:c,dimRoundingMode:d}=s,h=a.backend_util.convertConv2DDataFormat(u),p=a.backend_util.computeConv2DInfo(r.shape,o.shape,i,c,l,d,!1,h);let f;if(1!==p.filterHeight||1!==p.filterWidth||1!==p.dilationHeight||1!==p.dilationWidth||1!==p.strideHeight||1!==p.strideWidth||"SAME"!==p.padInfo.type&&"VALID"!==p.padInfo.type)if(p.strideWidth<=2&&"channelsLast"===h&&(0,a.env)().getBool("WEBGL_EXP_CONV")){const x=new Ud(p);f=e.runWebGLProgram(x,[r,o],"float32",[[p.padInfo.top,p.padInfo.left],[p.strideHeight,p.strideWidth],[p.dilationHeight,p.dilationWidth],[p.inHeight,p.inWidth]])}else if((0,a.env)().getBool("WEBGL_CONV_IM2COL"))f=Hd({x:r,filter:o,convInfo:p,backend:e});else{const x=new Wd(p);f=e.runWebGLProgram(x,[r,o],"float32")}else f=Gd({x:r,filter:o,convInfo:p,backend:e});const m=j({inputs:{x:f},backend:e,attrs:{shape:p.outShape}});return e.disposeIntermediateTensorInfo(f),m}};class zA{constructor(n){this.variableNames=["x","dy"],this.outputShape=n.filterShape,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${n.batchSize}; b++) {\n          for (int yR = 0; yR < ${n.outHeight}; yR++) {\n            int xR = wR + yR * ${n.strideHeight} - ${n.padInfo.top};\n\n            if (xR < 0 || xR >= ${n.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${n.outWidth}; yC++) {\n              int xC = wC + yC * ${n.strideWidth} - ${n.padInfo.left};\n\n              if (xC < 0 || xC >= ${n.inWidth}) {\n                continue;\n              }\n\n              ${"channelsLast"===n.dataFormat?"float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);":"float dyValue = getDy(b, d2, yR, yC);\n              float xValue = getX(b, d1, xR, xC);\n              dotProd += (xValue * dyValue);"}\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class LA{constructor(n){this.variableNames=["dy","W"],this.outputShape=n.inShape;const e=n.filterHeight,s=n.filterWidth,i="channelsLast"===n.dataFormat;this.userCode=`\n      const ivec2 pads = ivec2(${e-1-n.padInfo.top}, ${s-1-n.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${i?3:1}];\n\n        ivec2 dyCorner = ivec2(coords[${i?1:2}], coords[${i?2:3}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${n.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${n.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${s}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${n.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${s} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${n.outChannels}; d2++) {\n\n              if (${i}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class MA{constructor(n){this.variableNames=["x","dy"],this.outputShape=n.filterShape,this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${n.batchSize}; b++) {\n          for (int yF = 0; yF < ${n.outDepth}; yF++) {\n            int xF = wF + yF * ${n.strideDepth} - ${n.padInfo.front};\n\n            if (xF < 0 || xF >= ${n.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${n.outHeight}; yR++) {\n              int xR = wR + yR * ${n.strideHeight} - ${n.padInfo.top};\n\n              if (xR < 0 || xR >= ${n.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${n.outWidth}; yC++) {\n                int xC = wC + yC * ${n.strideWidth} - ${n.padInfo.left};\n\n                if (xC < 0 || xC >= ${n.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class BA{constructor(n){this.variableNames=["dy","W"],this.outputShape=n.inShape;const e=n.filterDepth,s=n.filterHeight,r=n.filterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${e-1-n.padInfo.front}, ${s-1-n.padInfo.top}, ${r-1-n.padInfo.left});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${e}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${n.strideDepth}.0;\n\n          if (dyF < 0.0 || dyF >= ${n.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${e} - 1 - wF;\n\n          for (int wR = 0; wR < ${s}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${n.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${n.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${s} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${n.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${n.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${n.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const WA={kernelName:a.Conv2DBackpropFilter,backendName:"webgl",kernelFunc:function VA(t){const{inputs:n,backend:e,attrs:s}=t,{x:r,dy:o}=n,{strides:i,pad:l,dataFormat:u,dimRoundingMode:c,filterShape:d}=s,h=a.backend_util.convertConv2DDataFormat(u),p=a.backend_util.computeConv2DInfo(r.shape,d,i,1,l,c,!1,h),f=new zA(p);return e.runWebGLProgram(f,[r,o],"float32")}};class UA{constructor(n){this.variableNames=["dy","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"strides",type:"vec2"}],this.outputShape=n.inShape,this.enableShapeUniforms=He(this.outputShape.length);const e=n.filterHeight,s=n.filterWidth;this.userCode=`\n      const ivec2 pads = ivec2(${e-1-n.padInfo.top}, ${s-1-n.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n\n        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        vec4 result = vec4(0.);\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / strides[0];\n          if (dyR < 0.0 || dyR >= ${n.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${s}; wC++) {\n            int wCPerm = ${s} - 1 - wC;\n\n            float dyC = float(dyCCorner + wC) / strides[1];\n            bool idyCVal = (dyC >= 0.0) && (dyC < ${n.outWidth}.0)\n              && (fract(dyC) == 0.0);\n            int idyC = int(dyC);\n\n            float dyC2 = float(dyCCorner + wC + 1) / strides[1];\n            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${n.outWidth}.0)\n              && (fract(dyC2) == 0.0);\n            int idyC2 = int(dyC2);\n\n            if (idyCVal && idyCVal2) {\n              for (int d2 = 0; d2 < ${n.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?\n                  dySample : getDy(batch, idyR, idyC2, d2);\n\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n\n                dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample2.xy : dySample2.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal) {\n              for (int d2 = 0; d2 < ${n.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal2) {\n              for (int d2 = 0; d2 < ${n.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC2, d2);\n                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            }\n          }\n        }\n        setOutput(result);\n      }\n    `}}const HA={kernelName:a.Conv2DBackpropInput,backendName:"webgl",kernelFunc:function GA(t){const{inputs:n,backend:e,attrs:s}=t,{dy:r,filter:o}=n,{inputShape:i,strides:l,pad:u,dataFormat:c,dimRoundingMode:d}=s,h=a.backend_util.convertConv2DDataFormat(c),p=a.backend_util.computeConv2DInfo(i,o.shape,l,1,u,d,!1,h);if((0,a.env)().getBool("WEBGL_PACK_CONV2DTRANSPOSE")&&"channelsLast"===h){const f=[[p.strideHeight,p.strideWidth]],m=new UA(p);return e.runWebGLProgram(m,[r,o],"float32",f)}{const f=new LA(p);return e.runWebGLProgram(f,[r,o],"float32")}}},jA={kernelName:a.Conv3D,backendName:"webgl",kernelFunc:function XA(t){const{inputs:n,backend:e,attrs:s}=t,{x:r,filter:o}=n,{strides:i,pad:l,dilations:u}=s,c=a.backend_util.computeConv3DInfo(r.shape,o.shape,i,u,l),d=new _A(c);return e.runWebGLProgram(d,[r,o],"float32")}},qA={kernelName:a.Conv3DBackpropFilterV2,backendName:"webgl",kernelFunc:function KA(t){const{inputs:n,backend:e,attrs:s}=t,{x:r,dy:o}=n,{strides:i,pad:l,filterShape:u}=s,c=a.backend_util.computeConv3DInfo(r.shape,u,i,1,l),d=new MA(c);return e.runWebGLProgram(d,[r,o],"float32")}},YA={kernelName:a.Conv3DBackpropInputV2,backendName:"webgl",kernelFunc:function ZA(t){const{inputs:n,backend:e,attrs:s}=t,{dy:r,filter:o}=n,{pad:i,strides:l,inputShape:u}=s,c=a.backend_util.computeConv3DInfo(u,o.shape,l,1,i),d=new BA(c);return e.runWebGLProgram(d,[r,o],"float32")}},eD=de({opSnippet:rs+"\n  return cos(x);\n",packedOpSnippet:`\n  vec4 result = cos(x);\n  bvec4 isNaN = isnan(x);\n  ${An}\n  return result;\n`}),tD={kernelName:a.Cos,backendName:"webgl",kernelFunc:eD},nD=de({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),sD={kernelName:a.Cosh,backendName:"webgl",kernelFunc:nD};class rD{constructor(n,e,s,r,o){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[i,l,u,c]=n,[d]=e,[h,p]=s;this.outputShape=[d,h,p,c];const f="bilinear"===r?1:0,[m,x]=[l-1+".0",u-1+".0"],[g,y,b]=h>1?[""+(l-1)/(h-1),"(y2-y1) * height_ratio",`y1*${m} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${m}`],[C,v,w]=p>1?[""+(u-1)/(p-1),"(x2-x1) * width_ratio",`x1*${x} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${x}`];this.userCode=`\n      const float height_ratio = float(${g});\n      const float width_ratio = float(${C});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${i}) {\n          return;\n        }\n\n        float height_scale = ${y};\n        float width_scale = ${v};\n\n        float in_y = ${b};\n        if( in_y < 0.0 || in_y > ${m} ) {\n          setOutput(float(${o}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${x} ) {\n          setOutput(float(${o}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${f} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const iD={kernelName:a.CropAndResize,backendName:"webgl",kernelFunc:t=>{const{inputs:n,backend:e,attrs:s}=t,{image:r,boxes:o,boxInd:i}=n,{cropSize:l,method:u,extrapolationValue:c}=s,d=new rD(r.shape,o.shape,l,u,c);return e.runWebGLProgram(d,[r,o,i],"float32")}};var Yr=function(t){return t.Prod="*",t.Sum="+",t}(Yr||{});class Xd{constructor(n,e,s,r){this.op=n,this.outputShape=e,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];const o=this.outputShape.length,l=s?this.op===Yr.Prod?"1.0":"0.0":`getX(${jd(o,"coords",this.op)})`,u=this.outputShape[this.outputShape.length-1];let c="",d="";s?(c=r?"end != "+(u-1):"end != 0",d=r?"end + 1":"end - 1"):(c=r?`end + pow2 < ${u}`:"end >= pow2",d=r?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${xe(o)} coords = getOutputCoords();\n        int end = ${Kd(o,"coords",this.op)};\n        float val = ${l};\n        int pow2 = int(pow(2.0, index));\n        if (${c}) {\n          int idx = ${d};\n          ${Kd(o,"coords",this.op)} = idx;\n          val ${this.op}= getX(${jd(o,"coords",this.op)});\n        }\n        setOutput(val);\n      }\n    `}}function jd(t,n,e){if(1===t)return`${n}`;if(2===t)return`${n}.x, ${n}.y`;if(3===t)return`${n}.x, ${n}.y, ${n}.z`;if(4===t)return`${n}.x, ${n}.y, ${n}.z, ${n}.w`;throw new Error(`Cumulative ${e} for rank ${t} is not yet supported`)}function Kd(t,n,e){if(1===t)return`${n}`;if(2===t)return`${n}.y`;if(3===t)return`${n}.z`;if(4===t)return`${n}.w`;throw new Error(`Cumulative ${e} for rank ${t} is not yet supported`)}function qd(t,n,e,s,r,o){const i=n.shape.length,l=a.backend_util.getAxesPermutation([s],i);let u=n;null!=l&&(u=qe({inputs:{x:n},backend:e,attrs:{perm:l}}));const c=a.backend_util.getInnerMostAxes(1,i)[0];if(c!==i-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${n.shape.length-1} but got axis=${s}`);const d=u.shape[c];let h=et({inputs:{x:u},backend:e});for(let p=0;p<=Math.ceil(Math.log2(d))-1;p++){const f=new Xd(t,u.shape,!1,o),x=h;h=e.runWebGLProgram(f,[h],h.dtype,[[p]]),e.disposeIntermediateTensorInfo(x)}if(r){const p=new Xd(t,u.shape,r,o),f=h;h=e.runWebGLProgram(p,[h],h.dtype),e.disposeIntermediateTensorInfo(f)}if(null!=l){const f=qe({inputs:{x:h},backend:e,attrs:{perm:a.backend_util.getUndoAxesPermutation(l)}});return e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(u),f}return h}const lD={kernelName:a.Cumprod,backendName:"webgl",kernelFunc:function aD(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{axis:o,exclusive:i,reverse:l}=s;return qd(Yr.Prod,r,e,o,i,l)}},cD={kernelName:a.Cumsum,backendName:"webgl",kernelFunc:function uD(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{axis:o,exclusive:i,reverse:l}=s;return qd(Yr.Sum,r,e,o,i,l)}},hD={kernelName:a.DenseBincount,backendName:"webgl",kernelFunc:function dD(t){const{inputs:n,backend:e,attrs:s}=t,{x:r,weights:o}=n,{size:i,binaryOutput:l}=s;if(1===r.shape.length){const u=e.readSync(r.dataId),c=e.readSync(o.dataId),d=fd(u,c,o.dtype,o.shape,i);return e.makeTensorInfo([i],o.dtype,d)}if(2===r.shape.length){const u=e.bufferSync(r),c=e.bufferSync(o),d=fN(u,c,i,l);return e.makeTensorInfo(d.shape,o.dtype,d.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}};class pD{constructor(n,e,s){this.variableNames=["x"],this.outputShape=[],this.outputShape=n,this.blockSize=e,this.dataFormat=s,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${e};\n      int offset_h = imod(h, ${e});\n      int in_w = w / ${e};\n      int offset_w = imod(w, ${e});\n      int offset_d = (offset_h * ${e} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const mD={kernelName:a.DepthToSpace,backendName:"webgl",kernelFunc:function fD(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{blockSize:o,dataFormat:i}=s,l=r.shape[0],h=("NHWC"===i?r.shape[1]:r.shape[2])*o,p=("NHWC"===i?r.shape[2]:r.shape[3])*o,f=("NHWC"===i?r.shape[3]:r.shape[1])/(o*o),x=new pD("NHWC"===i?[l,h,p,f]:[l,f,h,p],o,i);return e.runWebGLProgram(x,[r],r.dtype)}};class Zd{constructor(n,e=!1,s=null,r=!1,o=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=n.outShape,this.enableShapeUniforms=He(this.outputShape.length);const i=n.filterHeight,l=n.filterWidth,u=n.outChannels/n.inChannels;let c="",d="";s&&(c=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${s}\n        }`:o?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${s}\n        }`:`\n          float activation(float x) {\n            ${s}\n          }\n        `,d="result = activation(result);");const h=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${c}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${u};\n        int q = d2 - d1 * ${u};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${i}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${l}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${h}\n        ${d}\n        setOutput(result);\n      }\n    `}}class Yd{constructor(n,e=!1,s=null,r=!1,o=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=n.outShape,this.enableShapeUniforms=He(this.outputShape.length);const i=n.outChannels/n.inChannels,l=n.padInfo.left,u=n.strideWidth,c=n.dilationWidth,d=n.filterHeight,h=n.filterWidth,p=h;let f="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let y=0;y<h;y++)f+=`\n          vec4 xTexelC${2*y};\n          int xTexelC${2*y}Ready;\n          vec4 xTexelC${2*y+1};\n          int xTexelC${2*y+1}Ready;\n          vec4 xC${y};`;f+=`\n    for (int r = 0; r < ${d}; r++) {\n      `;for(let y=0;y<h;y++)f+=`\n          xTexelC${2*y} = vec4(0.0);\n          xTexelC${2*y}Ready = 0;\n          xTexelC${2*y+1} = vec4(0.0);\n          xTexelC${2*y+1}Ready = 0;\n          xC${y} = vec4(0.0);`;f+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let y=0;y<(p+1)/2;y++){const b=2*y;if(f+=`\n          xC = xCCorner + ${b*c};\n          `,1===u){if(b<h&&(l%2==1?(f+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {\n                  xTexelC${b} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${b}.zw = vec2(0.0);\n                  }\n                  xTexelC${b}Ready = 1;\n                }\n              `,f+=1===c&&b>0?`\n                xC${b} = vec4(xTexelC${b-2}.zw, xTexelC${b}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${b} = vec4(previous.zw, xTexelC${b}.xy);\n                  } else {\n                    xC${b} = vec4(0.0, 0.0, xTexelC${b}.xy);\n                  }\n                  `):f+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {\n                  xTexelC${b} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${b}.zw = vec2(0.0);\n                  }\n                  xTexelC${b}Ready = 1;\n                }\n\n                xC${b} = xTexelC${b};\n                `,b+1<h)){const C=l%2==0?a.util.nearestLargerEven(c):c;c%2==0&&l%2==1||c%2!=0&&l%2!=1?(f+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${C};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b+1}Ready == 0) {\n                    xTexelC${b+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${b+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${b+1}Ready = 1;\n                  }\n                  `,f+=c>1?`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${b+1} = vec4(previous.zw, xTexelC${b+1}.xy);\n                    } else {\n                     xC${b+1} = vec4(0.0, 0.0, xTexelC${b+1}.xy);\n                    }\n                    `:`\n                    xC${b+1} = vec4(xTexelC${b}.zw, xTexelC${b+1}.xy);\n                    `):f+=1===C?`\n                    xC${b+1} = xTexelC${b};\n                    `:`\n                    xCOffset = xC + ${C};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b+1}Ready == 0) {\n                      xTexelC${b+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${b+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${b+1}Ready = 1;\n                    }\n\n                    xC${b+1} = xTexelC${b+1};\n                    `}}else b<h&&(l%2==1?(f+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {\n                  xTexelC${b} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${b}.zw = vec2(0.0);\n                  }\n                  xTexelC${b}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${b+1}Ready == 0) {\n                  xTexelC${b+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${b+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${b+1}Ready = 1;\n                }\n\n                xC${b} = vec4(xTexelC${b}.zw, xTexelC${b+1}.zw);\n              `,b+1<h&&(f+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${b+1} = vec4(xTexelC${b+1}.xy, final.xy);\n                `)):(f+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {\n                  xTexelC${b} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${b}.zw = vec2(0.0);\n                  }\n                  xTexelC${b}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b+1}Ready == 0) {\n                  xTexelC${b+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${b+1}.zw = vec2(0.);\n                  }\n                  xTexelC${b+1}Ready = 1;\n                }\n\n                xC${b} = vec4(\n                  xTexelC${b}.xy, xTexelC${b+1}.xy);\n              `,b+1<h&&(f+=`\n                  xC${b+1} = vec4(xTexelC${b}.zw, xTexelC${b+1}.zw);\n                `)));b<h&&(f+=`\n            wTexel = getW(r, ${b}, d1, q);\n            dotProd += xC${b} * vec4(wTexel.xz, wTexel.xz);\n          `,b+1<h&&(f+=`\n              wTexel = getW(r, ${b+1}, d1, q);\n              dotProd += xC${b+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}f+="\n    }\n  ",f+="\n      }\n    ";let m="",x="";s&&(m=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${s}\n        }`:o?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${s}\n        }`:`vec4 activation(vec4 x) {\n          ${s}\n        }`,x="result = activation(result);");const g=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${m}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${i};\n        int q = d2 - d1 * ${i};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${f}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${g}\n        ${x}\n        setOutput(result);\n      }\n    `}}const xD={kernelName:a.DepthwiseConv2dNative,backendName:"webgl",kernelFunc:function gD(t){const{inputs:n,backend:e,attrs:s}=t,{x:r,filter:o}=n,{strides:i,pad:l,dilations:u,dimRoundingMode:c}=s;let d=u;null==d&&(d=[1,1]),a.util.assert(a.backend_util.eitherStridesOrDilationsAreOne(i,d),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${d}'`);const h=a.backend_util.computeConv2DInfo(r.shape,o.shape,i,d,l,c,!0);let p;return p=(0,a.env)().getBool("WEBGL_PACK_DEPTHWISECONV")&&h.strideWidth<=2&&h.outChannels/h.inChannels==1?new Yd(h):new Zd(h),e.runWebGLProgram(p,[r,o],"float32",[[h.padInfo.top,h.padInfo.left],[h.strideHeight,h.strideWidth],[h.dilationHeight,h.dilationWidth],[h.inHeight,h.inWidth]])}};class yD{constructor(n){this.variableNames=["x","dy"],this.outputShape=n.filterShape,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${n.outChannels/n.inChannels} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${n.batchSize}; b++) {\n          for (int yR = 0; yR < ${n.outHeight}; yR++) {\n            int xR = wR + yR * ${n.strideHeight} - ${n.padInfo.top};\n\n            if (xR < 0 || xR >= ${n.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${n.outWidth}; yC++) {\n              int xC = wC + yC * ${n.strideWidth} - ${n.padInfo.left};\n\n              if (xC < 0 || xC >= ${n.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class bD{constructor(n){this.variableNames=["dy","W"],this.outputShape=n.inShape;const e=n.filterHeight,s=n.filterWidth,u=n.outChannels/n.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${e-1-n.padInfo.top}, ${s-1-n.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${n.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${n.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${s}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${n.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${s} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${u}; dm++) {\n              int d2 = d1 * ${u} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const CD={kernelName:a.DepthwiseConv2dNativeBackpropFilter,backendName:"webgl",kernelFunc:function vD(t){const{inputs:n,backend:e,attrs:s}=t,{x:r,dy:o}=n,{strides:i,dilations:l,pad:u,dimRoundingMode:c,filterShape:d}=s,h=a.backend_util.computeConv2DInfo(r.shape,d,i,l,u,c,!0),p=new yD(h);return e.runWebGLProgram(p,[r,o],"float32")}},SD={kernelName:a.DepthwiseConv2dNativeBackpropInput,backendName:"webgl",kernelFunc:function wD(t){const{inputs:n,backend:e,attrs:s}=t,{dy:r,filter:o}=n,{strides:i,dilations:l,pad:u,dimRoundingMode:c,inputShape:d}=s,h=a.backend_util.computeConv2DInfo(d,o.shape,i,l,u,c,!0),p=new bD(h);return e.runWebGLProgram(p,[r,o],"float32")}};class ID{constructor(n){this.variableNames=["X"],this.outputShape=[n,n],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const TD={kernelName:a.Diag,backendName:"webgl",kernelFunc:function kD(t){const{inputs:n,backend:e}=t,{x:s}=n,r=[...s.shape,...s.shape],o=a.util.sizeFromShape(s.shape),i=j({inputs:{x:s},backend:e,attrs:{shape:[o]}}),l=new ID(o),u=e.runWebGLProgram(l,[i],i.dtype),c=j({inputs:{x:u},backend:e,attrs:{shape:r}});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(u),c}};class ND{constructor(n){this.variableNames=["x","W"],this.outputShape=n.outShape;const{inHeight:e,inWidth:s,padInfo:r,strideHeight:o,strideWidth:i,filterHeight:l,filterWidth:u,dilationHeight:c,dilationWidth:d}=n,{top:h,left:p}=r;this.userCode=`\n      const ivec2 strides = ivec2(${o}, ${i});\n      const ivec2 pads = ivec2(${h}, ${p});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${l}; h++) {\n          int hIn = hBeg + h * ${c};\n\n          if (hIn >= 0 && hIn < ${e}) {\n            for (int w = 0; w < ${u}; w++) {\n              int wIn = wBeg + w * ${d};\n\n              if (wIn >= 0 && wIn < ${s}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const AD={kernelName:a.Dilation2D,backendName:"webgl",kernelFunc:function RD(t){const{inputs:n,backend:e,attrs:s}=t,{x:r,filter:o}=n,{strides:i,pad:l,dilations:u}=s,c=a.backend_util.computeDilation2DInfo(r.shape,o.shape,i,l,"NHWC",u);let d;const h=new ND(c);d=e.runWebGLProgram(h,[r,o],"float32");const p=j({inputs:{x:d},backend:e,attrs:{shape:c.outShape}});return e.disposeIntermediateTensorInfo(d),p}},$D={kernelName:a.Einsum,backendName:"webgl",kernelFunc:function DD(t){const{inputs:n,backend:e,attrs:s}=t,{equation:r}=s,o=n,{allDims:i,summedDims:l,idDims:u}=a.backend_util.decodeEinsumEquation(r,o.length);a.backend_util.checkEinsumDimSizes(i.length,u,o);const{path:c,steps:d}=a.backend_util.getEinsumComputePath(l,u),h=d.length;let p=null,f=i.length;const m=[];for(let x=0;x<h;++x){for(const g of d[x]){const{permutationIndices:y,expandDims:b}=a.backend_util.getEinsumPermutation(f,u[g]);let C;a.backend_util.isIdentityPermutation(y)?C=o[g]:(C=qe({inputs:{x:o[g]},backend:e,attrs:{perm:y}}),m.push(C));const v=C.shape.slice();for(let w=0;w<b.length;++w)v.splice(b[w],0,1);a.util.arraysEqual(C.shape,v)||(C=j({inputs:{x:C},backend:e,attrs:{shape:v}}),m.push(C)),null===p?p=C:(p=_i({inputs:{a:C,b:p},backend:e}),m.push(p))}x<h-1&&(c[x]>=0&&(p=Hr({inputs:{x:p},backend:e,attrs:{axis:c[x]-(i.length-f),keepDims:!1}}),m.push(p)),f--)}for(const x of m)x!==p&&e.disposeIntermediateTensorInfo(x);return p}},ED=de({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),_D={kernelName:a.Elu,backendName:"webgl",kernelFunc:ED},zD={kernelName:a.EluGrad,backendName:"webgl",kernelFunc:t=>{const{inputs:n,backend:e}=t,{dy:s,y:r}=n,o=(0,a.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ss("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",s.shape,r.shape):new Rn("return (b >= 0.0) ? a : a * (b + 1.0);",s.shape,r.shape);return e.runWebGLProgram(o,[s,r],s.dtype)}},LD=Ve({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:bN}),MD={kernelName:a.Equal,backendName:"webgl",kernelFunc:LD},VD=de({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${a.backend_util.ERF_P};\n  float a1 = ${a.backend_util.ERF_A1};\n  float a2 = ${a.backend_util.ERF_A2};\n  float a3 = ${a.backend_util.ERF_A3};\n  float a4 = ${a.backend_util.ERF_A4};\n  float a5 = ${a.backend_util.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),WD={kernelName:a.Erf,backendName:"webgl",kernelFunc:VD},Qd=de({opSnippet:rs+"\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:vN,dtype:"float32"}),GD={kernelName:a.Exp,backendName:"webgl",kernelFunc:Qd};function zi(t){const{inputs:n,attrs:e,backend:s}=t,{dim:r}=e,{input:o}=n,i=o.shape.length,l=o.shape.slice();let u=r;return r<0&&(a.util.assert(-(i+1)<=r,()=>`Axis must be in the interval [${-(i+1)}, ${i}]`),u=i+r+1),l.splice(u,0,1),j({inputs:{x:o},backend:s,attrs:{shape:l}})}const HD={kernelName:a.ExpandDims,backendName:"webgl",kernelFunc:zi},Jd="return exp(x) - 1.0;",XD=de({opSnippet:Jd,packedOpSnippet:Jd,cpuKernelImpl:CN}),jD={kernelName:a.Expm1,backendName:"webgl",kernelFunc:XD};class eh{constructor(n,e,s){this.variableNames=["real","imag"];const r=e[1];this.outputShape=e;const o=s?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,i=s?`${r}.0`:"1.0";let l;if("real"===n)l="return real * expR - imag * expI;";else{if("imag"!==n)throw new Error(`FFT component must be either "real" or "imag", got ${n}.`);l="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${o};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${l}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${i};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function th(t,n,e){const s=e.texData.get(t.dataId),r=a.util.sizeFromShape(t.shape),o=t.shape[t.shape.length-1],l=j({inputs:{x:t},backend:e,attrs:{shape:[r/o,o]}}),u=l.shape,c=new eh("real",u,n),d=new eh("imag",u,n),h=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:u},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:u}],p=e.runWebGLProgram(c,h,"float32"),f=e.runWebGLProgram(d,h,"float32"),m=cn({inputs:{real:p,imag:f},backend:e});e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f);const x=j({inputs:{x:m},backend:e,attrs:{shape:t.shape}});return e.disposeIntermediateTensorInfo(l),e.disposeIntermediateTensorInfo(m),x}const qD={kernelName:a.FFT,backendName:"webgl",kernelFunc:function KD(t){const{inputs:n,backend:e}=t,{input:s}=n;return th(s,!1,e)}};class ZD{constructor(n,e){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=n,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function _s(t){const{backend:n,attrs:e}=t,{shape:s,value:r}=e;let{dtype:o}=e;if(o=o||a.util.inferDtype(r),"string"===o){const i=a.util.getArrayFromDType(o,a.util.sizeFromShape(s));return i.fill(r),n.makeTensorInfo(s,o,i)}{const i=new ZD(s,r);return n.runWebGLProgram(i,[],o,[[r]])}}const YD={kernelName:a.Fill,backendName:"webgl",kernelFunc:_s};class QD{constructor(n){this.variableNames=["Image"],this.outputShape=[];const e=n[2];this.outputShape=n,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${e} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${e}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const JD={kernelName:a.FlipLeftRight,backendName:"webgl",kernelFunc:({inputs:t,backend:n})=>{const{image:e}=t,s=n,r=new QD(e.shape);return s.runWebGLProgram(r,[e],e.dtype)}},nh="return floor(x);",e$=de({opSnippet:nh,packedOpSnippet:nh,cpuKernelImpl:wN}),t$={kernelName:a.Floor,backendName:"webgl",kernelFunc:e$},n$=Ve({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),s$={kernelName:a.FloorDiv,backendName:"webgl",kernelFunc:n$};class r${constructor(n){this.variableNames=["A"];const e=je(),[s,r]=n;this.outputShape=n,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${s}.0);\n\n        vec4 values = ${e.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class o${constructor(n){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const e=je(),[s,r]=n;this.outputShape=n,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${s}.0);\n            vec4 values = ${e.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${e.output} = result;\n      }\n    `}}const i$={kernelName:a.FromPixels,backendName:"webgl",kernelFunc:function a$(t){const{inputs:n,backend:e,attrs:s}=t;let{pixels:r}=n;const{numChannels:o}=s,i=typeof HTMLVideoElement<"u"&&r instanceof HTMLVideoElement,l=typeof HTMLImageElement<"u"&&r instanceof HTMLImageElement,[u,c]=i?[r.videoWidth,r.videoHeight]:[r.width,r.height],d=[c,u],h=[c,u,o];if(l||i){const x=(0,a.env)().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");(null==is||x!==Li)&&(Li=x,is=document.createElement("canvas").getContext("2d",{willReadFrequently:Li})),is.canvas.width=u,is.canvas.height=c,is.drawImage(r,0,0,u,c),r=is.canvas}const p=e.makeTensorInfo(d,"int32");e.texData.get(p.dataId).usage=ht.PIXELS,e.gpgpu.uploadPixelDataToTexture(e.getTexture(p.dataId),r);const f=(0,a.env)().getBool("WEBGL_PACK")?new o$(h):new r$(h),m=e.runWebGLProgram(f,[p],"int32");return e.disposeData(p.dataId),m}};let is,Li=(0,a.env)().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");const u$={kernelName:a.FusedConv2D,backendName:"webgl",kernelFunc:function l$(t){const{inputs:n,backend:e,attrs:s}=t,{x:r,filter:o,bias:i,preluActivationWeights:l}=n,{strides:u,pad:c,dataFormat:d,dilations:h,dimRoundingMode:p,activation:f,leakyreluAlpha:m}=s,x=a.backend_util.convertConv2DDataFormat(d),g=a.backend_util.computeConv2DInfo(r.shape,o.shape,u,h,c,p,!1,x);let y;const b=[],C=null!=i,v=null!=l,w="leakyrelu"===f,S=()=>{const k=[r,o],N=(T,A)=>{if("NCHW"===A&&1===T.shape.length&&1!==T.shape[0]){const $=j({inputs:{x:T},backend:e,attrs:{shape:[T.shape[0],1,1]}});return b.push($),$}return T};if(C&&k.push(N(i,d)),v&&k.push(N(l,d)),w){const T=e.makeTensorInfo([],"float32",a.util.createScalarValue(m,"float32"));k.push(T),b.push(T)}return k};if(1!==g.filterHeight||1!==g.filterWidth||1!==g.dilationHeight||1!==g.dilationWidth||1!==g.strideHeight||1!==g.strideWidth||"SAME"!==g.padInfo.type&&"VALID"!==g.padInfo.type)if(g.strideWidth<=2&&"channelsLast"===x&&(0,a.env)().getBool("WEBGL_EXP_CONV")){const k=f?As(f,!0):null,N=new Ud(g,C,k,v,w),T=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],A=S();y=e.runWebGLProgram(N,A,"float32",T)}else if((0,a.env)().getBool("WEBGL_CONV_IM2COL"))y=Hd({x:r,filter:o,convInfo:g,backend:e,bias:i,activation:f,preluActivationWeights:l,leakyreluAlpha:m});else{const k=f?As(f,!1):null,N=new Wd(g,C,k,v,w),T=S();y=e.runWebGLProgram(N,T,"float32")}else y=Gd({x:r,filter:o,convInfo:g,backend:e,bias:i,activation:f,preluActivationWeights:l,leakyreluAlpha:m});const I=j({inputs:{x:y},backend:e,attrs:{shape:g.outShape}});return b.push(y),b.forEach(k=>e.disposeIntermediateTensorInfo(k)),I}},d$={kernelName:a.FusedDepthwiseConv2D,backendName:"webgl",kernelFunc:function c$(t){const{inputs:n,backend:e,attrs:s}=t,{x:r,filter:o,bias:i,preluActivationWeights:l}=n,{strides:u,pad:c,dilations:d,dimRoundingMode:h,activation:p,leakyreluAlpha:f}=s,m=[];let x=d;null==x&&(x=[1,1]),a.util.assert(a.backend_util.eitherStridesOrDilationsAreOne(u,x),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${u} and dilations '${x}'`);const g=a.backend_util.computeConv2DInfo(r.shape,o.shape,u,x,c,h,!0),y=(0,a.env)().getBool("WEBGL_PACK_DEPTHWISECONV")&&g.strideWidth<=2&&g.outChannels/g.inChannels==1,b=p?As(p,y):null,C=[r,o],v=null!=i,w=null!=l,S="leakyrelu"===p;if(v&&C.push(i),w&&C.push(l),S){const T=e.makeTensorInfo([],"float32",a.util.createScalarValue(f,"float32"));C.push(T),m.push(T)}let I;I=y?new Yd(g,v,b,w,S):new Zd(g,v,b,w,S);const N=e.runWebGLProgram(I,C,"float32",[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]]);return m.forEach(T=>e.disposeIntermediateTensorInfo(T)),N}};class h${constructor(n,e,s,r){this.sliceDim=n,this.strides=e,this.paramsShape=r,this.variableNames=["x","indices"],this.outputShape=s;const o=xe(s.length);let i="\n    int index;";for(let l=0;l<this.sliceDim;l++)i+=`\n          index = round(getIndices(coords[0], ${l}));\n          out_of_bounds = out_of_bounds || index < 0;\n          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[l]};\n          flattenIndex += index * ${this.strides[l]};`;this.userCode=`\n         void main() {\n          ${o} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n\n          ${i}\n\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `}}const f$={kernelName:a.GatherNd,backendName:"webgl",kernelFunc:function p$(t){const{inputs:n,backend:e}=t,{params:s,indices:r}=n,o=r.shape,i=o[o.length-1],l=a.util.sizeFromShape(s.shape),[u,c,d,h]=a.backend_util.prepareAndValidate(s,r),p=j({inputs:{x:r},backend:e,attrs:{shape:[c,i]}}),f=j({inputs:{x:s},backend:e,attrs:{shape:[a.util.sizeFromShape(s.shape)/d,d]}});if(e.shouldExecuteOnCPU([s,r])||"string"===s.dtype){const y=e.readSync(r.dataId),b=e.bufferSync(s),C=SN(y,b,s.dtype,c,i,d,h,s.shape,l);return e.makeTensorInfo(u,s.dtype,C.values)}const m=new h$(i,h,[c,d],s.shape),x=e.runWebGLProgram(m,[f,p],f.dtype),g=j({inputs:{x},backend:e,attrs:{shape:u}});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(x),g}};class m${constructor(n,e){this.variableNames=["A","indices"],this.outputShape=e,this.rank=e.length;const s=xe(this.rank),r=function g$(t,n){const e=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let r=0;r<t.length;r++)s.push(2===r?"index":`${e[r]}`);return s.join()}(n);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${n[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${r}));\n      }\n    `}}function sh(t){const{inputs:n,backend:e,attrs:s}=t,{x:r,indices:o}=n,{axis:i,batchDims:l}=s,u=a.util.parseAxisParam(i,r.shape)[0];if((0,a.env)().get("DEBUG")){const b=e.readSync(o.dataId),C=r.shape[u];for(let v=0;v<b.length;++v){const w=b[v];a.util.assert(w<=C-1&&w>=0,()=>`GatherV2: the index value ${w} is not in [0, ${C-1}]`)}}const c=a.backend_util.segment_util.collectGatherOpShapeInfo(r,o,u,l),d=a.util.sizeFromShape(o.shape),h=[],p=j({inputs:{x:r},backend:e,attrs:{shape:[c.batchSize,c.outerSize,c.dimSize,c.sliceSize]}}),f=j({inputs:{x:o},backend:e,attrs:{shape:[c.batchSize,d/c.batchSize]}});h.push(p),h.push(f);const m=[c.batchSize,c.outerSize,d/c.batchSize,c.sliceSize];if(e.shouldExecuteOnCPU([r,o])||"string"===r.dtype){const b=e.bufferSync(f),C=e.bufferSync(p),v=IN(C,b,m);return h.forEach(w=>e.disposeIntermediateTensorInfo(w)),e.makeTensorInfo(c.outputShape,v.dtype,v.values)}const x=new m$(p.shape,m),g=e.runWebGLProgram(x,[p,f],p.dtype);h.push(g);const y=j({inputs:{x:g},backend:e,attrs:{shape:c.outputShape}});return h.forEach(b=>e.disposeIntermediateTensorInfo(b)),y}const x$={kernelName:a.GatherV2,backendName:"webgl",kernelFunc:sh},y$=Ve({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:kN,dtype:"bool"}),b$={kernelName:a.Greater,backendName:"webgl",kernelFunc:y$},v$=Ve({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:TN}),C$={kernelName:a.GreaterEqual,backendName:"webgl",kernelFunc:v$},S$={kernelName:a.IFFT,backendName:"webgl",kernelFunc:function w$(t){const{inputs:n,backend:e}=t,{input:s}=n;return th(s,!0,e)}},I$=de({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),k$={kernelName:a.IsFinite,backendName:"webgl",kernelFunc:I$},T$=de({opSnippet:"return float(isinf(x));",dtype:"bool"}),N$={kernelName:a.IsInf,backendName:"webgl",kernelFunc:T$},R$=de({opSnippet:"return float(isnan(x));",dtype:"bool"}),A$={kernelName:a.IsNan,backendName:"webgl",kernelFunc:R$},D$=Ve({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:NN,dtype:"bool"}),$$={kernelName:a.Less,backendName:"webgl",kernelFunc:D$},E$=Ve({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:RN,dtype:"bool"}),_$={kernelName:a.LessEqual,backendName:"webgl",kernelFunc:E$},O$={kernelName:a.LinSpace,backendName:"webgl",kernelFunc:function F$(t){const{backend:n,attrs:e}=t,{start:s,stop:r,num:o}=e,i=AN(s,r,o);return n.makeTensorInfo([i.length],"float32",i)}},z$=de({opSnippet:rs+"\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:DN}),L$={kernelName:a.Log,backendName:"webgl",kernelFunc:z$},B$=de({opSnippet:rs+"\n  return log(1.0 + x);\n"}),V$={kernelName:a.Log1p,backendName:"webgl",kernelFunc:B$},W$=Ve({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),U$={kernelName:a.LogicalAnd,backendName:"webgl",kernelFunc:W$},G$=de({opSnippet:"return float(!(x >= 1.0));"}),H$={kernelName:a.LogicalNot,backendName:"webgl",kernelFunc:G$},X$=Ve({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),j$={kernelName:a.LogicalOr,backendName:"webgl",kernelFunc:X$};class K${constructor(n,e,s,r,o){this.variableNames=["x"],this.outputShape=[];const i=e,l=n[3]-1;let u;this.outputShape=n;const c=`float(${s}) + float(${r}) * sum`;u=.5===o?`inversesqrt(${c})`:1===o?`1.0/(${c})`:`exp(log(${c}) * float(-${o}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${i}; j <= ${i}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${l}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${u};\n        setOutput(val);\n      }\n    `}}class q${constructor(n,e,s,r,o){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const i=e,l=n[3]-1;let u;this.outputShape=n;const c=`float(${s}) + float(${r}) * sum`;u=.5===o?`inversesqrt(${c})`:1===o?`1.0/(${c})`:`exp(log(${c}) * float(-${o}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${i};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${i}; j <= ${i}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${l}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${u};\n        setOutput(result);\n      }\n    `}}const Y$={kernelName:a.LRN,backendName:"webgl",kernelFunc:t=>{const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{depthRadius:o,bias:i,alpha:l,beta:u}=s,c=(0,a.env)().getBool("WEBGL_PACK_NORMALIZATION")?new q$(r.shape,o,i,l,u):new K$(r.shape,o,i,l,u);return e.runWebGLProgram(c,[r],r.dtype)}};class Q${constructor(n,e,s,r,o){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=n,this.depth=n[3],this.depthRadius=e,this.bias=s,this.alpha=r,this.beta=o,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${e})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${e} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${s});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${o})\n                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${o});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const eE={kernelName:a.LRNGrad,backendName:"webgl",kernelFunc:t=>{const{inputs:n,backend:e,attrs:s}=t,{x:r,y:o,dy:i}=n,{depthRadius:l,bias:u,alpha:c,beta:d}=s,h=new Q$(r.shape,l,u,c,d);return e.runWebGLProgram(h,[r,o,i],r.dtype)}};function rh(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{reductionIndices:o,keepDims:i}=s,l=r.shape.length,u=a.util.parseAxisParam(o,r.shape);let c=u;const d=a.backend_util.getAxesPermutation(c,l),h=null!=d,p=e.shouldExecuteOnCPU([r]);let f=r;if(h){if(p){const C=e.texData.get(f.dataId).values,v=new Array(l);for(let I=0;I<v.length;I++)v[I]=r.shape[d[I]];const w=$i(C,r.shape,r.dtype,d,v);f=e.makeTensorInfo(v,r.dtype),e.texData.get(f.dataId).values=w}else f=Gr(r,d,e);c=a.backend_util.getInnerMostAxes(c.length,l)}a.backend_util.assertAxesAreInnerMostDims("max",c,l);const[m,x]=a.backend_util.computeOutAndReduceShapes(f.shape,c);let y,g=m;if(i&&(g=a.backend_util.expandShapeToKeepDim(m,u)),p){const C=e.texData.get(f.dataId).values,v=$N(C,a.util.sizeFromShape(x),g,r.dtype);y=e.makeTensorInfo(g,r.dtype),e.texData.get(y.dataId).values=v}else y=function tE(t,n,e,s){const r=a.util.sizeFromShape(n),l=j({inputs:{x:t},attrs:{shape:[a.util.sizeFromShape(t.shape)/r,r]},backend:s}),u=Dn(l,t.dtype,"max",s),c=j({inputs:{x:u},attrs:{shape:e},backend:s});return s.disposeIntermediateTensorInfo(l),s.disposeIntermediateTensorInfo(u),c}(f,x,g,e);return h&&e.disposeIntermediateTensorInfo(f),y}const nE={kernelName:a.Max,backendName:"webgl",kernelFunc:rh},oE=Ve({opSnippet:Ei+"\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+An+"\n  return result;\n",cpuKernelImpl:EN}),iE={kernelName:a.Maximum,backendName:"webgl",kernelFunc:oE},lE={kernelName:a.MaxPool,backendName:"webgl",kernelFunc:function aE(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n;Ns(r,"maxPool");const{filterSize:o,strides:i,pad:l,dimRoundingMode:u}=s;a.util.assert(a.backend_util.eitherStridesOrDilationsAreOne(i,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`);const d=a.backend_util.computePool2DInfo(r.shape,o,i,1,l,u);if(1===d.filterWidth&&1===d.filterHeight&&a.util.arraysEqual(d.inShape,d.outShape))return et({inputs:{x:r},backend:e});const h=new Ds(d,"max",!1);return e.runWebGLProgram(h,[r],r.dtype)}},cE={kernelName:a.MaxPool3D,backendName:"webgl",kernelFunc:function uE(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{filterSize:o,strides:i,pad:l,dataFormat:u,dimRoundingMode:c}=s,h=a.backend_util.computePool3DInfo(r.shape,o,i,[1,1,1],l,c,u),p=new Fi(h,"max",!1);return e.runWebGLProgram(p,[r],r.dtype)}};class dE{constructor(n){this.variableNames=["dy","maxPos"],this.outputShape=n.inShape;const o=n.effectiveFilterHeight,i=n.effectiveFilterWidth;this.userCode=`\n      const ivec2 pads = ivec2(${o-1-n.padInfo.top}, ${i-1-n.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n          wR += ${n.dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${n.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${n.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${i}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${n.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${o*i-1} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${i} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class hE{constructor(n){this.variableNames=["dy","maxPos"],this.outputShape=n.inShape;const u=n.effectiveFilterDepth,c=n.effectiveFilterHeight,d=n.effectiveFilterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${u-1-n.padInfo.front}, ${c-1-n.padInfo.top}, ${d-1-n.padInfo.left});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${u};\n           wD += ${n.dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${n.strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${n.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${c};\n              wR += ${n.dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${n.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${n.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${d};\n                wC += ${n.dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${n.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${n.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${u*c*d-1} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${c} * ${d} +\n                  wR * ${d} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const fE={kernelName:a.MaxPool3DGrad,backendName:"webgl",kernelFunc:function pE(t){const{inputs:n,backend:e,attrs:s}=t,{dy:r,input:o}=n,i=o,{filterSize:l,strides:u,pad:c,dimRoundingMode:d}=s,p=a.backend_util.computePool3DInfo(i.shape,l,u,[1,1,1],c,d),f=new Fi(p,"max",!0),m=e.runWebGLProgram(f,[i],i.dtype),x=new hE(p),g=e.runWebGLProgram(x,[r,m],i.dtype);return e.disposeIntermediateTensorInfo(m),g}},gE={kernelName:a.MaxPoolGrad,backendName:"webgl",kernelFunc:function mE(t){const{inputs:n,backend:e,attrs:s}=t,{dy:r,input:o,output:i}=n,l=o;Ns([o,i],"maxPoolGrad");const{filterSize:u,strides:c,pad:d,dimRoundingMode:h}=s,p=a.backend_util.computePool2DInfo(l.shape,u,c,1,d,h),m=new Ds(p,"max",!0),x=e.runWebGLProgram(m,[l],l.dtype),g=new dE(p),y=e.runWebGLProgram(g,[r,x],l.dtype);return e.disposeIntermediateTensorInfo(x),y}},yE={kernelName:a.MaxPoolWithArgmax,backendName:"webgl",kernelFunc:({inputs:t,attrs:n,backend:e})=>{const{x:s}=t,{filterSize:r,strides:o,pad:i,includeBatchInIndex:l}=n,u=e;a.util.assert(4===s.shape.length,()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`);const c=[1,1];a.util.assert(a.backend_util.eitherStridesOrDilationsAreOne(o,c),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '${c}'`);const d=a.backend_util.computePool2DInfo(s.shape,r,o,c,i),[h,p]=function xE(t,n,e,s){let r=new Ds(e,"max",!1);const o=s.runWebGLProgram(r,[t],"float32");return r=new Ds(e,"max",!0,!0,n),[o,s.runWebGLProgram(r,[t],"float32")]}(s,l,d,u);return[h,p]}},vE={kernelName:a.Mean,backendName:"webgl",kernelFunc:({inputs:t,attrs:n,backend:e})=>{const{x:s}=t,{keepDims:r,axis:o}=n,i=e,l=s.shape.length,u=a.util.parseAxisParam(o,s.shape);let c=u;const d=a.backend_util.getAxesPermutation(c,l),h=null!=d,p=i.shouldExecuteOnCPU([s]),f=[];let m=s;if(h){if(p){const v=i.texData.get(m.dataId).values,w=new Array(l);for(let k=0;k<w.length;k++)w[k]=s.shape[d[k]];const S=$i(v,s.shape,s.dtype,d,w);m=i.makeTensorInfo(w,s.dtype),i.texData.get(m.dataId).values=S}else m=Gr(s,d,i);f.push(m),c=a.backend_util.getInnerMostAxes(c.length,l)}a.backend_util.assertAxesAreInnerMostDims("sum",c,l);const[x,g]=a.backend_util.computeOutAndReduceShapes(m.shape,c);let y=x;r&&(y=a.backend_util.expandShapeToKeepDim(x,u));const b=function bE(t,n,e,s){const r=a.util.sizeFromShape(n),l=j({inputs:{x:t},attrs:{shape:[a.util.sizeFromShape(t.shape)/r,r]},backend:s}),u=Dn(l,"float32","mean",s),c=j({inputs:{x:u},attrs:{shape:e},backend:s});return s.disposeIntermediateTensorInfo(l),s.disposeIntermediateTensorInfo(u),c}(m,g,y,i);for(const C of f)i.disposeIntermediateTensorInfo(C);return b}},wE={kernelName:a.Min,backendName:"webgl",kernelFunc:function CE(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{axis:o,keepDims:i}=s,l=r.shape.length,u=a.util.parseAxisParam(o,r.shape);let c=u;const d=a.backend_util.getAxesPermutation(c,l);let h=r;null!=d&&(h=qe({inputs:{x:r},backend:e,attrs:{perm:d}}),c=a.backend_util.getInnerMostAxes(c.length,r.shape.length)),a.backend_util.assertAxesAreInnerMostDims("min",c,l);const[p,f]=a.backend_util.computeOutAndReduceShapes(h.shape,c),x=j({inputs:{x:h},backend:e,attrs:{shape:[-1,a.util.sizeFromShape(f)]}}),g=Dn(x,x.dtype,"min",e);let y;return y=j(i?{inputs:{x:g},backend:e,attrs:{shape:a.backend_util.expandShapeToKeepDim(p,u)}}:{inputs:{x:g},backend:e,attrs:{shape:p}}),e.disposeIntermediateTensorInfo(x),e.disposeIntermediateTensorInfo(g),null!=d&&e.disposeIntermediateTensorInfo(h),y}},kE=Ve({opSnippet:Ei+"\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  "+An+"\n  return result;\n",cpuKernelImpl:_N}),TE={kernelName:a.Minimum,backendName:"webgl",kernelFunc:kE};class NE{constructor(n,e,s){this.variableNames=["x"],this.outputShape=e.map((d,h)=>d[0]+n[h]+d[1]);const r=n.length,o=xe(r),i=e.map(d=>d[0]).join(","),l=e.map((d,h)=>d[0]+n[h]).join(","),u=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r),c="reflect"===s?0:1;this.userCode=1!==r?`\n      ${o} start = ${o}(${i});\n      ${o} end = ${o}(${l});\n\n      void main() {\n        ${o} outC = getOutputCoords();\n        for (int i = 0; i < ${r}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${c};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${c};\n          }\n        }\n        ${o} coords = outC - start;\n        setOutput(getX(${u}));\n      }\n    `:`\n        int start = ${i};\n        int end = ${l};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${c};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${c};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class RE{constructor(n,e,s){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map((m,x)=>m[0]+n[x]+m[1]);const r=n.length,o=xe(r),i=e.map(m=>m[0]).join(","),l=e.map((m,x)=>m[0]+n[x]).join(","),u=Ke("rc",r),c=Ke("source",r),d=`${u[r-1]} < ${this.outputShape[r-1]}`,h=1===r?"source":`vec2(${c.slice(-2).join()})`,p="reflect"===s?0:1;let f="";if(1===r){const m=`\n        ${o} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${p};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${p};\n        }\n        source -= start;\n      `;f=`\n        ${o} rc = outputLoc;\n        ${m}\n        result[0] = getChannel(getX(${c.join()}), ${h});\n        ${u[r-1]} += 1;\n        if(${d}) {\n          ${m}\n          result[1] = getChannel(getX(${c.join()}), ${h});\n        }\n      `}else{const m=`\n        ${o} source = rc;\n        ${o} lt = ${o}(lessThan(source, start));\n        ${o} gte = ${o}(greaterThanEqual(source, end));\n        ${o} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${p}) +\n                gte * ((end - 1) * 2 - source + ${p});\n        source -= start;\n      `;f=`\n        ${o} rc = outputLoc;\n        ${m}\n        result[0] = getChannel(getX(${c.join()}), ${h});\n        ${u[r-1]} += 1;\n        if(${d}) {\n          ${m}\n          result[1] = getChannel(getX(${c.join()}), ${h});\n        }\n        rc = outputLoc;\n        ${u[r-2]} += 1;\n        if(${u[r-2]} < ${this.outputShape[r-2]}) {\n          ${m}\n          result[2] = getChannel(getX(${c.join()}), ${h});\n          ${u[r-1]} += 1;\n          if(${d}) {\n            ${m}\n            result[3] = getChannel(getX(${c.join()}), ${h});\n          }\n        }\n      `}this.userCode=`\n      const ${o} start = ${o}(${i});\n      const ${o} end = ${o}(${l});\n\n      void main() {\n        ${o} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${f}\n        setOutput(result);\n      }\n    `}}const DE={kernelName:a.MirrorPad,backendName:"webgl",kernelFunc:({inputs:t,backend:n,attrs:e})=>{const{x:s}=t,{paddings:r,mode:o}=e,i=(0,a.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new RE(s.shape,r,o):new NE(s.shape,r,o);return n.runWebGLProgram(i,[s],s.dtype)}},_E=Ve({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  bvec4 isNaN = equal(b, vec4(0.0));\n  "+An+"\n  return result;\n"}),FE={kernelName:a.Mod,backendName:"webgl",kernelFunc:_E};class OE{constructor(n,e,s){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[n,s],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${e-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${e-1}));\n      }\n    `}}const oh=Ve({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),PE={kernelName:a.RealDiv,backendName:"webgl",kernelFunc:oh},ih="return a - b;",ah=Ve({opSnippet:ih,packedOpSnippet:ih,supportsComplex:!0,cpuKernelImpl:eR}),zE={kernelName:a.Sub,backendName:"webgl",kernelFunc:ah};function lh(t){const{inputs:n,backend:e,attrs:s}=t,{logits:r}=n,{dim:o}=s,i=a.util.parseAxisParam([o],r.shape),l=rh({inputs:{x:r},backend:e,attrs:{reductionIndices:i,keepDims:!1}}),u=a.backend_util.expandShapeToKeepDim(l.shape,i),c=j({inputs:{x:l},backend:e,attrs:{shape:u}}),d=ah({inputs:{a:r,b:c},backend:e}),h=Qd({inputs:{x:d},backend:e}),p=Hr({inputs:{x:h},backend:e,attrs:{axis:i,keepDims:!1}}),f=j({inputs:{x:p},backend:e,attrs:{shape:u}}),m=oh({inputs:{a:h,b:f},backend:e});return e.disposeIntermediateTensorInfo(l),e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),m}const LE={kernelName:a.Softmax,backendName:"webgl",kernelFunc:lh},BE={kernelName:a.Multinomial,backendName:"webgl",kernelFunc:function ME(t){const{inputs:n,backend:e,attrs:s}=t,{logits:r}=n,{numSamples:o,seed:i,normalized:l}=s,u=l?r:lh({inputs:{logits:r},backend:e,attrs:{dim:r.shape.length-1}}),h=new OE(u.shape[0],u.shape[1],o),f=e.runWebGLProgram(h,[u],"int32",[[i]]);return l||e.disposeIntermediateTensorInfo(u),f}},VE=ot+"\n  return -x;\n",GE={kernelName:a.Neg,backendName:"webgl",kernelFunc:function UE(t){const{inputs:n,backend:e}=t,{x:s}=n;if(e.shouldExecuteOnCPU([s])){const o=e.texData.get(s.dataId),[i,l]=ON(o.values,s.shape,s.dtype);return e.makeTensorInfo(l,s.dtype,i)}let r;return r=(0,a.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new un(s.shape,"\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"):new Lt(s.shape,VE),e.runWebGLProgram(r,[s],s.dtype)}},HE=a.kernel_impls.nonMaxSuppressionV3Impl,jE={kernelName:a.NonMaxSuppressionV3,backendName:"webgl",kernelFunc:function XE(t){a.backend_util.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:n,backend:e,attrs:s}=t,{boxes:r,scores:o}=n,{maxOutputSize:i,iouThreshold:l,scoreThreshold:u}=s,c=e.readSync(r.dataId),d=e.readSync(o.dataId),{selectedIndices:h}=HE(c,d,i,l,u);return e.makeTensorInfo([h.length],"int32",new Int32Array(h))}},KE=a.kernel_impls.nonMaxSuppressionV4Impl,ZE={kernelName:a.NonMaxSuppressionV4,backendName:"webgl",kernelFunc:function qE(t){a.backend_util.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:n,backend:e,attrs:s}=t,{boxes:r,scores:o}=n,{maxOutputSize:i,iouThreshold:l,scoreThreshold:u,padToMaxOutputSize:c}=s,d=e.readSync(r.dataId),h=e.readSync(o.dataId),{selectedIndices:p,validOutputs:f}=KE(d,h,i,l,u,c);return[e.makeTensorInfo([p.length],"int32",new Int32Array(p)),e.makeTensorInfo([],"int32",new Int32Array([f]))]}},YE=a.kernel_impls.nonMaxSuppressionV5Impl,JE={kernelName:a.NonMaxSuppressionV5,backendName:"webgl",kernelFunc:function QE(t){a.backend_util.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:n,backend:e,attrs:s}=t,{boxes:r,scores:o}=n,{maxOutputSize:i,iouThreshold:l,scoreThreshold:u,softNmsSigma:c}=s,d=e.readSync(r.dataId),h=e.readSync(o.dataId),p=i,f=l,m=u,x=c,{selectedIndices:g,selectedScores:y}=YE(d,h,p,f,m,x);return[e.makeTensorInfo([g.length],"int32",new Int32Array(g)),e.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};class e_{constructor(n,e,s,r){this.variableNames=["indices"],this.outputShape=[n,e],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${s}),\n                      float(index == coords.y)));\n      }\n    `}}const n_={kernelName:a.OneHot,backendName:"webgl",kernelFunc:t=>{const{inputs:n,backend:e,attrs:s}=t,{indices:r}=n,{dtype:o,depth:i,onValue:l,offValue:u}=s,c=a.util.sizeFromShape(r.shape),d=new e_(c,i,l,u),h=j({inputs:{x:r},backend:e,attrs:{shape:[c]}}),p=e.runWebGLProgram(d,[h],o);e.disposeIntermediateTensorInfo(h);const m=j({inputs:{x:p},backend:e,attrs:{shape:[...r.shape,i]}});return e.disposeIntermediateTensorInfo(p),m}};function Qr(t){const{inputs:n,backend:e}=t,{x:s}=n;if("complex64"===s.dtype){const r=$s({inputs:{input:s},backend:e}),o=Qr({inputs:{x:r},backend:e}),i=qr({inputs:{input:s},backend:e}),l=Qr({inputs:{x:i},backend:e}),u=cn({inputs:{real:o,imag:l},backend:e});return e.disposeIntermediateTensorInfo(r),e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(l),u}return _s({attrs:{shape:s.shape,dtype:s.dtype,value:"string"===s.dtype?"":0},backend:e})}const s_={kernelName:a.ZerosLike,backendName:"webgl",kernelFunc:Qr},r_={kernelName:a.OnesLike,backendName:"webgl",kernelFunc:function uh(t){const{inputs:n,backend:e}=t,{x:s}=n;if("string"===s.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===s.dtype){const r=$s({inputs:{input:s},backend:e}),o=uh({inputs:{x:r},backend:e}),i=qr({inputs:{input:s},backend:e}),l=Qr({inputs:{x:i},backend:e}),u=cn({inputs:{real:o,imag:l},backend:e});return e.disposeIntermediateTensorInfo(r),e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(l),u}return _s({attrs:{shape:s.shape,dtype:s.dtype,value:1},backend:e})}},i_={kernelName:a.Pack,backendName:"webgl",kernelFunc:function o_(t){const{inputs:n,backend:e,attrs:s}=t,{axis:r}=s;if(1===n.length)return zi({inputs:{input:n[0]},backend:e,attrs:{dim:r}});const o=n[0].shape,i=n[0].dtype;n.forEach(d=>{a.util.assertShapesMatch(o,d.shape,"All tensors passed to stack must have matching shapes"),a.util.assert(i===d.dtype,()=>"All tensors passed to stack must have matching dtypes")});const l=[],c=Vd({inputs:n.map(d=>{const h=zi({inputs:{input:d},backend:e,attrs:{dim:r}});return l.push(h),h}),backend:e,attrs:{axis:r}});return l.forEach(d=>e.disposeIntermediateTensorInfo(d)),c}};class a_{constructor(n,e,s){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=e.map((c,d)=>c[0]+n[d]+c[1]);const r=n.length,o=xe(r),i=e.map(c=>c[0]).join(","),l=e.map((c,d)=>c[0]+n[d]).join(","),u=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${o} start = ${o}(${i});\n      ${o} end = ${o}(${l});\n\n      void main() {\n        ${o} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${o} coords = outC - start;\n          setOutput(getX(${u}));\n        }\n      }\n    `:`\n        int start = ${i};\n        int end = ${l};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class l_{constructor(n,e,s){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=e.map((x,g)=>x[0]+n[g]+x[1]);const r=n.length,o=xe(r),i=e.map(x=>x[0]).join(","),l=e.map((x,g)=>x[0]+n[g]).join(","),u=Ke("rc",r),c=Ke("source",r),d=`${u[r-1]} < ${this.outputShape[r-1]}`,h=1===r?"source":`vec2(${c.slice(-2).join()})`,p=[`${o} rc = outputLoc;`,`${u[r-1]} += 1;\n       if(${d}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${u[r-2]} += 1;\n       if(${u[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${u[r-1]} += 1;\n         if(${d}) {`],f=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let m="";for(let x=0,g=1===r?2:4;x<g;x++)m+=`\n        ${p[x]}\n        if (${f}) {\n          result[${x}] = float(value);\n        } else {\n          ${o} source = rc - start;\n          result[${x}] = getChannel(getX(${c.join()}), ${h});\n        }\n      `;m+=1===r?"} ":"}}",this.userCode=`\n      const ${o} start = ${o}(${i});\n      const ${o} end = ${o}(${l});\n\n      void main() {\n        ${o} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${m}\n        setOutput(result);\n      }\n    `}}const ch=t=>{const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{paddings:o,constantValue:i}=s;if(0===a.util.sizeFromShape(r.shape))return _s({backend:e,attrs:{shape:o.map((d,h)=>d[0]+r.shape[h]+d[1]),value:i,dtype:r.dtype}});const l=(0,a.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new l_(r.shape,o,i):new a_(r.shape,o,i);return e.runWebGLProgram(l,[r],r.dtype,[[i]])},u_={kernelName:a.PadV2,backendName:"webgl",kernelFunc:ch},h_=Ve({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  bvec4 isNaN1 = lessThan(a, vec4(0.0));\n  bvec4 isNaN2 = lessThan(floor(b), b);\n  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);\n  "+An+"\n  return result;\n"}),p_={kernelName:a.Pow,backendName:"webgl",kernelFunc:h_},m_={kernelName:a.Prod,backendName:"webgl",kernelFunc:function f_(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{axis:o,keepDims:i}=s,l=r.shape.length,u=[],c=a.util.parseAxisParam(o,r.shape);let d=c;const h=a.backend_util.getAxesPermutation(d,l);let f,p=r;if(null!=h&&(p=qe({inputs:{x:r},backend:e,attrs:{perm:h}}),d=a.backend_util.getInnerMostAxes(d.length,l),u.push(p)),a.backend_util.assertAxesAreInnerMostDims("prod",d,l),e.shouldExecuteOnCPU([p])){const m=e.texData.get(p.dataId).values,{outVals:x,outShape:g,outDtype:y}=zN(p.shape,p.dtype,m,d);f=e.makeTensorInfo(g,y,x)}else{const[m,x]=a.backend_util.computeOutAndReduceShapes(p.shape,d),g=a.util.sizeFromShape(x),y=j({inputs:{x:p},backend:e,attrs:{shape:[-1,g]}}),C=Dn(y,(0,a.sumOutType)(r.dtype),"prod",e);f=j({inputs:{x:C},backend:e,attrs:{shape:m}}),u.push(y),u.push(C)}if(i){u.push(f);const m=a.backend_util.expandShapeToKeepDim(f.shape,c);f=j({inputs:{x:f},backend:e,attrs:{shape:m}})}return u.forEach(m=>e.disposeIntermediateTensorInfo(m)),f}},x_={kernelName:a.RaggedGather,backendName:"webgl",kernelFunc:function g_(t){const{inputs:n,backend:e,attrs:s}=t,{paramsNestedSplits:r,paramsDenseValues:o,indices:i}=n,{outputRaggedRank:l}=s,u=r.map(y=>e.readSync(y.dataId)),c=r.map(y=>y.shape),d=e.readSync(o.dataId),h=e.readSync(i.dataId),[p,f,m]=LN(u,c,d,o.shape,o.dtype,h,i.shape,l),x=p.map(y=>e.makeTensorInfo([y.length],"int32",y)),g=e.makeTensorInfo(m,o.dtype,f);return x.concat([g])}},b_={kernelName:a.RaggedRange,backendName:"webgl",kernelFunc:function y_(t){const{inputs:n,backend:e}=t,{starts:s,limits:r,deltas:o}=n,i=e.readSync(s.dataId),l=e.readSync(r.dataId),u=e.readSync(o.dataId),[c,d]=MN(i,s.shape,s.dtype,l,r.shape,u,o.shape);return[e.makeTensorInfo([c.length],"int32",c),e.makeTensorInfo([d.length],s.dtype,d)]}},C_={kernelName:a.RaggedTensorToTensor,backendName:"webgl",kernelFunc:function v_(t){const{inputs:n,backend:e,attrs:s}=t,{shape:r,values:o,defaultValue:i,rowPartitionTensors:l}=n,{rowPartitionTypes:u}=s,c=e.readSync(r.dataId),d=e.readSync(o.dataId),h=e.readSync(i.dataId),p=l.map(g=>e.readSync(g.dataId)),f=l.map(g=>g.shape),[m,x]=BN(c,r.shape,d,o.shape,o.dtype,h,i.shape,p,f,u);return e.makeTensorInfo(m,o.dtype,x)}},dh=t=>{const{backend:n,attrs:e}=t,{start:s,stop:r,step:o,dtype:i}=e,l=VN(s,r,o,i);return n.makeTensorInfo([l.length],i,l)},w_={kernelName:a.Range,backendName:"webgl",kernelFunc:dh},S_=de({opSnippet:"return 1.0 / x;"}),I_={kernelName:a.Reciprocal,backendName:"webgl",kernelFunc:S_},T_=de({opSnippet:ot+"\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),N_={kernelName:a.Relu,backendName:"webgl",kernelFunc:T_},A_=de({opSnippet:ot+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),D_={kernelName:a.Relu6,backendName:"webgl",kernelFunc:A_};class $_{constructor(n,e,s,r,o){this.variableNames=["A"],this.outputShape=[];const[i,l,u,c]=n;this.outputShape=[i,e,s,c];const d=[r&&e>1?l-1:l,r&&s>1?u-1:u],h=[r&&e>1?e-1:e,r&&s>1?s-1:s];let p;p=o?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${d[0]/h[0]},\n          ${d[1]/h[1]});\n      const vec2 inputShapeRC = vec2(${l}.0, ${u}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class E_{constructor(n,e,s,r,o){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[i,l,u,c]=n;this.outputShape=[i,e,s,c];const d=[r&&e>1?l-1:l,r&&s>1?u-1:u],h=[r&&e>1?e-1:e,r&&s>1?s-1:s];let p;p=o?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${d[0]/h[0]},\n          ${d[1]/h[1]},\n          ${d[1]/h[1]});\n      const vec3 inputShapeRC = vec3(${l}.0, ${u}.0,\n                                     ${u}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${p};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${c-1};\n        bool hasNextRow = coords.z < ${s-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const F_={kernelName:a.ResizeBilinear,backendName:"webgl",kernelFunc:function __(t){const{inputs:n,backend:e,attrs:s}=t,{images:r}=n,{alignCorners:o,halfPixelCenters:i,size:l}=s,[u,c]=l,d=(0,a.env)().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new E_(r.shape,u,c,o,i):new $_(r.shape,u,c,o,i);return e.runWebGLProgram(d,[r],"float32")}};class O_{constructor(n,e,s){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e;const[,r,o]=e,[,i,l]=n,u=[s&&i>1?r-1:r,s&&l>1?o-1:o],c=[s&&i>1?i-1:i,s&&l>1?l-1:l],d=u[0]/c[0],h=u[1]/c[1],p=1/d,f=1/h,m=2*Math.ceil(p)+2,x=2*Math.ceil(f)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${d});\n        const float widthScale = float(${h});\n\n        const float invHeightScale = float(${p});\n        const float invWidthScale = float(${f});\n\n        const int winHeight = int(${m});\n        const int winWidth = int(${x});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${i}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${l}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${o-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const z_={kernelName:a.ResizeBilinearGrad,backendName:"webgl",kernelFunc:function P_(t){const{inputs:n,backend:e,attrs:s}=t,{images:r,dy:o}=n,{alignCorners:i}=s,l=new O_(o.shape,r.shape,i);return e.runWebGLProgram(l,[o],o.dtype)}};class L_{constructor(n,e,s,r,o){this.variableNames=["A"],this.outputShape=[];const[i,l,u,c]=n;this.outputShape=[i,e,s,c];const d=[r&&e>1?l-1:l,r&&s>1?u-1:u],h=[r&&e>1?e-1:e,r&&s>1?s-1:s];let f;f=o?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${d[0]/h[0]},\n          ${d[1]/h[1]});\n      const vec2 inputShapeRC = vec2(${l}.0, ${u}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${f};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${r?"0.5":"0.0"})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class M_{constructor(n,e,s,r,o){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[i,l,u,c]=n;this.outputShape=[i,e,s,c];const d=[r&&e>1?l-1:l,r&&s>1?u-1:u],h=[r&&e>1?e-1:e,r&&s>1?s-1:s];let f;f=o?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${d[0]/h[0]},\n          ${d[1]/h[1]},\n          ${d[1]/h[1]});\n      const vec3 inputShapeRC = vec3(${l}.0, ${u}.0,\n                                     ${u}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${f};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${r?"0.5":"0.0"})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${c-1};\n        bool hasNextRow = coords.z < ${s-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const V_={kernelName:a.ResizeNearestNeighbor,backendName:"webgl",kernelFunc:function B_(t){const{inputs:n,backend:e,attrs:s}=t,{images:r}=n,{alignCorners:o,halfPixelCenters:i,size:l}=s,[u,c]=l,d=(0,a.env)().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new M_(r.shape,u,c,o,i):new L_(r.shape,u,c,o,i);return e.runWebGLProgram(d,[r],r.dtype)}};class W_{constructor(n,e,s){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e;const[,r,o]=e,[,i,l]=n,u=[s&&i>1?r-1:r,s&&l>1?o-1:o],c=[s&&i>1?i-1:i,s&&l>1?l-1:l],d=u[0]/c[0],h=u[1]/c[1],p=1/d,f=1/h,m=2*Math.ceil(p)+2,x=2*Math.ceil(f)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${d});\n        const float widthScale = float(${h});\n\n        const float invHeightScale = float(${p});\n        const float invWidthScale = float(${f});\n\n        const int winHeight = int(${m});\n        const int winWidth = int(${x});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${i}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${l}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${u[0]}) *\n                (float(dyR) / float(${c[0]}));\n\n            float sourceFracCol =\n                float(${u[1]}) *\n                  (float(dyC) / float(${c[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${s} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${o}) - 1),\n                ${s} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const G_={kernelName:a.ResizeNearestNeighborGrad,backendName:"webgl",kernelFunc:function U_(t){const{inputs:n,backend:e,attrs:s}=t,{images:r,dy:o}=n,{alignCorners:i}=s,l=new W_(o.shape,r.shape,i);return e.runWebGLProgram(l,[o],o.dtype)}};class H_{constructor(n,e){this.variableNames=["x"];const s=n.length;if(s>4)throw new Error(`WebGL backend: Reverse of rank-${s} tensor is not yet supported`);if(this.outputShape=n,1===s)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${n[0]} - coord - 1));\n        }\n      `);const o=n.map((l,u)=>(l=>-1!==e.indexOf(l)&&1!==n[l]?`${n[l]} - coords[${l}] - 1`:`coords[${l}]`)(u)).join(","),i=xe(s);this.userCode=`\n      void main() {\n        ${i} coords = getOutputCoords();\n        setOutput(getX(${o}));\n      }\n    `}}class X_{constructor(n,e){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const s=n.length;if(s>4)throw new Error(`WebGL backend: Reverse of rank-${s} tensor is not yet supported`);this.outputShape=n;const r=Ke("rc",s),o=`${r[s-1]} + 1 < ${this.outputShape[s-1]}`,i=`${r[s-2]} + 1 < ${this.outputShape[s-2]}`,l=xe(s);function p(m){const x=n.map((b,C)=>function f(m,x){return-1!==e.indexOf(m)&&1!==n[m]?`${n[m]} - ${x[m]} - 1`:`${x[m]}`}(C,m));return`getChannel(getX(${x.join(",")}), vec2(${x.slice(-2).join(",")}))`}this.userCode=1===s?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${n[0]} - rc - 1),\n            ${n[0]} - rc - 1);\n          if(${o}){\n              result.g = getChannel(getX(${n[0]} - (rc  + 1) - 1),\n                ${n[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${l} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function u(m){return p(m)}(r.slice())};\n          if(${o}){\n            result.g = ${function c(m){return m[s-1]="("+m[s-1]+" + 1)",p(m)}(r.slice())};\n          }\n          if(${i}) {\n            result.b = ${function d(m){return m[s-2]="("+m[s-2]+" + 1)",p(m)}(r.slice())};\n            if(${o}) {\n              result.a = ${function h(m){return m[s-1]="("+m[s-1]+" + 1)",m[s-2]="("+m[s-2]+" + 1)",p(m)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const K_={kernelName:a.Reverse,backendName:"webgl",kernelFunc:function j_(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{dims:o}=s,i=r.shape.length,l=a.util.parseAxisParam(o,r.shape);if(0===i)return et({inputs:{x:r},backend:e});const u=(0,a.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new X_(r.shape,l):new H_(r.shape,l);return e.runWebGLProgram(u,[r],r.dtype)}};class q_{constructor(n,e){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const s=n[1],r=n[2];this.outputShape=n;let o="";o="number"==typeof e?`float outputValue = ${e.toFixed(2)};`:`\n        vec3 fill = vec3(${e.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${o}\n          if(coordX >= 0 && coordX < ${r} && coordY >= 0 && coordY < ${s}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const Z_={kernelName:a.RotateWithOffset,backendName:"webgl",kernelFunc:({inputs:t,attrs:n,backend:e})=>{const{image:s}=t,{radians:r,fillValue:o,center:i}=n,l=e,u=new q_(s.shape,o),[c,d]=a.backend_util.getImageCenter(i,s.shape[1],s.shape[2]),h=[[c,d,Math.sin(r),Math.cos(r)]];return l.runWebGLProgram(u,[s],s.dtype,h)}},Y_=de({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),Q_={kernelName:a.Round,backendName:"webgl",kernelFunc:Y_},J_=de({opSnippet:"return inversesqrt(x);",cpuKernelImpl:WN}),eF={kernelName:a.Rsqrt,backendName:"webgl",kernelFunc:J_};class Mi{constructor(n,e,s,r,o,i,l=!0,u=!1){this.variableNames=["updates","indices","defaultValue"],this.outputShape=i;const c=xe(o.length),d=xe(i.length);let h="";1===s?h="i":2===s&&(h="i, j");let f="";1===r?f="i":2===r&&(f="i, coords[1]");let x="";u&&(x="coords[0], coords[1]"),this.userCode=`\n        ${c} strides = ${c}(${o});\n\n        void main() {\n          ${d} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${n}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${e}; j++) {\n              int index = round(getIndices(${h}));\n              flattenedIndex += index * ${e>1?"strides[j]":"strides"};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += getUpdates(${f});\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(${x}), sum, float(found)));\n        }\n      `}}class tF{constructor(n,e,s,r,o,i,l=!0,u=!1){this.variableNames=["updates","indices","defaultValue"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=i;const c=xe(o.length),d=xe(i.length);let h="";1===s?h="i":2===s&&(h="i, j");let f="";1===r?f="i":2===r&&(f="i, coords[1]");let x="";u&&(x="coords[0], coords[1]"),this.userCode=`\n        ${c} strides = ${c}(${o});\n\n        void main() {\n          ${d} coords = getOutputCoords();\n          vec4 sum = vec4(0.);\n          vec4 found = vec4(0.);\n          for (int i = 0; i < ${n}; i+=2) {\n            ivec2 flattenedIndex = ivec2(0);\n            for (int j = 0; j < ${e}; j+=2) {\n              ivec4 index = round(getIndices(${h}));\n              flattenedIndex += index.xz * ${e>1?"strides[j]":"strides"};\n              if (j + 1 < ${e}) {\n                flattenedIndex += index.yw * ${e>1?"strides[j + 1]":"strides"};\n              }\n            }\n            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||\n                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {\n              vec4 updVals = getUpdates(${f});\n              if (flattenedIndex[0] == coords[0]) {\n                sum.xy += updVals.xy;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[0] == coords[0] + 1) {\n                sum.zw += updVals.xy;\n                found.zw = vec2(1.);\n              }\n              if (flattenedIndex[1] == coords[0]) {\n                sum.xy += updVals.zw;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[1] == coords[0] + 1) {\n                sum.zw += updVals.zw;\n                found.zw = vec2(1.);\n              }\n            }\n          }\n          setOutput(mix(getDefaultValue(${x}), sum, found));\n        }\n      `}}const sF={kernelName:a.ScatterNd,backendName:"webgl",kernelFunc:function nF(t){const{inputs:n,backend:e,attrs:s}=t,{indices:r,updates:o}=n,{shape:i}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:d,outputSize:h}=a.backend_util.calculateShapes(o,r,i),p=[h/c,c];if(0===h)return e.makeTensorInfo(i,r.dtype);const f=j({inputs:{x:r},backend:e,attrs:{shape:[u,l]}}),m=j({inputs:{x:o},backend:e,attrs:{shape:[u,c]}}),x=e.makeTensorInfo([],"float32",new Float32Array([0]));let g;g=(0,a.env)().getBool("WEBGL_PACK")?new tF(u,l,f.shape.length,m.shape.length,d,p):new Mi(u,l,f.shape.length,m.shape.length,d,p);const y=e.runWebGLProgram(g,[m,f,x],m.dtype),b=j({inputs:{x:y},backend:e,attrs:{shape:i}});return e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(y),e.disposeIntermediateTensorInfo(x),b}};class rF{constructor(n,e,s,r){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[n,s];const i=`for (int i = 0; i < ${Math.ceil(Math.log2(e+1))}; ++i) { if (left >= right) break;`,l=2===(0,a.env)().getNumber("WEBGL_VERSION")?"while (left < right) {":i;this.userCode=`\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${l}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${"left"===r?"<":"<="} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `}}const iF={kernelName:a.SearchSorted,backendName:"webgl",kernelFunc:function oF(t){const{inputs:n,backend:e,attrs:s}=t,{sortedSequence:r,values:o}=n,{side:i}=s,l=new rF(r.shape[0],r.shape[1],o.shape[1],i);return e.runWebGLProgram(l,[r,o],"int32",[[r.shape[1]]])}};class aF{constructor(n,e,s){let r,o;if(this.variableNames=["c","a","b"],this.outputShape=e,s>4)throw Error(`Where for rank ${s} is not yet supported`);if(1===s)o="resRC",r="resRC";else{const l=["resRC.x","resRC.y","resRC.z","resRC.w"],u=[],c=[];for(let d=0;d<e.length;d++)c.push(`${l[d]}`),d<n&&u.push(`${l[d]}`);r=u.join(),o=c.join()}const i=xe(s);this.userCode=`\n      void main() {\n        ${i} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${o}));\n        } else {\n          setOutput(getB(${o}));\n        }\n      }\n    `}}const uF={kernelName:a.Select,backendName:"webgl",kernelFunc:function lF(t){const{inputs:n,backend:e}=t,{condition:s,t:r,e:o}=n,i=new aF(s.shape.length,r.shape,r.shape.length);return e.runWebGLProgram(i,[s,r,o],(0,a.upcastType)(r.dtype,o.dtype))}},dF=de({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${a.backend_util.SELU_SCALEALPHA};\n  float scale = ${a.backend_util.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),hF={kernelName:a.Selu,backendName:"webgl",kernelFunc:dF},fF=de({opSnippet:rs+"\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:GN}),mF={kernelName:a.Sigmoid,backendName:"webgl",kernelFunc:fF},gF=de({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),xF={kernelName:a.Sign,backendName:"webgl",kernelFunc:gF},vF=de({opSnippet:rs+"\n  return sin(x);\n",packedOpSnippet:`\n  vec4 result = sin(x);\n  bvec4 isNaN = isnan(x);\n  ${An}\n  return result;\n`}),CF={kernelName:a.Sin,backendName:"webgl",kernelFunc:vF},wF=de({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),SF={kernelName:a.Sinh,backendName:"webgl",kernelFunc:wF},IF=de({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),kF={kernelName:a.Softplus,backendName:"webgl",kernelFunc:IF},NF={kernelName:a.SpaceToBatchND,backendName:"webgl",kernelFunc:t=>{const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{blockShape:o,paddings:i}=s;a.util.assert(r.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");const l=o.reduce((y,b)=>y*b),u=[[0,0]];u.push(...i);for(let y=1+o.length;y<r.shape.length;++y)u.push([0,0]);const c=[],d=ch({inputs:{x:r},backend:e,attrs:{paddings:u,constantValue:0}}),h=a.backend_util.getReshaped(d.shape,o,l,!1),p=a.backend_util.getPermuted(h.length,o.length,!1),f=a.backend_util.getReshapedPermuted(d.shape,o,l,!1),m=j({inputs:{x:d},backend:e,attrs:{shape:h}}),x=qe({inputs:{x:m},backend:e,attrs:{perm:p}}),g=j({inputs:{x},backend:e,attrs:{shape:f}});return c.push(d),c.push(m),c.push(x),c.forEach(y=>e.disposeIntermediateTensorInfo(y)),g}},AF={kernelName:a.SparseFillEmptyRows,backendName:"webgl",kernelFunc:function RF(t){const{inputs:n,backend:e}=t,{indices:s,values:r,denseShape:o,defaultValue:i}=n;if(1!==o.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${o.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n         ${r.shape}`);if(0!==i.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${i.shape}`);const l=e.readSync(s.dataId),u=e.readSync(r.dataId),c=e.readSync(o.dataId),d=e.readSync(i.dataId)[0],[h,p,f,m,x]=XN(l,s.shape,s.dtype,u,r.dtype,c,d);return[e.makeTensorInfo(p,s.dtype,h),e.makeTensorInfo([p[0]],r.dtype,f),e.makeTensorInfo([m.length],"bool",new Uint8Array(m.map(g=>Number(g)))),e.makeTensorInfo([x.length],s.dtype,new Int32Array(x))]}},$F={kernelName:a.SparseReshape,backendName:"webgl",kernelFunc:function DF(t){const{inputs:n,backend:e}=t,{inputIndices:s,inputShape:r,newShape:o}=n;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape ${r.shape}`);if(1!==o.shape.length)throw new Error(`Target shape should be a vector but received shape ${o.shape}`);const i=Array.from(e.readSync(r.dataId)),l=e.readSync(s.dataId),u=Array.from(e.readSync(o.dataId)),[c,d,h]=jN(l,s.shape,s.dtype,i,u);return[e.makeTensorInfo(d,s.dtype,c),e.makeTensorInfo([h.length],o.dtype,new Int32Array(h))]}},_F={kernelName:a.SparseSegmentMean,backendName:"webgl",kernelFunc:function EF(t){const{inputs:n,backend:e}=t,{data:s,indices:r,segmentIds:o}=n;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${r.shape}`);if(1!==o.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${o.shape}`);const i=e.readSync(s.dataId),l=e.readSync(r.dataId),u=e.readSync(o.dataId),[c,d]=gd(i,s.shape,s.dtype,l,u,!0);return e.makeTensorInfo(d,s.dtype,c)}},OF={kernelName:a.SparseSegmentSum,backendName:"webgl",kernelFunc:function FF(t){const{inputs:n,backend:e}=t,{data:s,indices:r,segmentIds:o}=n;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${r.shape}`);if(1!==o.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${o.shape}`);const i=e.readSync(s.dataId),l=e.readSync(r.dataId),u=e.readSync(o.dataId),[c,d]=gd(i,s.shape,s.dtype,l,u);return e.makeTensorInfo(d,s.dtype,c)}},zF={kernelName:a.SparseToDense,backendName:"webgl",kernelFunc:function PF(t){const{inputs:n,backend:e,attrs:s}=t,{sparseIndices:r,sparseValues:o,defaultValue:i}=n,{outputShape:l}=s,{sliceRank:u,numUpdates:c,sliceSize:d,strides:h,outputSize:p}=a.backend_util.calculateShapes(o,r,l);if("string"===o.dtype){const y=e.bufferSync(r),b=e.bufferSync(o),C=a.util.decodeString(e.readSync(i.dataId)[0]),v=UN(y,b,l,p,d,c,u,h,C,!1);return e.makeTensorInfo(l,v.dtype,v.values)}const m=new Mi(c,u,r.shape.length,o.shape.length,h,[p,1],!1),x=e.runWebGLProgram(m,[o,r,i],o.dtype),g=j({inputs:{x},backend:e,attrs:{shape:l}});return e.disposeIntermediateTensorInfo(x),g}},MF={kernelName:a.SplitV,backendName:"webgl",kernelFunc:function LF(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{numOrSizeSplits:o,axis:i}=s,l=a.util.parseAxisParam(i,r.shape)[0],u=a.backend_util.prepareSplitSize(r,o,l),d=new Array(r.shape.length).fill(0),h=r.shape.slice();return u.map(p=>{const f=[...h];f[l]=p;const m=os({inputs:{x:r},backend:e,attrs:{begin:d,size:f}});return d[l]+=p,m})}},hh="return sqrt(x);",BF=de({opSnippet:hh,packedOpSnippet:hh,cpuKernelImpl:KN}),VF={kernelName:a.Sqrt,backendName:"webgl",kernelFunc:BF},WF=de({opSnippet:"return x * x;"}),UF={kernelName:a.Square,backendName:"webgl",kernelFunc:WF},ph="return (a - b) * (a - b);",GF=Ve({opSnippet:ph,packedOpSnippet:ph}),HF={kernelName:a.SquaredDifference,backendName:"webgl",kernelFunc:GF},jF={kernelName:a.StaticRegexReplace,backendName:"webgl",kernelFunc:function XF(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n;if("string"!==r.dtype)throw new Error("Input must be of datatype string");const o=e.readSync(r.dataId),i=a.backend_util.fromUint8ToStringArray(o),l=qN(i,"string",s);return e.makeTensorInfo(r.shape,"string",l)}},qF={kernelName:a.Step,backendName:"webgl",kernelFunc:function KF({inputs:t,attrs:n,backend:e}){const{x:s}=t,o=new Lt(s.shape,ot+`\n    return x > 0.0 ? 1.0 : float(${n.alpha});\n  `);return e.runWebGLProgram(o,[s],s.dtype)}};class ZF{constructor(n,e,s){this.variableNames=["x"],this.outputShape=s;const r=s.length,o=xe(s.length),i=xe(s.length);let l="";if(1===r)l="coords * strides + begin";else{let u=0;l=s.map((c,d)=>(u++,1===s.length?`coords * strides[${d}] + begin[${d}]`:`coords[${u-1}] * strides[${d}] + begin[${d}]`)).join(",")}this.userCode=`\n      ${o} begin = ${o}(${n});\n      ${o} strides = ${o}(${e});\n\n      void main() {\n        ${i} coords = getOutputCoords();\n        setOutput(getX(${l}));\n      }\n    `}}const QF={kernelName:a.StridedSlice,backendName:"webgl",kernelFunc:function YF(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{begin:o,end:i,strides:l,beginMask:u,endMask:c,ellipsisMask:d,newAxisMask:h,shrinkAxisMask:p}=s,{finalShapeSparse:f,finalShape:m,isIdentity:x,sliceDim0:g,isSimpleSlice:y,begin:b,end:C,strides:v}=a.slice_util.sliceInfo(r.shape,o,i,l,u,c,d,h,p);let w;if(x)w=j({inputs:{x:r},backend:e,attrs:{shape:m}});else if(g||y){a.util.assert(r.shape.length>=1,()=>`Input must have rank at least 1, got: ${r.shape.length}`);const I=a.slice_util.computeOutShape(b,C,v),k=os({inputs:{x:r},backend:e,attrs:{begin:b,size:I}});w=j({inputs:{x:k},backend:e,attrs:{shape:m}}),e.disposeIntermediateTensorInfo(k)}else if(e.shouldExecuteOnCPU([r])){const k=e.readSync(r.dataId),N=(0,a.buffer)(r.shape,r.dtype,k),T=ZN(f,N,v,b);w=e.makeTensorInfo(m,r.dtype,T.values)}else{const k=new ZF(b,v,f);w=e.runWebGLProgram(k,[r],r.dtype)}const S=j({inputs:{x:w},backend:e,attrs:{shape:m}});return e.disposeIntermediateTensorInfo(w),S}},eO={kernelName:a.StringNGrams,backendName:"webgl",kernelFunc:function JF(t){const{inputs:n,backend:e,attrs:s}=t,{separator:r,nGramWidths:o,leftPad:i,rightPad:l,padWidth:u,preserveShortSequences:c}=s,{data:d,dataSplits:h}=n,p=e.readSync(d.dataId),f=e.readSync(h.dataId),[m,x]=YN(p,f,r,o,i,l,u,c);return[e.makeTensorInfo([m.length],"string",m),e.makeTensorInfo(h.shape,"int32",x)]}},nO={kernelName:a.StringSplit,backendName:"webgl",kernelFunc:function tO(t){const{inputs:n,backend:e,attrs:s}=t,{skipEmpty:r}=s,{input:o,delimiter:i}=n;if("string"!==o.dtype)throw new Error("Input must be of datatype string");if(1!==o.shape.length)throw new Error(`Input must be a vector, got shape: ${o.shape}`);if(0!==i.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);const l=e.readSync(o.dataId),u=e.readSync(i.dataId)[0],[c,d,h]=QN(l,u,r),p=d.length;return[e.makeTensorInfo([p,2],"int32",c),e.makeTensorInfo([p],"string",d),e.makeTensorInfo([2],"int32",new Int32Array(h))]}},rO={kernelName:a.StringToHashBucketFast,backendName:"webgl",kernelFunc:function sO(t){const{inputs:n,backend:e,attrs:s}=t,{numBuckets:r}=s,{input:o}=n;if("string"!==o.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const i=e.readSync(o.dataId),l=JN(i,r);return e.makeTensorInfo(o.shape,"int32",l)}},oO=de({opSnippet:"return tan(x);"}),iO={kernelName:a.Tan,backendName:"webgl",kernelFunc:oO},aO=de({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),lO={kernelName:a.Tanh,backendName:"webgl",kernelFunc:aO},cO={kernelName:a.TensorScatterUpdate,backendName:"webgl",kernelFunc:function uO(t){const{inputs:n,backend:e}=t,{tensor:r,indices:o,updates:i}=n,{sliceRank:l,numUpdates:u,sliceSize:c,strides:d,outputSize:h}=a.backend_util.calculateShapes(i,o,r.shape),p=[h/c,c];if(0===h)return e.makeTensorInfo(r.shape,o.dtype);const f=j({inputs:{x:o},backend:e,attrs:{shape:[u,l]}}),m=j({inputs:{x:i},backend:e,attrs:{shape:[u,c]}}),x=j({inputs:{x:r},backend:e,attrs:{shape:p}}),g=new Mi(u,l,f.shape.length,m.shape.length,d,p,!1,!0),y=e.runWebGLProgram(g,[m,f,x],x.dtype),b=j({inputs:{x:y},backend:e,attrs:{shape:r.shape}});return e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(x),e.disposeIntermediateTensorInfo(y),b}};class dO{constructor(n,e){this.variableNames=["A"];const s=new Array(n.length);for(let i=0;i<s.length;i++)s[i]=n[i]*e[i];this.outputShape=s,this.rank=s.length;const r=xe(this.rank),o=function hO(t){const n=t.length;if(n>5)throw Error(`Tile for rank ${n} is not yet supported`);if(1===n)return`imod(resRC, ${t[0]})`;const e=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],s=[];for(let r=0;r<t.length;r++)s.push(`imod(${e[r]}, ${t[r]})`);return s.join()}(n);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${o}));\n      }\n    `}}function fh(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{reps:o}=s;if("string"===r.dtype||r.shape.length>5){const u=e.readSync(r.dataId),c="string"===r.dtype?u.map(p=>a.util.decodeString(p)):u,d=(0,a.buffer)(r.shape,r.dtype,c),h=tR(d,o);return e.makeTensorInfo(h.shape,h.dtype,h.values)}const i=new dO(r.shape,o);return e.runWebGLProgram(i,[r],r.dtype)}const pO={kernelName:a.Tile,backendName:"webgl",kernelFunc:fh};class fO{constructor(n){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=n,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class mO{constructor(n){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=n,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function $n(t,n){null!==n&&t.disposeIntermediateTensorInfo(n)}function mh(t){let n=1;for(;n<t;)n*=2;return n}const xO={kernelName:a.TopK,backendName:"webgl",kernelFunc:function gO(t){const{inputs:n,backend:e,attrs:s}=t,{x:r}=n,{k:o,sorted:i}=s,l=(0,a.env)().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),u=(0,a.env)().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),c=r.shape,d=c[c.length-1];if(e.shouldExecuteOnCPU([r])||d<l||o>u){const T=e.readSync(r.dataId),[A,$]=nR(T,c,r.dtype,o,i);return[e.makeTensorInfo(A.shape,A.dtype,A.values),e.makeTensorInfo($.shape,$.dtype,$.values)]}if(0===o)return c[c.length-1]=0,[e.makeTensorInfo(c,r.dtype,[]),e.makeTensorInfo(c,"int32",[])];if(1===d)return[r,_s({attrs:{shape:c,dtype:"int32",value:0},backend:e})];const h=e.texData.get(r.dataId),p=null!==h&&h.isPacked,f=p?e.unpackTensor(r):r,x=a.util.sizeFromShape(c)/d,g=j({inputs:{x:f},attrs:{shape:[x,d]},backend:e});p&&$n(e,f);const y=mh(o),b=mh(d);let C=null;const v=()=>null===C?[g,g]:[g,C],w=(T,A,$)=>{const F=v(),O=new fO($),M=C;C=e.runWebGLProgram(O,F,"int32",[[d],[null===C?1:0],[Number.NEGATIVE_INFINITY],[T],[A]]),$n(e,M)};for(let T=1;T<y;T*=2){const A=2*T;for(let $=T;$>=1;$/=2)w(A,$,[x,b])}for(let T=b;T>y;T/=2){const A=v(),$=new mO([x,T/2]),P=C;C=e.runWebGLProgram($,A,"int32",[[d],[null===C?1:0],[y]]),$n(e,P);const z=y/2,M=2*z;for(let E=z;E>=1;E/=2)w(M,E,C.shape)}let S=C;C=os({inputs:{x:C},backend:e,attrs:{begin:0,size:[x,o]}}),$n(e,S);let I=sh({inputs:{x:g,indices:C},backend:e,attrs:{axis:1,batchDims:1}});$n(e,g);const k=c.slice(0,-1);k.push(o),S=C,C=j({inputs:{x:C},attrs:{shape:k},backend:e}),$n(e,S);const N=I;return I=j({inputs:{x:I},attrs:{shape:k},backend:e}),$n(e,N),[I,C]}};class yO{constructor(n,e,s,r,o,i){this.variableNames=["Image","Transforms"],this.outputShape=i;const l="nearest"===s?1:2;let u;switch(r){case"constant":default:u=1;break;case"reflect":u=2;break;case"wrap":u=3;break;case"nearest":u=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${u} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${u} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${u} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${n} && 0 <= coordX && coordX < ${e}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${o});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${o});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${e}));\n                float mapY = mapCoord(inY, float(${n}));\n\n                if (${l} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const vO={kernelName:a.Transform,backendName:"webgl",kernelFunc:function bO(t){const{inputs:n,backend:e,attrs:s}=t,{image:r,transforms:o}=n,{interpolation:i,fillMode:l,fillValue:u,outputShape:c}=s,[d,h,p,f]=r.shape,[m,x]=null!=c?c:[h,p],y=new yO(h,p,i,l,u,[d,m,x,f]);return e.runWebGLProgram(y,[r,o],"float32")}},wO={kernelName:a.Unique,backendName:"webgl",kernelFunc:function CO(t){const{inputs:n,attrs:e,backend:s}=t,{axis:r}=e,{x:o}=n;Ns(o,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const i=s.readSync(o.dataId),{outputValues:l,outputShape:u,indices:c}=sR(i,r,o.shape,o.dtype);return[s.makeTensorInfo(u,o.dtype,l),s.makeTensorInfo([c.length],"int32",c)]}},IO={kernelName:a.Unpack,backendName:"webgl",kernelFunc:function SO(t){const{inputs:n,backend:e,attrs:s}=t,{value:r}=n;let{axis:o}=s;o<0&&(o+=r.shape.length);const i=r,l=i.shape.length,u=r.shape[o],c=new Array(l-1);let d=0;for(let x=0;x<l;x++)x!==o&&(c[d++]=i.shape[x]);const h=[],p=new Array(l).fill(0),f=i.shape.slice();f[o]=1;const m=new Array(u);for(let x=0;x<m.length;x++){p[o]=x;const g=os({inputs:{x:i},backend:e,attrs:{begin:p,size:f}}),y=j({inputs:{x:g},backend:e,attrs:{shape:c}});m[x]=y,h.push(g)}return h.forEach(x=>e.disposeIntermediateTensorInfo(x)),m}};class kO{constructor(n,e){this.variableNames=["x","segmentIds"];const s=n.windowSize,r=n.batchSize,o=n.inSize,i=n.numSegments,l=i*Math.ceil(o/s);this.outputShape=[r,l];const d=4*Math.floor(s/4),h=s%4,p="\n        sumValue += dot(values, segFilter);\n    ";let f="";o%s>0&&(f=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return initializationValue;\n        }\n      `);let m="";o%s>0&&(m=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${f}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${m}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${i})) * float(${s}));\n        int currentSeg = int(mod(float(outIdx), float(${i})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${d}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${p}\n        }\n\n        int inIdx = inOffset + ${d};\n        if (${1===h}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${p}\n        } else if (${2===h}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${p}\n        } else if (${3===h}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${p}\n        }\n        setOutput(sumValue);\n      }\n    `}}const RO=[YR,JR,n2,o2,a2,c2,h2,f2,y2,v2,S2,T2,A2,_2,P2,L2,B2,G2,X2,K2,Q2,oA,aA,dA,pA,yA,vA,IA,FR,NA,EA,PA,WA,HA,jA,qA,YA,tD,sD,iD,lD,cD,hD,mD,xD,CD,SD,TD,AD,$D,_D,zD,MD,WD,GD,HD,jD,qD,YD,JD,t$,s$,i$,u$,d$,f$,x$,b$,C$,_R,S$,DA,k$,N$,A$,PR,$$,_$,O$,L$,V$,U$,H$,j$,Y$,eE,nE,iE,lE,cE,fE,gE,yE,vE,wE,TE,DE,FE,BE,MR,GE,jE,ZE,JE,fA,n_,r_,i_,u_,p_,LR,m_,x_,b_,C_,w_,mA,PE,I_,N_,D_,VR,F_,z_,V_,G_,K_,Z_,Q_,eF,sF,iF,uF,hF,mF,xF,CF,SF,sA,LE,kF,NF,AF,$F,_F,OF,zF,MF,VF,UF,HF,jF,qF,QF,eO,nO,rO,zE,KR,iO,lO,cO,pO,xO,vO,qR,wO,IO,{kernelName:a.UnsortedSegmentSum,backendName:"webgl",kernelFunc:function TO(t){const{inputs:n,backend:e,attrs:s}=t,{x:r,segmentIds:o}=n,{numSegments:i}=s,l=r.shape.length,u=[];let c=0;const d=a.backend_util.getAxesPermutation([c],l);let h=r;null!=d&&(h=qe({inputs:{x:r},backend:e,attrs:{perm:d}}),u.push(h),c=a.backend_util.getInnerMostAxes(1,l)[0]);const p=a.backend_util.segment_util.computeOutShape(h.shape,c,i),f=a.util.sizeFromShape([h.shape[c]]),m=j({inputs:{x:h},backend:e,attrs:{shape:[-1,f]}});u.push(m);const x=(0,a.sumOutType)(r.dtype),g=(v,w,S,I,k)=>{const N=v.shape[0],T=v.shape[1],A=a.backend_util.segment_util.segOpComputeOptimalWindowSize(T,k),F=new kO({windowSize:A,inSize:T,batchSize:N,numSegments:k},w),O=e.compileAndRun(F,[v,S],I);if(u.push(O),O.shape[1]===k)return O;const P=dh({backend:e,attrs:{start:0,stop:k,step:1,dtype:"float32"}}),z=fh({inputs:{x:P},backend:e,attrs:{reps:[T/A]}});return u.push(P),u.push(z),g(O,w,z,I,k)},b=j({inputs:{x:g(m,"unsortedSegmentSum",o,x,i)},backend:e,attrs:{shape:p}});let C=b;if(null!=d){u.push(b);const v=a.backend_util.getUndoAxesPermutation(d);C=qe({inputs:{x:C},backend:e,attrs:{perm:v}})}return u.forEach(v=>e.disposeIntermediateTensorInfo(v)),C}},s_];for(const t of RO)(0,a.registerKernel)(t);var gh=D(5619);const DO={architecture:"MobileNetV1",outputStride:16,multiplier:.75,quantBytes:4},$O={flipHorizontal:!1,maxDetections:1,internalResolution:"high",segmentationThreshold:.9,scoreThreshold:.8};let EO=(()=>{var t;class n{constructor(){this._readyState=new gh.X(!1),this.isReady$=this._readyState.asObservable(),this._segmentationState=new gh.X({}),this.segmentation$=this._segmentationState.asObservable(),a.setBackend("webgl"),function rp(t){return void 0===t&&(t=da),Nt(this,void 0,void 0,function(){return Rt(this,function(n){return"ResNet50"===(t=function tp(t){if(null==(t=t||da).architecture&&(t.architecture="MobileNetV1"),ha.indexOf(t.architecture)<0)throw new Error("Invalid architecture ".concat(t.architecture,". ")+"Should be one of ".concat(ha));if(null==t.outputStride&&(t.outputStride=16),pa[t.architecture].indexOf(t.outputStride)<0)throw new Error("Invalid outputStride ".concat(t.outputStride,". ")+"Should be one of ".concat(pa[t.architecture]," ")+"for architecture ".concat(t.architecture,"."));if(null==t.multiplier&&(t.multiplier=1),fa[t.architecture].indexOf(t.multiplier)<0)throw new Error("Invalid multiplier ".concat(t.multiplier,". ")+"Should be one of ".concat(fa[t.architecture]," ")+"for architecture ".concat(t.architecture,"."));if(null==t.quantBytes&&(t.quantBytes=4),ma.indexOf(t.quantBytes)<0)throw new Error("Invalid quantBytes ".concat(t.quantBytes,". ")+"Should be one of ".concat(ma," ")+"for architecture ".concat(t.architecture,"."));return t}(t)).architecture?[2,sp(t)]:"MobileNetV1"===t.architecture?[2,np(t)]:[2,null]})})}(DO).then(s=>{this.model=s,this._readyState.next(!0)})}segmentPersonParts(s){this.model.segmentPersonParts(s,$O).then(r=>{this._segmentationState.next(r)})}}return(t=n).\u0275fac=function(s){return new(s||t)},t.\u0275prov=L.Yz7({token:t,factory:t.\u0275fac,providedIn:"root"}),n})();var _O=D(6002);const FO=["webcam"],OO=["webcamCanvas"],PO=["imageCanvas"];function zO(t,n){1&t&&(L.TgZ(0,"span",13),L._uU(1,"Webcam is not supported by your browser"),L.qZA())}function LO(t,n){if(1&t){const e=L.EpF();L.TgZ(0,"button",14),L.NdJ("click",function(){L.CHM(e);const r=L.oxw();return L.KtG(r.enableCam())}),L._uU(1,"Enable Webcam"),L.qZA()}}function MO(t,n){1&t&&(L.TgZ(0,"ion-button",15),L._uU(1,"Measure"),L.qZA())}function BO(t,n){1&t&&(L.TgZ(0,"div",16),L._uU(1,"Loading the Machine Learning model..."),L.qZA())}let VO=(()=>{var t;class n{constructor(s,r,o){this.renderer=s,this.bodySegmentationService=r,this.faceDetectionService=o,this.viewMode="image",this.sampleImages=["https://cdn.glitch.com/ff4f00ae-20e2-4bdc-8771-2642ee05ae93%2Fjj.jpg?v=1581963497215","https://cdn.glitch.com/ff4f00ae-20e2-4bdc-8771-2642ee05ae93%2Fwalk.jpg?v=1581963497392"],this.previousSegmentationComplete=!0,this.pdmm=0,this.pixelPdDistance=0,this.pixelShoulderWidth=0,this.personDistanceToCamera=0,this.pixelScaleFactor=0,this.realWorldShoulderWidth=0,this.segmentations=this.sampleImages.map(i=>{}),this.faceDetectionService.loadModel().then(i=>{this.faces=i})}ngOnInit(){this.setViewMode("webcam"),this.enableCam()}setViewMode(s){this.viewMode=s,this.subscription&&(this.subscription.unsubscribe(),this.subscription=void 0)}onImageClick(s,r){this.segmentations[r]||(this.subscription&&(this.subscription.unsubscribe(),this.subscription=void 0),this.subscription=this.bodySegmentationService.segmentation$.subscribe(o=>{if(!o)return;this.segmentations[r]=o;const i=this.imageCanvas.nativeElement;i.width=o.width,i.height=o.height,this.processSegmentation(i,o)}),this.bodySegmentationService.segmentPersonParts(s.target))}processSegmentation(s,r){const o=function hp(t,n){if(void 0===n&&(n=dp),Array.isArray(t)&&0===t.length)return null;for(var e,s=(e=Array.isArray(t)?t:[t])[0],r=s.width,o=s.height,i=new Uint8ClampedArray(r*o*4),l=0;l<o*r;++l){var u=4*l;i[u+0]=255,i[u+1]=255,i[u+2]=255,i[u+3]=255;for(var c=0;c<e.length;c++){var d=e[c].data[l];if(-1!==d){var h=n[d];if(!h)throw new Error("No color could be found for part id ".concat(d));i[u+0]=h[0],i[u+1]=h[1],i[u+2]=h[2],i[u+3]=255}}}return new ImageData(i,r,o)}(r);!function pp(t,n,e,s,r,o){void 0===s&&(s=.7),void 0===r&&(r=0),void 0===o&&(o=!1);var i=Bt(n),l=i[0],u=i[1];t.width=u,t.height=l;var c=t.getContext("2d");if(c.save(),o&&function Xs(t){var n=t.getContext("2d");n.scale(-1,1),n.translate(-t.width,0)}(t),c.drawImage(n,0,0),c.globalAlpha=s,e){!function ba(t,n,e,s){var r=t.width,o=t.height,i=n.width,l=n.height;if(r!==i||o!==l)throw new Error("error: dimensions must match. ".concat(e," has dimensions ").concat(r,"x").concat(o,", ").concat(s," has dimensions ").concat(i,"x").concat(l))}({width:u,height:l},e,"image","mask");var h=Pn(function Ks(t,n){var e=co(n);return function cp(t,n){n.width=t.width,n.height=t.height,n.getContext("2d").putImageData(t,0,0)}(t,e),e}(e,mt_mask),r,mt_blurredMask);c.drawImage(h,0,0,u,l)}c.restore()}(s,s,o,.7,0,!1)}hasGetUserMedia(){return!(!navigator.mediaDevices||!navigator.mediaDevices.getUserMedia)}enableCam(){this.videoRenderCanvas=document.createElement("canvas"),this.videoRenderCanvasCtx=this.videoRenderCanvas.getContext("2d"),navigator.mediaDevices.getUserMedia({video:{width:{ideal:640},height:{ideal:480},facingMode:{ideal:"environment"}}}).then(r=>{const o=this.webcamElement.nativeElement;this.renderer.setProperty(o,"srcObject",r),this.renderer.listen(o,"loadedmetadata",()=>{this.renderer.setProperty(this.webcamCanvasElement.nativeElement,"width",o.videoWidth),this.renderer.setProperty(this.webcamCanvasElement.nativeElement,"height",o.videoHeight),this.videoRenderCanvas.width=o.videoWidth,this.videoRenderCanvas.height=o.videoHeight}),this.subscription=this.bodySegmentationService.segmentation$.subscribe(i=>{if(i.width>0&&this.webcamCanvasElement.nativeElement.width>0){this.processSegmentation(this.webcamCanvasElement.nativeElement,i);let l=this.transformInt32ArrayToGriddedArray(i.data,i.width,i.height),u=this.getIndexesOfMatchingNumbersInGrid(l,[12,13]),c=this.GetBoundingBoxFromArrayCoordinates(u);this.pixelShoulderWidth=c.xMax-c.xMin,0!=this.pixelScaleFactor&&(this.realWorldShoulderWidth=this.pixelShoulderWidth*this.pixelScaleFactor/10);let d=this.webcamCanvasElement.nativeElement.getContext("2d");d.strokeStyle="green",d.lineWidth=2,d.strokeRect(c.xMin,c.yMin,c.xMax-c.xMin,c.yMax-c.yMin),this.DrawBlackPixelsAsCoordinates(this.webcamCanvasElement.nativeElement,u),this.pixelPdDistance=this.getPixelMeasurementBetweenPoints(i.allPoses[0].keypoints[1].position,i.allPoses[0].keypoints[2].position)}this.previousSegmentationComplete=!0}),this.renderer.listen(o,"loadeddata",()=>this.predictWebcam())})}processFaceDetection(s,r){var o;null===(o=this.faces)||void 0===o||o.estimateFaces(s).then(i=>{let l=r.getContext("2d"),c=i[0].keypoints.filter(b=>"leftIris"===b.name);c.forEach(b=>{this.drawRedDot(r,b.x,b.y)}),l.beginPath(),l.moveTo(c[0].x,c[0].y),l.lineTo(c[2].x,c[2].y),l.strokeStyle="green",l.lineWidth=2,l.stroke(),l.beginPath(),l.moveTo(c[1].x,c[1].y),l.lineTo(c[3].x,c[3].y),l.strokeStyle="green",l.lineWidth=2,l.stroke();const f=(this.getPixelMeasurementBetweenPoints(c[0],c[2])+this.getPixelMeasurementBetweenPoints(c[1],c[3]))/2;let y=1.40625*Math.min(r.width,r.height)*(11.7/f)/10;this.pixelScaleFactor=11.7/f,this.personDistanceToCamera=y})}DrawBlackPixelsAsCoordinates(s,r){if(!s)return;const o=s.getContext("2d");o.fillStyle="black",r.forEach(i=>{o.fillRect(i[0],i[1],1,1)})}predictWebcam(){this.previousSegmentationComplete&&this.webcamCanvasElement&&(this.previousSegmentationComplete=!1,this.videoRenderCanvasCtx.drawImage(this.webcamElement.nativeElement,0,0),this.processFaceDetection(this.videoRenderCanvas,this.webcamCanvasElement.nativeElement),this.bodySegmentationService.segmentPersonParts(this.videoRenderCanvas)),window.requestAnimationFrame(this.predictWebcam.bind(this))}handleInitError(s){s.mediaStreamError&&"NotAllowedError"===s.mediaStreamError.name&&console.warn("Camera access was not allowed by user!")}drawRedDot(s,r,o){const i=s.getContext("2d");i.beginPath(),i.arc(r,o,1,0,2*Math.PI),i.fillStyle="red",i.fill()}drawDotAndLabel(s,r,o,i){const l=s.getContext("2d");l.beginPath(),l.arc(r,o,5,0,2*Math.PI),l.fillStyle="red",l.fill(),l.font="15px Arial",l.fillText(i,r+10,o+10)}getPixelMeasurementBetweenPoints(s,r){const o=s.x-r.x,i=s.y-r.y;return Math.sqrt(o*o+i*i)}transformInt32ArrayToGriddedArray(s,r,o){const i=[];for(let l=0;l<o;l++)i.push(s.slice(l*r,(l+1)*r));return i}getIndexesOfMatchingNumbers(s,r){const o=[];for(let i=0;i<s.length;i++)s[i]===r&&o.push(i);return o}getIndexesOfMatchingNumbersInGrid(s,r){const o=[];for(let i=0;i<s.length;i++)for(let l=0;l<s[i].length;l++)r.includes(s[i][l])&&o.push([l,i]);return o}GetBoundingBoxFromArrayCoordinates(s){let r=Number.MAX_VALUE,o=Number.MIN_VALUE,i=Number.MAX_VALUE,l=Number.MIN_VALUE;return s.forEach(u=>{u[0]<r&&(r=u[0]),u[0]>o&&(o=u[0]),u[1]<i&&(i=u[1]),u[1]>l&&(l=u[1])}),{xMin:r,xMax:o,yMin:i,yMax:l}}drawSegmentLines(s,r){const o=s.getContext("2d");o.lineWidth=2,o.strokeStyle="red";for(let i=0;i<r.length;i++){const l=r[i];o.beginPath(),o.moveTo(l.top[0],l.top[1]),o.lineTo(l.bottom[0],l.bottom[1]),o.stroke()}for(let i=0;i<r.length;i++){const l=r[i];o.beginPath(),o.moveTo(l.left[0],l.left[1]),o.lineTo(l.right[0],l.right[1]),o.stroke()}}}return(t=n).\u0275fac=function(s){return new(s||t)(L.Y36(L.Qsj),L.Y36(EO),L.Y36(_O.N))},t.\u0275cmp=L.Xpm({type:t,selectors:[["app-body-segmentation"]],viewQuery:function(s,r){if(1&s&&(L.Gf(FO,5,L.SBq),L.Gf(OO,5,L.SBq),L.Gf(PO,5,L.SBq)),2&s){let o;L.iGM(o=L.CRH())&&(r.webcamElement=o.first),L.iGM(o=L.CRH())&&(r.webcamCanvasElement=o.first),L.iGM(o=L.CRH())&&(r.imageCanvas=o)}},decls:24,vars:12,consts:[[1,"w-full","h-full","flex","flex-col","items-center"],["class","text-center text-3xl",4,"ngIf"],["class","btn",3,"click",4,"ngIf"],[1,"webcam","relative","pb-2/3","flex-1"],["autoplay","",1,"object-contain","h-96"],["webcam",""],[1,"overlay","object-contain","h-96"],["webcamCanvas",""],["imageCanvas",""],[1,"flex","justify-center"],["class","btn",4,"ngIf"],["placeholder","PD Measurement (mm)","type","number",3,"ngModel","ngModelChange"],["loading",""],[1,"text-center","text-3xl"],[1,"btn",3,"click"],[1,"btn"],[1,"my-8","text-center","text-3xl"]],template:function(s,r){1&s&&(L.TgZ(0,"div",0),L.YNc(1,zO,2,0,"span",1),L.YNc(2,LO,2,0,"button",2),L.TgZ(3,"div",3),L._UZ(4,"video",4,5)(6,"canvas",6,7)(8,"canvas",6,8),L.qZA()(),L.TgZ(10,"div",9),L.YNc(11,MO,2,0,"ion-button",10),L.qZA(),L.TgZ(12,"div")(13,"ion-input",11),L.NdJ("ngModelChange",function(i){return r.pdmm=i}),L.qZA()(),L.TgZ(14,"div")(15,"ion-label"),L._uU(16),L.ALo(17,"number"),L.qZA()(),L.TgZ(18,"div")(19,"ion-label"),L._uU(20),L.ALo(21,"number"),L.qZA()(),L.YNc(22,BO,2,0,"ng-template",null,12,L.W1O)),2&s&&(L.xp6(1),L.Q6J("ngIf",!r.hasGetUserMedia()),L.xp6(1),L.Q6J("ngIf",r.hasGetUserMedia()&&!r.videoRenderCanvas),L.xp6(9),L.Q6J("ngIf",r.videoRenderCanvas),L.xp6(2),L.Q6J("ngModel",r.pdmm),L.xp6(3),L.hij("Person Distance to Camera ",L.xi3(17,6,r.personDistanceToCamera,"1.2-2")," (cm)"),L.xp6(4),L.hij("Shoulder Width ",L.xi3(21,9,r.realWorldShoulderWidth,"1.2-2")," (cm)"))},dependencies:[as.O5,to.JJ,to.On,Mt.YG,Mt.pK,Mt.Q$,Mt.as,as.JJ],styles:["[_nghost-%COMP%]{display:flex;flex-direction:column;justify-content:center}.sample-image[_ngcontent-%COMP%]{z-index:0}.sample-image[_ngcontent-%COMP%]:hover   img[_ngcontent-%COMP%]{opacity:.3}.sample-image[_ngcontent-%COMP%]   span[_ngcontent-%COMP%], .webcam[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{transition:.5s ease;opacity:0;position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%);pointer-events:none}.sample-image[_ngcontent-%COMP%]:hover   span[_ngcontent-%COMP%]{opacity:1}.sample-image[_ngcontent-%COMP%]   canvas[_ngcontent-%COMP%], .webcam[_ngcontent-%COMP%]   canvas.overlay[_ngcontent-%COMP%]{opacity:.66;position:absolute;top:0;left:0;z-index:2;width:640px;height:480px}.webcam[_ngcontent-%COMP%]{cursor:pointer}.webcam[_ngcontent-%COMP%]   video[_ngcontent-%COMP%]{clear:both;display:block;width:640px;height:480px}"]}),n})();const WO=[{path:"",component:(()=>{var t;class n{constructor(){}ngOnInit(){}}return(t=n).\u0275fac=function(s){return new(s||t)},t.\u0275cmp=L.Xpm({type:t,selectors:[["app-scan-page"]],decls:10,vars:2,consts:[[3,"translucent"],[3,"fullscreen"],["collapse","condense"],["size","large"]],template:function(s,r){1&s&&(L.TgZ(0,"ion-header",0)(1,"ion-toolbar")(2,"ion-title"),L._uU(3,"scan-page"),L.qZA()()(),L.TgZ(4,"ion-content",1)(5,"ion-header",2)(6,"ion-toolbar")(7,"ion-title",3),L._uU(8,"scan-page"),L.qZA()()(),L._UZ(9,"app-body-segmentation"),L.qZA()),2&s&&(L.Q6J("translucent",!0),L.xp6(4),L.Q6J("fullscreen",!0))},dependencies:[Mt.W2,Mt.Gu,Mt.wd,Mt.sr,VO]}),n})()}];let UO=(()=>{var t;class n{}return(t=n).\u0275fac=function(s){return new(s||t)},t.\u0275mod=L.oAB({type:t}),t.\u0275inj=L.cJS({imports:[Gi.Bz.forChild(WO),Gi.Bz]}),n})(),KO=(()=>{class t{}return t.\u0275fac=function(e){return new(e||t)},t.\u0275mod=L.oAB({type:t}),t.\u0275inj=L.cJS({imports:[[as.ez]]}),t})(),qO=(()=>{var t;class n{}return(t=n).\u0275fac=function(s){return new(s||t)},t.\u0275mod=L.oAB({type:t}),t.\u0275inj=L.cJS({imports:[as.ez,to.u5,Mt.Pc,UO,KO]}),n})()},1601:()=>{},7792:()=>{},4977:()=>{}}]);